[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # Convert the shared set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the input tuples to sets for easier comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common.append(element)\n    return common"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in shared:\n            shared.append(item)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    common_elements = set1.intersection(set2)\n\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the shared elements.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set of elements from both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    common_set = set1.intersection(set2)\n    # Convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists to avoid indexing issues\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    \n    # create sets of the elements in each tuple\n    set1 = set(test_tup1_list)\n    set2 = set(test_tup2_list)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns a boolean value indicating whether the number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(7)) # False\nprint(is_not_prime(10)) # True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function checks if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # n must be a prime number greater than 3\n    limit = int(math.sqrt(n))\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, limit + 1):\n        if primes[i]:\n            for j in range(i**2, limit + 1, i):\n                primes[j] = False\n    \n    for i in range(5, limit + 1, 6):\n        if primes[i]:\n            for j in range(i**2, limit + 1, i):\n                primes[j] = False\n    \n    # check if n is prime\n    for i in range(5, limit + 1, 6):\n        if primes[n // i] and n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return -heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Use a min-heap to store the largest n elements\n    heap = hq.nsmallest(n, nums)\n    # Return the largest n elements in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # Iterate over the remaining elements of the list and add them to the heap\n    for num in nums[n:]:\n        hq.heappush(nums, num)\n\n    # Return the first n largest integers in descending order from the heap\n    return list(hq.nsmallest(n, nums))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the first n elements of the list\n    min_heap = hq.nsmallest(n, nums)\n\n    # iterate through the remaining elements of the list and update the min heap\n    for num in nums[n:]:\n        hq.heappushpop(min_heap, num)\n\n    # return the min heap as a list in descending order\n    return list(min_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n to store the n largest integers\n    max_heap = [heapq.nsmallest(n, nums[:])]\n    \n    # add the remaining integers in the list to the heap\n    for i in range(n, len(nums)):\n        heapq.heappush(max_heap[-1], nums[i])\n    \n    # return the n largest integers from the heap in descending order\n    return [num for sublist in max_heap for num in sublist][::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        print(\"Invalid input.\")\n        return\n\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    largest = []\n    while heap:\n        largest.append(-heapq.heappop(heap))\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(nums)\n    # Initialize a list to hold the n largest integers\n    largest = []\n    # Iterate over the remaining elements in the list\n    for _ in range(n):\n        # Get the smallest element from the heap and add it to the largest list\n        largest.append(hq.heappop(nums))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function finds the n largest integers from a given list of numbers, returned in descending order.\n\n    Parameters:\n    nums (list): A list of integers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of the n largest integers from the input list.\n\n    \"\"\"\n    # Convert the list of numbers to a min heap using a max heap\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Remove the smallest element from the max heap and add it to the result list\n    result = []\n    while len(max_heap) < len(nums):\n        result.append(max_heap[0])\n        max_heap[0] = hq.heappop(max_heap)\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap and extract the first n largest elements\n    max_heap = [nums[0]]\n    for i in range(1, n):\n        if nums[i] > max_heap[0]:\n            hq.heappushpop(max_heap, nums[i])\n        else:\n            hq.heappush(max_heap, nums[i])\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert x to binary string\n    bin_x = bin(x)[2:]\n\n    # Find the bit position of the first different bit in x\n    for i in range(len(bin_x)-1):\n        if bin_x[i]!= bin_x[i+1]:\n            return True\n\n    # If no bit is different, then x has a power of 2\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0:\n        i = 0\n        while x!= 0:\n            x = x >> 1\n            i += 1\n        if (x & (1 << i - 1))!= 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            x = (x ^ 1) >> 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the position of the first difference\n    for i in range(len(bin(x)[2:])):\n        if x & (1 << i)!= (x & (1 << i + 1)):\n            return False\n\n    # If no difference was found, the numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Finding the first bit that differs in x and 2^n\n    while x & 1 == 0 and x!= 0:\n        x >>= 1\n        n += 1\n    \n    # If there are no more bits that differ, then x and 2^n are equal\n    if x == 0:\n        return True\n    \n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x!= 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the integer to binary string\n    bin_str = bin(x)[2:]\n    \n    # Check if the binary string has only one occurrence of 1\n    if bin_str.count('1') == 1:\n        # Convert the binary string back to integer and return True\n        return x == int(bin_str, 2)\n    else:\n        # Return False if the binary string has more than one occurrence of 1\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # checking if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the text that are at least 4 characters long\n    words = re.findall('\\b\\w+\\b', text)\n    # Filter out words that are not at least 4 characters long\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Find all words that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # check for rotations of length 1\n    for i in range(n):\n        if str[i:i+1]!= str[(i+1)%n:n]:\n            min_rotations = min(min_rotations, 1)\n    \n    # check for rotations of length 2\n    for i in range(n-1):\n        if str[i:i+2]!= str[(i+2)%n:n]:\n            min_rotations = min(min_rotations, 2)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # We will store the count of rotations required\n    count = 0\n    # We will use the sliding window technique\n    for i in range(n):\n        # We will try to find the maximum substring of the string that ends with str[i]\n        # We will use the same window for each iteration\n        for j in range(i, n):\n            # We will check if the substring is a palindrome\n            if str[i:j+1] == str[i:j+1][::-1]:\n                # If it is a palindrome, we will increment the count of rotations required\n                count += 1\n                break\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # initializing a hash table to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # calculating the length of the string\n    n = len(str)\n\n    # finding all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(n-i):\n            rotations.append(str[j:j+i+1])\n\n    # calculating the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for rotation in rotations:\n        if rotation == str:\n            min_rotations = 0\n            break\n        elif rotation == str[::-1]:\n            min_rotations = 0\n            break\n        else:\n            # checking the frequency of characters in the rotation\n            rotation_freq = {}\n            for char in rotation:\n                if char in rotation_freq:\n                    rotation_freq[char] += 1\n                else:\n                    rotation_freq[char] = 1\n\n            # checking if the frequency of characters in the rotation is equal to the frequency of characters in the string\n            if rotation_freq == freq:\n                min_rotations = min(min_rotations, n-i)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Initialize variables\n    n = len(str)\n    count = 0\n    \n    # Check for rotations\n    while n > 1:\n        if n % 2 == 0:\n            count += 1\n            n //= 2\n        else:\n            n -= 1\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize an empty dictionary to store the count of characters in the string\n    count_dict = {}\n    # Loop through each character in the string and update the count dictionary\n    for char in str:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # Create a new string that is equal to the original string\n    new_str = str\n\n    # Loop through each character in the string and add the count of that character to the count dictionary\n    for char in str:\n        if char in count_dict:\n            count_dict[char] -= 1\n            if count_dict[char] == 0:\n                del count_dict[char]\n        else:\n            continue\n\n        # Loop through each character in the new string and subtract the count of that character from the count dictionary\n        for i in range(n):\n            if new_str[i] == char:\n                new_str = new_str[:i] + new_str[i+1:]\n\n    # Check if the new string is the same as the original string\n    if new_str == str:\n        # Initialize the minimum number of rotations to 0\n        min_rotations = 0\n        # Loop through each character in the count dictionary and add the count to the minimum number of rotations\n        for count in count_dict.values():\n            min_rotations += count\n        # Return the minimum number of rotations\n        return min_rotations\n    else:\n        # If the new string is not the same as the original string, return -1 to indicate that no rotations are required\n        return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    freq = {} # initialize an empty dictionary to store the frequency of each character\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    min_rotations = float('inf') # initialize the minimum number of rotations as infinity\n    \n    # calculate the minimum number of rotations required to get the same frequency of each character\n    for i in range(26):\n        if freq[chr(65+i)] > freq[chr(65+i)%26]: # if the frequency of the ith character in the string is greater than the frequency of the ith character rotated by 13 positions in the alphabet\n            min_rotations = min(min_rotations, freq[chr(65+i)] // freq[chr(65+i)%26]) # update the minimum number of rotations\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Sort the dictionary based on the frequency of each character\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Iterate over the sorted dictionary and count the number of rotations required to get the same string\n    count = 0\n    for char, freq in sorted_freq:\n        if freq == 0:\n            return count + 1\n        if freq % 2 == 0:\n            # If the frequency is even, the character can be removed from the string\n            str = str.replace(char, '')\n            count += 1\n        else:\n            # If the frequency is odd, the character can be added at the end of the string\n            str += char\n    \n    # If the string is empty after the above process, there is no rotation required\n    if str == '':\n        return 0\n    \n    # If the string has a length greater than 1, there is no rotation required\n    if len(str) > 1:\n        return 0\n    \n    # If the string has a length of 1, rotate it 180 degrees to get the same string\n    return 2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    if n == 0 or n == 1:\n        return 0\n\n    # Initialize a boolean array to store whether each character is present in the string\n    freq = [0] * 26\n    for c in str:\n        freq[ord(c) - ord('a')] += 1\n\n    # Count the number of rotations required to get the same string\n    count = 0\n    while True:\n        if freq == [0] * 26:\n            break\n        for i in range(n):\n            j = (i + 1) % n\n            freq[ord(str[j]) - ord('a')] += 1\n            freq[ord(str[i]) - ord('a')] -= 1\n\n        count += 1\n\n    return count - 1\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n    \n    min_rotations = float('inf')\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub_str = str[i:j]\n            for k in range(len(sub_str)):\n                for l in range(k+1, len(sub_str)+1):\n                    rot_str = sub_str[:k] + sub_str[l:]\n                    if rot_str == str:\n                        min_rotations = min(min_rotations, j-i)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    if len(str) <= 1:\n        return 0\n    \n    # Base case: if the string has only one character, there is no rotation required\n    if len(str) == 2:\n        if str[0]!= str[1]:\n            return 1\n        else:\n            return 0\n    \n    # Find the length of the longest palindromic substring in the string\n    n = len(str)\n    max_len = 1\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                start = i\n                end = j\n                while start >= 0 and end < n and str[start] == str[end]:\n                    start -= 1\n                    end += 1\n                max_len = max(max_len, end-start-1)\n    \n    # If the length of the longest palindromic substring is equal to the length of the string, there is no rotation required\n    if max_len == n:\n        return 0\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(n):\n        if str[i]!= str[n-1]:\n            min_rotations += 1\n            str = str[-n:] + str[:-n]\n        else:\n            break\n    \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.index(ch)] + s[s.index(ch)+len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to list \n    s_list = list(s)\n    # find the first occurrence of the character \n    i = s_list.index(ch)\n    # remove the first occurrence from the list \n    s_list.pop(i)\n    # find the last occurrence of the character \n    i = s_list.index(ch,i+1)\n    # remove the last occurrence from the list \n    s_list.pop(i)\n    # convert the list back to string \n    s = ''.join(s_list)\n    # return the updated string \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s[0] == ch:\n            return s[1:]\n        elif s[-1] == ch:\n            return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i] == ch:\n            s.pop(i)\n            s.pop(i)\n        else:\n            i += 1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the first occurrence of the character\n    s = s.replace(ch, '', 1)\n\n    # Remove the last occurrence of the character\n    s = s.replace(ch, '', -1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        index = s.index(ch)\n        return s[:index] + s[index+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to a list\n    str_list = list(s)\n    \n    # find the index of the first occurrence of the character\n    index = str_list.index(ch)\n    \n    # remove the first occurrence of the character\n    str_list.pop(index)\n    \n    # find the index of the last occurrence of the character\n    index = str_list.index(ch)\n    \n    # remove the last occurrence of the character\n    str_list.pop(index)\n    \n    # convert the list back to a string\n    result = ''.join(str_list)\n    \n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # check if the string is empty\n    if not s:\n        return s\n\n    # remove the first occurrence of the character\n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)\n\n    # remove the last occurrence of the character\n    if s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s + remove_Occ(s[:-1], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[0:-1].replace(ch, '')"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j]:\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Initialize the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n\n    # Sort the matrix by sorting its rows\n    sorted_M = [[M[i][j] for i in sorted_rows] for j in range(len(M[0]))]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n    \n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        for j in range(len(M[0])):\n            for k in range(len(M)):\n                if M[k][j] == sorted_M[i][j]:\n                    break\n            else:\n                sorted_M[i][j] = M[i][j]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row and store in a list\n    row_sums = [sum(row) for row in M]\n    # Sort the list in ascending order\n    row_sums.sort()\n    # Create a new matrix with the sorted row sums\n    sorted_M = [[row_sums[j] for j in range(len(M))] for i in range(len(M[0]))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # Initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n\n    # Initialize a variable to store the current row sum\n    row_sum = 0\n\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Iterate through each column of the matrix\n        for j in range(m):\n            # Add the value of the current matrix element to the row sum\n            row_sum += M[i][j]\n\n        # Add the row sum to the sorted matrix and clear it\n        sorted_matrix.append(row_sum)\n        row_sum = 0\n\n    # Convert the sorted matrix to a 2D list and return it\n    return sorted(sorted_matrix)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a new matrix to store the sorted matrix\n    sorted_M = [[0 for i in range(len(M))] for j in range(len(M[0]))]\n\n    # Iterate over each element in the matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            # Calculate the sum of the current row\n            row_sum = sum(M[i])\n            # Find the index of the smallest element in the row\n            min_index = row_sum.index(min(row_sum))\n            # Swap the elements in the row\n            sorted_M[i][j] = row_sum[min_index]\n            row_sum[min_index] = M[i][j]\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            # Find the maximum element in the unsorted part of the matrix\n            max_row = j\n            max_val = M[j][j]\n            for k in range(j+1, n-i):\n                if M[k][j] > max_val:\n                    max_row = k\n                    max_val = M[k][j]\n            \n            # Swap the maximum element with the current element\n            M[j][j], M[max_row][j] = M[max_row][j], M[j][j]\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the rows by sum in ascending order\n    sorted_rows = sorted(M, key=lambda row: sums.index(sum(row)))\n\n    # Sort the columns of the sorted rows by row index in ascending order\n    sorted_cols = [sorted(sorted_rows[i], key=lambda x: sorted_rows.index(x)) for i in range(len(sorted_rows))]\n\n    return sorted_cols"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Create a list of tuples with row sums and the row index\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    # Sort the list in ascending order\n    row_sums.sort()\n    # Create a list of tuples with the sorted row sums and their row indices\n    sorted_row_sums = [(row_sum, row_index) for row_sum, row_index in row_sums]\n    # Create a new matrix with the sorted row sums\n    sorted_M = [[0] * n for i in range(n)]\n    for row_sum, row_index in sorted_row_sums:\n        sorted_M[row_index] = M[row_index]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows in ascending order based on their sum\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[0 for j in range(len(M[0]))] for i in sorted_rows]\n    # Fill the new matrix with the original matrix row by row\n    for i, row_idx in enumerate(sorted_rows):\n        sorted_matrix[i] = M[row_idx]\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes length of base and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    volume = (l * b * h) / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    print(\"The volume of the triangular prism is\",V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # Formula for the volume of a triangular prism\n    print(\"The volume of a triangular prism with sides of length\", l, \"and height of\", b, \"is\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of each side of the triangular prism and returns its volume.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #calculate the volume of the prism using Heron's formula\n    V = 0.5*l*b*h\n    #return the volume of the prism\n    return V "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/3 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # define a regular expression pattern to match lowercase letters joined with an underscore\n    pattern = r'(?<![a-z])([a-z]+)([a-z]+)(?![a-z])_'\n\n    # search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # check if the pattern was found\n    if match:\n        # return True if the pattern was found and False otherwise\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r'[a-z]*_[a-z]*'\n    \n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![a-z])(?=[a-z])([a-z])_')\n    result = pattern.findall(text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    \n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = re.compile(r'([a-z]+)(_+[a-z]+)*')\n    match = pattern.match(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z_]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256\n    char_count = [0] * NO_OF_CHARS\n    for char in string: \n        char_count[ord(char)] += 1\n    \n    result = ''\n    for char in string: \n        if char_count[ord(char)] == 0: \n            result += char\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Remove all the characters from the first string which are present in the second string.\n    result = \"\"\n    for char in string:\n        if char not in string[1:]:\n            result += char\n\n    # Return the result string.\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256\n    char_list = list(range(0, NO_OF_CHARS))\n    char_set = set(char_list)\n    first_string_list = list(string)\n    second_string_set = set(first_string_list)\n    result_list = []\n    for char in char_list:\n        if char not in second_string_set:\n            result_list.append(char)\n    result_string = ''.join(chr(i) for i in result_list)\n    return result_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    char_list = list(string)\n\n    # Find common characters between both strings\n    common_chars = set(string).intersection(set(char_list))\n\n    # Remove common characters from the first string\n    char_list = [char for char in char_list if char not in common_chars]\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string into a list of characters\n    char_list = list(string)\n\n    # Initialize an empty list to store the filtered characters\n    filtered_list = []\n\n    # Iterate through the characters of the first string\n    for i in range(len(char_list)):\n        # Check if the current character is not present in the second string\n        if char_list[i] not in string:\n            # If it's not present, add it to the filtered list\n            filtered_list.append(char_list[i])\n\n    # Convert the filtered list back into a string and return it\n    return ''.join(filtered_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            char_list.append(chr(i))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            string_list.remove(chr(i))\n    \n    return ''.join(string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of all characters in the alphabet\n    alphabet = list(range(NO_OF_CHARS))\n    # Remove characters from the first string which are present in the second string\n    for char in string:\n        if char in alphabet:\n            alphabet.remove(char)\n    # Convert the list of remaining characters to a string\n    result = ''.join(chr(char) for char in alphabet)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    set_string = set(string)\n    set_chars = set(\"abcdefghijklmnopqrstuvwxyz0123456789\")\n    \n    chars_to_remove = list(set_string.intersection(set_chars))\n    \n    for char in chars_to_remove:\n        string = string.replace(char, \"\")\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to remove from the first string\n    remove_set = set(string)\n    # Convert the second string to a set for faster lookup\n    remove_set2 = set(string)\n    # Create an empty list to store the final string\n    final_list = []\n    # Loop through the characters of the first string\n    for char in string:\n        # Check if the character is not in the remove set\n        if char not in remove_set:\n            # Append the character to the final list\n            final_list.append(char)\n    # Join the final list to form the final string\n    return ''.join(final_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the count of each element in the array\n    count_dict = {}\n    \n    # Loop through each element in the array and increment its count in the count_dict\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    # Loop through the count_dict and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n            \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the indices of the first occurrence of each element in the array\n    indices = {}\n\n    # Iterate over the array and add each element to the dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] not in indices:\n            indices[arraynums[i]] = [i]\n        else:\n            indices[arraynums[i]].append(i)\n\n    # Iterate over the dictionary and check if the index of each element is the same for all occurrences of that element\n    for i in range(len(arraynums)):\n        if arraynums[i] in indices and len(indices[arraynums[i]]) > 1:\n            return True\n\n    # If no duplicate is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty dictionary to store the elements and their index\n    element_index = {}\n    # loop through each element of the array\n    for index, element in enumerate(arraynums):\n        # check if the element is already in the dictionary\n        if element in element_index:\n            # if yes, return True as there is a duplicate\n            return True\n        else:\n            # if not, add the element to the dictionary with its index\n            element_index[element] = index\n    # if the loop completes without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the elements\n    unique_dict = {}\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True\n        if num in unique_dict:\n            return True\n        # If the element is not in the dictionary, add it to the dictionary\n        unique_dict[num] = True\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if the array is empty\n    if len(arraynums) == 0:\n        return False\n    \n    # Initialize an empty set to store the unique elements\n    unique_set = set()\n    \n    # Iterate through the array and add each element to the set\n    for element in arraynums:\n        unique_set.add(element)\n    \n    # Check if the set is empty, which means there are no duplicates\n    if len(unique_set) == len(arraynums):\n        return False\n    \n    # Otherwise, return True\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary to check if there are any duplicate elements\n    for key, value in count_dict.items():\n        # If a count of 1 is found for a key, it is a duplicate element\n        if value == 1:\n            return True\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the range of possible numbers for the woodall sequence\n    woodall_range = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n\n    # Check if the given number is present in the woodall sequence\n    if x in woodall_range:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x >= 10 and x <= 100:\n        return \"Woodball\"\n    elif x >= 101 and x <= 200:\n        return \"Eagle-eyed Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 4:\n        return True\n    elif x % 2 == 1 and x >= 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0 and x % 100!= 0 or x % 10 == 00:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 7 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not a Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    # Define the set of possible words for the number to be woodball\n    words = {'woodball', 'woodworm', 'woodstock', 'woodpecker'}\n    \n    # Convert the number to a string and split it into words\n    words_str = str(x).lower().split()\n    \n    # Check if all the words in the string are in the set of possible words\n    if all(word in words for word in words_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 8: \n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num*10 + num%10\n        num = num//10\n    \n    return num == reverse_num*2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    else:\n        reversed_num = rev(num//10) + num%10\n        if reversed_num < 10:\n            return True\n        else:\n            return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    temp = num\n    while temp!= 0:\n        reversed_num = reversed_num * 10 + temp % 10\n        temp //= 10\n    return num + 1 == 2 * reversed_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return True if reverse % 2 == 0 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #convert the given number to a string\n    num_str = str(num)\n    #reverse the string\n    rev_str = num_str[::-1]\n    #convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    #calculate the difference between the given number and the reverse of the number\n    diff = num - rev_int\n    #check if the difference is one less than twice the reverse\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - 1 < reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    str_num = str(num)\n\n    # Reverse the string\n    rev_str = str_num[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num % 10\n        num //= 10\n    return reverse % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    \n    # Get the reverse of the number\n    reverse = 0\n    while num!= 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n        \n    # Check if the number is one less than twice its reverse\n    if reverse % 2 == 0 and num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num = num // 10\n    return num == rev_num - 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)  # sort the array in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(i+1):\n            num += arr[j]\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    MOD = 10**9 + 7\n    \n    # Create a list of all possible combinations of digits\n    comb_list = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                for l in range(k+1, n+1):\n                    for m in range(l+1, n+1):\n                        comb_list.append((arr[i], arr[j], arr[k], arr[l], arr[m]))\n    \n    # Sort the list of combinations in ascending order\n    comb_list.sort()\n    \n    # Find the largest number that can be formed with the given digits\n    max_num = 0\n    for i in range(len(comb_list)):\n        curr_num = 0\n        for j in range(n):\n            curr_num = (curr_num*10 + comb_list[i][j]) % MOD\n        max_num = max(max_num, curr_num)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize variables to store the maximum number and its digits\n    max_num = arr[0]\n    max_digits = 1\n\n    # Traverse the list of digits and check if the current number can be formed using the previous digits\n    for i in range(1, len(arr)):\n        curr_num = arr[i]\n        digits = len(str(curr_num))\n\n        # Check if the current number can be formed using the previous digits\n        if (curr_num // max_num) % 10 == 0:\n            # If it can, update the maximum number and its digits\n            max_num = curr_num\n            max_digits = digits\n\n        # If the current number can't be formed using the previous digits, break the loop\n        else:\n            break\n\n    return max_num, max_digits"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    # loop through each number in the list\n    for num in arr:\n        # loop through each digit in the number\n        for digit in str(num):\n            # convert the digit to an integer\n            digit = int(digit)\n            # multiply the current number with the digit and add to the max_num if the result is greater\n            if digit * num > max_num:\n                max_num = digit * num\n    # return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n\n    # create a dictionary to store the power of 10 for each digit from 0 to 9\n    power_of_ten = {0:1, 1:10, 2:100, 3:1000, 4:10000, 5:100000, 6:1000000, 7:10000000, 8:100000000, 9:1000000000}\n\n    # initialize the maximum number and its length as 0\n    max_num = 0\n    max_length = 0\n\n    # loop through each digit in the list\n    for digit in arr : \n\n        # convert the digit to integer\n        digit = int(digit)\n\n        # find the length of the number formed by multiplying the digit and its power of 10\n        num_length = len(str(digit * power_of_ten[digit]))\n\n        # update the maximum number and its length if the length is greater than the current maximum number and length\n        if num_length > max_length : \n            max_num = digit * power_of_ten[digit]\n            max_length = num_length\n\n    # return the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    max_num = dp[n]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sort the given list of digits in descending order\n    arr.sort(reverse=True)\n\n    # initialize the max_num variable with 0\n    max_num = 0\n\n    # loop through each digit in the sorted list of digits\n    for digit in arr:\n\n        # if the current digit is greater than 0, add it to the max_num variable\n        if digit > 0:\n            max_num += digit\n\n        # if the current digit is equal to 0, it can only be used once to form a new number\n        elif digit == 0:\n            max_num += digit\n\n        # if the current digit is less than 0, it can be used to form a new number\n        else:\n            continue\n\n    # return the max_num variable\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by those digits.\n    '''\n\n    # Initialize an empty dictionary to store the powers of 10\n    powers = {}\n\n    # Traverse through each digit in the input list and update the corresponding power in the dictionary\n    for digit in arr:\n        if digit in powers:\n            powers[digit] += 1\n        else:\n            powers[digit] = 1\n\n    # Traverse through the dictionary and find the maximum power\n    max_power = max(powers.values())\n\n    # Initialize an empty string to store the digits in the form of a string\n    digits = \"\"\n\n    # Traverse through each digit in the dictionary and append it to the string until the maximum power is reached\n    for digit, power in powers.items():\n        for i in range(power):\n            digits += digit\n\n    # Return the final string as the maximum number that can be formed with the given digits\n    return int(digits)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n\n    # Sorting the list of digits in ascending order\n    arr.sort()\n\n    # Initializing the maximum number\n    max_num = 0\n\n    # Starting from the last digit, multiplying it with all the numbers before it and adding it to the maximum number\n    for i in range(len(arr)-1, -1, -1):\n        for j in range(1, arr[i]+1):\n            max_num += j * arr[i]\n\n    # Returning the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    if x * y < 0:\n        return \"The two numbers have opposite signs.\"\n    else:\n        return \"The two numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return \"The given integers have opposite signs.\"\n    else:\n        return \"The given integers have same signs.\"\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        print(\"The two numbers have opposite signs.\")\n    elif x < 0 and y < 0:\n        print(\"The two numbers have opposite signs.\")\n    elif x == 0 and y == 0:\n        print(\"The two numbers have equal signs.\")\n    else:\n        print(\"The two numbers have different signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if the signs of the two numbers are different\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        print(\"The two numbers have opposite signs\")\n    else:\n        print(\"The two numbers have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if both x and y have the same sign\n    if x == 0 and y == 0:\n        return True\n    \n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y <= 0:\n        return \"The two integers have opposite signs\"\n    else:\n        return \"The two integers have the same sign\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def helper(i, j):\n        return (abs(i - j) + abs(i + j)) * (abs(i - j) + abs(i + j))\n\n    def octagonal_number(i):\n        if i == 0:\n            return 0\n        elif i == 1:\n            return 1\n        elif i == 2:\n            return 13\n        elif i == 3:\n            return 25\n        elif i == 4:\n            return 37\n        elif i == 5:\n            return 49\n        elif i == 6:\n            return 61\n        elif i == 7:\n            return 73\n        elif i == 8:\n            return 85\n        elif i == 9:\n            return 97\n        elif i == 10:\n            return 109\n        else:\n            return helper(i, 1) + helper(i, 2) - helper(i, 3)\n\n    return octagonal_number(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return 2*n-1\n    \n    def nth_octagonal(n):\n        if n == 1:\n            return 1\n        else:\n            return 2*n-1\n    \n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = 1\n    oct_num = a + b\n\n    while oct_num <= n:\n        a = b\n        b = 4 * a - b + n\n        oct_num = a + b\n\n    return oct_num\n\nn = int(input(\"Enter a number: \"))\nprint(is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)*(2*n+1)**0.5"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 12 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_quad(num):\n        return num * (num + 1) * (2 * num + 1) <= 0\n\n    def is_pentagonal(num):\n        return num * (3 * num - 1) * (5 * num - 3) <= 0\n\n    def is_hexagonal(num):\n        return num * (2 * num - 1) * (5 * num - 3) <= 0\n\n    def octagonal_number(n):\n        if n < 0:\n            return None\n        elif is_quad(n) and is_pentagonal(n) and is_hexagonal(n):\n            return n\n        else:\n            return octagonal_number(n - 1)\n\n    return octagonal_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    while i*i <= n:\n        j = i\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def octagonal_number(n):\n        a = 1\n        b = 1\n        while True:\n            a += b\n            b = 3 * a - 1\n            if a**2 + b**2 == n:\n                return a\n\n    if is_prime(n):\n        return octagonal_number(n)\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return 8 * (n**2) - 16 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n-1)*10\n\nn = int(input(\"Enter a number: \"))\noct_num = is_octagonal(n)\nprint(oct_num)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    char_count = defaultdict(int)\n    for i in range(len(s)):\n        char_count[s[i]] += 1\n\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            sub_str = s[i:j]\n            if sum(int(digit) for digit in sub_str) == len(sub_str):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize an empty dictionary to store the counts of substrings\n    count_dict = defaultdict(int)\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring from the current character to the end of the string\n        sub_str = s[i:]\n        # Initialize a counter variable to keep track of the digits in the substring\n        digit_count = 0\n        # Loop through each digit in the substring\n        for j in sub_str:\n            # Check if the digit is a digit (0-9) and increment the digit_count counter if it is\n            if j.isdigit():\n                digit_count += 1\n        # Add the digit_count to the count_dict with the substring as the key\n        count_dict[sub_str] += digit_count\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def count_substring_sum(s, length):\n        '''\n        Helper function to count the number of substrings with the given length and sum of digits.\n        '''\n        count = 0\n        for i in range(len(s) - length + 1):\n            substring = s[i:i+length]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == length:\n                count += 1\n        return count\n\n    # Compute the lengths of all substrings of length k\n    lengths = defaultdict(int)\n    for k in range(1, len(s) + 1):\n        for i in range(len(s) - k + 1):\n            substring = s[i:i+k]\n            lengths[len(substring)] += 1\n\n    # Count the substrings with sum of digits equal to their length\n    count = 0\n    for length in lengths:\n        count += count_substring_sum(s, length)\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if s[j] == str(j-i+1) and all(int(c) for c in s[i:j+1]):\n                d[j-i+1] += 1\n    return sum(d.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a defaultdict to store the count of substrings with given length\n    count = defaultdict(int)\n    \n    # Loop through each substring of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                # Add 1 to the count of substrings with given length\n                count[j-i] += 1\n    \n    # Return the count of substrings with given length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int) # dictionary to store the counts of substrings\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1] # get the substring\n            digits_sum = sum(int(digit) for digit in substring) # calculate the sum of digits in the substring\n            \n            if digits_sum == len(substring): # if the sum of digits is equal to the length of the substring\n                count[substring] += 1 # increment the count of that substring\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            sum_digits = sum(digits)\n            if sum_digits == len(digits):\n                count[substring] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Initialize a variable to store the sum of digits\n        current_sum = 0\n        \n        # Loop through each character from the current index to the end of the string\n        for j in range(i, len(s)):\n            # If the current character is a digit, add it to the sum\n            if s[j].isdigit():\n                current_sum += int(s[j])\n            else:\n                # If the sum of digits is equal to the length of the substring, increment the count\n                if current_sum == j-i+1:\n                    count[current_sum] += 1\n                \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    substrings_sum_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n\n        # create a substring of the string starting from the current character\n        substring = s[i:]\n\n        # loop through each character in the substring and calculate the sum of digits\n        sum_of_digits = sum(int(digit) for digit in substring if digit.isdigit())\n\n        # if the sum of digits is equal to the length of the substring, increment the count in the dictionary\n        if sum_of_digits == len(substring):\n            substrings_sum_dict[substring] += 1\n\n    # return the count of all substrings with the sum of digits equal to their length\n    return len(substrings_sum_dict)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n    res = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            # Count the number of digits in the substring\n            count = sum(1 for c in s[i:j+1] if c.isdigit())\n            \n            # If the substring length is equal to the sum of digits, add it to the result\n            if j-i+1 == count:\n                res += 1\n                \n            # Update the count in the dp dictionary for all possible substring lengths\n            for k in range(i, j+1):\n                dp[k] += dp[k-i]\n                \n    return res"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0] # Assume first element is smallest\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first element of the list\n    smallest = xs[0]\n\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if the current number is smaller than the smallest number, update smallest\n        if x < smallest:\n            smallest = x\n\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest to the first element of xs\n    smallest = xs[0]\n    # loop over the rest of the elements of xs\n    for x in xs[1:]:\n        # if x is smaller than smallest, update smallest to x\n        if x < smallest:\n            smallest = x\n    # return the smallest element\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) <= 1:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = set()\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            pairs.add((test_list[i][0], test_list[j][1]))\n            pairs.add((test_list[j][0], test_list[i][1]))\n            max_diff = max(max_diff, max(test_list[i][1] - test_list[j][0], test_list[j][1] - test_list[i][0]))\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    first = None\n\n    # Iterate through the list and calculate the difference between each pair\n    for i in range(len(test_list)):\n        if i > 0:\n            diff = test_list[i][0] - test_list[i-1][0]\n            max_diff = max(max_diff, diff)\n\n        # Set the first value for the current pair\n        if first is None:\n            first = test_list[i]\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Sort the input list in ascending order\n    test_list.sort()\n\n    # Initialize variables for the maximum difference and its index\n    max_diff = float('-inf')\n    max_diff_idx = -1\n\n    # Loop through the list and find the maximum difference\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][0] - test_list[i][1]\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_idx = i\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference and two variables to store the maximum and minimum values\n    max_diff = 0\n    max_val = test_list[0][1]\n    min_val = test_list[0][1]\n\n    # Iterate through the list and calculate the difference between the maximum and minimum values\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - max_val\n        if diff > max_diff:\n            max_diff = diff\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize max_diff to be the first element of the list\n    max_diff = test_list[0]\n    \n    # loop through the rest of the list\n    for i in range(1, len(test_list)):\n        # subtract the next element from the current element and compare the result to max_diff\n        diff = test_list[i] - test_list[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value (which is the subject name)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts them using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: flatten the list and add the sum of the elements\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)\n\ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list recursively.\n    '''\n    # Base case: if the list is empty, return an empty list\n    if not data_list:\n        return []\n    \n    # Recursive case: add the first element of the list to the flattened list and call the function recursively on the rest of the list\n    return [data_list[0]] + flatten_list(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list or single-element list\n    if not data_list:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        # Recursive case: flatten the list and add each element\n        flattened_list = [item for sublist in data_list for item in sublist]\n        return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(data_list)\n    sum_list = sum(flat_list)\n    return sum_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n    \n    total = 0\n    for item in flatten(data_list):\n        total += item\n    \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, current_sum=0):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item, current_sum=current_sum)\n            else:\n                current_sum += item\n        return current_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list, index=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if index == len(data_list):\n        return 0\n    else:\n        return data_list[index] + recursive_list_sum(data_list, index + 1)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: append the first element of the list to a new list\n    # and sum all the elements in the new list recursively\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if isinstance(data_list, list):\n        # if the list is not empty, add the sum of the first element and all the elements in the list recursively\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        # if the list is empty, return 0\n        return 0"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list += flatten_list(item)\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize an array to store the number of ways to partition the set\n    ways = [0]*(n+1)\n    ways[0] = 1\n    ways[1] = 0\n\n    for i in range(2, n+1):\n        for j in range(i):\n            ways[i] += ways[j] * ways[i-j-1]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize variables\n    bell_set = set(range(1, n+1))\n    ways = 0\n    \n    # find all possible partitions\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if (i-j) % j == 0:\n                bell_set.discard(i-j)\n                bell_set.discard(j)\n                if len(bell_set) == 0:\n                    ways += 1\n    \n    # return the result\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a dictionary to store the count of bell numbers\n    count = {0: 1, 1: 1}\n    \n    # Iterate over the range of the given bell number\n    for i in range(2, n+1):\n        # Iterate over the range of i\n        for j in range(2, i+1):\n            # Calculate the current value of Bell number\n            curr_bell = i * j\n            \n            # If the current value is already in the dictionary, add 1 to its count\n            if curr_bell in count:\n                count[curr_bell] += 1\n            \n            # If the current value is not in the dictionary, set its count to 1\n            else:\n                count[curr_bell] = 1\n    \n    # Return the count of Bell numbers\n    return count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    ways = 0\n    sum_of_digits = sum(map(int, str(n)))\n\n    # Check if the sum of digits is even or odd\n    if sum_of_digits % 2 == 0:\n        # Initialize the set of numbers\n        numbers = set()\n\n        # Add all the Bell numbers to the set\n        for i in range(1, n+1):\n            numbers.add(i)\n\n        # Calculate the number of ways to partition the set\n        ways = len(numbers)\n    else:\n        # Initialize the variables for the two cases\n        m = sum_of_digits // 2\n        max_num = 0\n\n        # Loop through the numbers from 1 to n\n        for i in range(1, n+1):\n            # Check if the number is divisible by 2\n            if i % 2 == 0:\n                # Calculate the sum of digits of the number\n                num_sum = sum(map(int, str(i)))\n\n                # Check if the sum is odd or even\n                if num_sum % 2 == 0:\n                    # Update the maximum number if necessary\n                    if i > max_num:\n                        max_num = i\n\n                    # Add the number to the set\n                    numbers.add(i)\n\n            # Check if the number is not divisible by 2\n            else:\n                # Calculate the sum of digits of the number\n                num_sum = sum(map(int, str(i)))\n\n                # Check if the sum is odd or even\n                if num_sum % 2 == 0:\n                    # Update the maximum number if necessary\n                    if i > max_num:\n                        max_num = i\n\n                    # Add the number to the set\n                    numbers.add(i)\n\n        # Calculate the number of ways to partition the set\n        ways = len(numbers)\n\n    # Return the number of ways to partition the set\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    def count_ways(partition):\n        \"\"\"\n        Write a function to count the number of ways to partition a set of Bell numbers.\n        \"\"\"\n        if len(partition) == 0:\n            return 1\n        elif len(partition) == 1:\n            return partition[0]\n        else:\n            return count_ways(partition[1:]) + (partition[0] * count_ways(partition[1:]))\n\n    # We can use the helper function count_ways to find the number of ways to partition the set of Bell numbers\n    return count_ways(range(n+1))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers as 1\n    ways = 1\n    \n    # Loop through the integers from 0 to n-1\n    for i in range(n+1):\n        # Calculate the number of ways to partition the set of Bell numbers with the current number i\n        ways *= (n-i) // i\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Loop through all possible partition sizes\n    for k in range(1, n + 1):\n        # Initialize the number of ways to partition this size to 1\n        ways_k = 1\n        \n        # Loop through all possible partition indices\n        for i in range(1, n + 1):\n            # Check if the partition size is greater than the current partition index\n            if i > k:\n                # Add the number of ways to partition all remaining elements\n                ways_k += ways * (n - k + 1)\n            # Add the number of ways to partition the first k elements\n            ways_k += ways * (n - i + 1)\n        \n        # Update the number of ways to partition to the new value\n        ways = ways_k\n    \n    # Return the final number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Input:\n    n - an integer\n\n    Output:\n    int - the number of ways to partition a set of Bell numbers\n\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * bell_number(n-1)) % 1000000007"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # initialize variables\n    partition_count = 0\n    \n    # loop through all possible partitions\n    for i in range(n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                if i + j + k == n:\n                    partition_count += 1\n    \n    return partition_count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    else: \n        if A[0] <= A[1]: \n            for i in range(1, len(A)): \n                if A[i] <= A[i-1]: \n                    return False\n            return True\n        else: \n            for i in range(1, len(A)): \n                if A[i] >= A[i-1]: \n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n\n    A monotonic array is an array where all the elements are either all increasing or all decreasing.\n\n    Examples:\n\n    is_Monotonic([1, 2, 3, 4, 5]) -> True\n    is_Monotonic([1, 5, 3, 2, 4]) -> True\n    is_Monotonic([1, 2, 3, 4, 5, 6]) -> False\n\n    Note: You can assume that the input array has at least one element.\n    '''\n    if len(A) < 2:\n        return False\n\n    # check if all elements are increasing or decreasing\n    increasing = True\n    decreasing = True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n\n    return increasing or decreasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    if A[0] >= A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] <= A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check if the given array A is monotonic or not.\n\n    If the array is monotonic, then the array A[i] <= A[i+1] for all i in the range [0, len(A)-1].\n    \"\"\"\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and checks if it is monotonic or not.\n    Returns True if the array is monotonic and False otherwise.\n    '''\n    \n    # Check if the array is empty or not\n    if len(A) == 0:\n        return True\n    \n    # Initialize the flag variable\n    flag = True\n    \n    # Compare all the elements of the array\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            flag = False\n            break\n            \n    return flag"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Check whether the given array is monotonic or not.\n    Returns True if the array is monotonic, False otherwise.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4]:\n        return True\n    \n    if A[0] >= A[1] and A[1] >= A[2] and A[2] >= A[3] and A[3] >= A[4]:\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # If the array is empty or contains only one element, it is monotonic\n    if len(A) <= 1:\n        return True\n\n    # Check if the array is monotonic increasing or decreasing\n    if A[0] < A[1] and A[1] < A[2] and A[2] < A[3] and A[3] < A[4]:\n        return True\n    elif A[0] > A[1] and A[1] > A[2] and A[2] > A[3] and A[3] > A[4]:\n        return True\n\n    # If the array is not monotonic, return False\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    # check if array is empty or contains only one element\n    if len(A) <= 1: \n        return True\n\n    # check if array is monotonic in terms of increasing or decreasing values\n    if A[1] >= A[0]: # increasing values\n        for i in range(len(A)-1):\n            if A[i+1] < A[i]: # if the element is smaller than the previous element, return False\n                return False\n    else: # decreasing values\n        for i in range(len(A)-1):\n            if A[i+1] > A[i]: # if the element is larger than the previous element, return False\n                return False\n    \n    return True # if we reach this point, the array is monotonic in both increasing and decreasing values"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return all(x in s for x in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l (list): The list to check.\n        s (list): The sublist to check.\n\n    Returns:\n        bool: True if the list contains the sublist, else False.\n    \"\"\"\n    return all(x in l for x in s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(x in s for x in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:  # base case: empty sublist\n        return True\n    if not l:  # base case: empty list\n        return False\n    if l[0] == s[0]:  # base case: first element matches\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])  # recursive case: try rest of list"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, False otherwise.\n    '''\n    lengths = []\n    for tuple in Input:\n        lengths.append(len(tuple))\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a list to store the lengths of all the tuples\n    lengths = []\n\n    # Iterate over all the tuples in the input list\n    for tup in Input:\n        # Append the length of each tuple to the lengths list\n        lengths.append(len(tup))\n\n    # Check if all the lengths are equal\n    if all(x == lengths[0] for x in lengths):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple1 in Input:\n        if len(tuple1)!= len(tuple(Input)[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have equal length\n    all_equal = True\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            all_equal = False\n            break\n    return all_equal"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Create a list of tuples\n    tuples_list = list(Input)\n\n    # Check if all tuples have equal length\n    for i in range(len(tuples_list)):\n        if len(tuples_list[i])!= len(tuples_list[0]):\n            return False\n\n    # All tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if Input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return False\n\n    # Check if all the tuples have the same length\n    for x in Input:\n        if len(x)!= len(set(x)):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize parameters\n    gap = len(nums)\n    swapped = True\n\n    # loop until no more swaps\n    while swapped:\n        # initialize swapped flag to False\n        swapped = False\n\n        # loop over the list\n        for i in range(gap):\n            # calculate the current position\n            j = i + gap\n            # check if the current element is greater than the next element\n            if nums[i] > nums[j]:\n                # swap the elements\n                nums[i], nums[j] = nums[j], nums[i]\n                # set the swapped flag to True\n                swapped = True\n\n        # decrease the gap size\n        gap = int(gap / 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 1.3\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    gap = len(nums) // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = max(gap // 2, 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = (gap * 10) // 13\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            nums[j], nums[i] = nums[i], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap/1.3)\n        for i in range(gap):\n            j = i\n            while j < n-gap:\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                j += 1\n        print(nums)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if gap < 1 or gap >= n:\n            gap = 1\n        else:\n            gap *= 10/13\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    i = 0\n    n = len(nums)\n    while swapped:\n        swapped = False\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap * 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    gap = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2,int(n**0.5)+1): \n        if n%i == 0 and n//i == i: \n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Function to check if a number is a perfect square or not\n    def isPerfectSquare(num): \n        x = num\n        y = 0\n        while x > 0: \n            y += 1\n            x //= 2\n        return y == 1\n    \n    # Function to calculate the square of a number\n    def square(num): \n        return num * num\n    \n    # Check if the given number is a perfect square or not\n    if isPerfectSquare(n): \n        return \"The number is a perfect square.\"\n    \n    # Check if the given number can be represented as the difference of two squares or not\n    else:\n        a = square(n)\n        b = 0\n        while b * b <= a:\n            if a - b * b == 0:\n                return \"The number can be represented as the difference of two squares.\"\n            b += 1\n            \n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Checking if the number is divisible by 2\n    if n % 2!= 0: \n        return False\n    \n    # Calculating the square of the number\n    square = n ** 0.5\n    \n    # Checking if the square is even or odd\n    if square.is_integer():\n        return False\n    \n    # Calculating the difference between the square and the number\n    difference = n - square ** 2\n    \n    # Checking if the difference is a perfect square\n    diff_square = difference ** 0.5\n    if diff_square.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is greater than 100\n    if n > 100:\n        return \"Number cannot be represented as the difference of two squares.\"\n\n    # square of the number\n    num = n**2\n\n    # check if the square is divisible by 4\n    if num % 4 == 0:\n        return \"Number can be represented as the difference of two squares.\"\n    else:\n        return \"Number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        # Convert the number to a string\n        n_str = str(n)\n        # Check if the length of the string is greater than 1\n        if len(n_str) > 1:\n            # Loop through each character of the string\n            for char in n_str:\n                # Check if the character is not a digit\n                if not char.isdigit():\n                    # Return False if the character is not a digit\n                    return False\n            # If the loop completes, it means the number is divisible by 4 and a difference of two squares can be formed\n            return True\n        # If the length of the string is 1, it means the number is not divisible by 4 and cannot be represented as a difference of two squares\n        else:\n            return False\n    # If the number is not divisible by 4, it cannot be represented as a difference of two squares\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        square_sum += i*i\n    if square_sum == n:\n        print(n, \"is a difference of two squares.\")\n    else:\n        print(n, \"is not a difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        # check if n is divisible by 11^2\n        if n % 11**2 == 0:\n            return True\n        else:\n            # check if n is divisible by 11^(2^2)\n            if n % 11**(2**2) == 0:\n                return True\n            else:\n                # check if n is divisible by 11^(2^3)\n                if n % 11**(2**3) == 0:\n                    return True\n                else:\n                    # check if n is divisible by 11^(2^4)\n                    if n % 11**(2**4) == 0:\n                        return True\n                    else:\n                        # check if n is divisible by 11^(2^5)\n                        if n % 11**(2**5) == 0:\n                            return True\n                        else:\n                            # check if n is divisible by 11^(2^6)\n                            if n % 11**(2**6) == 0:\n                                return True\n                            else:\n                                # check if n is divisible by 11^(2^7)\n                                if n % 11**(2**7) == 0:\n                                    return True\n                                else:\n                                    # check if n is divisible by 11^(2^8)\n                                    if n % 11**(2**8) == 0:\n                                        return True\n                                    else:\n                                        # check if n is divisible by 11^(2^9)\n                                        if n % 11**(2**9) == 0:\n                                            return True\n                                        else:\n                                            # check if n is divisible by 11^(2^10)\n                                            if n % 11**(2**10) == 0:\n                                                return True\n                                            else:\n                                                # check if n is divisible by 11^(2^11)\n                                                if n % 11**(2**11) == 0:\n                                                    return True\n                                                else:\n                                                    # check if n is divisible by 11^(2^12)\n                                                    if n % 11**(2**12) == 0:\n                                                        return True\n                                                    else:\n                                                        # check if n is divisible by 11^(2^13)\n                                                        if n % 11**(2**13) == 0:\n                                                            return True\n                                                        else:\n                                                            # check if n is divisible by 11^(2^14)\n                                                            if n % 11**(2**14) == 0:\n                                                                return True\n                                                            else:\n                                                                # check if n is divisible by 11^(2^15)\n                                                                if n % 11**(2**15) == 0:\n                                                                    return True\n                                                                else:\n                                                                    # check if n is divisible by 11^(2^16)\n                                                                    if n % 11**(2**16) == 0:\n                                                                        return True\n                                                                    else:\n                                                                        # check if n is divisible by 11^(2^17)\n                                                                        if n % 11**(2**17) == 0:\n                                                                            return True\n                                                                        else:\n                                                                            # check if n is divisible by 11^(2^18)\n                                                                            if n % 11**(2**18) == 0:\n                                                                                return True\n                                                                            else:\n                                                                                # check if n is divisible by 11^(2^19)\n                                                                                if n % 11**(2**19) == 0:\n                                                                                    return True\n                                                                                else:\n                                                                                    # check if n is divisible by 11^(2^20)\n                                                                                    if n % 11**(2**20) == 0:\n                                                                                        return True\n                                                                                    else:\n                                                                                        # check if n is divisible by 11^(2^21)\n                                                                                        if n % 11**(2**21) == 0:\n                                                                                            return True\n                                                                                        else:\n                                                                                            # check if n is divisible by 11^(2^22)\n                                                                                            if n % 11**(2**22) == 0:\n                                                                                                return True\n                                                                                            else:\n                                                                                                # check if n is divisible by 11^(2^23)\n                                                                                                if n % 11**(2**2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # checking if n is a square\n    if n == n**2:\n        return True\n    # checking if the difference of n and a square can be represented as a square\n    for i in range(1, n//2+1):\n        if n - i**2 == i**2:\n            return True\n    # checking if the difference of n and a square can be represented as a square\n    for i in range(n//2, 1, -1):\n        if n - i**2 == i**2:\n            return True\n    # if none of the above conditions are met, n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, n):\n        if i*i == n:\n            return True\n        elif n%i == 0:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Find the square root of the given number\n    root = n ** 0.5\n\n    # Find the integer square root of the given number\n    int_root = int(root)\n\n    # Check if the integer square root is equal to the given number\n    if int_root * int_root == n:\n        return True\n\n    # Check if the integer square root is less than the given number\n    elif int_root * int_root < n:\n        # Check if the square of the integer square root is equal to the given number\n        if (int_root ** 2) * (int_root ** 2) == n:\n            return True\n\n        # Check if the square of the integer square root is less than the given number\n        else:\n            return False\n\n    # Check if the integer square root is greater than the given number\n    else:\n        # Check if the square of the integer square root is equal to the given number\n        if (int_root ** 2) * (int_root ** 2) == n:\n            return True\n\n        # Check if the square of the integer square root is greater than the given number\n        else:\n            # Find the integer square root of the square of the integer square root\n            int_root2 = int(int_root ** 2)\n\n            # Check if the integer square root of the square of the integer square root is equal to the given number\n            if int_root2 * int_root2 == n:\n                return True\n\n            # Check if the integer square root of the square of the integer square root is less than the given number\n            elif int_root2 * int_root2 < n:\n                # Check if the square of the integer square root of the square of the integer square root is equal to the given number\n                if (int_root2 ** 2) * (int_root2 ** 2) == n:\n                    return True\n\n                # Check if the square of the integer square root of the square of the integer square root is less than the given number\n                else:\n                    return False\n\n            # Check if the integer square root of the square of the integer square root is greater than the given number\n            else:\n                # Find the integer square root of the square of the integer square root of the square of the integer square root\n                int_root3 = int(int_root2 ** 2)\n\n                # Check if the integer square root of the square of the integer square root of the square of the integer square root is equal to the given number\n                if int_root3 * int_root3 == n:\n                    return True\n\n                # Check if the integer square root of the square of the integer square root of the square of the integer square root is less than the given number\n                elif int_root3 * int_root3 < n:\n                    # Check if the square of the integer square root of the square of the integer square root of the square of the integer square root is equal to the given number\n                    if (int_root3 ** 2) * (int_root3 ** 2) == n:\n                        return True\n\n                    # Check if the square of the integer square root of the square of the integer square root of the square of the integer square root is less than the given number\n                    else:\n                        return False\n\n                # Check if the integer square root of the square of the integer square root of the square of the integer square root is greater than the given number\n                else:\n                    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    count = 0\n    current_pattern = []\n    current_color = None\n\n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # If a new pattern is started, reset the count and current pattern\n        if colors[i]!= current_color:\n            count = 0\n            current_pattern = []\n            current_color = colors[i]\n\n        # If the current color matches the color in the current pattern, increment the count\n        if colors[i] == current_color:\n            count += 1\n\n        # If the count matches the corresponding pattern in the patterns array, return True\n        if count == patterns[i]:\n            return True\n\n    # If all colors are matched, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a counter variable to keep track of the number of patterns matched\n    count = 0\n    \n    # Iterate through each color in the colors array\n    for color in colors:\n        # Iterate through each pattern in the patterns array\n        for pattern in patterns:\n            # If the current color matches the pattern, increment the counter variable\n            if pattern == color:\n                count += 1\n                # If all patterns have been matched, return True\n                if count == len(patterns):\n                    return True\n                \n    # If no patterns have been matched, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arrays as input: colors and patterns.\n    The colors array contains the colors of the items and the patterns array contains the pattern of the items.\n    The function checks whether it follows the sequence given in the patterns array or not.\n    '''\n    \n    # Check if the length of the colors array is equal to the length of the patterns array\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize a list to store the pattern to compare with\n    pattern_list = []\n    \n    # Loop through the colors array and find the pattern to compare with\n    for i in range(len(colors)):\n        # Check if the current color is the same as the next color in the pattern array\n        if colors[i] == patterns[i]:\n            pattern_list.append(colors[i])\n        else:\n            # If the current color is different from the next color in the pattern array,\n            # check if the pattern_list is the same as the next pattern in the patterns array\n            if pattern_list == patterns[i+1:]:\n                return True\n            else:\n                pattern_list = []\n    \n    # If the loop completes without finding a pattern that matches, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for color, pattern in zip(colors, patterns):\n        if color not in pattern:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    pattern_count = [0] * 5\n\n    for i in range(n):\n        pattern_count[colors[i]] += 1\n\n    for i in range(5):\n        if pattern_count[i] == 0:\n            return False\n\n    for i in range(n-1):\n        if colors[i] == colors[i+1]:\n            pattern_count[colors[i]] -= 1\n            if pattern_count[colors[i]] == 0:\n                return False\n        else:\n            for j in range(i+1, n):\n                if colors[j] == patterns[i] and colors[i] == patterns[j]:\n                    pattern_count[patterns[i]] += 1\n                    pattern_count[patterns[j]] -= 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    # check whether all the colors are present in the patterns array\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    # check whether the first pattern is repeated at the beginning of the patterns array\n    if patterns[0]!= colors[0]:\n        return False\n\n    # check whether all the subsequent patterns match the colors in the pattern\n    for i in range(1, len(patterns)):\n        if patterns[i]!= colors[i-1] + colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Initialize an empty list to store the tuples\n    result = []\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        tuple_elements = []\n        # Loop through each element of the tuple and check if it's divisible by K\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                return result\n            else:\n                tuple_elements.append(test_list[i][j])\n        # If all elements are divisible by K, append the tuple to the result list\n        if tuple_elements == sorted(tuple_elements):\n            result.append(tuple_elements)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a value K as input and returns a list of tuples that have all elements divisible by K from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                tuples.append((test_list[i], test_list[j]))\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples as input and a number K as input and returns a new list containing all tuples\n    that have all elements divisible by K from the input list of tuples.\n\n    Parameters:\n    -----------\n    test_list : list of tuples\n        The list of tuples to search through.\n    K : int\n        The number K to divide the elements of the tuples by.\n\n    Returns:\n    --------\n    result : list of tuples\n        A new list containing all tuples that have all elements divisible by K from the input list of tuples.\n    \"\"\"\n    result = []\n    for tuple1 in test_list:\n        all_divisible = True\n        for element in tuple1:\n            if element % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if all elements are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the valid tuples\n    valid_tuples = []\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the valid_tuples list\n            valid_tuples.append(tup)\n    \n    # Return the valid_tuples list\n    return valid_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # split the input string into words\n    words = s.split()\n    # loop through the words and check their lengths\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            return True\n    # if no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd-length.\")\n        else:\n            print(word, \"is even-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    odd_len = False\n    for word in words:\n        if len(word) % 2!= 0:\n            odd_len = True\n            break\n    if odd_len:\n        print(\"One or more words in the sentence have odd length.\")\n    else:\n        print(\"All the words in the sentence have even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the input string into words\n    words = s.split()\n    # Loop through each word in the list\n    for word in words:\n        # Get the length of the word\n        word_len = len(word)\n        # Check if the length of the word is odd\n        if word_len % 2!= 0:\n            # If the length is odd, return True\n            return True\n    # If all the words have even length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word)\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # The first tetrahedral number is 1\n    if n == 1:\n        return 1\n    \n    # Calculate the first three terms of the series\n    term1 = 2\n    term2 = 4\n    term3 = 0\n    \n    # Iterate through the series\n    for i in range(2, n+1):\n        term4 = term1 + term2 + term3\n        term1 = term2\n        term2 = term3\n        term3 = term4\n    \n    # Return the nth term\n    return term4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * n * (n+1) * (n+2)) // math.factorial(4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i * (n - i + 1) // i\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    a = 1\n    b = 1\n    c = 1\n\n    while tetrahedral < n:\n        tetrahedral += a + b + c\n        a += 1\n        b += 1\n        c += 1\n\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n == 0:\n        return 0\n\n    a = 0\n    b = 1\n    c = 1\n\n    for i in range(1, n+1):\n        a, b, c = b, a+b, c+b\n\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        tetrahedral_num = (n - 1) * (n - 2) * (n - 3)\n        for i in range(1, n):\n            tetrahedral_num += (n - 1) * (n - 2) * (i + 1)\n        return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Helper function to calculate the sum of cubes of integers from 1 to n\n    def sum_cubes(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate the sum of cubes of integers from 1 to n\n    sum_of_cubes = sum_cubes(n)\n\n    # Find the number of triangles in n-triangles\n    num_triangles = (sum_of_cubes - (4 * n) // 3) // 4\n\n    # Calculate the nth tetrahedral number\n    return 6 * (num_triangles - 1) + sum_of_cubes - 3 * n * (num_triangles - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    :param n: the nth tetrahedral number to find\n    :type n: int\n    :return: the nth tetrahedral number\n    :rtype: int\n    \"\"\"\n    return (4 * n * n * n) // (n * (n + 1))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return None\n    \n    num = 1\n    while True:\n        if (num * (3 * num - 1) // 2) + (num * (num - 1) * (num - 2)) // 6 == n: \n            return num\n        num += 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 4 * n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r ** 3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula for volume of a sphere\n    V = (4/3) * math.pi * (r ** 3)\n    \n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3 # formula for sphere volume\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in strr:\n        char += ord(i)\n    char %= 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the result string as an empty string\n    result = \"\"\n    # Loop through each character in the given string\n    for char in strr:\n        # Add the ASCII value of the current character modulo 26 to the result string\n        result += str(ord(char) % 26)\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    ascii_mod_26 = ascii_sum % 26\n    char_value = chr(65 + ascii_mod_26)\n    return char_value"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    # Convert the string to a list of ASCII values\n    str_list = list(strr)\n    ascii_list = [ord(char) for char in str_list]\n\n    # Calculate the sum of the ASCII values modulo 26\n    sum_ascii = sum(ascii_list) % 26\n\n    # Convert the sum back to a character\n    char = chr(sum_ascii)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char = (char + ord(strr[i])) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the character variable\n    char = ''\n    \n    # loop through each character of the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        \n        # add the ASCII value to the character variable\n        char = chr((ascii_val + ord('a')) % 26 + ord('a'))\n    \n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize the sum of ASCII values to 0\n    sum_ascii = 0\n    # loop through each character in the string\n    for i in strr:\n        # add the ASCII value of the current character to the sum\n        sum_ascii += ord(i)\n    # return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_list = []\n    for char in strr:\n        char_list.append(ord(char))\n    char_sum = sum(char_list)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of all characters of the string\n    sum_ASCII = 0\n    \n    # Loop through all characters of the string and add their ASCII value to the sum\n    for char in strr:\n        sum_ASCII += ord(char)\n    \n    # Calculate the character made by adding ASCII values modulo 26\n    char_ASCII = sum_ASCII % 26\n    \n    # Convert the calculated ASCII value to a character and return it\n    return chr(char_ASCII)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert string to a list of characters\n    char_list = list(strr)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the list of characters and add the ASCII value of each character modulo 26 to the sum variable\n    for char in char_list:\n        sum += ord(char) % 26\n    # Convert the sum variable to a character and return it\n    return chr(sum)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    a, b = 1, 1\n    sequence = [a]\n    while i < n:\n        a, b = b, 3*a + b\n        sequence.append(b)\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    \n    # initialize the sequence with the first three numbers\n    sequence = [1, 1, 1]\n    \n    # loop through the remaining numbers\n    for i in range(2, n):\n        \n        # calculate the next number in the sequence\n        next_num = sequence[-1] * 2 + sequence[-2]\n        \n        # add the next number to the sequence\n        sequence.append(next_num)\n    \n    # return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3) + sequence(n-4) + sequence(n-5) + sequence(n-6)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 2\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    i = 3\n    while i <= n:\n        sequence.append(sequence[-1] + sequence[-2])\n        i += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [0, 1]  # initialize the sequence with the first two terms\n    for i in range(2, n+1):  # iterate from 2 to n\n        if seq[i-1] % 2 == 0:  # if the previous term is even\n            seq.append(seq[i-1] + seq[i-2])  # add the sum of the previous two terms\n        else:  # if the previous term is odd\n            seq.append(seq[i-1] - seq[i-2])  # add the difference of the previous two terms\n    return seq[-1]  # return the nth term in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 1\n    while count < n:\n        sequence.append(sequence[count-1] + sequence[count-2])\n        count += 1\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = math.pi * r**2  # surface area of a sphere is pi times the radius squared\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculating the surface area of a sphere using the formula A = 4*pi*r^2\n    surface_area = 4*math.pi*r**2\n    \n    # printing the surface area of the sphere\n    print(\"The surface area of a sphere of radius\", r, \"is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    surface_area = (4/3) * math.pi * r**3\n\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative values of n are not allowed.\")\n    elif n == 0:\n        return 0\n    else:\n        return (5 * n * n - 3 * n + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((3 * n * n) + ((2 * n) + 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        return (centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)) / 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the counter variable to 0\n    count = 0\n    \n    # Initialize the sum variable to 1\n    sum = 1\n    \n    # Loop until the counter reaches n\n    while count < n:\n        # Calculate the centered hexagonal number\n        centered_hex = sum * (3 * sum - 1) / 2\n        \n        # Check if the centered hexagonal number is greater than n\n        if centered_hex > n:\n            # Calculate the number of steps needed to get to the next centered hexagonal number\n            steps = int((centered_hex - n) / 3)\n            \n            # Add the steps to the counter\n            count += steps\n            \n            # Add the centered hexagonal number to the sum\n            sum += centered_hex\n            \n    # Return the sum of the centered hexagonal numbers\n    return sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    numerator = 1\n    denominator = 2\n    num = 0\n    # Initialize the first centered hexagonal number\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        # Calculate the first centered hexagonal number\n        num = numerator / denominator\n        # Calculate the remaining centered hexagonal numbers\n        for i in range(2, n+1):\n            num = num + (2*num - 1) / denominator\n            denominator += 2\n        return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Calculate nth centered hexagonal number\n    for i in range(1, n+1):\n        a = b + c\n        b = 2 * a - b\n        c = a - b\n\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    center = 0\n    \n    # Loop through the number of iterations\n    for i in range(n):\n        # Calculate the centered hexagonal number\n        center = (2 * num * (num + 1)) + 1\n        \n        # Print the centered hexagonal number\n        print(center)\n        \n        # Increment the number by 1\n        num += 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = 0\n    for i in range(1, n+1):\n        hexagonal_number += (2*i-1)*(2*i-3)\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1, 6, 21, 76, 281, 836, 3421, 9076, 39321, 97376, 444321, 1044976, 4954321, 11156276, 54653821, 118629176, 601192121, 1256955976, 6558455621, 13276195276, 71149947821, 139828348476, 767153394921, 1468947391476, 8228073074921, 15396112190476, 87846113055921, 161027513161476, 934115044225321, 1680939046786176, 9897689588947821, 17516029614652376, 104542287514418921, 182226688510942676, 1101076808765131221, 1892930829374457376, 11567307529849769221, 19635947946834745776, 121238472838297223221, 203424872268146990776, 1268038694181467581821, 2104912697980066059376, 132369267237866472529221, 217557667127826339474776, 1379346645677262060543221, 22462406445758603951864921, 143499962887445862573140476, 2316903622173058756375809221, 14906526121716569663691614776, 238756660546975619690672812221, 1546305595468254537443784477776, 24582295887649528679816461444421, 160195857876155120852050826111776, 2528892572057249429059370377784421, 1657611562053947539498242544560877"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = dict1[key], dict2[key], dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    \n    # Concatenate all the keys from the dictionaries\n    keys = dict1.keys() + dict2.keys() + dict3.keys()\n    \n    # Iterate over the keys and add the corresponding values from the dictionaries\n    for key in keys:\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    - dict1: A dictionary with string keys and values.\n    - dict2: A dictionary with string keys and values.\n    - dict3: A dictionary with string keys and values.\n\n    Returns:\n    - A merged dictionary containing all the keys and values from the input dictionaries.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.defaultdict(list)\n\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge dict1 and dict2 into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    \n    # Merge the merged_dict and dict3 into a single dictionary\n    result_dict = merged_dict.copy()\n    result_dict.update(dict3)\n    \n    return result_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = collections.defaultdict(int)\n    \n    # Loop through each element in the list and increment its frequency in the dictionary\n    for element in list1:\n        freq[element] += 1\n    \n    # Return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using the collections.Counter() method to count the frequency of all elements in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list and the values are their frequency in the list.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n < N:\n            break\n    \n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    small_numbers = [i for i in range(1, N+1) if i % 2 == 0]\n    closest = min(small_numbers)\n\n    for num in small_numbers:\n        if abs(closest - num) > abs(closest - N):\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    \n    # Loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # Check if current number is smaller than smallest\n        if num < smallest:\n            # If yes, update closest to current number\n            closest = smallest\n            # Set smallest to current number\n            smallest = num\n        elif num - smallest < closest - num:\n            # If yes, update closest to current number\n            closest = num\n    \n    # Return closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Create a list of numbers from 1 to N\n    nums = list(range(1, N+1))\n    # Sort the list in ascending order\n    nums.sort()\n    # Calculate the distance between the largest and smallest numbers\n    diff = nums[len(nums)-1] - nums[0]\n    # Return the smallest number that is greater than or equal to n-diff\n    return nums[nums.index(nums[0]-diff):nums.index(nums[0])][-1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    # List of numbers to search through\n    nums = [i for i in range(1, 1000000)]\n    # Find the closest smaller number to N\n    min_diff = float('inf')\n    closest = None\n    for num in nums:\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    if N == 1:\n        return N\n    elif N == 2:\n        return 1\n    else:\n        min_diff = float('inf')\n        closest = N\n        for num in range(N - 1, 0, -1):\n            diff = num - N\n            if diff < min_diff:\n                min_diff = diff\n                closest = num\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5]\n    closest = None\n    for num in nums:\n        if closest is None:\n            closest = num\n        elif abs(closest - num) > abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the smallest number to the given number\n    closest = N\n    # Loop through all numbers from 1 to N-1\n    for i in range(1, N):\n        # If the current number is closer to the smallest number than the current number, update the smallest number\n        if abs(N-i) < abs(N-closest):\n            closest = N-i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    closest_smaller_num = None\n\n    for num in range(1, N+1):\n        if abs(num - N) < abs(smallest_num - N):\n            smallest_num = num\n            closest_smaller_num = None\n        elif abs(num - N) == abs(smallest_num - N):\n            closest_smaller_num = num\n\n    return closest_smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    # create a list of numbers from 1 to N\n    nums = [i for i in range(1, N+1)]\n    \n    # sort the list in ascending order\n    nums.sort()\n    \n    # calculate the difference between the smallest and largest numbers\n    diff = nums[N-1] - nums[0]\n    \n    # check if the smallest number is closer to N or not\n    if diff > N - nums[N-1]:\n        # if not, return the smallest number\n        return nums[0]\n    else:\n        # if so, return the largest number\n        return nums[N-1]"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of strings.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of strings.\n    \"\"\"\n    max_len = 0\n    for i in range(len(list1)):\n        words = list1[i].split()\n        for word in words:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if sub_str is present in str1\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list to a set to remove duplicates and speed up the search\n    str_set = set(str1)\n    # Loop through the list of strings\n    for string in str_set:\n        # Check if the substring is present in the current string\n        if sub_str in string:\n            return True\n    # If the substring is not found in any string, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the substring is present in the list of strings\n    if any(str1 in string for string in sub_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found\")\n    else:\n        print(\"Substring not found\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if not sub_str:\n        return False\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        return any(sub_str in s for s in str1)\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    bool: True if the number is undulating, else False.\n    \"\"\"\n    # Check if the number is odd\n    if n % 2 == 0:\n        return False\n    \n    # Check if the sum of the squares of each digit is equal to the original number\n    digits = list(str(n))\n    total_square = 0\n    for digit in digits:\n        total_square += int(digit)**2\n    \n    if total_square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return \"Undulating\"\n    elif n == 0:\n        return \"Flat\"\n    else:\n        return \"Rising\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is greater than 1\n    if n <= 1:\n        return False\n\n    # Check if the number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # If none of the above conditions are met, then the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is divisible by 2\n    if n % 2 == 0: \n        return False\n    else: \n        # Check if the number is divisible by 7\n        if n % 7 == 0: \n            return True\n        else: \n            # If none of the above conditions are true, the number is not undulating\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0 or n == 1 or n == -1:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_undulating(n//2)\n        else:\n            return is_undulating(3*n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is negative\n    if n < 0: \n        return \"The given number is negative.\"\n    # Check if the number is 0\n    elif n == 0: \n        return \"The given number is zero.\"\n    # Check if the number is odd\n    elif n % 2!= 0: \n        return \"The given number is odd.\"\n    # Check if the number is a perfect square\n    elif n == int(n**0.5)**2: \n        return \"The given number is a perfect square.\"\n    else: \n        return \"The given number is not undulating.\""
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (float): The base of the exponentiation.\n    b (int): The exponent of the base.\n\n    Returns:\n    float: The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments, a and b, and returns their value raised to the power of b.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # using the built-in sort() function with the key parameter set to the second item of the tuple\n    # to sort the list in ascending order of the second item\n    test_list.sort(key=itemgetter(1))\n\n    # accessing the first item of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i, item in enumerate(test_list):\n        if item[1] < min_value:\n            min_index = i\n            min_value = item[1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=lambda x: x[1][1])[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        length = len(i)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = 9999999999\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize a variable to store the smallest length found\n    min_len = None\n    \n    # Loop through the list of lists\n    for i in lst:\n        # Check if the current length is smaller than the stored smallest length\n        if len(i) < min_len:\n            min_len = len(i)\n    \n    # Return the smallest length found\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Find the length of the smallest list in the list\n    min_length = len(lst[0])\n    \n    # Iterate through each list in the list and update the min_length if needed\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the minimum length variable to the length of the first list in the list of lists\n    min_length = len(lst[0])\n\n    # Iterate through the list of lists and update the minimum length variable if a shorter list is found\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the minimum length of any sublist\n    min_length = float('inf')\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n\n        # Update the minimum length if the length of the sublist is smaller than the current minimum\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the minimum length of any sublist\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        count = 1\n        i = 2\n        while i*i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                count += 1\n                i += 1\n        if n > 1:\n            count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisors.append(i)\n    if n > 1:\n        divisors.append(n)\n    return divisors"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    # Create an empty dictionary to store the frequency of each element\n    frequency = {}\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if element not in frequency:\n            frequency[element] = 1\n        # Otherwise, increment the frequency of the element by 1\n        else:\n            frequency[element] += 1\n    # Return the dictionary with the frequency of each element\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the input list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # Count the frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Iterate through the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq_dict:\n                freq_dict[subitem] = 0\n            freq_dict[subitem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if elem in freq:\n            freq[elem] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[elem] = 1\n    # return the dictionary of frequencies\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all numbers in list\n    total = 1\n    for num in numbers:\n        total *= num\n\n    # divide total with length of list\n    total /= len(numbers)\n\n    return total"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n\n    # multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n\n    # divide the result with the length of the list\n    result /= len(numbers)\n\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    else:\n        result = numbers[0]\n        for i in range(1, len(numbers)):\n            result *= numbers[i]\n        return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    This function takes a decimal number as input and returns its binary equivalent, represented as a string.\n    '''\n    # Convert the decimal number to binary using recursion\n    def convert(num, result=''):\n        # Base case\n        if num == 0:\n            return result\n\n        # Recursive case\n        digit = num % 2\n        result = str(digit) + result\n        return convert(num // 2, result)\n\n    # Call the function to convert the decimal number to binary\n    binary_representation = convert(n)\n    return binary_representation"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            remainder = n % 2\n            n //= 2\n            binary = str(remainder) + binary\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # Check if the reversed string is a palindrome\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-(i + 1)]:\n            is_palindrome = False\n            break\n    # If the reversed string is not a palindrome, add the smallest possible digit at the end to make it a palindrome\n    if not is_palindrome:\n        num_str = '9' + num_str\n    # Convert the reversed string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    rev_num = num[::-1]\n    num_list = list(num)\n    rev_num_list = list(rev_num)\n    for i in range(len(num)):\n        if num_list[i] < rev_num_list[i]:\n            for j in range(i+1, len(num_list)):\n                if num_list[j] >= rev_num_list[i]:\n                    break\n                if num_list[j] < rev_num_list[i] and num_list[j] > rev_num_list[j]:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n    return int(''.join(num_list))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # Loop through the digits of the string, starting from the last digit\n    for i in range(len(num_str)-1, -1, -1):\n        # Reverse the current digit and concatenate it with the reversed digits of the original string\n        num_str = num_str[i] + num_str[::-1][i+1:]\n        # Check if the reversed string is a palindrome\n        if num_str == num_str[::-1]:\n            # Convert the reversed string back to an integer and return it\n            return int(num_str)\n    # If the loop completes without finding a palindrome, return the original integer\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n    \"\"\"\n    # Initialize variables\n    n = num\n    smallest = 0\n    start = 0\n    end = 0\n\n    # Iterate through all numbers from 1 to num-1\n    for i in range(1, num):\n        # Check if the current number is a palindrome\n        reverse_num = 0\n        while i > 0:\n            remainder = i % 10\n            reverse_num = reverse_num * 10 + remainder\n            i = i // 10\n\n        # If the current number is a palindrome, update the smallest palindrome found so far\n        if n % reverse_num == 0:\n            smallest = n\n            start = i\n            end = i * 10\n\n        n += 1\n\n    # Calculate the next smallest palindrome\n    next_num = smallest * start + start\n    while next_num > 0:\n        remainder = next_num % 10\n        next_num = next_num // 10\n        if next_num % 10!= remainder:\n            break\n\n    # Return the next smallest palindrome\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is even\n    if num % 2 == 0:\n        num += 1\n\n    # Create a string representation of the input number\n    input_str = str(num)\n\n    # Find the largest palindrome that is less than or equal to the input number\n    largest_palindrome = int(input_str[::-1])\n\n    # Find the smallest palindrome that is greater than the largest palindrome\n    smallest_palindrome = largest_palindrome + 1\n\n    # Check if the smallest palindrome is within the range of the input number\n    if smallest_palindrome > num:\n        smallest_palindrome = num\n\n    # Find the next smallest palindrome by incrementing the largest palindrome\n    next_smallest_palindrome = largest_palindrome + 1\n\n    return next_smallest_palindrome\n\nif __name__ == '__main__':\n    num = int(input(\"Enter a number: \"))\n    result = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromes = []\n    for i in range(num, 10**9):\n        reversed_num = str(i)[::-1]\n        if reversed_num == reversed_num[::-1]:\n            palindromes.append(int(reversed_num))\n    \n    # sort palindromes in non-decreasing order\n    palindromes.sort()\n    \n    # find the smallest palindrome greater than the smallest palindrome in the list\n    smallest_palindrome = palindromes[0]\n    for i in range(1, len(palindromes)):\n        if palindromes[i] > smallest_palindrome:\n            smallest_palindrome = palindromes[i]\n    \n    return smallest_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        for i in range(num, 10**9, -1):\n            if is_palindrome(i):\n                return i\n    return None\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(\"Next smallest palindrome:\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    largest_num = int(num_str[::-1])\n    next_largest_num = largest_num + 1\n    \n    while True:\n        palindrome_num_str = str(next_largest_num)\n        if palindrome_num_str == palindrome_num_str[::-1]:\n            return next_largest_num\n        next_largest_num += 1\n        \n    return None\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        try:\n            num = int(sys.argv[1])\n            print(next_smallest_palindrome(num))\n        except ValueError:\n            print(\"Invalid input. Please enter a valid integer.\")\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        while n > 9 and not is_palindrome(n):\n            n -= 1\n        return n\n\n    def is_less_than_num(n):\n        while n > 10:\n            n //= 10\n        return n < num\n\n    def is_greater_than_num(n):\n        while n > 10:\n            n //= 10\n        return n > num\n\n    def palindrome(n):\n        return str(n)\n\n    def compare(n):\n        while n > 10:\n            n //= 10\n        return n\n\n    num = int(num)\n    next_num = next_palindrome(num)\n\n    while is_less_than_num(next_num):\n        next_num = next_palindrome(next_num)\n\n    if is_greater_than_num(next_num):\n        return next_num\n\n    return palindrome(num)\n\ndef main():\n    try:\n        num = int(input(\"Enter a number: \"))\n        print(\"The next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is negative\n    if num < 0:\n        # Convert the number to positive\n        num = -num\n        # Check if the number is odd\n        if num % 2 == 1:\n            # Find the smallest odd integer greater than num\n            num += 1\n        else:\n            # Find the smallest even integer greater than num\n            num += 2\n    # Check if the number is even\n    elif num % 2 == 0:\n        # Find the smallest even integer greater than num\n        num += 1\n    else:\n        # Find the smallest odd integer greater than num\n        num += 2\n    \n    return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid value of k. k must be between 1 and the length of the array.\")\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input. k is greater than the length of the array\")\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n-1]\n    else:\n        left = 0\n        right = n-1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == k-1:\n                return arr[mid]\n            elif arr[mid] < k-1:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    else:\n        for i in range(1, n+1):\n            if i <= k and i!= k:\n                return arr[i-1]\n        return \"Invalid input\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:  # base case: empty array\n        return None\n    elif k < 1 or k > len(arr):  # edge case: out of range\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # Find the index of the largest element in the array\n    largest = 0\n    for i in range(1, n):\n        if arr[i] > arr[largest]:\n            largest = i\n    # If k is greater than the number of elements in the array, return None\n    if k > n:\n        return None\n    # Find the index of the kth element\n    kth = 0\n    for i in range(1, n):\n        if kth == k-1:\n            return arr[i]\n        if arr[i] > arr[largest]:\n            largest = i\n        if kth < k-1:\n            kth = kth + 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0 or word[i-1]!= \"_\":\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i == len(word) - 1:\n            camel_case += word[i]\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif i == len(word)-1:\n            camel_case += word[i]\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    camel_case = parts[0]\n    for part in parts[1:]:\n        camel_case += part.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word += word[i].lower()\n        elif word[i] == '_':\n            camel_case_word += word[i+1].upper()\n        else:\n            camel_case_word += word[i].lower()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a and b as 1\n    a = 1\n    b = 1\n    \n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Calculate c using the formula for c(n, m) = 2a(n-i+1) + b(i-1)\n        c = 2*a*(n-i+1) + b*(i-1)\n        \n        # Update a and b for the next iteration\n        a = b\n        b = c\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    elif n > m:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n    else:\n        return eulerian_num(m-1, n) + eulerian_num(m-1, n-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a += (i + j) * (i + j + 1) // 2\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m) using the formula:\n    a(n, m) = n! / (n-m)!\n    \"\"\"\n    return factorial(n) // (factorial(n-m) * factorial(m))\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of n using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import factorial\n\ndef eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return factorial(n) // (factorial(m) * factorial(n - m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n    a[1][1] = 1\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            a[i][j] = a[i-1][j] + a[i][j-1]\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the matrix and calculate the sum of the first row and column\n    matrix = [[1]*(n+1) for i in range(m+1)]\n    sum_first_row = sum(matrix[0])\n    sum_first_col = sum(matrix[i] for i in range(m+1))\n\n    # fill the rest of the matrix with the values\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            # if the element is odd, add the sum of the corresponding row and column\n            if matrix[i][j] % 2!= 0:\n                matrix[i][j] += sum_first_row + sum_first_col\n            # if the element is even, add the sum of the corresponding element and the sum of the next row and column\n            else:\n                matrix[i][j] += matrix[i-1][j] + matrix[i][j-1]\n\n    # return the last element in the last row of the matrix (the Eulerian number)\n    return matrix[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    \n    if n == 1:\n        return 2 * m\n    \n    return eulerian_num(n - 1, m - 1) + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a matrix of size n x m filled with zeros\n    matrix = [[0 for j in range(m)] for i in range(n)]\n    # fill the matrix with values from 1 to n*m\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = i*m + j + 1\n    # initialize a variable for the number of edges\n    edges = 0\n    # check if the number of edges is even or odd\n    if (n*(m-1)) % 2 == 0:\n        edges = (n*(m-1)) // 2\n    else:\n        edges = (n*(m-1)) // 2 + 1\n    # initialize a variable for the number of edges that can be traced\n    traced = 0\n    # find the number of edges that can be traced using the matrix\n    for i in range(n-1):\n        for j in range(m-1):\n            if matrix[i][j] == matrix[i+1][j] + 1:\n                traced += 1\n    # add up the number of traced edges to get the number of edges in total\n    total_edges = edges + traced\n    # return the value of a(n, m) as the sum of the edges and the number of traced edges\n    return total_edges"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case for n=1 and m=1\n    if n == 1 and m == 1:\n        return 1\n    \n    # base case for n=1 and m=2\n    if n == 1 and m == 2:\n        return 1\n    \n    # base case for n=2 and m=1\n    if n == 2 and m == 1:\n        return 2\n    \n    # base case for n=2 and m=2\n    if n == 2 and m == 2:\n        return 2\n    \n    # base case for n=3 and m=1\n    if n == 3 and m == 1:\n        return 3\n    \n    # base case for n=3 and m=2\n    if n == 3 and m == 2:\n        return 3\n    \n    # base case for n=4 and m=1\n    if n == 4 and m == 1:\n        return 4\n    \n    # base case for n=4 and m=2\n    if n == 4 and m == 2:\n        return 4\n    \n    # base case for n=5 and m=1\n    if n == 5 and m == 1:\n        return 5\n    \n    # base case for n=5 and m=2\n    if n == 5 and m == 2:\n        return 5\n    \n    # base case for n=6 and m=1\n    if n == 6 and m == 1:\n        return 6\n    \n    # base case for n=6 and m=2\n    if n == 6 and m == 2:\n        return 6\n    \n    # base case for n=7 and m=1\n    if n == 7 and m == 1:\n        return 7\n    \n    # base case for n=7 and m=2\n    if n == 7 and m == 2:\n        return 7\n    \n    # base case for n=8 and m=1\n    if n == 8 and m == 1:\n        return 8\n    \n    # base case for n=8 and m=2\n    if n == 8 and m == 2:\n        return 8\n    \n    # base case for n=9 and m=1\n    if n == 9 and m == 1:\n        return 9\n    \n    # base case for n=9 and m=2\n    if n == 9 and m == 2:\n        return 9\n    \n    # base case for n=10 and m=1\n    if n == 10 and m == 1:\n        return 10\n    \n    # base case for n=10 and m=2\n    if n == 10 and m == 2:\n        return 10\n    \n    # base case for n=11 and m=1\n    if n == 11 and m == 1:\n        return 11\n    \n    # base case for n=11 and m=2\n    if n == 11 and m == 2:\n        return 11\n    \n    # base case for n=12 and m=1\n    if n == 12 and m == 1:\n        return 12\n    \n    # base case for n=12 and m=2\n    if n == 12 and m == 2:\n        return 12\n    \n    # base case for n=13 and m=1\n    if n == 13 and m == 1:\n        return 13\n    \n    # base case for n=13 and m=2\n    if n == 13 and m == 2:\n        return 13\n    \n    # base case for n=14 and m=1\n    if n == 14 and m == 1:\n        return 14\n    \n    # base case for n=14 and m=2\n    if n == 14 and m == 2:\n        return 14\n    \n    # base case for n=15 and m=1\n    if n == 15 and m == 1:\n        return 15\n    \n    # base case for n=15 and m=2\n    if n == 15 and m == 2:\n        return 15\n    \n    # base case for n=16 and m=1\n    if n == 16 and m == 1:\n        return 16\n    \n    # base case for n=16 and m=2\n    if n == 16 and m == 2:\n        return 16\n    \n    # base case for n=17 and m=1\n    if n == 17 and m == 1:\n        return 17"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].lower()\n\n    for sublist in input_list:\n        sublist.sort()\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create an empty list to store the sorted sublists\n    sorted_sublists = []\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist\n        sorted_sublist = sorted(sublist)\n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sorted_sublist)\n    # Return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if type(elem) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    # Convert the tuple back to a list\n    test_list = list(test_tup)\n    # Return the new list\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the given list with the given tuple\n    combined_list = test_list + test_tup\n    \n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = (test_list[0], *test_tup, *test_list[1:])\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return tuple(test_list + test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + tuple(test_tup)\n    return new_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one large list\n    combined_list = num1 + num2 + num3\n    \n    # Use heapq to sort the list in ascending order\n    heapq.heapify(combined_list)\n    \n    # Convert the list back to a sorted list\n    sorted_list = [heapq.heappop(combined_list) for i in range(len(combined_list))]\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.merge(heapq.merge(num1, num2), num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge first two lists\n    merged = num1 + num2\n    heapq.heapify(merged)\n    # Merge the third list into the merged list\n    for num in num3:\n        if num < merged[0]:\n            heapq.heappush(merged, num)\n        else:\n            heapq.heappop(merged)\n    # Convert the merged list to a sorted list\n    sorted_list = [heapq.heappop(merged) for _ in range(len(merged))]\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the first two lists\n    merged = num1 + num2\n    \n    # Merge the third list with the merged list\n    merged.extend(num3)\n    \n    # Sort the merged list using heapq\n    heapq.heapify(merged)\n    merged.sort()\n    \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2) <= heapq.heappop(heap3):\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap2))\n            result.append(heapq.heappop(heap3))\n        elif heapq.heappop(heap1) <= heapq.heappop(heap3):\n            result.append(heapq.heappop(heap1))\n            result.append(heapq.heappop(heap3))\n        else:\n            result.append(heapq.heappop(heap2))\n            result.append(heapq.heappop(heap3))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the two smaller lists\n    merged_list = heapq.merge(num1, num2)\n    # Merge the two merged lists with the third list\n    result = heapq.merge(merged_list, num3)\n    # Return the sorted list\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge num1 and num2\n    merged_list = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n\n    # Merge num3 and merged_list\n    merged_list.extend(num3)\n    merged_list.sort()\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the elements in the input lists\n    all_elements = num1 + num2 + num3\n    \n    # Use heapq to merge the lists into a single sorted list\n    heapq.heapify(all_elements)\n    merged_list = []\n    while all_elements:\n        merged_list.append(heapq.heappop(all_elements))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Merge num1 and num2\n    num1.extend(num2)\n    num1.sort()\n\n    # Merge num1 and num3\n    num1.extend(num3)\n    num1.sort()\n\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two lists in O(n) time complexity\n    merged_list = num1 + num2\n    heapq.heapify(merged_list)\n    for i in range(len(num3)):\n        # Insert each element of num3 in the sorted part of merged_list\n        heapq.heappush(merged_list, num3[i])\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    This function takes a binary string s and a number n as input and returns the number of odd values in the string after rotating it n times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the result variable to 0\n    result = 0\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    # Loop n times\n    for i in range(n):\n        # Rotate the binary list by 1 index\n        new_list = binary_list[-1] + [binary_list[i]] * (len(binary_list)-2)\n        # Update the result variable with the length of the new list\n        result += len(new_list)\n        # Update the binary list with the new list\n        binary_list = new_list\n    # Return the result variable\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(x) for x in s]\n    \n    # Loop through the given number of times\n    for i in range(n):\n        # Reverse the order of the binary list\n        binary_list = binary_list[::-1]\n        \n        # Count the number of odd numbers in the reversed list\n        count = 0\n        for x in binary_list:\n            if x % 2!= 0:\n                count += 1\n                \n        # If the count is odd, return True\n        if count % 2!= 0:\n            return True\n    \n    # If no odd numbers were found, return False\n    return False"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string to a list of characters\n    s = list(s)\n    \n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n    \n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        s = [s[-1], s[0]] + s[:-1]\n    \n    # Loop through the list of characters and check if each character is odd\n    for c in s:\n        if int(c) % 2!= 0:\n            odd_list.append(int(c))\n    \n    return odd_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes in a binary string s and an integer n, and returns the number of odd values in the rotated string.\n\n    The rotated string is obtained by rotating the binary string s n-1 positions to the left.\n    For example, if s = \"1011\" and n = 3, the rotated string is \"1100\".\n\n    Here's how the algorithm works:\n    1. Initialize a variable count to 0.\n    2. Iterate through each character in s.\n    3. If the character is an odd digit (i.e., an integer from 1 to 9, inclusive), increment count by 1.\n    4. After n-1 rotations, the first character of the rotated string will be the last character of the original string, so we start iterating from n-1 instead of 0.\n    5. If the character is an odd digit, increment count by 1.\n    6. Continue this process until all characters have been iterated through.\n    7. Return the value of count.\n    \"\"\"\n\n    count = 0\n    n_rotations = n - 1\n    for i in range(n_rotations):\n        if s[i] == '1':\n            count += 1\n    for i in range(n-n_rotations, len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of bits\n    bits = [int(b) for b in s]\n    # Rotate the bits n times\n    for _ in range(n):\n        # Rotate the leftmost bit to the rightmost position\n        bits.append(bits.pop(0))\n    # Count the number of odd bits\n    count = sum(1 for b in bits if b % 2!= 0)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize a dictionary to store the count of odd numbers \n    count_dict = {}\n\n    # Traverse through the binary string s and count the number of odd numbers encountered \n    for bit in s: \n        if bit == '1': \n            count_dict[bit] = count_dict.get(bit, 0) + 1\n\n    # Calculate the number of odd numbers when rotating the binary string s n times \n    result = sum(count_dict.values())\n\n    # Rotate the binary string s n times and count the number of odd numbers encountered \n    rotated_s = \"\"\n    for _ in range(n): \n        rotated_s = (rotated_s + s[-1])[-1] + s[:-1]\n\n    count_dict = {}\n    for bit in rotated_s: \n        if bit == '1': \n            count_dict[bit] = count_dict.get(bit, 0) + 1\n\n    result += sum(count_dict.values())\n\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    n = n % len(s)\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 0:\n            count += 1\n        else:\n            if count == n:\n                return i - count\n    return -1"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert string to binary\n    binary_string = bin(int(s,2))[2:]\n    # initialize count variable\n    count = 0\n    # rotate binary string n times\n    for i in range(n):\n        # reverse the binary string\n        binary_string = ''.join(reversed(binary_string))\n    # loop through binary string and count odd numbers\n    for i in binary_string:\n        if int(i) % 2!= 0:\n            count += 1\n    # return count\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common_elements.append(i)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the unique elements in all the lists\n    unique_elements = set()\n\n    # Iterate through all the lists and add all the elements to the set\n    for lst in nestedlist:\n        for elem in lst:\n            unique_elements.add(elem)\n\n    # Convert the set back to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_list.append(nestedlist[i])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define an empty set to store the common elements\n    common_elements = set()\n    \n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # If the element is already in the set, add it to the common elements set\n            if elem in common_elements:\n                common_elements.add(elem)\n            # If the element is not in the set, add it to the set\n            else:\n                common_elements.add(elem)\n    \n    # Return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n\n    # Loop through each list in the nested list\n    for i in nestedlist:\n        # Loop through each element in the list\n        for j in i:\n            # Add the element to the common set if it is not already in the set\n            common_set.add(j)\n\n    # Convert the common set to a list\n    common_list = list(common_set)\n\n    # Return the common list\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    \n    common_set = set()\n    for sublist in nestedlist:\n        if len(sublist) == 0:\n            continue\n        for elem in sublist:\n            if elem in common_set:\n                continue\n            common_set.add(elem)\n    \n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    # Iterate through all the lists in the nested list\n    for lst in nestedlist:\n        # Iterate through all the elements in the current list\n        for elem in lst:\n            # Add the element to the set if it is not already there\n            if elem not in common_elements:\n                common_elements.add(elem)\n    # Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if k!= i and k!= j:\n                    if nestedlist[i][j] in nestedlist[k]:\n                        common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty set to store the common elements\n    common = set()\n    \n    # Loop through each element in the nested list\n    for item in nestedlist:\n        # If the item is a list, recursively check for common elements\n        if isinstance(item, list):\n            common |= common_in_nested_lists(item)\n        # Otherwise, add the item to the set of common elements\n        else:\n            common.add(item)\n    \n    # Return the common elements\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if i:\n            count += 1\n    return count == len(list1)"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if i:\n            count += 1\n        else:\n            return False\n    if count == len(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(dict.items() == {} for dict in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each number in the tuple\n    for num in nums:\n        # Add the number to the sum\n        sum += num\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the tuple\n    total = 0\n    \n    # Loop through each integer in the tuple\n    for num in nums:\n        # Add the integer to the total\n        total += num\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list to get the individual digits\n    nums_list = list(nums)\n\n    # Initialize an empty integer variable to store the result\n    result = 0\n\n    # Loop through each digit in the list and multiply it by the power of 10 to the current index\n    for i, digit in enumerate(nums_list):\n        result += digit * 10**i\n\n    # Return the final result as an integer\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize a variable to store the final result\n    result = 0\n    # Iterate over the list and add each element to the result\n    for num in nums_list:\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a string\n    num_str = str(nums)\n    \n    # Convert the string to an integer\n    num = int(num_str)\n    \n    return num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a list so that we can use list operations on it\n    nums = list(nums)\n    # Initialize the sum to zero\n    total = 0\n    # Iterate over the list of numbers, adding each one to the total\n    for num in nums:\n        total += num\n    # Return the final sum as an integer\n    return int(total)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, complex)):\n                continue\n            try:\n                element = float(element)\n            except ValueError:\n                element = None\n            row[row.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                item = float(item)\n            elif isinstance(item, list):\n                item = list_to_float(item)\n            test_list[test_list.index(sublist)][test_list[test_list.index(sublist)].index(item)] = item\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float, complex)):\n                row[test_list.index(row)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [str, float, int]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        new_row = []\n        for elem in row:\n            try:\n                new_row.append(float(elem))\n            except ValueError:\n                continue\n        result.append(new_row)\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character and convert each element to a string\n    return list(map(str, string.split()))"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    This function takes a string as input and returns a list of strings.\n    The input string is split on the space character to get a list of words.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return 'The array contains duplicate elements'\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return 'The array does not contain any duplicate elements'"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return None\n    else:\n        for i in range(1, n):\n            if arr[i] == arr[i-1]:\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return \"No element appears only once in the array\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            j = i+1\n            while j < n and arr[j] == arr[i]:\n                j += 1\n            if j == n:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    while i < n-1:\n        if arr[i] == arr[i+1]:\n            return arr[i]\n        i += 1\n    return \"No element appears only once in the array\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Loop through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    \n    # Loop through the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n    \n    # Find the first element in the dictionary with a count of 1\n    for num in count:\n        if count[num] == 1:\n            return num\n    \n    # If no element has a count of 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if arr[j] == arr[i]:\n                count += 1\n                break\n        if count == 1:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize the counter to 0 and the element to None\n    counter = 0\n    unique_element = None\n\n    # Iterate through the array and check if the current element is equal to the last element seen\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            # If it is, increment the counter and keep track of the current element\n            counter += 1\n            unique_element = arr[i]\n\n    # If the counter is greater than 0, return the unique element\n    if counter > 0:\n        return unique_element\n    # If the counter is 0, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif arr[0] == arr[n-1]:\n        for i in range(1, n-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n    else:\n        for i in range(1, n-1):\n            if arr[i] == arr[i+1]:\n                return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Given a list of tuples, return the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    lst: A list of tuples\n\n    Returns:\n    The maximum absolute product between numbers in pairs of tuples within the input list.\n\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0] * lst[j][0]) > max_product:\n                max_product = abs(lst[i][0] * lst[j][0])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the maximum absolute product and the maximum product between tuples\n    max_product = float('-inf')\n    max_product_tuple = float('-inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers and take the maximum absolute value\n            abs_diff = abs(list1[i][0] - list1[j][0])\n            if abs_diff > max_product:\n                max_product = abs_diff\n                # Check if the maximum product between two tuples is greater than the current maximum product\n                if list1[i][1] * list1[j][1] > max_product_tuple:\n                    max_product_tuple = list1[i][1] * list1[j][1]\n            # Check if the maximum product between two tuples is greater than the current maximum product\n            if list1[i][1] * list1[j][1] > max_product_tuple:\n                max_product_tuple = list1[i][1] * list1[j][1]\n    # Return the maximum product between tuples\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0] * list1[j][1]\n            abs_pair_product = abs(pair_product)\n            \n            if max_product < pair_product:\n                max_product = pair_product\n                max_pair = (list1[i], list1[j])\n                \n            if max_abs_product < abs_pair_product:\n                max_abs_product = abs_pair_product\n                max_abs_pair = (list1[i], list1[j])\n    \n    return max_product, max_abs_product, max_pair, max_abs_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product of numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp_product = max(lst[i][0]*lst[j][0], lst[i][0]*lst[j][1], lst[i][1]*lst[j][0], lst[i][1]*lst[j][1])\n            max_product = max(max_product, temp_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes in a list of tuples and returns the maximum absolute product between numbers in pairs of tuples.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0] * lst[j][0]) > max_product:\n                max_product = abs(lst[i][0] * lst[j][0])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize the maximum product to be zero and the minimum product to be positive infinity\n    max_product = 0\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for tup1, tup2 in zip(list1, list1[1:]):\n        # Calculate the absolute difference between the numbers in each tuple\n        diff = abs(tup1[0] - tup2[0])\n\n        # Update the maximum product and minimum product if the new difference is greater\n        if diff > max_product:\n            max_product = diff\n\n        # Update the minimum product if the new difference is smaller\n        if diff < min_product:\n            min_product = diff\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list of all prime numbers up to the specified limit\n    prime_numbers = sieve_of_eratosthenes(limit)\n\n    # Initialize the sum to 0\n    amicable_sum = 0\n\n    # Iterate through the prime numbers\n    for prime in prime_numbers:\n        # Check if the prime number is amicable to any of the previous primes\n        for previous_prime in prime_numbers:\n            # Check if the previous prime is also amicable to the prime number\n            if previous_prime < prime:\n                if is_amicable(previous_prime, prime):\n                    amicable_sum += previous_prime\n                    break\n\n    return amicable_sum\n\n\ndef sieve_of_eratosthenes(limit):\n    '''\n    Find all prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm.\n    '''\n\n    # Create a boolean list of size limit+1 to indicate which numbers are prime\n    is_prime = [True] * (limit + 1)\n\n    # Set all numbers up to 2 as not prime\n    for i in range(2, int(limit**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, limit + 1, i):\n                is_prime[j] = False\n\n    # Create a list of prime numbers and return it\n    prime_numbers = [i for i in range(2, limit + 1) if is_prime[i]]\n    return prime_numbers\n\n\ndef is_amicable(a, b):\n    '''\n    Check if two numbers are amicable by checking if the sum of the two numbers is prime.\n    '''\n\n    # Check if the sum is prime\n    if is_prime(a + b):\n        return True\n    else:\n        return False\n\n\ndef is_prime(n):\n    '''\n    Check if a number is prime using trial division.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    sum_amicable = 0\n    counter = 0\n    num_sum = 0\n    \n    # loop through numbers from 1 to limit\n    while counter < limit:\n        # calculate the sum of the current number and all its proper divisors\n        num_sum = sum([i for i in range(1, limit + 1) if i == num_sum or (num_sum % i == 0 and i!= num_sum)])\n        \n        # check if the sum is amicable and add it to the sum if it is\n        if num_sum > limit:\n            break\n        if num_sum == limit:\n            amicable_sum = num_sum\n            break\n        if num_sum > 1 and num_sum < limit:\n            sum_amicable += num_sum\n        \n        counter += 1\n    \n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if i not in amicable_numbers:\n            for j in range(2, limit):\n                if i + j == limit and i!= j:\n                    if is_amicable(i, j):\n                        amicable_sum += i + j\n                        amicable_numbers.add((i, j))\n                        break\n    return amicable_sum\n\n\ndef is_amicable(num1, num2):\n    '''\n    Check if a number is amicable to another number.\n    '''\n    if num1 == num2:\n        return False\n    sum1, sum2 = sum_of_proper_divisors(num1), sum_of_proper_divisors(num2)\n    return sum1 == num2 and sum2 == num1\n\n\ndef sum_of_proper_divisors(n):\n    '''\n    Find the sum of proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    limit = int(input(\"Enter the limit: \"))\n    amicable_sum = amicable_numbers_sum(limit)\n    print(\"The sum of amicable numbers is:\", amicable_sum)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num!= 1:\n            for factor in range(2, num):\n                if (num % factor == 0) and (factor!= num):\n                    break\n            else:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function will take a limit as input and will return the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num!= 1 and num!= limit:\n            # Check if the number is amicable\n            if num in amicable_numbers:\n                amicable_numbers.append(num)\n            else:\n                # Check if the number is a factor of any of the amicable numbers\n                for factor in amicable_numbers:\n                    if num % factor == 0:\n                        amicable_numbers.append(num)\n                        break\n        else:\n            # Skip numbers less than or equal to 1\n            pass\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i in amicable_numbers:\n            continue\n        for j in range(i, limit + 1):\n            if i!= j and is_amicable(i, j):\n                amicable_numbers.append(i + j)\n    return sum(amicable_numbers)\n\ndef is_amicable(a, b):\n    '''\n    Check if a and b are amicable numbers.\n    '''\n    if a == b:\n        return False\n    for i in range(2, min(a, b) // 2):\n        if a % i == 0 or b % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(num):\n    \"\"\"\n    Write a function to calculate the sum of proper divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum_of_two_primes(num):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n\n\ndef sum_of_two_primes(num):\n    \"\"\"\n    This function returns the sum of two prime numbers less than or equal to the given number.\n    \"\"\"\n    prime_factors = set()\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            if is_prime(i):\n                prime_factors.add(i)\n            if is_prime(num // i):\n                prime_factors.add(num // i)\n\n    return sum(prime_factors)\n\n\ndef is_prime(num):\n    \"\"\"\n    This function determines whether a number is prime or not.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a dictionary to store the sum of an amicable pair\n    amicable_dict = {}\n    \n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num in amicable_dict:\n            # If it is, check if the difference between the two numbers is also in the dictionary\n            if limit - num in amicable_dict:\n                # If it is, add the two numbers and their difference to the result\n                result = num + limit - num\n                return result\n            # If the difference is not in the dictionary, check if the difference is amicable\n            elif num + limit in amicable_dict:\n                # If it is, add the two numbers and their difference to the result\n                result = num + limit + num\n                return result\n        # If the number is not amicable, add it to the dictionary with a value of 0\n        else:\n            amicable_dict[num] = 0\n    \n    # If no amicable pair is found, return 0\n    return 0"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num in amicable_numbers:\n            continue\n        a, b = 0, 0\n        for i in range(1, num):\n            if num % i == 0:\n                a = i\n                break\n        else:\n            continue\n        for j in range(1, num):\n            if a * j == num:\n                b = j\n                break\n        else:\n            continue\n        if a + b == num:\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in degrees.\n    \"\"\"\n\n    # Calculating the angle of the complex number using cmath module\n    angle = cmath.phase(a + b)\n    # Converting the angle to degrees\n    angle = angle * 180 / cmath.pi\n    # Rounding off the angle to 2 decimal places\n    angle = round(angle, 2)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # calculate the angle using the cmath library\n    angle = cmath.phase(complex(a, b))\n\n    # format the angle to show decimal places\n    angle = round(angle, 3)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Convert input values to complex numbers\n    c = complex(a, b)\n\n    # Calculate the angle using the cmath library\n    angle = cmath.phase(c)\n\n    # Convert the angle to degrees and return it\n    return angle*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    :param string: A binary string.\n    :return: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in string]\n\n    # Initialize the count of 0s and 1s in the first sub-string\n    count_0s = 0\n    count_1s = 0\n\n    # Initialize the maximum difference to zero\n    max_difference = 0\n\n    # Loop over all possible sub-strings of the binary list\n    for i in range(len(binary_list) - 1):\n        # Count the number of 0s and 1s in the current sub-string\n        count_0s = binary_list.count(0, i, i + 2)\n        count_1s = binary_list.count(1, i, i + 2)\n        # Calculate the difference between the counts\n        difference = abs(count_0s - count_1s)\n        # Update the maximum difference if necessary\n        max_difference = max(max_difference, difference)\n\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Convert the string to binary\n    binary_string = bin(int(string, 2))[2:]\n    \n    # Initialize variables\n    zero_count = 0\n    one_count = 0\n    max_difference = 0\n    \n    # Iterate over each substring\n    for i in range(len(binary_string)):\n        # If the current substring starts with a zero\n        if binary_string[i] == '0':\n            zero_count += 1\n        else:\n            # If the current substring starts with a one\n            one_count += 1\n            # Check if the difference between the number of zeroes and ones is greater than the previous maximum difference\n            if max_difference < abs(one_count - zero_count):\n                max_difference = abs(one_count - zero_count)\n    \n    # Return the maximum difference\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(binary_string):\n    n = len(binary_string)\n    length = 0\n    count = 0\n    for i in range(n):\n        if binary_string[i] == '0':\n            count += 1\n        else:\n            length = max(length, count)\n            count = 0\n    length = max(length, count)\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n            count_1s = 0\n        else:\n            count_1s += 1\n            count_0s = 0\n\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    # Initialize variables\n    zeros_count = 0\n    ones_count = 0\n    max_diff = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # Check if the current character is a 0 or a 1\n        if string[i] == '0':\n            # Count the number of 0s\n            zeros_count += 1\n        else:\n            # Count the number of 1s\n            ones_count += 1\n\n        # Check if the difference between the number of 0s and number of 1s is greater than the current maximum difference\n        if abs(zeros_count - ones_count) > max_diff:\n            # Update the maximum difference\n            max_diff = abs(zeros_count - ones_count)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0] * 2\n    max_diff = 0\n    \n    for char in string:\n        if char == '0':\n            count[0] += 1\n            max_diff = max(max_diff, count[1] - count[0])\n        else:\n            count[1] += 1\n            max_diff = max(max_diff, count[1] - count[0])\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            diff = j-i\n            zeros = 0\n            ones = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    zeros += 1\n                else:\n                    ones += 1\n            if zeros > ones:\n                max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize the max difference and current difference as 0\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the current character is 0, increment the current difference\n        if char == '0':\n            curr_diff += 1\n        # If the current character is 1, decrement the current difference\n        else:\n            curr_diff -= 1\n\n        # If the current difference is greater than the max difference, update the max difference\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 - count_1 > max_diff:\n            max_diff = count_0 - count_1\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a%b==0:\n        return a+sum(b,a%b)\n    else:\n        return sum(b,a)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Loop through all the numbers from 1 to the smaller of the two numbers\n    for i in range(1, min(a, b) + 1):\n        # Check if the smaller of the two numbers is divisible by i\n        if a % i == 0 and b % i == 0:\n            # If it is, add i to the sum\n            sum = sum + i\n    # Return the sum of common divisors\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Calculate the sum of all divisors of a and b\n    divisors_sum = sum(set(range(1, a+1)).intersection(set(range(1, b+1))))\n\n    return divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns a list of their common divisors.\n    '''\n    if a < b:\n        a, b = b, a\n\n    divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n\n    return divisors\n\ndef sum(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    divisors = common_divisors(a, b)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1,b+1): \n        if b%i == 0: \n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the maximum number and check if it's divisible by both a and b\n    max_num = max(a, b)\n    if max_num % a == 0 and max_num % b == 0:\n        # If it is, find the sum of the two numbers\n        return a + b\n    else:\n        # If it's not, print an error message and return -1\n        print(\"Error: The two numbers are not common divisors.\")\n        return -1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding the greatest common divisor (GCD) of two numbers using Euclidean algorithm\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # Finding the sum of common divisors\n    def sum_common_divisors(a, b):\n        return a // gcd(a, b) + b // gcd(a, b)\n\n    # Calculating the sum of common divisors of a and b\n    sum_a_b = sum_common_divisors(a, b)\n\n    # Returning the sum of common divisors\n    return sum_a_b\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the smallest number\n    if a < b:\n        smaller = a\n        larger = b\n    else:\n        smaller = b\n        larger = a\n\n    # Initialize a loop counter\n    count = 0\n\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, smaller + 1):\n        # If the larger number is divisible by i, add 1 to the count\n        if larger % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to lowercase and split it into a list of words\n    words = str.lower().split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n characters\n        if len(word) > n:\n            # Add the word to the list of long words\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list that are longer than n characters.\n\n    Parameters:\n    n (int): maximum length of words to consider\n    words (list): list of words to search\n\n    Returns:\n    list: list of words longer than n characters\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The number of characters that a word should have to be considered long.\n    words (list): A list of words to search through.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if all rows have the same length\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[len(my_matrix)-i-1][len(my_matrix[0])-j-1]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    sum_rows = 0\n    sum_cols = 0\n    sum_main_diags = 0\n    sum_secondary_diags = 0\n    \n    # check rows\n    for i in range(n):\n        sum_rows += sum(my_matrix[i])\n    for i in range(n):\n        sum_cols += sum(my_matrix[j] for j in range(n))\n    for i in range(n):\n        sum_main_diags += my_matrix[i][i]\n    for i in range(n):\n        sum_secondary_diags += my_matrix[i][n-i-1]\n    \n    if sum_rows == sum_cols == sum_main_diags == sum_secondary_diags == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix contains all unique elements\n    unique_elements = set()\n    for row in my_matrix:\n        for element in row:\n            if element in unique_elements:\n                return False\n            unique_elements.add(element)\n\n    # Check if the diagonal elements in the matrix sum up to 15\n    for i in range(len(my_matrix)):\n        diagonal_sum = my_matrix[i][i] + my_matrix[i][len(my_matrix) - 1 - i]\n        if diagonal_sum!= 15:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if the matrix only contains numbers between 1 and 9\n    for row in my_matrix:\n        for num in row:\n            if not (1 <= num <= 9):\n                return False\n    \n    # Check if the matrix is a magic square\n    row_sum = col_sum = magic_num = 0\n    for i in range(3):\n        for j in range(3):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            if my_matrix[i][j] == my_matrix[i][j+1] == my_matrix[i][j+2] == my_matrix[i][j+3] == my_matrix[i][j+4] == my_matrix[i][j+5] == my_matrix[i][j+6] == my_matrix[i][j+7] == my_matrix[i][j+8] == my_matrix[i][j+9]:\n                magic_num = my_matrix[i][j]\n            elif my_matrix[j][i] == my_matrix[j+1][i] == my_matrix[j+2][i] == my_matrix[j+3][i] == my_matrix[j+4][i] == my_matrix[j+5][i] == my_matrix[j+6][i] == my_matrix[j+7][i] == my_matrix[j+8][i] == my_matrix[j+9][i]:\n                magic_num = my_matrix[j][i]\n    \n    # Check if the magic number is unique in the matrix\n    unique_magic = True\n    for i in range(9):\n        if my_matrix[i][i]!= magic_num:\n            unique_magic = False\n            break\n    \n    return unique_magic and (row_sum == 45 or col_sum == 45)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum == magic_sum or col_sum == magic_sum:\n            return True\n        if i < n - 1 and my_matrix[i][i] == my_matrix[i+1][i]:\n            return False\n        if i < n - 1 and my_matrix[i][n-1-i] == my_matrix[i+1][n-1-i]:\n            return False\n\n    # If the loop completes without finding a magic sum, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row = len(my_matrix)\n    col = len(my_matrix[0])\n    \n    # Check rows and columns for duplicates\n    for i in range(row):\n        for j in range(col):\n            if my_matrix[i][j]!= i + j:\n                return False\n    \n    # Check diagonals for duplicates\n    for i in range(row):\n        if my_matrix[i][i]!= i + row - 1 or my_matrix[i][row-1]!= i + col - 1:\n            return False\n    \n    # Check diagonals for duplicates\n    for i in range(col):\n        if my_matrix[i][i]!= i + row - 1 or my_matrix[row-1][i]!= i + col - 1:\n            return False\n    \n    # All tests passed\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n    \n    # Check that the sum of each row is equal to the sum of each column\n    if row_sums!= col_sums:\n        return False\n    \n    # Check that the sum of the main diagonal is the same as the sum of the secondary diagonal\n    diag1_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    diag2_sum = sum([my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))])\n    if diag1_sum!= diag2_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if all columns have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n\n    # Check for rows and columns that are the same length\n    for row in my_matrix:\n        for col in range(len(row)):\n            for i in range(len(my_matrix)):\n                if row[col] == my_matrix[i][col]:\n                    return False\n\n    # Check for unique values in the matrix\n    unique_values = set()\n    for row in my_matrix:\n        for value in row:\n            if value in unique_values:\n                return False\n            unique_values.add(value)\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix has the right number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix must be a square.\"\n    \n    # check if all the elements are distinct\n    if len(set(sum(my_matrix, [])))!= len(my_matrix) * len(my_matrix[0]):\n        return \"Matrix must have distinct elements.\"\n    \n    # check if the matrix has no repeating elements\n    if len(set(my_matrix))!= len(my_matrix) * len(my_matrix[0]):\n        return \"Matrix must have no repeating elements.\"\n    \n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum = sum([my_matrix[i][k] for k in range(len(my_matrix[0]))])\n            col_sum = sum([my_matrix[k][j] for k in range(len(my_matrix))])\n            if my_matrix[i][j]!= row_sum and my_matrix[i][j]!= col_sum:\n                return \"Matrix is not a magic square.\"\n    \n    return \"Matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the number of rows is equal to the number of columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            return False\n\n    # Check if the matrix is a magic square\n    sum_rows = [sum(row) for row in my_matrix]\n    sum_cols = [sum(row) for row in zip(*my_matrix)]\n    diagonal = sum(row[i] for i in range(len(my_matrix)))\n    if sum_rows!= sum_cols!= [0] * len(my_matrix) or diagonal!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # iterate through the list and update the frequency count in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the maximum frequency and return it\n    max_item = max(freq_dict, key=freq_dict.get)\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_num = [num for num, freq_num in freq.items() if freq_num == max_freq][0]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq_map[num] += 1\n        \n        # update max frequency and corresponding item if necessary\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    for num in freq:\n        if freq[num] == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_num = None\n\n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_count = 0\n    max_item = None\n    for item, freq in count.items():\n        if freq > max_count:\n            max_count = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_num = None\n    max_count = 0\n\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    # iterate over the list and update the frequency count for each element\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the maximum frequency count\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for key, value in freq_dict.items():\n        if value == max_freq:\n            max_item = key\n            break\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = str1.lower()\n    str1 = ''.join([char for char in str1 if char not in vowels])\n    return str1[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            new_str += str1[len(str1)-1-i]\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels and char.lower()!= 'y':\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str2 = str2 + str1[i]\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in str1:\n        if char in vowels:\n            if char.lower() in vowels:\n                result = char + result\n            else:\n                result = result + char\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            if vowel_count == 0:\n                result = char + result\n            elif vowel_count == 1:\n                result = result + char\n            else:\n                result = char + result\n            vowel_count += 1\n        else:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            str2 = char + str2\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \",\"\n    str1 = str1[:-1] # removes the last comma\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join the elements of the tuple with a comma and space separator\n    string_tup = ', '.join(str(x) for x in tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using join() method.\n    string_tup = ''.join(str(i) for i in tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    :param tup: a tuple to convert to a string\n    :return: a string representation of the tuple\n    \"\"\"\n    return ', '.join(str(elem) for elem in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the built-in str() function\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Parameters:\n    tup1 (tuple): a tuple to be converted to a string.\n\n    Returns:\n    str: the tuple converted to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n    \n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    for i in range(n):\n        hexagonal += i * (2 * i - 1)\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    for i in range(n):\n        print(a)\n        a = (3*a**2 - 1)//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_numbers = []\n    for i in range(n+1):\n        hexagonal_numbers.append(2*i*(2*i-1))\n    return hexagonal_numbers[n]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def reverse_num(n): \n        '''\n        Convert a positive integer n to its corresponding hexagonal number.\n        '''\n        hex_num = []\n        while n > 0:\n            remainder = n % 16\n            hex_num.append(remainder)\n            n //= 16\n        return hex_num[::-1]\n\n    def reverse_hex_num(hex_num): \n        '''\n        Convert a hexagonal number to its corresponding decimal number.\n        '''\n        decimal_num = 0\n        for digit in hex_num:\n            decimal_num = decimal_num * 16 + digit\n        return decimal_num\n\n    def is_valid_hex_num(hex_num): \n        '''\n        Check if a hexagonal number is valid.\n        '''\n        return sum(digit**2 for digit in hex_num) == sum(range(1, 16)) * 3\n\n    n = 16 ** (n // 2)\n    hex_num = reverse_num(n)\n    while not is_valid_hex_num(hex_num):\n        n += 1\n        hex_num = reverse_num(n)\n\n    return reverse_hex_num(hex_num)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (5 * n * n) - (3 * n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # define the formula for hexagonal numbers\n    a = 1\n    b = 3\n    while n > 0:\n        a += b\n        n -= 1\n    return a"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nonzeroes = array('i', [1 if num!= 0 else 0 for num in nums])\n    zeroes = array('i', [1 if num == 0 else 0 for num in nums])\n    total = sum(nonzeroes)\n    zero_count = sum(zeroes)\n    return zero_count / total"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of zeros with same size as the input array\n    zeros = array('i', [0]*len(nums))\n    \n    # iterate through the input array\n    for num in nums:\n        # if the number is zero, increment the corresponding element in the zeros array\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    if zeros.count(0) == 0:\n        zero_ratio = 0\n    else:\n        zero_ratio = zeros.count(0)/len(nums)\n    \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to a list so we can use it with Python's built-in function for counting the number of occurrences of each element\n    nums_list = list(nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    num_zeros = 0\n    num_ones = 0\n    for num in nums_list:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = num_zeros / num_ones\n\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_zero = sum(arr == 0)\n    count_nonzero = len(nums) - count_zero\n    ratio = count_zero / count_nonzero\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to an array object\n    arr = array('i', nums)\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the array elements and count the number of zeroes and non-zeroes\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list so we can easily count the number of zeroes\n    num_list = list(nums)\n\n    # Initialize the count of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = len(num_list)\n\n    # Loop through the list and count the number of zeroes\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = round(zero_count / non_zero_count, 2)\n\n    return (zero_count, non_zero_count, zero_ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the input list to an array\n    arr = array('i', nums)\n\n    # Initialize variables to keep track of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))  # initialize array of zeros\n\n    for num in nums:\n        if num == 0:\n            zero_count.append(1)  # if num is zero, increment count\n\n    non_zero_count = 0  # initialize count of non-zeroes\n\n    for i in range(len(zero_count)):\n        non_zero_count += zero_count[i]  # add counts of non-zeroes to total count\n\n    if non_zero_count == 0:  # if total count is zero, there are no non-zeroes\n        return 0\n    else:\n        return zero_count[::-1].index(max(zero_count[::-1])) / len(zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    count = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            count += 1\n\n    if count == 0:\n        return 0\n    else:\n        return zeros / count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    i = 0\n    while n > 0:\n        if n & 1 == 1:\n            if i == 0:\n                return False\n            else:\n                return True\n        n = n >> 1\n        i += 1\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the number is a power of 2\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables\n    remainders = []\n    power_of_two = 2\n\n    # Check if the given number can be represented as sum of non-zero powers of 2\n    while n > 0:\n        if n % power_of_two == 0:\n            remainders.append(n % power_of_two)\n            n = n // power_of_two\n        else:\n            power_of_two = 2 * power_of_two\n            remainders.append(power_of_two)\n            n = n - power_of_two\n\n    # Check if the remainders can be represented as sum of powers of 2\n    if len(remainders) < 2:\n        return False\n    else:\n        for i in range(len(remainders) - 1):\n            if remainders[i] + remainders[i + 1] > power_of_two:\n                return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the given number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    # Check if the given number is divisible by 8\n    if n % 8 == 0:\n        return False\n\n    # Check if the given number is divisible by 16\n    if n % 16 == 0:\n        return False\n\n    # Check if the given number is divisible by 32\n    if n % 32 == 0:\n        return False\n\n    # Check if the given number is divisible by 64\n    if n % 64 == 0:\n        return False\n\n    # Check if the given number is divisible by 128\n    if n % 128 == 0:\n        return False\n\n    # Check if the given number is divisible by 256\n    if n % 256 == 0:\n        return False\n\n    # Check if the given number is divisible by 512\n    if n % 512 == 0:\n        return False\n\n    # Check if the given number is divisible by 1024\n    if n % 1024 == 0:\n        return False\n\n    # Check if the given number is divisible by 2048\n    if n % 2048 == 0:\n        return False\n\n    # Check if the given number is divisible by 4096\n    if n % 4096 == 0:\n        return False\n\n    # Check if the given number is divisible by 8192\n    if n % 8192 == 0:\n        return False\n\n    # Check if the given number is divisible by 16384\n    if n % 16384 == 0:\n        return False\n\n    # Check if the given number is divisible by 32768\n    if n % 32768 == 0:\n        return False\n\n    # Check if the given number is divisible by 65536\n    if n % 65536 == 0:\n        return False\n\n    # Check if the given number is divisible by 131072\n    if n % 131072 == 0:\n        return False\n\n    # Check if the given number is divisible by 262144\n    if n % 262144 == 0:\n        return False\n\n    # Check if the given number is divisible by 524288\n    if n % 524288 == 0:\n        return False\n\n    # Check if the given number is divisible by 1048576\n    if n % 1048576 == 0:\n        return False\n\n    # Check if the given number is divisible by 2097152\n    if n % 2097152 == 0:\n        return False\n\n    # Check if the given number is divisible by 4194304\n    if n % 4194304 == 0:\n        return False\n\n    # Check if the given number is divisible by 8388608\n    if n % 8388608 == 0:\n        return False\n\n    # Check if the given number is divisible by 16777216\n    if n % 16777216 == 0:\n        return False\n\n    # Check if the given number is divisible by 33554432\n    if n % 33554432 == 0:\n        return False\n\n    # Check if the given number is divisible by 67108864\n    if n % 67108864 == 0:\n        return False\n\n    # Check if the given number is divisible by 134217728\n    if n % 134217728 == 0:\n        return False\n\n    # Check if the given number is divisible by "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Iterate through all possible sums of powers of 2\n    for i in range(2, n+1):\n        # Check if the sum is a power of 2\n        if i == 1:\n            continue\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            if i == 2*j:\n                continue\n            if i == 3*j:\n                continue\n            # Check if the sum can be represented as a sum of powers of 2\n            if i == (2*j)+(3*j):\n                return True\n    # If no possible sum of powers of 2 is found, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # initialize variables\n    num_of_zeros = 0\n    power_of_two = 1\n    sum_of_powers = 0\n\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # check if the current bit is 1\n        if (n >> i) & 1 == 1:\n            # if the bit is 1, add the power_of_two to the sum_of_powers\n            sum_of_powers += power_of_two\n            # increment the number of zeros\n            num_of_zeros += 1\n        # if the bit is 0, multiply the power_of_two by 2 and increment the power_of_two\n        else:\n            power_of_two *= 2\n\n    # check if the number of zeros is greater than or equal to the number of bits in the binary representation of n\n    if num_of_zeros >= 32:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i**2 == n:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Initialize sum of powers of 2 to 0\n    total_pow_2 = 0\n    \n    # Convert the given number to binary string\n    num_binary = bin(n)[2:]\n    \n    # Loop through each binary digit of the number\n    for digit in num_binary:\n        \n        # If the digit is 1, add 1 to the sum of powers of 2\n        if digit == '1':\n            total_pow_2 += 1\n        \n        # If the total sum of powers of 2 becomes greater than or equal to the number of bits in the binary string, return True\n        if total_pow_2 >= len(num_binary):\n            return True\n            \n    # If no such number exists, return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is zero\n    if n == 0:\n        return True\n    \n    # Convert the number to binary and find the count of ones\n    binary = bin(n)[2:]\n    count_ones = binary.count('1')\n    \n    # If count of ones is even, it cannot be represented as sum of non-zero powers of 2\n    if count_ones % 2 == 0:\n        return False\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    i = 1\n    while i <= count_ones:\n        if n % (2 ** i)!= 0:\n            return False\n        i += 1\n    \n    return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is: \", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846  # pi constant\n    circumference = 2 * pi * r  # calculate circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty set to store the flattened list\n    flattened_set = set()\n    # Loop through each element in the test_list\n    for element in test_list:\n        # If the element is a list, recursively flatten it\n        if isinstance(element, list):\n            flattened_set.update(extract_singly(element))\n        # Otherwise, add it to the flattened_set as a set\n        else:\n            flattened_set.add(element)\n    # Return the flattened_set as a list\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            result.append(subitem)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Define an empty set to hold the flattened list of numbers\n    flattened_set = set()\n    \n    # Loop through each element in the test_list\n    for element in test_list:\n        # If the element is a list, recursively call the function on it\n        if type(element) == list:\n            flattened_set.update(extract_singly(element))\n        # If the element is a number, add it to the flattened_set\n        elif type(element) == int or type(element) == float:\n            flattened_set.add(element)\n    \n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        if type(item) == list:\n            flattened.extend(extract_singly(item))\n        elif type(item) == set:\n            flattened.extend(list(item))\n        elif type(item) == frozenset:\n            flattened.extend(list(item))\n        else:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened = [num for sublist in test_list for num in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # flatten the list\n    flattened_list = [item for sublist in test_list for item in sublist]\n    # convert the flattened list to a set and return it\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts the given list of elements in the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Loop to iterate till the list is sorted\n    while True:\n        # Find the maximum element in the unsorted part of the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # If the maximum element is already in its correct position, we're done sorting\n        if max_idx == 0:\n            break\n\n        # Swap the elements to sort the sub-list to its correct position\n        nums[max_idx], nums[n-1] = nums[n-1], nums[max_idx]\n        n -= 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n\n    n = len(nums)\n\n    # Helper function to reverse the order of the elements in a pancake of size k\n    def reverse_pancake(nums, k):\n        for i in range(k):\n            nums[i], nums[k-1-i] = nums[k-1-i], nums[i]\n\n    # Main function to implement pancake sort\n    def pancake_sort_helper(nums):\n        # Initialize the largest pancake size to the length of the list\n        max_pancake = n\n        # Loop over the pancake sizes from 1 to n\n        for k in range(1, n+1):\n            # Find the largest pancake of size k\n            pancake_idx = 0\n            for i in range(1, n-k+1):\n                if nums[i] < nums[i+k-1]:\n                    pancake_idx = i\n                    break\n            # Reverse the order of the elements in the largest pancake\n            reverse_pancake(nums, k)\n            # Update the maximum pancake size if necessary\n            if k + pancake_idx > max_pancake:\n                max_pancake = k + pancake_idx\n        # Return the sorted list\n        return nums\n\n    # Call the helper function to sort the list\n    return pancake_sort_helper(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        if max_index == 0:\n            break\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a copy of the list\n    nums_copy = nums[:]\n\n    # find the length of the list\n    n = len(nums)\n\n    # loop through the list\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n\n        # swap the maximum element with the first element of the unsorted part\n        nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Calculate the pancake sequence\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # Sort the list in ascending order\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to reverse the order of elements in a list\n    def reverse(lst):\n        return lst[::-1]\n\n    # Helper function to swap elements in a list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to print the sorted list\n    def print_sorted(lst):\n        print(\"Sorted list:\", lst)\n\n    # Helper function to swap elements in a list by swapping adjacent elements\n    def swap_adjacent(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to perform a pancake sort\n    def pancake_sort_helper(lst):\n        # Find the largest element in the list\n        max_elem = max(lst)\n        # Reverse the order of the list\n        lst = reverse(lst)\n        # Perform a selection sort on the reversed list\n        for i in range(len(lst)):\n            max_index = i\n            for j in range(i+1, len(lst)):\n                if lst[j] > lst[max_index]:\n                    max_index = j\n            # Swap the maximum element with the element at the current index\n            swap(lst, max_index, i)\n        # Reverse the order of the list again to get the sorted list\n        sorted_lst = reverse(lst)\n        return sorted_lst\n\n    # Call the pancake sort helper function to sort the list\n    sorted_lst = pancake_sort_helper(nums)\n\n    # Print the sorted list\n    print_sorted(sorted_lst)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    def sort_array(arr, n):\n        # create a list of tuples where each tuple represents a pancake\n        pancakes = [(i, n-i) for i in range(n)]\n        # sort the list of tuples in descending order of pancake size\n        pancakes.sort(key=lambda x: x[1], reverse=True)\n        # iterate over the sorted list of tuples and pancake sort the elements\n        for i in range(n):\n            arr[i] = arr[pancakes[i][0]]\n            # print(\"Sorted array:\", arr)\n            # print(\"Pancakes:\", pancakes)\n        # print(\"Sorted array:\", arr)\n\n    # start with the last element in the array\n    for i in range(len(nums)-2, -1, -1):\n        # sort the array with pancake sort\n        sort_array(nums, i+1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # Initialize the length of the list\n    n = len(nums)\n    \n    # Loop until the list is sorted\n    while True:\n        \n        # Count the number of iterations\n        iterations = 0\n        \n        # Loop through the list and find the largest element\n        for i in range(n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the first element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the second element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the third element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the fourth element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the fifth element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the sixth element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the seventh element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element\n        for i in range(1, n):\n            \n            # Find the maximum element\n            if nums[i] > nums[0]:\n                max_index = i\n        \n        # If the largest element is already in its correct position, we're done\n        if max_index == 0:\n            break\n        \n        # Swap the largest element with the eighth element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        \n        # Count the number of iterations\n        iterations += 1\n        \n        # Loop through the list and find the largest element"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a boolean array to store whether each element is sorted or not\n    is_sorted = [True] * n\n    # create a list to store the indices of the sorted elements\n    sorted_indices = []\n    # initialize the current index of the largest element\n    current_index = n - 1\n    \n    while current_index > 0:\n        # find the index of the largest element\n        max_index = 0\n        for i in range(1, current_index + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # swap the largest element with the current element\n        nums[current_index], nums[max_index] = nums[max_index], nums[current_index]\n        # check if the largest element is sorted\n        if is_sorted[max_index]:\n            sorted_indices.append(max_index)\n            is_sorted[max_index] = False\n        # move to the next unsorted element\n        current_index -= 1\n    \n    return sorted_indices"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): First list of items to compare.\n        list2 (list): Second list of items to compare.\n        list3 (list): Third list of items to compare.\n\n    Returns:\n        int: The number of items that are identical in the same position of the given lists.\n\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    This function takes in a tuple and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least 2 elements\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes in an array and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Initialize two variables to store the maximum absolute difference and the first and second maximum absolute difference\n    max_diff = float('-inf')\n    first_diff = float('-inf')\n    second_diff = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Find the difference between the current element and the first element in the array\n        diff1 = abs(arr[i] - arr[0])\n\n        # Find the difference between the current element and the second element in the array\n        diff2 = abs(arr[i] - arr[1])\n\n        # Update the maximum absolute difference and first and second maximum absolute difference as appropriate\n        if diff1 > max_diff:\n            second_diff = first_diff\n            first_diff = diff1\n            max_diff = diff1\n        elif diff2 > max_diff:\n            second_diff = diff2\n            max_diff = diff2\n        elif diff1 > diff2:\n            second_diff = diff1\n\n    # Return the maximum absolute difference between any two elements in the array\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements in that array.\n    \"\"\"\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > diff:\n                diff = abs(arr[i]-arr[j])\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')  # initialize max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    x = None\n    y = None\n\n    # Check if the equation has a solution\n    if a == 0:\n        # If a is 0, then y is the only solution\n        y = -b // n\n        return (None, y)\n    elif b == 0:\n        # If b is 0, then x is the only solution\n        x = -a // n\n        return (x, None)\n    else:\n        # If a and b are not 0, then x and y are both solutions\n        x = (-b * n // (a * b))\n        y = (-a * n // (a * b))\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        # If b is zero, there is no solution\n        return None\n    else:\n        # Otherwise, solve for x and y using the quadratic formula\n        x = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n        y = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x = 0\n    y = 0\n    if a == 0:\n        y = -n // b\n        if y == 0:\n            return None\n    else:\n        x = -n // b\n        if x == 0:\n            return None\n        if x * a - b * x == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if n is divisible by a and b, otherwise it cannot have a solution\n    if n % a == 0 and n % b == 0:\n        # Compute x and y for the first solution\n        x = int(n / a)\n        y = int((n - x*a) / b)\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if n == 0:\n        return None\n\n    if a == 0:\n        x = -b // n\n        y = n // x\n        return (x, y)\n\n    if b == 0:\n        y = -a // n\n        x = n // y\n        return (x, y)\n\n    d = gcd(a, b)\n    x = (b // d) * (n // d)\n    y = (a // d) * (n // d)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = n // b\n            y = n % b\n            return (x, y)\n    else:\n        d = b * b - 4 * a * n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5) // (2 * a)\n            x2 = (-b - d**0.5) // (2 * a)\n            y1 = x1 * a + n\n            y2 = x2 * a + n\n            return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    for i in range(1, n+1):\n        if a*i + b*(n-i) == n:\n            return (i, n-i)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_list = []\n    y_list = []\n\n    # Check for solutions\n    for x in range(-10000, 10001):\n        if a * x + b * y == n:\n            x_list.append(x)\n            y_list.append(y)\n\n    # Check if there is at least one solution\n    if len(x_list) == 0:\n        return None\n\n    # Check if there are multiple solutions\n    elif len(x_list) > 1:\n        for i in range(len(x_list)):\n            for j in range(i + 1, len(x_list)):\n                if x_list[i] == x_list[j]:\n                    x_list.pop(j)\n                    y_list.pop(j)\n                    break\n\n        if len(x_list) == 0:\n            return None\n\n    # Return the first solution\n    else:\n        return (x_list[0], y_list[0])"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-n, n + 1):\n        for y in range(-n, n + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the unique elements of list1\n    unique_list = []\n    # loop through list1 and check if each element is not in list2\n    for element in list1:\n        if element not in list2:\n            unique_list.append(element)\n    # return the new list\n    return unique_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    i = 0\n    while i <= n // 2:\n        series_sum += (n - 2*i)\n        i += 1\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    total_sum = 0\n    for i in range(n // 2):\n        total_sum += n - 2*i\n\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        total = 0\n        for i in range(n // 2):\n            total += i * (n - 2 * i)\n        return total\n    else:\n        return -1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        return sum_series(n - 2) + n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    apothem = s / tan(pi/l)\n\n    # calculate the area of the polygon\n    return l * apothem"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * (s - l - 1)) / (4 * math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * (tan(pi / l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    area = 0\n    for i in range(l):\n        area += (s/l)*tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - 2 * l + 1) * tan(pi / l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 2 * (s/l) * tan(pi/l)\n    return a"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s-2*l) * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s) / 2\n    print(\"The area of the polygon is:\", area)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area of a regular polygon using the formula:\n    # A = (s * (s-1)) / 2 * tan(pi/l)\n    area = (s * (s-1)) / 2 * tan(pi/l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360.0/l\n    for i in range(l):\n        area += s*tan(i*angle*pi/180)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1): \n        # check if i is a divisor of n\n        if n % i == 0: \n            # check if the sum of the divisors of i and n are the same\n            if sum(int(j) for j in str(i*n)) == sum(int(j) for j in str(n)): \n                # if both conditions are true, return True\n                return True\n    # if no divisor is found, return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n\n    div_sum = sum(divisors)\n    return div_sum == sum(set(divisors))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n//i:\n                divisor_sum += n//i\n    return divisor_sum == 2*n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # initialize variables\n    div_sum_list = []\n    sum_of_divisors = 0\n\n    # loop through all possible divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum_list.append(i)\n            if n // i!= i:\n                div_sum_list.append(n//i)\n\n    # calculate the sum of the divisors\n    for i in div_sum_list:\n        sum_of_divisors += i\n\n    # check if the sum of divisors is the same as n\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input! Please enter a positive integer.\"\n    \n    # Calculate the sum of the divisors of n using a loop\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i + n // i\n    \n    # Check if the sum of the divisors of n is equal to n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # find the sum of the divisors of n\n    sum_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # find the sum of the divisors of the sum of n\n    sum_sum_divisors = sum([i for i in range(1, int(math.sqrt(sum_divisors))+1) if sum_divisors % i == 0])\n\n    # check if the sum of the divisors of the sum of n is equal to n\n    if sum_sum_divisors == n:\n        print(\"The sum of the divisors of\", n, \"is\", sum_sum_divisors, \"which is the same as\", n)\n    else:\n        print(\"The sum of the divisors of\", n, \"is\", sum_sum_divisors, \"which is not the same as\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divs = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # Calculate the sum of the divisors\n    sum_divs = sum(divs)\n    # Check if the sum of divisors of n is equal to n\n    return (sum_divs == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    divisor_sum = sum(range(1, n+1)) - n\n    \n    # calculate the sum of the divisors of n-1\n    divisor_sum_1 = sum(range(1, n)) - n - 1\n    \n    # check if the two sums are the same\n    if divisor_sum == divisor_sum_1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Divide n by 2 until the result is less than or equal to 1\n    while n > 1:\n        # Check if n is divisible by any odd integer between 3 and n/2\n        for i in range(3, n//2+1, 2):\n            if n % i == 0:\n                break\n        else:\n            # n is divisible by 2, so the sum of its divisors is n\n            return n\n\n        # n is not divisible by 2, so divide it by 2\n        n = n // 2\n\n    # If the loop completes, it means n is a prime number\n    return True"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the frequency of characters at each position in the English alphabet\n    freq_dict = {'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0, 'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0, 'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0, 'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0}\n\n    # Convert the string to uppercase to ignore case sensitivity\n    str1 = str1.upper()\n\n    # Iterate over each character in the string\n    for char in str1:\n        # Check if the character is a letter and not whitespace\n        if char.isalpha():\n            # Check if the character is a letter from the English alphabet\n            if char in freq_dict:\n                # Increment the frequency count for the character\n                freq_dict[char] += 1\n\n    # Return the dictionary containing the frequency count of characters at each position in the English alphabet\n    return freq_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize a counter to keep track of the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    # Iterate through each character in the input string\n    for i in range(len(str1)):\n        # Convert the current character to lowercase\n        char = str1[i].lower()\n        # Check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # Check if the character is the same as the next character\n            if i < len(str1) - 1:\n                next_char = str1[i+1].lower()\n                if char == next_char:\n                    # Increment the counter\n                    count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in english_alphabet and str1[i].lower() == str1[i].lower().swapcase():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Loop through the string and count the occurrences of each character\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Loop through the dictionary and count the number of characters that occur at the same position in the English alphabet\n    count = 0\n    for i in range(26):\n        if str1[i] in char_count:\n            count += char_count[str1[i]]\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the character counts\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1: \n        # Convert the character to lowercase\n        char = char.lower()\n        # If the character is an English alphabet character, increment its count in the dictionary\n        if char.isalpha() and char in char_count:\n            char_count[char] += 1\n        else:\n            # If the character is not an English alphabet character, ignore it\n            pass\n    # Return the dictionary containing the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    alphabets = alphabets.lower()\n    count = 0\n    for char in str1:\n        if char.lower() in alphabets:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(c.lower() for c in str1 if c.isalpha())\n    \n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate over each character in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # If the character is in the string, increment its count in the dictionary\n        if chr(i) in str1:\n            char_count[chr(i)] = char_count.get(chr(i), 0) + 1\n    \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        if str1[i].lower() == chr(i+97).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is a letter, add 1 to its count in the dictionary\n        if char.isalpha():\n            char = char.upper()\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Initialize a variable to store the count of characters at the same position in the English alphabet\n    count = 0\n    # Iterate over each character in the dictionary\n    for char, position in char_count.items():\n        # If the position of the character is at the same position in the English alphabet, add its count to the count variable\n        if char.isalpha() and position == position:\n            count += char_count[char]\n    # Return the final count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(i+65)] = 0\n    for char in str1:\n        if char.islower():\n            index = ord(char) - 97\n            count_dict[chr(index+65)] += 1\n    for key, value in count_dict.items():\n        if value > 0:\n            print(key, value)\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_xor += 1\n    return even_xor"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if the number is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0: \n        raise ValueError(\"Input must be a positive integer\")\n\n    # Set the initial value of the power of 2\n    power = 1\n\n    # Check if n is already a power of 2\n    if n == 1: \n        return 1\n\n    # Loop through the powers of 2 until the next power of 2 is greater than or equal to n\n    while power < n: \n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable to 2\n    power = 2\n    \n    # Loop until the square of the power is greater than or equal to n\n    while power*power < n: \n        # Increment the power by 1\n        power += 1\n    \n    # Return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1 # Make n the next smallest power of 2\n    n |= n >> 1 # Double the bits of n\n    n |= n >> 2 # Double the bits of n again\n    n |= n >> 4 # Double the bits of n again\n    n |= n >> 8 # Double the bits of n again\n    n |= n >> 16 # Double the bits of n again\n    n += 1 # Make n the next largest power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if the number is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Binary search to find the smallest power of 2 greater than or equal to n\n    low = 1\n    high = 2**31 - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if mid >= n:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return high"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` and returns the smallest power of 2\n    greater than or equal to `n`.\n\n    Example:\n    >>> next_power_of_2(4)\n    8\n    \"\"\"\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the power of 2\n    power = 1\n    \n    # While the power is less than or equal to the square root of n\n    while power <= int(n**(1/2)):\n        power *= 2\n        \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary and count the number of 1's\n    num_ones = sum(int(digit) for digit in bin(n)[2:])\n    # Calculate the next power of 2 by raising 2 to the power of num_ones\n    return 2 ** num_ones"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize power of 2 to 2^0 = 1\n    power = 1\n    # loop while power is less than or equal to n/2\n    while power <= n//2:\n        # if power is a power of 2, increase it by 1\n        if power == 1:\n            power = 2\n        else:\n            power *= 2\n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes two parameters: a list a and a number x. \n    It returns the number of occurrences of x in a, where a is a list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list.append(i)\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Loop through each element of the list from index m to index n-1\n    for i in range(m, n):\n        # Add the current element to the sum\n        total += list1[i]\n\n    # Return the total\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1) or m > n:\n        raise ValueError(\"Invalid indices!\")\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        raise ValueError(\"Invalid range\")\n    sum = 0\n    for i in range(m, n + 1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_range = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            sum_of_range += list1[i]\n    return sum_of_range\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1) - 1 or m > n:\n        return None\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = 5 * a * math.sin(math.pi / 5)\n    return s"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Using the formula for the perimeter of a regular pentagon, we get\n    # P = 5a / 4\n    p = 5 * a / 4\n\n    # The perimeter of a pentagon can be found using the Pythagorean theorem.\n    # Theorem: a^2 + b^2 = c^2\n    # Therefore, c = sqrt(a^2 + b^2)\n    # Since a = sqrt(5p), b = sqrt(5p) and c = sqrt(5p), we get\n    # a^2 = b^2 = 5p^2\n    # Therefore, a = sqrt(5p)\n    # Therefore, a = sqrt(5p)\n    # Therefore, a = sqrt(5p)\n\n    # We need to round off the result to two decimal places using the round() function.\n    # The math.ceil() function is used to round up to the nearest integer.\n    # The math.floor() function is used to round down to the nearest integer.\n    p = round(math.sqrt(5*p), 2)\n\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(5)*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the diagonal\n    diagonal = 5 * a\n    \n    # calculate the perimeter of the pentagon\n    perimeter = diagonal * 5\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for char in s:\n        if char =='s' and std_count == 0:\n            std_count = 1\n        elif char == 'd' and std_count == 1:\n            std_count = 2\n        elif char == 't' and std_count == 2:\n            std_count = 0\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    \n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    std_count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            std_count += 1\n            if std_count == 2:\n                count += 1\n                std_count = 0\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    temp = s.split('std')\n    if len(temp) > 1:\n        for i in range(1, len(temp)):\n            count += len(temp[i]) - 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if all(isinstance(elem, type(test_tuple[0])) for elem in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if the tuple has at least one element\n    if len(test_tuple) < 1:\n        return True\n    \n    # Initialize the first element of the tuple as the data type\n    data_type = type(test_tuple[0])\n    \n    # Iterate over all the elements of the tuple\n    for item in test_tuple:\n        # Check if the data type of the current element is equal to the initial data type\n        if type(item)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # initialize a variable to keep track of the data type of first element in tuple\n    data_type = type(test_tuple[0])\n\n    # iterate over the tuple elements\n    for element in test_tuple:\n        # check if the data type of current element is same as the data type of first element\n        if type(element)!= data_type:\n            return False\n\n    # if all the elements in the tuple have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return True\n    else:\n        first_element = test_tuple[0]\n        for element in test_tuple:\n            if not isinstance(element, type(first_element)):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= first_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables for counting the number of occurrences of x and checking if the majority element has been found\n    count = 0\n    majority_found = False\n\n    # Loop through the array and count the number of occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, return True\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Find the frequency of x in arr\n    freq = 0\n    for i in arr:\n        if i == x:\n            freq += 1\n\n    # If the frequency is more than n/2, return True\n    if freq > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables\n    count = 0\n    majority_count = 0\n    majority_element = None\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is equal to the target element\n        if arr[i] == x:\n            # Increment the count of equal elements\n            count += 1\n\n            # If the count of equal elements is greater than 0, then this is the first time we've seen this element\n            if count > 1:\n                # Set the current element to be the first element we encounter\n                if majority_element is None:\n                    majority_element = arr[i]\n                else:\n                    # We've already seen this element before, so check if it's the same as the current majority element\n                    if arr[i] == majority_element:\n                        majority_count += 1\n                        if majority_count > n/2:\n                            # We've found the majority element, so return True\n                            return True\n\n    # If we've made it through the entire array and haven't found the majority element yet, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Use a dictionary to count the occurrences of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Find the majority element\n    majority = None\n    max_count = 0\n    for num in count:\n        if count[num] > max_count:\n            max_count = count[num]\n            majority = num\n\n    # Compare the element with the majority element to check if they are equal\n    if x == majority:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # count the occurrences of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # check if the count is greater than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in it.\n    A set bit is a binary digit with a value of 1. For example, the set bits of 128 are 1 and 8, \n    and the set bits of 5 are 1 and 0.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1  # count the number of set bits\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n    # loop through each character in the input string\n    for char in str:\n        # if the index of the character is odd, add it to the result string\n        if (ord(char) - ord('a') + 1) % 2!= 0:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n\n    # initialize an empty string to store the output\n    output = ''\n\n    # loop through each character in the input string\n    for char in str:\n        # check if the index value of the current character is odd\n        if (ord(char) - ord('a') + 1) % 2 == 1:\n            # if the current character is odd, append it to the output string\n            output += char\n\n    # return the output string\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Remove the odd index values from a given string.\n\n    Args:\n        string (str): The string from which we want to remove the odd index values.\n\n    Returns:\n        str: The string with odd index values removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string with only even index values\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = [str[i] for i in range(len(str)) if i % 2!= 0]\n    return ''.join(odd_index_values)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        print(\"Minimum number is:\", a) \n    elif b < a and b < c: \n        print(\"Minimum number is:\", b) \n    else: \n        print(\"Minimum number is:\", c) "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # check if a is minimum\n    if a < b and a < c:\n        return a\n    # check if b is minimum\n    elif b < a and b < c:\n        return b\n    # check if c is minimum\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # check if a is smaller than b and c\n    if a < b and a < c:\n        return a\n    # check if b is smaller than a and c\n    elif b < a and b < c:\n        return b\n    # otherwise, c is smaller than a and b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Initialize a variable to store the count of unset bits in the given range\n    unset_bits = 0\n\n    # Check if the lower bound is greater than or equal to the upper bound\n    if l >= r:\n        return False\n\n    # Traverse through the given range and calculate the count of unset bits\n    while l <= r:\n        # Calculate the least significant unset bit in the current range\n        unset_bit = n - (1 << l)\n\n        # Update the count of unset bits in the current range\n        unset_bits += unset_bit\n\n        # Update the upper bound of the range\n        l += 1\n\n    # Return True if all the bits are unset in the given range, else return False\n    return unset_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n from binary to decimal\n    n = int(n, 2)\n\n    # Check if all bits are set in the given range\n    if (n & ((1 << l) - 1)) == ((1 << l) - 1):\n        if (n & ((1 << (r + 1)) - 1)) == ((1 << r) - 1):\n            return True\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the sum of unset bits as 0\n    unset_bits_sum = 0\n\n    # Iterate over the range of bits from left to right\n    for i in range(l, r + 1):\n        # Get the value of the bit\n        bit_value = n & (1 << i)\n\n        # If the bit is 1, add the value to the sum of unset bits\n        if bit_value == (1 << i):\n            unset_bits_sum += 1\n\n        # If the sum of unset bits becomes greater than the number of bits in the number, return False\n        if unset_bits_sum > (r - l + 1):\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize all the bits in the given range to 1\n    for i in range(l, r+1):\n        n |= 1 << i\n    \n    # Check if all bits are unset in the given range\n    if n == (1 << r) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments - a number n, a lower bound l and an upper bound r.\n    It returns True if all the bits in the range [l, r] are set and False otherwise.\n    '''\n\n    # Initialize a variable to store the number of set bits in the range\n    count = 0\n\n    # Iterate through the bits of the number n\n    for i in range(32):\n        # Check if the current bit is set or not\n        if n & (1 << i):\n            # If the current bit is set, increment the count variable\n            count += 1\n        # If the current bit is not set and the range is within the given range, return False\n        if count >= (r - l + 1) and l <= r:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to a binary number\n    num = bin(n)[2:]\n    # Initialize a list to store the positions of unset bits\n    unset_bits = []\n\n    # Loop through all the bits in the binary number\n    for i in range(len(num)):\n        # If the bit is set, append its position to the unset_bits list\n        if int(num[i]) == 1:\n            unset_bits.append(i)\n\n    # Check if all the unset bits are between the given range\n    if all(l <= i <= r for i in unset_bits):\n        return \"All bits are set in the given range\"\n    else:\n        return \"Some bits are not set in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if the range is valid\n    if l > r or l < 0 or r >= n:\n        return \"Invalid range\"\n\n    # Initialize the count of unset bits\n    unset_bits = 0\n\n    # Iterate through all the bits and check if they are unset\n    for i in range(l, r+1):\n        # Check if the bit is set\n        if n & (1 << i):\n            unset_bits |= (1 << i)\n\n    # Check if all the bits are unset\n    if unset_bits == 0:\n        return \"All the bits are unset in the given range\"\n    else:\n        return \"Not all the bits are unset in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if n < l or n > r:\n        return False\n\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        # Check if all bits in the current integer are set to 1\n        if bin(i)[2:].zfill(n)!= '0'*n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Calculate the range of bits that needs to be checked\n    max_bits = r - l + 1\n    \n    # Check if all the bits are set or not\n    if n == 0:\n        return True\n    elif n % 2 == 0 and (n // 2) == l and (n // 2) == r:\n        return all_Bits_Set_In_The_Given_Range(n // 2, l, r)\n    elif max_bits <= 1:\n        return False\n    else:\n        # Check if all the bits are set or not in the middle of the range\n        middle_bits = n // 2\n        middle_set_bits = middle_bits - l + 1\n        if all_Bits_Set_In_The_Given_Range(middle_bits, l, r):\n            return False\n        else:\n            # Check if all the bits are set or not in the left half of the range\n            left_half_bits = (n // 2) + 1\n            left_set_bits = n - left_half_bits\n            if all_Bits_Set_In_The_Given_Range(left_half_bits, l, r):\n                return False\n            else:\n                # Check if all the bits are set or not in the right half of the range\n                right_half_bits = n - (n // 2)\n                right_set_bits = r - right_half_bits + 1\n                if all_Bits_Set_In_The_Given_Range(right_half_bits, l, r):\n                    return False\n                else:\n                    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to count positive and negative elements\n    positive_count = 0\n    negative_count = 0\n\n    # Initialize variables to store indices of positive and negative elements\n    positive_indices = []\n    negative_indices = []\n\n    # Iterate through the array and count the number of positive and negative elements\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_count += 1\n            negative_indices.append(i)\n        else:\n            positive_count += 1\n            positive_indices.append(i)\n\n    # If n is greater than the total number of positive elements, return the original array\n    if n > positive_count:\n        return arr\n\n    # Initialize variables to store indices of negative elements to be placed after the first n positive elements\n    negative_indices_to_be_placed = []\n\n    # Iterate through the positive indices and select the first n indices to be placed after the negative indices\n    for i in range(n):\n        if len(negative_indices_to_be_placed) < n:\n            negative_indices_to_be_placed.append(negative_indices.pop(0))\n        else:\n            break\n\n    # Initialize variables to store the final array\n    final_array = []\n\n    # Iterate through the array and append the elements to the final array\n    for i in range(len(arr)):\n        if i < n:\n            final_array.append(arr[i])\n        else:\n            final_array.append(arr[negative_indices_to_be_placed.pop(0)])\n\n    return final_array"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\n    Args:\n        arr (list): The input array of integers to be re-arranged.\n        n (int): The number of elements to be re-arranged.\n\n    Returns:\n        list: The re-arranged array with the first n elements sorted in the specified order.\n    \"\"\"\n    # Initialize two pointers, one for positive and one for negative elements\n    pos_start = 0\n    neg_start = 0\n\n    # Iterate through the array and swap elements based on their signs\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_start] = arr[neg_start], arr[i]\n            neg_start += 1\n        else:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            pos_start += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # First, remove the negative elements from the array\n    neg_arr = [x for x in arr if x < 0]\n    \n    # Sort the negative elements in reverse order\n    neg_arr.sort(reverse=True)\n    \n    # Then, add the negative elements to the beginning of the array\n    arr[:n] = neg_arr\n    \n    # Finally, sort the remaining elements in the array in non-decreasing order\n    arr[n:].sort()\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to store negative and positive elements\n    negative_list = []\n    positive_list = []\n\n    # Iterate over the array and add elements to the appropriate list\n    for num in arr:\n        if num < 0:\n            negative_list.append(num)\n        else:\n            positive_list.append(num)\n\n    # Concatenate the negative and positive lists to get the final re-arranged array\n    re_arr = negative_list + positive_list\n\n    # Shuffle the array to get a random permutation\n    import random\n    random.shuffle(re_arr)\n\n    # Return the re-arranged array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Convert the array to a set to remove duplicates and sort the elements\n    arr = sorted(set(arr))\n\n    # Initialize two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # Iterate through the sorted array\n    for num in arr:\n        # If the number is negative, append it to the negative list\n        if num < 0:\n            negative.append(num)\n        # Otherwise, append it to the positive list\n        else:\n            positive.append(num)\n\n    # Re-arrange the negative list by shifting all the negative elements to the beginning of the list\n    negative = negative[::-1] + negative\n\n    # Merge the positive and negative lists into a single list\n    arr = negative + positive\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to store the positive and negative elements of the array\n    positive_list = []\n    negative_list = []\n    # Iterate through the array and add each element to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            negative_list.append(arr[i])\n        else:\n            positive_list.append(arr[i])\n    # Combine the two lists into a single list and sort it in descending order of absolute values\n    sorted_list = sorted(negative_list + positive_list, reverse=True, key=abs)\n    # Rearrange the list to preserve the relative order of negative and positive elements\n    new_list = []\n    for i in range(n):\n        if i < n//2:\n            new_list.append(negative_list[i])\n            new_list.append(positive_list[i])\n        else:\n            new_list.append(positive_list[i])\n            new_list.append(negative_list[i])\n    # Replace the original list with the new list\n    arr[:n] = new_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Define a function to swap two elements in an array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize the index variables for negative and positive elements\n    neg_start = 0\n    pos_start = 0\n\n    # Traverse through the array\n    for i in range(n):\n        if arr[i] < 0:\n            # Swap the current element with the element at the negative start index\n            swap(arr, neg_start, i)\n            # Increment the negative start index\n            neg_start += 1\n        else:\n            # Swap the current element with the element at the positive start index\n            swap(arr, pos_start, i)\n            # Increment the positive start index\n            pos_start += 1\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize three empty lists to store negative elements, positive elements, and the rest of the array\n    neg_list = []\n    pos_list = []\n    rest_list = []\n    \n    # Iterate over the given array and add elements to the appropriate lists based on their sign\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        elif num > 0:\n            pos_list.append(num)\n        else:\n            rest_list.append(num)\n            \n    # Concatenate the negative and positive lists and the rest of the array\n    combined_list = neg_list + pos_list + rest_list\n    \n    # Shuffle the combined list using the Fisher-Yates shuffle algorithm\n    for i in range(len(combined_list)):\n        j = i + randrange(len(combined_list) - i)\n        combined_list[i], combined_list[j] = combined_list[j], combined_list[i]\n    \n    # Return the first n elements of the shuffled list\n    return combined_list[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # iterate through the array and add positive and negative elements to the appropriate lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    # sort the negative elements in ascending order\n    negative.sort()\n\n    # concatenate the sorted negative elements and the positive elements\n    arr = negative + positive\n\n    # return the re-arranged array\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\",1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a specified character and return the modified string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str1 = str1[:i]+char+str1[i+1:]\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if i!='' else str1[i] for i in range(len(str1))])"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap,num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [num for num in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(lst):\n        return lst\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, -num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Initialize an empty heap of size n\n    heap = []\n    \n    # Insert the first n elements of the list into the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # Iterate through the remaining elements of the list, and push them into the heap if they are larger than the largest element in the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    # Extract the n largest elements from the heap and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    \n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    \n    # Add the remaining items to the heap\n    for i in range(n,len(list1)):\n        heapq.heappush(heap,list1[i])\n    \n    # Get the largest n items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a min-heap (priority queue)\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n\n    # Extract the n largest items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1.pop())\n    while len(heap) < len(list1):\n        heapq.heappush(heap,list1.pop())\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Formula to calculate the lateral surface area of a cylinder\n    lateral_surface_area = 2 * 3.14159265359 * r * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2 * r * h\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14159 * r * r  # formula for lateral surface area of a cylinder\n    total_area = 2 * 3.14159 * r * h  # formula for total surface area of a cylinder\n    return lateral_area - total_area  # find the difference between the two surface areas"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    lateral_surface = 2 * 3.14159 * r * r * h\n    \n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return 2*3.14159*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * r * (r + h)\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    # Traverse through the bits of the given number\n    while n > 0:\n        # If the rightmost bit of the number is even, set the corresponding bit in the even_bits variable\n        if n & 1 == 0:\n            even_bits |= 1 << (n & 15)\n        # Shift the number to the right by 1 bit\n        n >>= 1\n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # iterate over all bits in the number\n    for i in range(32):\n        # check if the i-th bit is even\n        if n & (1 << i):\n            # set the i-th bit of the result\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to hold the even bits set\n    even_bits = 0\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set its corresponding bit in the even_bits variable\n        if int(bit) == 0:\n            even_bits = even_bits + (2**len(bin(n)[2:]))\n    # Return the number with all even bits set\n    return n | even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit in the number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit in the result to 1\n            result |= 1 << i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    \n    if n % 2 == 0:\n        return n\n    \n    if n % 4 == 0:\n        return n\n    \n    if n % 8 == 0:\n        return n\n    \n    if n % 16 == 0:\n        return n\n    \n    if n % 32 == 0:\n        return n\n    \n    return n + 1"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty string to store the number with even bits set to 1\n    even_n = ''\n    # loop through each bit of the number\n    for i in range(len(bin(n)[2:])):\n        # if the current bit is even\n        if i % 2 == 0:\n            # append the bit to the even_n string with a value of 1\n            even_n += '1'\n        # if the current bit is odd\n        else:\n            # append the bit to the even_n string with a value of 0\n            even_n += '0'\n    # convert the even_n string back to an integer and return it\n    return int(even_n, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the input number\n    even_bits = 0\n    \n    # Iterate through each bit of the input number\n    for i in range(len(bin(n)[2:])):\n        # Check if the current bit is even\n        if i % 2 == 0:\n            # If it is, set the corresponding bit in the even_bits variable to 1\n            even_bits |= 1 << i\n    \n    # Return the even_bits variable as the result\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    return n | (n & -n)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set its corresponding bit in the result to 1\n        if bit == '0':\n            result |= 1 << (len(bin(n)[2:]) - 1 - bin(n)[2:].index(bit))\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the operation\n    result = 0\n    \n    # Iterate over each bit in the input number, starting from the least significant bit\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # Set the corresponding bit in the result to 1\n            result = result | int(bit)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Convert the list to a set to get unique tuples\n    unique_tuples = set(test_list)\n    \n    # Use Counter class from collections to count the occurrences of each tuple\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function from collections to count the occurrences of each tuple\n    counted_tuples = Counter(test_list)\n\n    # Create a dictionary to store the occurrences\n    result = {}\n\n    # Iterate through the counted tuples and add them to the result dictionary\n    for item, count in counted_tuples.items():\n        result[item] = count\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    counts = {}\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # increment the count by 1\n            counts[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Using Counter() from collections module to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    count_dict = {}\n\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    return count_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible starting position for the substring\n        for j in range(i, len(str)+1):\n            # Add 1 to the count variable for each non-empty substring found\n            if j!= i and str[i:j]!= '':\n                count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    # Initialize a counter variable to keep track of the number of substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize a flag variable to keep track of whether the substring is empty or not\n        is_empty = True\n        \n        # Loop through each character from the current index to the end of the string\n        for j in range(i, len(str)):\n            # If a non-empty character is encountered, set the flag to False and break out of the inner loop\n            if str[j]!='':\n                is_empty = False\n                break\n        \n        # If the substring is not empty, increment the counter\n        if not is_empty:\n            count += 1\n    \n    # Return the total number of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str:\n        return 0\n\n    # initialize counters for non-empty and empty substrings\n    non_empty_count = 1\n    empty_count = 0\n\n    # iterate over the characters of the string\n    for i in range(len(str)):\n        # if the current character is not a space, increment the non-empty count\n        if str[i]!='':\n            non_empty_count += 1\n        # if the current character is a space, increment the empty count and reset the non-empty count\n        else:\n            empty_count += 1\n            non_empty_count = 1\n\n    # return the total number of non-empty substrings\n    return non_empty_count + empty_count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] and str[i:j].strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].strip()!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m):\n        for j in range(1, m // 2 + 1):\n            if i + j + 2 * j <= n:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    previous_num = 0\n    for i in range(1, m+1):\n        if i >= 2*previous_num <= m:\n            count += 1\n            previous_num = i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, m):\n        if i % 2 == 0 and i >= 2*m:\n            total_sequences += 1\n    for i in range(2, n+1):\n        total_sequences += m * (m+1) // 2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count of possible sequences\n    count = 0\n\n    # Initialize the first element of the sequence\n    sequence = [2]\n\n    # Loop through the remaining elements of the sequence\n    for i in range(n - 1):\n        # Add the first element to the sequence\n        sequence.append(sequence[i])\n\n        # Check if the sum of the current element and the previous element is less than or equal to m\n        while sequence[i] + sequence[i - 1] <= m:\n            # If it is, update the count of possible sequences\n            count += 1\n\n            # Add the previous element to the sequence\n            sequence.append(sequence[i - 1])\n\n            # Check if the sum of the current element and the previous element is less than or equal to m\n            while sequence[i] + sequence[i - 1] <= m:\n                # If it is, update the count of possible sequences\n                count += 1\n\n                # Add the previous element to the sequence\n                sequence.append(sequence[i - 1])\n\n            # Remove the previous element from the sequence\n            sequence.pop()\n\n        # Remove the current element from the sequence\n        sequence.pop()\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def helper(m, n, current_length, current_sum, total_sequences):\n        if current_length == n:\n            total_sequences += 1\n            return\n        elif current_sum > m:\n            return\n        else:\n            for i in range(current_length, n):\n                current_sum += i\n                helper(m, n, i + 1, current_sum, total_sequences)\n                current_sum -= i\n\n    total_sequences = 0\n    helper(m, n, 2, 0, total_sequences)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    total_sequences = 0\n    for i in range(2,m+1):\n        if i % 2 == 0:\n            total_sequences += i**n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    current_sequence = [1]\n    for i in range(2, n+1):\n        if current_sequence[-1] >= 2*current_sequence[-2] and current_sequence[-1] <= m:\n            current_sequence.append(current_sequence[-1] + 1)\n        else:\n            total_sequences += 1\n            current_sequence = [1]\n    total_sequences += len(current_sequence) - 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # initialize variables for number of possible sequences and current sequence\n    num_sequences = 0\n    current_sequence = []\n    \n    # loop through all possible elements\n    for i in range(1, n+1):\n        # check if element is valid\n        if i >= 2 * current_sequence[-1] and i <= m:\n            # if element is valid, add to current sequence and increment num_sequences\n            current_sequence.append(i)\n            num_sequences += 1\n        # if element is not valid, reset current sequence and start over\n        else:\n            if current_sequence:\n                current_sequence = []\n            i -= 1 # decrement i to account for adding current_sequence to current_sequence\n    \n    # return total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize a dictionary to store the number of sequences of length i for each i between 1 and n.\n    # Initialize the first key to 1, since there is only one possible sequence of length 1.\n    sequence_count = {1: 1}\n\n    # Iterate over the range from 2 to n.\n    for i in range(2, n+1):\n        # For each i, iterate over all the possible sequences of length i-1.\n        for j in range(1, i):\n            # Check if the current sequence can be extended by adding the current element to the previous sequence.\n            if j + m <= i:\n                # If it can be extended, increment the count of the number of sequences of length i.\n                sequence_count[i] += sequence_count[j]\n\n    return sequence_count[n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    prev_element = 0\n\n    # Check if the first element is greater than or equal to twice the previous element\n    if m >= 2 * prev_element:\n        total_sequences += 1\n\n    # Iterate through the rest of the elements\n    for i in range(1, n + 1):\n        # Calculate the next element\n        next_element = prev_element + 2\n\n        # Check if the next element is greater than or equal to m\n        if next_element >= m:\n            total_sequences += 1\n\n        # Update the previous element\n        prev_element = next_element\n\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1] + list1[-2]\n    del list1[-2]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    \n    # loop through the first list until the last element is reached\n    for i in range(length-1):\n        list1[i] = list2[i]\n    \n    # add the last element of the second list to the first list\n    list1[length-1] = list2[length-1]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    # Find the index of the last element of the first list\n    last_index = len(list1) - 1\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    # Find the last index of the first list\n    last_index = len(list1) - 1\n\n    # Replace the last element of the first list with the elements of the second list\n    for i in range(last_index, -1, -1):\n        list1[i] = list2[i % len(list2)]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # check if the length of the second list is greater than 0\n    if len(list2) > 0:\n        # get the last element of the first list\n        last_elem = list1[-1]\n        # create a new list by appending the last element of the second list to the first list\n        new_list = list1[:-1] + list2\n        # replace the last element of the first list with the new list\n        list1[-1] = new_list\n    else:\n        # if the second list is empty, do nothing\n        pass"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the lists\n    len1 = len(list1)\n    len2 = len(list2)\n    \n    # Check if the second list is longer than the first list\n    if len2 > len1:\n        # Add all elements of the second list to the first list\n        list1 += list2\n    else:\n        # Get the index of the last element of the first list\n        last_index = len1 - 1\n        \n        # Replace the last element of the first list with the elements of the second list\n        list1[last_index] = list2\n        \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    n = len(list1)\n    # Set the length of the second list to n\n    list2.extend([0] * (n - 1))\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(string):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in string:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if is_Perfect_Square(N):\n            return N\n\ndef is_Perfect_Square(n):\n    '''\n    Checks if a given number is a perfect square.\n    '''\n    return int(math.sqrt(n)) ** 2 == n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # Convert the square root to an integer\n    sqrt_N = int(sqrt_N)\n    \n    # Add 1 to the square root integer and convert back to float\n    next_sqrt_N = (sqrt_N + 1) ** 2\n    \n    # Return the next perfect square greater than N\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    \n    while True:\n        next_sq = 4 * sqrt_N**2\n        if next_sq > N:\n            return next_sq\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next\n    perfect square number greater than N.\n    \"\"\"\n    # check if N is not a perfect square\n    if N % math.sqrt(N)!= 0:\n        return N\n\n    # find the square root of N and get the integer part\n    sqrt_N = math.sqrt(N)\n    sqrt_N_int = int(sqrt_N)\n\n    # check if the square root of N is odd\n    if sqrt_N_int % 2!= 0:\n        # if it is odd, return the square root of N + 1\n        return sqrt_N + 1\n\n    # if it is even, return the square root of N - 1\n    else:\n        return sqrt_N - 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return math.sqrt(N) + 1\n    \n    # Calculate the number of digits in the given number\n    count = 0\n    num = N\n    while num > 0:\n        count += 1\n        num //= 10\n    \n    # Check if the given number is a perfect cube\n    if count % 2 == 0:\n        next_num = N + 1\n    else:\n        next_num = N + 2\n    \n    # Check if the next perfect cube is greater than the given number\n    while next_num <= N:\n        if next_num ** 3 <= N:\n            return next_num\n        next_num += 1\n        \n    # If the loop completes without finding a valid next perfect cube, the number is already the next perfect square\n    return math.sqrt(N) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    x = math.sqrt(N)\n    if x == int(x):\n        return int(x) + 1\n    else:\n        return int(x) + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Base case: if N is already a perfect square, return N\n    if N == int(math.sqrt(N)):\n        return N\n\n    # Find the previous perfect square greater than N\n    prev_square = int(math.ceil(math.sqrt(N)))\n\n    # Find the next perfect square greater than the previous one\n    while (prev_square + 1) ** 2 <= N:\n        prev_square += 1\n\n    return prev_square ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # Function to find the square root of a number\n    def square_root(num):\n        if num % 2 == 0:\n            return (num + 1) // 2\n        else:\n            return (num + math.floor(num / 2)) // 2\n\n    # Initialize the left and right bounds of the search space\n    left, right = 0, N\n\n    # Find the perfect square closest to the target number\n    while left <= right:\n        mid = (left + right) // 2\n        if is_perfect_square(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Calculate the next perfect square\n    next_perfect_square = square_root(N) * square_root(N)\n\n    # Check if the next perfect square is greater than the target number\n    if next_perfect_square > N:\n        return next_perfect_square\n    else:\n        # Calculate the next integer greater than the square root of the target number\n        next_integer = (N + math.floor(math.sqrt(N))) // 2\n\n        # If the next perfect square is not greater than the target number, check if the next integer is a perfect square\n        if is_perfect_square(next_integer):\n            return next_integer\n        else:\n            # If the next integer is not a perfect square, calculate the next perfect square\n            return next_Perfect_Square(next_integer)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N % 2 == 0:\n        N += 1\n    else:\n        N += 2\n\n    while True:\n        if is_Perfect_Square(N):\n            return N\n        N += 1\n\ndef is_Perfect_Square(num):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    return math.isqrt(num) ** 2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function returns the next perfect square greater than a given number.\n    '''\n    # convert N to a float to calculate square root\n    N = float(N)\n    # calculate square root of N\n    sqrt_N = math.sqrt(N)\n    # multiply sqrt_N by 2 to get the upper bound of the next perfect square\n    upper_bound = 2 * sqrt_N\n    # loop through all the integers between 1 and the upper_bound (inclusive)\n    for i in range(1, upper_bound+1):\n        # calculate the square of the integer i\n        square_i = i * i\n        # if the square of i is greater than N, we have found the next perfect square\n        if square_i > N:\n            return i\n    # if we have not found a next perfect square, return N\n    return N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # initialize variables\n    bitonic_sum = 0\n    prev_sum = 0\n    \n    # iterate through array\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            # decreasing sequence, update sum and max_sum\n            bitonic_sum += arr[i]\n            if bitonic_sum > prev_sum:\n                prev_sum = bitonic_sum\n        elif arr[i] > arr[i-1]:\n            # increasing sequence, update sum and max_sum\n            bitonic_sum += arr[i]\n            if bitonic_sum > prev_sum:\n                prev_sum = bitonic_sum\n    \n    return prev_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for i in range(n)]\n\n    # Initialize the first row of the DP table\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            dp[i][i] = arr[i]\n        else:\n            dp[i][i] = arr[i] + dp[i-1][i-1]\n\n    # Fill the DP table in bottom-up manner\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if arr[j] > arr[j-1] and arr[j] > arr[j-2]:\n                dp[i][j] = arr[j] + dp[i][j-1] + dp[i][j-2]\n            elif arr[j] < arr[j-1] and arr[j] < arr[j-2]:\n                dp[i][j] = arr[j] + dp[i][j-1] + dp[i][j-2]\n            else:\n                dp[i][j] = dp[i][j-1]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            if j < i:\n                if arr[j] > arr[i]:\n                    max_sum = max(max_sum, dp[i][j])\n                else:\n                    max_sum = max(max_sum, dp[i][j])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Find the maximum sum of a decreasing subsequence\n    max_decreasing = max(arr)\n    # Find the maximum sum of a increasing subsequence\n    max_increasing = max(arr[::-1])\n    # Return the maximum of the two sums\n    return max(max_decreasing, max_increasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize variables for maximum subsequence sum and current subsequence sum\n    max_sum_so_far = 0\n    curr_sum = 0\n    # Traverse through the array and calculate the maximum sum of a bitonic subsequence\n    for i in range(n):\n        if i % 2 == 0:\n            # If the current element is increasing, add it to the current subsequence sum\n            curr_sum += arr[i]\n        else:\n            # If the current element is decreasing, subtract the previous element from the current subsequence sum\n            curr_sum -= arr[i-1]\n            # If the current subsequence sum is greater than the maximum subsequence sum so far, update the maximum subsequence sum\n            if curr_sum > max_sum_so_far:\n                max_sum_so_far = curr_sum\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Initialize variables\n    left, right = 0, n-1\n    bitonic = [True] * n\n    max_sum = float('-inf')\n    max_len = 0\n\n    # Traverse the array from both sides\n    while left < right:\n        if arr[left] <= arr[right]:\n            bitonic[left] = True\n            bitonic[right] = True\n            if arr[left] >= arr[right]:\n                max_sum = max(max_sum, arr[left] + arr[right])\n                max_len = max(max_len, 2)\n                left += 1\n                right -= 1\n            else:\n                max_sum = max(max_sum, arr[left])\n                max_len = max(max_len, 1)\n                left += 1\n        else:\n            bitonic[left] = True\n            bitonic[right] = True\n            if arr[left] <= arr[right]:\n                max_sum = max(max_sum, arr[left] + arr[right])\n                max_len = max(max_len, 2)\n                left += 1\n                right -= 1\n            else:\n                max_sum = max(max_sum, arr[right])\n                max_len = max(max_len, 1)\n                left += 1\n                right -= 1\n\n    # Traverse the array from both sides\n    while left < right:\n        if arr[left] <= arr[right]:\n            bitonic[left] = True\n            bitonic[right] = True\n            if arr[left] >= arr[right]:\n                max_sum = max(max_sum, arr[left] + arr[right])\n                max_len = max(max_len, 2)\n                left += 1\n                right -= 1\n            else:\n                max_sum = max(max_sum, arr[left])\n                max_len = max(max_len, 1)\n                left += 1\n        else:\n            bitonic[left] = True\n            bitonic[right] = True\n            if arr[left] <= arr[right]:\n                max_sum = max(max_sum, arr[left] + arr[right])\n                max_len = max(max_len, 2)\n                left += 1\n                right -= 1\n            else:\n                max_sum = max(max_sum, arr[right])\n                max_len = max(max_len, 1)\n                left += 1\n                right -= 1\n\n    return max_sum, max_len\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Initialize max_ending_here and max_so_far\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the current element is greater than the current max_ending_here, update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n\n        # Else if the current element is less than or equal to the current max_ending_here, update max_ending_here\n        elif arr[i] <= max_ending_here:\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n\n        # If the current element is greater than the current max_so_far, update max_so_far\n        if max_ending_here < max_so_far:\n            max_so_far = max_ending_here\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Initialize variables to keep track of the maximum sum of increasing and decreasing subsequences\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n\n    # Initialize variables to keep track of the current sum of increasing and decreasing subsequences\n    current_sum_increasing = 0\n    current_sum_decreasing = 0\n\n    # Loop through the array and calculate the current sum of increasing and decreasing subsequences\n    for i in range(n):\n        current_sum_increasing += arr[i]\n        current_sum_decreasing -= arr[i]\n\n        # Update the maximum sum of increasing and decreasing subsequences if the current subsequence is a new maximum\n        if i > 0 and current_sum_increasing > max_sum_increasing:\n            max_sum_increasing = current_sum_increasing\n        if i > 0 and current_sum_decreasing > max_sum_decreasing:\n            max_sum_decreasing = current_sum_decreasing\n\n    # Return the maximum sum of increasing and decreasing subsequences\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return float('-inf')\n\n    left_max = [float('-inf')] * len(arr)\n    right_max = [float('-inf')] * len(arr)\n\n    for i in range(1, len(arr)):\n        left_max[i] = max(left_max[i - 1], arr[i])\n        right_max[i - 1] = max(right_max[i], arr[i])\n\n    return max(left_max[i] + right_max[i] for i in range(1, len(arr) - 1))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = n-1\n        while left < right:\n            mid = (left+right)//2\n            if arr[mid-1] < arr[mid]:\n                left = mid\n            else:\n                right = mid\n        return arr[left] + arr[right]\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n\n    # Initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    # Iterate through the array and calculate the current sum\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check if the number is negative\n    if number < 0:\n        print(\"Error: the number must be a positive integer.\")\n        return\n    \n    # check if the number is 1\n    if number == 1:\n        return 1\n    \n    # initialize a variable to keep track of the number of iterations\n    count = 0\n    \n    # initialize a variable to keep track of the current approximation\n    x = number / 2\n    \n    # loop until the difference between x and the square root is less than 0.001\n    while abs(x - (number / x)) > 0.001:\n        # update the count\n        count += 1\n        \n        # compute the next approximation\n        x = (number / x) + (number / (x * x))\n        \n        # print the current iteration\n        print(\"Iteration:\", count)\n        print(\"Current approximation:\", x)\n        \n    # return the final approximation\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    def babylonian_helper(x, n, sqrt_result):\n        if n == 1:\n            return sqrt_result\n        else:\n            return babylonian_helper(x + (x**2 - number) / (2*x), n-1, sqrt_result)\n\n    sqrt_result = babylonian_helper(0, 10, 0)\n    return sqrt_result"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    i = 1\n    while True:\n        x = i ** 2\n        y = number / x\n        if abs(y - number) < 0.0001:\n            return x\n        i += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Use the babylonian method to compute the square root\n    x = number\n    y = 0.5 * x\n    while abs(y**2 - x) > 0.000001:\n        x = y\n        y = 0.5 * (x + number / x)\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    \n    # Initial guess\n    guess = number / 2\n\n    # Keep track of how many iterations we've done\n    count = 0\n\n    while True:\n        # Compute the square of the guess\n        guess_square = guess * guess\n\n        # Check if the guess is within 1% of the square root of the number\n        if abs(guess_square - number) / number < 0.01:\n            return guess\n\n        # Update the guess\n        if guess_square < number:\n            guess -= (guess_square - number) / (2 * guess)\n        else:\n            guess += (guess_square - number) / (2 * guess)\n\n        # Limit the number of iterations\n        count += 1\n        if count > 100:\n            raise ValueError(\"Babylonian method did not converge in 100 iterations\")\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the babylonian method.\n    \n    Args:\n    number (float): The number for which to compute the square root.\n    \n    Returns:\n    float: The square root of the input number.\n    \"\"\"\n    \n    # Initial guess for the square root\n    guess = number / 2\n    \n    # Keep track of the number of iterations\n    i = 0\n    \n    while True:\n        # Update the guess\n        next_guess = (guess + number/guess) / 2\n        \n        # Check if we have converged\n        if abs(next_guess - guess) < 0.0001:\n            break\n        \n        # Update the guess\n        guess = next_guess\n        \n        # Increment the iteration count\n        i += 1\n    \n    # Return the result\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number\n    n = 1\n\n    while abs(x - y) > 0.0000001:\n        x = (x + y / x) / 2\n        y = number / x\n        n += 1\n\n    return n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-10:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 0.00001 # set a tolerance of 0.00001\n    guess = number/2 # start with half the number\n    i = 0\n    while abs(guess**2 - number) > tolerance: # continue as long as the difference is greater than the tolerance\n        guess = (guess + number/guess) / 2 # estimate the next guess by averaging the old guess and the number divided by the guess\n        i += 1 # increment the iteration counter\n    return guess # return the final guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 0\n    last_guess = 0\n    current_guess = number / 2\n    epsilon = 0.00001\n\n    # iterate until we find a square root\n    while abs(current_guess**2 - number) > epsilon:\n        i += 1\n        last_guess = current_guess\n        current_guess = number / current_guess\n\n    # return the square root\n    return current_guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Creating a list of all the possible subsequences of the string\n    subsequences = [[(i, j) for j in range(i, len(str))] for i in range(len(str))]\n    # Finding the length of the longest palindromic subsequence\n    max_length = 0\n    for subsequence in subsequences:\n        for pair in subsequence:\n            # Getting the characters of the subsequence and converting them to strings\n            char1, char2 = str(pair[0]), str(pair[1])\n            # Checking if the characters are equal and if the substring is a palindrome\n            if char1 == char2 and char1 == char1[::-1]:\n                # Updating the maximum length if the current substring is longer\n                if len(char1) > max_length:\n                    max_length = len(char1)\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store the lengths of longest palindromic subsequences ending at each index\n    lps_table = [[0] * n for _ in range(n)]\n    max_len = 0\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        lps_table[i][i] = 1\n        if s[i] == s[i + 1]:\n            max_len = 2\n        else:\n            max_len = 1\n    # Fill in the remaining rows and columns of the table\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n                max_len = max(max_len, lps_table[i][j])\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of longest palindrome subsequence ending at each index\n    lps_table = [[0] * n for _ in range(n)]\n    # initialize the first row and column with 1\n    for i in range(1, n):\n        lps_table[i][i] = 1\n    # fill the rest of the table using dynamic programming\n    for i in range(2, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                lps_table[i][j] = lps_table[j][i - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i - 1][j], lps_table[j][i])\n    return lps_table[n - 1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store length of LPS for substrings ending at each index \n    lps_table = [[0 for j in range(n)] for i in range(n)] \n  \n    # Initialize LPS values for all indexes \n    for i in range(n): \n        lps_table[i][i] = 1 \n  \n    # Fill LPS values in table \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1 \n            # If the characters at i and j are same, extend LPS \n            if str[i] == str[j]: \n                lps_table[i][j] = lps_table[i+1][j-1] + 2 \n  \n    # Return length of LPS substring \n    return lps_table[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(s) < 2:\n        return len(s)\n    n = len(s)\n    # create a 2D table to store the length of palindromes\n    table = [[0] * n for _ in range(n)]\n    # initialize the first row and column to 0\n    table[0][0] = 0\n    # iterate over the string s\n    for i in range(1, n):\n        # check if the current character is a palindrome\n        if s[i] == s[i-1]:\n            # if it is, set the length of the longest palindromic subsequence to 1 plus the length of the previous subsequence\n            table[i][i] = table[i-1][i-1] + 1\n        else:\n            # if it's not, set the length of the longest palindromic subsequence to the maximum of the length of the current subsequence and the length of the previous subsequence\n            table[i][i] = max(table[i-1][j] for j in range(i))\n        # if the length of the longest palindromic subsequence is greater than 1, update the length of the longest palindromic subsequence till the current position\n        while i - table[i][i] >= 0 and i + table[i][i] < n and s[i - table[i][i]] == s[i + table[i][i]]:\n            table[i][i] += 1\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = 0\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    # Initialize a table to store the length of the longest palindromic subsequence ending at each index\n    table = [1] * len(str)\n\n    # Iterate through the string starting from the second character\n    for i in range(1, len(str)):\n        # If the current character is equal to the previous character, the length of the palindromic subsequence ending at the current index will be the length of the palindromic subsequence ending at the previous index plus one\n        if str[i] == str[i - 1]:\n            table[i] = table[i - 1] + 1\n\n        # If the current character is not equal to the previous character, the length of the palindromic subsequence ending at the current index will be the maximum of the length of the palindromic subsequence ending at the previous index plus one and the length of the palindromic subsequence ending at the index before the previous index\n        else:\n            table[i] = max(table[i - 1], table[i - 2])\n\n    # Return the maximum length of the palindromic subsequence\n    return max(table)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    L = [0] * n\n    L[0] = 0\n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            L[i] = L[i-1] + 2\n        else:\n            L[i] = max(L[i-1], L[i-L[i-1]])\n\n    return L[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # create a list to store the length of longest palindromic subsequence for each character of the string\n    lps_list = [0] * len(str)\n\n    # base case: if the length of the string is 1, the length of the longest palindromic subsequence is 1\n    if len(str) == 1:\n        lps_list[0] = 1\n        return lps_list[0]\n\n    # recursive case: if the length of the string is greater than 1, consider the characters from i to j\n    for i in range(1, len(str)):\n\n        # consider the characters from i to i+1\n        if str[i] == str[i-1]:\n            lps_list[i] = 2 + lps_list[i-2]\n\n        # consider the characters from i to j\n        elif lps_list[i-1] > 0:\n            lps_list[i] = lps_list[i-1]\n\n    return lps_list[len(str)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [1] * n\n        max_length = 1\n        for i in range(1, n):\n            if s[i] == s[i-1]:\n                dp[i] = dp[i-1] + 2\n                if dp[i] > max_length:\n                    max_length = dp[i]\n            else:\n                dp[i] = 1\n                if dp[i] > max_length:\n                    max_length = dp[i]\n        return max_length\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n) + (1/n) +... + (1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2) + ((1/n)**3) +... + ((1/n)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/2 + (1/(1-2/n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (2 * n - 1) / (2 * n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1 / harmonic_sum(n-1) + 1 / harmonic_sum(n-2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n/(n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two sets to store the elements of both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays using a hash table.\n    hash_table = {}\n    for num in array_nums1:\n        if num in hash_table:\n            hash_table[num] += 1\n        else:\n            hash_table[num] = 1\n    \n    # Find the intersection of the two arrays using a set.\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the intersection to a list and return it.\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert both arrays to sets\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of elements in both arrays\n    intersection = {}\n\n    # Iterate through the first array and count the number of occurrences of each element\n    for num in array_nums1:\n        if num in intersection:\n            intersection[num] += 1\n        else:\n            intersection[num] = 1\n\n    # Iterate through the second array and check if the element is present in the first array\n    for num in array_nums2:\n        if num in intersection and intersection[num] > 0:\n            intersection[num] -= 1\n            # If the element is present and has at least one occurrence in the second array, remove it from the first array\n            if intersection[num] == 0:\n                del intersection[num]\n\n    # Return the elements in the intersection dictionary as a list\n    return [k for k, v in intersection.items() if v > 0]"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of the elements of array_nums2\n    set_nums2 = set(array_nums2)\n    # initialize an empty list to store the intersection\n    intersection = []\n    # loop through each element of array_nums1\n    for num in array_nums1:\n        # if the element is in set_nums2, add it to the intersection list\n        if num in set_nums2:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the common elements of both arrays\n    common_elements = set()\n\n    # Loop through each element in the first array and check if it exists in the second array\n    for num in array_nums1:\n        if num in array_nums2:\n            # If it exists, add it to the common_elements set\n            common_elements.add(num)\n\n    # Convert the common_elements set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store unique values from both arrays\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        if num not in dict1:\n            dict1[num] = True\n    for num in array_nums2:\n        if num not in dict2:\n            dict2[num] = True\n    # Find the intersection of the two dictionaries\n    intersection = set(dict1.keys()) & set(dict2.keys())\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the count of each element in array_nums1\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a set to store the elements in array_nums2 that are present in array_nums1\n    common_nums = set(num for num in array_nums2 if num in count_dict and count_dict[num] > 0)\n    \n    return list(common_nums)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through array_nums2\n    for num in array_nums2:\n        # Check if num is in set1 and not already in intersection\n        if num in set1 and num not in intersection:\n            # Add num to intersection\n            intersection.append(num)\n\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element as input and returns the count of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = [element]\n    result.extend(list)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(i, element)\n        new_list.insert(i+1, list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        complex_num = complex(num[0], num[1])\n        polar_num = cmath.polar(complex_num)\n        print(f\"({polar_num[0]:.3f},{polar_num[1]:.3f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        complex_number = complex(num)\n        polar_number = cmath.polar(complex_number)\n        print(polar_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n    numbers: A list of complex numbers to be converted.\n\n    Returns:\n    A list of tuples, where each tuple contains the polar coordinates of a complex number.\n    \"\"\"\n    result = []\n    for num in numbers:\n        # calculate the magnitude and phase of the number\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        phase = cmath.phase(num)\n\n        # convert the magnitude and phase to polar coordinates\n        polar = (magnitude, phase)\n\n        # append the polar coordinates to the result list\n        result.append(polar)\n\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert complex numbers to tuple of tuples\n    complex_numbers = [tuple(complex(num)) for num in numbers]\n\n    # Initialize polar coordinates\n    polar_coordinates = []\n\n    # Iterate through each complex number\n    for num in complex_numbers:\n        # Calculate the magnitude and phase of the complex number\n        magnitude = abs(num)\n        phase = cmath.phase(num)\n\n        # Append polar coordinates to list\n        polar_coordinates.append((magnitude, phase))\n\n    # Return the list of polar coordinates\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num\n        angle = cmath.phase(num)\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        print(f'{num} in polar coordinates is ({angle:.2f} rad, {magnitude:.2f})')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates of the complex number\n        print(\"The polar coordinates of {} is ({}, {})\".format(num, r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # Print polar coordinates in the form \"r = (real part) + (imaginary part)i\"\n        print(f\"r = ({num.real:+.2f}) + ({num.imag:+.2f})i\")\n        print(f\"theta = {cmath.phase(num):.2f} rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        angle = cmath.phase(num)\n        r = cmath.sqrt(real**2 + imag**2)\n        print('({0:.2f}, {1:.2f})'.format(angle * 180 / cmath.pi, r))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of length n from the list l.\n    '''\n    return combinations_with_replacement(l, n)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition of n elements\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            for k in range(j+1, len(l)+1):\n                if k-j == n-1:\n                    yield tuple(sorted(l[i:j]))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # check if the length of the list is greater than the length of the combination\n    if len(l) < n:\n        return []\n\n    # create a generator object for combinations_with_replacement function\n    combinations = combinations_with_replacement(l, n)\n\n    # initialize an empty list to store the combinations\n    result = []\n\n    # iterate through the combinations\n    for combination in combinations:\n        # convert the combination to a tuple and append it to the result list\n        result.append(tuple(combination))\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    result = []\n    for i in range(len(l)-n+1):\n        tup = tuple(l[i:i+n])\n        result.append(tup)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    # Initialize a boolean list to keep track of whether each number is prime or not\n    primes = [True] * (n+1)\n\n    # 0 and 1 are not prime\n    primes[0] = primes[1] = False\n\n    # Iterate through all numbers up to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            # If i is prime, mark all its multiples as not prime\n            for j in range(i**2, n+1, i):\n                primes[j] = False\n\n    # Count the number of prime numbers less than n\n    count = 0\n    for i in range(n+1):\n        if primes[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a list to store the maximum values for each tuple\n    max_tup1 = []\n    max_tup2 = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element in the first tuple is greater than the maximum element in the list for that tuple\n        if test_tup1[i] > max_tup1[i]:\n            # If the element in the first tuple is greater than the maximum element in the list, update the maximum element in the list for that tuple\n            max_tup1[i] = test_tup1[i]\n        # Check if the element in the second tuple is greater than the maximum element in the list for that tuple\n        if test_tup2[i] > max_tup2[i]:\n            # If the element in the second tuple is greater than the maximum element in the list, update the maximum element in the list for that tuple\n            max_tup2[i] = test_tup2[i]\n\n    # Return a tuple with the maximum values for each tuple\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1 if test_tup1 > test_tup2 else test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables for storing the maximum values\n    max_1 = 0\n    max_2 = 0\n\n    # loop through the tuples and find the maximum value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_1:\n            max_2 = max_1\n            max_1 = test_tup1[i]\n        elif test_tup2[i] > max_2 and test_tup2[i]!= 0:\n            max_2 = test_tup2[i]\n\n    # return the maximum value\n    return max(max_1, max_2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Find the maximum value in each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    # Find the index of the maximum value in each tuple\n    max_index1 = test_tup1.index(max_val1)\n    max_index2 = test_tup2.index(max_val2)\n    \n    # Create a new tuple that contains the maximum value in each tuple\n    new_tup = (max_val1, max_val2)\n    \n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    max_num3 = 0\n    \n    if max_num1 > max_num2:\n        if max_num1 > max_num3:\n            max_num3 = max_num1\n        else:\n            max_num3 = max_num2\n    else:\n        if max_num2 > max_num3:\n            max_num3 = max_num2\n        else:\n            max_num3 = max_num1\n            \n    return max_num3"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Calculate the sum of the two tuples\n    sum1 = sum(test_tup1)\n    sum2 = sum(test_tup2)\n\n    # Compare the sum of the two tuples\n    if sum1 >= sum2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        if test_tup1 > test_tup2:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    # Compare the elements of the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return (test_tup1[i], test_tup2[i])\n        elif test_tup1[i] > test_tup2[i]:\n            return (test_tup2[i], test_tup1[i])\n    \n    # If all elements are equal, return the first tuple\n    return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        '''\n        Helper function to check if a given number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_prime(num):\n        '''\n        Helper function to check if a given number is a newman\u2013shanks\u2013williams prime number or not.\n        '''\n        if num < 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    curr_num = 2\n    while count < n:\n        if is_newman_prime(curr_num):\n            count += 1\n        curr_num += 1\n\n    return curr_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a list of prime numbers up to 10,000\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Loop through the list of prime numbers and check if they are greater than the square root of `n`\n    for i in range(len(prime_list)):\n        if prime_list[i] > n**0.5:\n            return prime_list[i]\n\n    # If none of the prime numbers in the list are greater than the square root of `n`, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = False\n    count = 0\n    limit = 250\n\n    while count < n:\n        prime = True\n\n        for i in range(2, limit):\n            if limit % i == 0:\n                prime = False\n                break\n\n        if prime:\n            count += 1\n\n        limit += 250\n\n    return limit\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize counter and max number of primes to check\n    count = 0\n    max_primes = n * n\n\n    # Iterate through all primes up to the square root of max_primes\n    for i in range(2, int(max_primes**0.5)+1):\n        # Check if i is a prime number\n        is_prime = True\n        for j in range(2, int(max_primes**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, check if its value is in the range of primes to check\n        if is_prime and count < max_primes:\n            count += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        '''\n        Returns True if num is prime, else False.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n    \n    def sieve_of_eratosthenes(n): \n        '''\n        Returns a list of prime numbers up to n using the sieve of Eratosthenes.\n        '''\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(n**0.5) + 1): \n            if primes[i]: \n                for j in range(i*i, n + 1, i): \n                    primes[j] = False\n        return [i for i in range(n + 1) if primes[i]]\n    \n    def nth_prime(n): \n        '''\n        Returns the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        primes = sieve_of_eratosthenes(n + 1)\n        return primes[n - 1]\n    \n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    is_prime = True\n    while count < n:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n        num += 1\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_newman_prime(n, k):\n        '''\n        Check if the nth newman-shanks-williams prime is in the list of primes.\n        '''\n        if n == 1:\n            return True\n        if n == 2:\n            return True if k % 2 == 0 else False\n        if n == 3:\n            return True if k % 2 == 1 else False\n        if n % 2 == 0:\n            if k % 2 == 0:\n                return False\n            for i in range(3, int(k**0.5) + 1, 2):\n                if k % i == 0:\n                    return False\n            return True\n        else:\n            if k % 2 == 1:\n                return False\n            for i in range(3, int(k**0.5) + 1, 2):\n                if k % i == 0:\n                    return False\n            return True\n\n    def newman_shanks_williams(n):\n        '''\n        Calculate the nth newman-shanks-williams prime.\n        '''\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 5\n        if n == 4:\n            return 7\n        if n == 5:\n            return 11\n        if n == 6:\n            return 13\n        if n == 7:\n            return 17\n        if n == 8:\n            return 19\n        if n == 9:\n            return 23\n        if n == 10:\n            return 29\n        if n == 11:\n            return 31\n        if n == 12:\n            return 37\n        if n == 13:\n            return 41\n        if n == 14:\n            return 43\n        if n == 15:\n            return 47\n        if n == 16:\n            return 53\n        if n == 17:\n            return 59\n        if n == 18:\n            return 61\n        if n == 19:\n            return 67\n        if n == 20:\n            return 71\n        if n == 21:\n            return 73\n        if n == 22:\n            return 79\n        if n == 23:\n            return 83\n        if n == 24:\n            return 89\n        if n == 25:\n            return 97\n        if n == 26:\n            return 101\n        if n == 27:\n            return 103\n        if n == 28:\n            return 107\n        if n == 29:\n            return 109\n        if n == 30:\n            return 113\n        if n == 31:\n            return 127\n        if n == 32:\n            return 131\n        if n == 33:\n            return 137\n        if n == 34:\n            return 139\n        if n == 35:\n            return 149\n        if n == 36:\n            return 151\n        if n == 37:\n            return 157\n        if n == 38:\n            return 163\n        if n == 39:\n            return 167\n        if n == 40:\n            return 173\n        if n == 41:\n            return 179\n        if n == 42:\n            return 181\n        if n == 43:\n            return 191\n        if n == 44:\n            return 193\n        if n == 45:\n            return 197\n        if n == 46:\n            return 199\n        if n == 47:\n            return 211\n        if n == 48:\n            return 223\n        if n == 49:\n            return 227\n        if n == 50:\n            return 229\n        if n == 51:\n            return 233\n        if n == 52:\n            return 239\n        if n == 53:\n            return 241\n        if n == 54:\n            return 251\n        if n == 55:\n            return 257\n       "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        for i in range(3, n+1, 2):\n            if is_prime(i) and is_prime(i+2):\n                return i\n        return None\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    is_prime = [True] * (n + 1)\n    is_prime[0], is_prime[1] = False, False\n\n    # Iterate over numbers up to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            # Mark all multiples of i as non-prime\n            for j in range(i**2, n + 1, i):\n                is_prime[j] = False\n\n    # Iterate over remaining numbers in the list and find the nth prime number\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            count += 1\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables for prime count and current prime number\n    prime_count = 0\n    current_prime = 2\n    \n    # loop through all numbers from 3 to n (inclusive)\n    while prime_count < n:\n        # check if the current number is prime\n        if is_prime(current_prime):\n            prime_count += 1\n            \n        # update current prime number\n        current_prime += 1\n    \n    # return the nth newman\u2013shanks\u2013williams prime number\n    return current_prime - 1\n\ndef is_prime(n):\n    '''\n    Define a function to check if a number is prime.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return False\n    \n    # check if n is divisible by 2\n    if n == 2:\n        return True\n    \n    # loop through all numbers from 3 to the square root of n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples have different lengths.\")\n        return\n    \n    # Loop through the tuples and perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            try:\n                result_tup += ((test_tup1[i] / test_tup2[i]),)\n            except ZeroDivisionError:\n                print(\"Error: Division by zero occurred.\")\n                return\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('inf'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == float and type(test_tup2[i]) == float:\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        else:\n            test_tup1[i] = test_tup1[i] // test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize a new tuple to store the results\n    result_tup = ()\n    \n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples have different lengths\")\n        return\n    \n    # perform element-wise division and add the result to the result_tup\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tup += (float('inf'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]\n        result_tup += (result,)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is an integer greater than 0\n    if not isinstance(L, int) or L <= 0:\n        return \"Error: L must be a positive integer.\"\n    \n    # Check if the length of list1 is greater than L\n    if len(list1) <= L:\n        return \"Error: List1 must be longer than L.\"\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"Length of L cannot be greater than the length of the list\")\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L <= 0 or L > n:\n        print(\"Invalid input.\")\n        return\n    if L >= n:\n        return (list1, [])\n    mid = n // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n:\n        raise ValueError(\"L should be less than or equal to the length of the list\")\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create two empty lists to store the two parts\n    part1 = []\n    part2 = []\n    # iterate through the given list\n    for i in range(len(list1)):\n        # if we have added L elements to part1 so far, add the remaining elements to part2 and break out of the loop\n        if len(part1) == L:\n            part2 += list1[i+1:]\n            break\n        # add the current element to part1\n        part1.append(list1[i])\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list `lst` and an integer `L` and splits the list into two parts, where the length of the first part of the list is L.\n    The function returns a tuple containing the two resulting lists.\n    \"\"\"\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    if len(lst) < L:\n        raise ValueError(\"Cannot split list into two parts: list too short\")\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes a list and an integer L as input and splits the given list into two parts where the length of the first part of the list is L.\n    It returns the resulting lists in a tuple.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of the first part cannot be greater than the length of the list.\")\n\n    if len(lst) % L!= 0:\n        raise ValueError(\"Length of the list should be divisible by the length of the first part.\")\n\n    part1 = lst[:L]\n    part2 = lst[L:]\n\n    return part1, part2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age # 7 years per dog year\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (int(h_age) / 365)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + 365 * h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 12 + (int(h_age)/3)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age - 12)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = 7 * h_age\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n    h_age (int): The height of the dog in inches.\n\n    Returns:\n    int: The age in dog's years.\n    \"\"\"\n    return h_age / 7"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through the list\n    for i in range(0, len(S), step):\n        # create a new list that contains all the elements from the original list starting at the current index\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return [S]\n    else:\n        S = S[::step]\n        if len(S) > 0:\n            return [S] + list_split(S, step)\n        else:\n            return []"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    if len(S) % step!= 0:\n        raise ValueError(\"The length of the list must be divisible by the step size.\")\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the list into chunks\n    n = len(S)\n    chunks = [S[i:i+step] for i in range(0, n, step)]\n    # Reverse the chunks to get the correct order\n    chunks = chunks[::-1]\n    # Return the reversed chunks\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S = list(S)\n    n = int(step)\n    if n == 1:\n        return S\n    result = []\n    for i in range(0, len(S), n):\n        sub_list = S[i:i+n]\n        result.append(sub_list)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if not isinstance(S, list):\n        raise TypeError(\"The first argument must be a list\")\n    if not isinstance(step, int):\n        raise TypeError(\"The second argument must be an integer\")\n    if step <= 0:\n        raise ValueError(\"The step must be a positive integer\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = (l ** 2) * 6\n    return surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        total_sum += i*i\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    total_sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the total sum\n        total_sum += i**2\n    \n    # Return the total sum of squares\n    return total_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the squares of the first {} odd natural numbers is: {}\".format(n, square_Sum(n)))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    total = 0\n    # loop n times\n    for i in range(n):\n        # calculate the square of the current odd number\n        square = i * (2 * i + 1)\n        # add the square to the sum\n        total += square\n    # return the total\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    # initialize the list of star numbers\n    star_nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808]\n\n    # check if the input n is valid\n    if n < 1 or n > 30:\n        return \"Invalid input. Please enter a valid n value.\"\n\n    # return then'th star number\n    return star_nums[n-1]"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variables to store the result and the current count\n    result = 0\n    count = 1\n\n    # Iterate n-1 times to calculate the result\n    while count < n:\n        # Increment the count and multiply by 2 to get the next number in the sequence\n        count += 1\n        result *= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find then'th star number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be positive\")\n\n    stars = \"*\"\n    for i in range(1, n):\n        stars += \"*\" * (2 * i - 1)\n\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n\n    # Initialize the number of spaces and stars\n    spaces = ''\n    stars = '*'\n\n    # Calculate the number of spaces and stars required\n    for i in range(1, n):\n        spaces +=''\n        stars += '*'\n\n    # Output the result\n    print(spaces + stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the first 5 numbers as the first 5 stars\n    first_5_star_num = [1, 2, 3, 4, 5]\n    # Initialize the variable to store then'th number\n    nth_star_num = None\n    # Loop through the numbers from the 10th to the nth star number\n    for i in range(10, n+1):\n        # Find the sum of the first 5 numbers and the n-10th number\n        current_sum = sum(first_5_star_num[0:i-10])\n        # Check if the current sum is equal to the nth star number\n        if current_sum == n:\n            nth_star_num = i\n            break\n        # Otherwise, update the first 5 numbers to exclude the last number\n        first_5_star_num = first_5_star_num[1:]\n    # If the nth star number is not found, return None\n    if nth_star_num is None:\n        return None\n    # Otherwise, return the nth star number\n    else:\n        return nth_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (i*(2*n-i+1))/(i+1)\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * (1 + find_star_num(n-1))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the base value\n    base = 1\n    \n    # Loop from 1 to n\n    for i in range(1, n + 1):\n        # Print the current value of base\n        print(base)\n        # Update the base value\n        base = base * 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    # ASCII values are assigned in decimal notation starting from 32 (space)\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    index_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            sum_even += num\n            if i % 2 == 0:\n                index_even = i\n    return sum_even, index_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                count += 1\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_at_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    \n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n\n    return even_sum, even_count"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    sum_of_powers = 0\n    for num in even_numbers:\n        sum_of_powers += num ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_power_sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            even_power_sum += i\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # initializing variables\n    total = 0\n    num = 0\n    \n    # iterating from 2 to n\n    for i in range(2, n+1):\n        \n        # checking if the number is even\n        if i % 2 == 0:\n            \n            # raising the number to the fifth power\n            num = i ** 5\n            \n            # adding the result to the total sum\n            total += num\n    \n    # returning the total sum\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate power of each natural number\n        power = i ** 5\n        \n        # add power to sum if even\n        if i % 2 == 0:\n            sum += power\n    \n    # return sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize variables\n    power_sum = 0\n    num = 1\n\n    # Iterate through the first n even natural numbers\n    for i in range(1, n+1):\n        if num % 2 == 0:\n            power_sum += num ** 5\n        num += 2\n\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # Initialize the sum variable\n    sum_even_pow = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the power of the number and add it to the sum variable\n        sum_even_pow += i**5\n\n    # Return the sum of the even powers\n    return sum_even_pow"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check that the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    \n    # Iterate over the two tuples and subtract the elements from the first tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] - test_tup2[i])\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            new_tup.append(test_tup1[i] - test_tup2[test_tup2.index(i)])\n        else:\n            new_tup.append(test_tup1[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length\")\n\n    # iterate over the tuples and subtract the elements with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for index, element in enumerate(test_tup1):\n        if index < len(test_tup2):\n            result_tup += (element - test_tup2[index],)\n        else:\n            result_tup += (element,)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [1] * (n+1)\n    even_sum = 0\n    \n    for i in range(2, n+1):\n        binomial_coeff[i] = math.comb(n, i) * binomial_coeff[i-1]\n        if i % 2 == 0:\n            even_sum += binomial_coeff[i]\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Use the binomial theorem to find the sum of even index binomial coefficients\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        binomial = math.comb(n, i-1)\n        sum_even += binomial\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += math.comb(n,i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(2, n+1):\n        even_coeff = (2*i-1) * math.factorial(i-2) / math.factorial(2*i-1)\n        if i % 2 == 0:\n            sum_even_coeffs += even_coeff\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    sum_even = 0\n    # Iterate through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the even index binomial coefficient\n        even_binomial = math.comb(n, i)\n        # Check if the even index binomial coefficient is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum_even += even_binomial\n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math  \n\n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            coeff = math.comb(n, i)\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.comb(n,i)*(-1)**i*2\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to 0\n    even_coeff_sum = 0\n\n    # Calculate the binomial coefficients up to n\n    for i in range(1, n+1):\n        # Check if the current number is even\n        if i % 2 == 0:\n            # Add the binomial coefficient to the sum if it is even\n            even_coeff_sum += math.comb(n, i)\n\n    # Return the sum of even index binomial coefficients\n    return even_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        binom = math.factorial(n) / (math.factorial(i) * math.factorial(n-i))\n        if i % 2 == 0:\n            sum_even_coeffs += binom\n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 1/3 * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    V = (1/3)*pi*r**2*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key:value for key,value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    # Create an empty dictionary to store the filtered values\n    filtered_dict = {}\n    # Loop through the dictionary's entries\n    for key, value in dict.items():\n        # Check if the value is greater than or equal to n\n        if value >= n:\n            # Add the entry to the filtered dictionary with the key unchanged\n            filtered_dict[key] = value\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n            if count == 1:\n                print(f\"The first occurrence of {test_tup[i]} is at index {i}.\")\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i + 1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            temp = n * (i ** 2)\n            if temp == i ** 2 + 1:\n                return temp\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += (10**i)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal + (i * (2*i-1))\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables for num, row and col\n    num = 1\n    row = 1\n    col = 1\n    # Loop through n times\n    for i in range(1, n+1):\n        # Check if current number is decagonal\n        if num % 10 == col:\n            # If it is, return it\n            return num\n        # Increment num, row, and col\n        num += 1\n        row += 2\n        col += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    decagonal_count = 0\n    for i in range(1, n+1):\n        decagonal_count += i * (i + 1) // 2\n    \n    return decagonal_count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum of the squares of the first n odd numbers\n    sum_of_squares = sum(x**2 for x in range(1, n+1, 2))\n    # Calculate the sum of the first n odd numbers\n    sum_of_odds = sum(range(1, n+1, 2))\n    # Return the sum of squares and sum of odds\n    return sum_of_squares + sum_of_odds"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    dec_sum = 0\n    for i in range(1, n+1):\n        dec_sum += (i * (2*i-1))\n    return dec_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Calculate the square root of the sum of natural numbers\n    sqrt_sum_of_natural_numbers = (sum_of_natural_numbers ** 0.5) + 1\n\n    # Calculate the nth decagonal number\n    nth_decagonal_number = int(sqrt_sum_of_natural_numbers * (sqrt_sum_of_natural_numbers + 1) / 2)\n\n    # Return the nth decagonal number\n    return nth_decagonal_number"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a given list are unique or not.\n\n    Args:\n        test_list (list): A list of elements to check.\n\n    Returns:\n        bool: True if all elements of the list are unique, False otherwise.\n    \"\"\"\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    # Use a set to store the unique elements of the list\n    unique_elements = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    # iterate through the list and add unique elements to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n    # check if the set is empty\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers.\n\n    Returns:\n    A list of the difference between the two input lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    \n    return nums1"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10 # initialize frequency array to 0\n    \n    # count frequency of digits in n\n    for i in str(n):\n        freq[int(i)] += 1\n        \n    # check whether frequency of each digit is less than or equal to its value\n    for i in range(len(freq)):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n            \n    # if all conditions are met, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # create a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n    for i in str(n):\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for i in freq_dict:\n        if freq_dict[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n = str(n)\n    # loop through each character in the string\n    for i in n:\n        # convert the character to a digit\n        digit = int(i)\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if digit not in str(digit):\n            return False\n    # if the loop completes without returning False, it means the frequency of each digit in the integer is less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = [0] * 10\n    for i in range(10):\n        digit_freq[i] = n // 10**i\n        n = n % 10**i\n\n    for i in range(len(digit_freq)):\n        if digit_freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is\n    less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of digits in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to its value\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # check whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # check if the integer is negative\n    if n < 0:\n        return \"Invalid input: Negative integers are not allowed.\"\n\n    # check if the integer is zero\n    elif n == 0:\n        return \"Valid input: Zero has no digits.\"\n\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n\n    # loop through the digits of the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # if it is, increment its frequency by 1\n            freq[digit] += 1\n\n        # if it is not, add it to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # loop through the dictionary and check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return \"Invalid input: The frequency of digit '{}' is greater than itself.\".format(digit)\n\n    # if all digits have a frequency less than or equal to themselves, return \"Valid input\"\n    return \"Valid input\""
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    for digit in freq:\n        if digit > n // len(freq):\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check if all items in the given list are equal to the given element.\n\n    Parameters:\n    -----------\n    list: list\n        The list of elements to check.\n    element: any\n        The element to compare to.\n\n    Returns:\n    --------\n    bool\n        True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check whether all elements in a list are equal to the given element.\n    \"\"\"\n    return all(elem == x for x in lst)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n\n    # Check if the first element is equal to the given element\n    if list[0] == element:\n        return check_element(list[1:], element)\n\n    # If the first element is not equal to the given element, the list is not all equal to the given element\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    all_elements_are_equal = True\n    for item in list:\n        if item!= element:\n            all_elements_are_equal = False\n            break\n    return all_elements_are_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'a([bB][bB]*)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*[b]{2,3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}a')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a([bb]){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b{2,3})'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"Hello, world! This is a test. The aabbccbbc is a very long string.\"\nprint(text_match_two_three(text)) # Output: ['aabbccbbc']"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?:(?:b){2})*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    \n    # initialize the maximum sum and its index\n    max_sum = a[0]\n    max_sum_index = 0\n    \n    # iterate over the array\n    for i in range(1, n):\n        # if the sum is less than the current maximum sum, update the maximum sum and its index\n        if a[i] + a[i-1] < max_sum:\n            max_sum = a[i] + a[i-1]\n            max_sum_index = i\n    \n    # repeat the last k elements of the original array to obtain the modified array\n    modified_array = a[-k:] + a[-k:-1] + a[-k:-2] + a[-k:-3] + a[-k:-4] + a[-k:-5]\n    \n    # initialize the maximum sum of the modified array and its index\n    max_modified_sum = sum(modified_array)\n    max_modified_sum_index = 0\n    \n    # iterate over the modified array\n    for i in range(len(modified_array)):\n        # if the sum is less than the current maximum sum, update the maximum sum and its index\n        if modified_array[i] + modified_array[i-1] < max_modified_sum:\n            max_modified_sum = modified_array[i] + modified_array[i-1]\n            max_modified_sum_index = i\n    \n    return max_modified_sum, max_modified_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    repeated_array = a * k\n    for i in range(n):\n        max_sum = max(max_sum, repeated_array[i] - a[i])\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # repeat the array k times to get the modified array\n    modified_array = a * k\n\n    # initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # loop through the modified array and add each element to the current sum\n    for element in modified_array:\n        current_sum += element\n\n        # if the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum becomes negative, reset it to zero\n        elif current_sum < 0:\n            current_sum = 0\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize maximum sum and current sum with the first element of the array\n    max_sum = max_current_sum = a[0]\n\n    # Iterate over the array from the second element\n    for i in range(1, n): \n        # Update the maximum sum by adding the current element and the maximum current sum\n        max_sum = max(max_sum, max_current_sum + a[i])\n\n        # Update the maximum current sum by adding the current element\n        max_current_sum = max(max_current_sum, a[i])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the array\n    sum_a = sum(a)\n    \n    # Initialize variables to store the maximum sum and the maximum sum of the k-th repeated array\n    max_sum = sum_a\n    max_sum_kth = sum_a\n    \n    # Iterate through the array and calculate the sum of the k-th repeated array\n    for i in range(n):\n        sum_kth = sum_a * (k - 1) + a[i]\n        \n        # Update the maximum sum if the k-th repeated array is larger\n        if sum_kth > max_sum_kth:\n            max_sum_kth = sum_kth\n        \n        # Update the maximum sum if the k-th repeated array is larger than the current maximum sum\n        if sum_kth > max_sum:\n            max_sum = sum_kth\n    \n    # Return the maximum sum of the k-th repeated array\n    return max_sum_kth"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and form the modified array\n    for i in range(n):\n        if i % k == 0:\n            # If the current index is a multiple of k, add the current element to the modified array\n            current_sum += a[i]\n        else:\n            # If the current index is not a multiple of k, add the current element to the current sum\n            current_sum += a[i]\n\n    # Update the maximum sum if the current sum is greater than the current maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    # Iterate through the modified array and calculate the current sum for each subarray\n    for i in range(n - k):\n        current_sum = current_sum - a[i] + a[i + k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    max_sum_temp = 0\n    temp_array = [0] * k\n\n    # Traverse the input array\n    for i in range(n):\n        # Calculate the current sum\n        temp_sum += a[i]\n\n        # Check if the current sum is greater than the previous maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_temp = temp_array.copy()\n\n        # Check if the current sum is greater than the sum of previous k elements\n        for j in range(k):\n            temp_array[j] = a[i-j]\n            temp_sum -= temp_array[j]\n            if temp_sum > max_sum_temp[j]:\n                max_sum_temp = temp_array.copy()\n                break\n\n    return max_sum_temp"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Compute the sum of the modified array\n    modified_sum = sum(a * i for i in range(1, k+1))\n    # Initialize the max sum to be the same as the sum of the original array\n    max_sum = modified_sum\n    \n    # Compute the sum of the original array and the difference between it and the max sum\n    for i in range(n):\n        modified_sum += a[i]\n        if modified_sum - max_sum > max_sum:\n            max_sum = modified_sum - a[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # initialize max_sum and current_sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # iterate through the array\n    for i in range(n):\n        # add the current element to current_sum\n        current_sum += a[i]\n\n        # if current_sum exceeds max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n        # if the current element is repeated k times, update current_sum\n        if i >= k-1:\n            current_sum -= a[i-k+1]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = a[0]\n    sum_current = 0\n    sum_repeated = 0\n    # Loop through the array k times\n    for i in range(k):\n        sum_current = a[0]\n        for j in range(1, n):\n            sum_current += a[j]\n            if sum_current > max_sum:\n                max_sum = sum_current\n        sum_repeated = max_sum\n        for j in range(1, n):\n            sum_repeated += a[j]\n        sum_repeated += max_sum\n        max_sum = max(max_sum, sum_repeated)\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 2\n    \n    # loop through the first n even natural numbers\n    while current_number <= n:\n        sum_of_squares += current_number ** 2\n        current_number += 2\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = [2*i for i in range(2, n+1, 2)]\n    return sum([x**2 for x in even_numbers])"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i*i\n        i += 1\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in list1:\n        if len(i) > max(max_lengths, default=0):\n            max_lengths = i\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > length:\n            length = len(sublist)\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length\n    max_lengths = []\n    # Loop through each list in the input list\n    for lst in list1:\n        # Check if the current length is greater than the maximum length\n        if len(lst) > max_lengths[-1] if max_lengths else len(lst):\n            # If so, add the new length to the maximum lengths list\n            max_lengths.append(len(lst))\n    # Return the maximum lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths, default=0):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(j) for j in list1[i]]\n        max_length_i = max(lengths)\n        max_lengths.append(max_length_i)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 2:\n        return 0\n    \n    if k == 2:\n        return n\n    \n    if k == 3:\n        return n - 1\n    \n    memo = {}\n    \n    def count_ways(x):\n        if x in memo:\n            return memo[x]\n        \n        ways = count_ways(x - 1)\n        ways += count_ways(x - 2)\n        ways += count_ways(x - 3)\n        ways += count_ways(x - 4)\n        \n        memo[x] = ways\n        return ways\n    \n    return count_ways(n)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count to 0\n    count = 0\n\n    # For each position in the fence, calculate the number of ways to paint the fence\n    for i in range(n):\n        # If the current post is the first or last post, there is only one way to paint it\n        if i == 0 or i == n-1:\n            count += 1\n        # Otherwise, calculate the number of ways to paint the fence with the current post removed\n        else:\n            for j in range(i+1, n):\n                # If the current post and the next post have the same color, there is only one way to paint them\n                if i == j or fence[i] == fence[j]:\n                    count += 1\n                # If the current post and the next post have different colors, there are two ways to paint them\n                else:\n                    count += 2\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # base case\n    if i == 0:\n        return 1\n\n    # recurrence relation\n    if prev_color == cur_color:\n        ways = dp[i-1][j]\n    else:\n        ways = dp[i-1][k]\n    \n    # update dp\n    dp[i][cur_color] = dp[i][cur_color] + ways\n    dp[i][prev_color] = dp[i][prev_color] + (n - i)\n    \n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty list to store the number of ways of painting the fence\n    ways = []\n    \n    # Loop through all possible colors\n    for color in range(1, k+1):\n        # Initialize an empty list to store the number of ways of painting the fence with the current color\n        ways_with_color = []\n        \n        # Loop through all possible starting positions for the fence\n        for start in range(n+1):\n            # If the starting position is not within the fence, add 0 to the list of ways with the current color\n            if start > n:\n                ways_with_color.append(0)\n            # If the starting position is within the fence, calculate the number of ways with the current color that are not adjacent to a post with the same color\n            else:\n                # Loop through all possible ending positions for the fence\n                for end in range(start+1, n+1):\n                    # Add the number of ways with the current color that are not adjacent to a post with the same color to the list of ways with the current color\n                    ways_with_color.append(ways_with_color[end-start] + ways[end-1])\n                    \n        # Add the list of ways with the current color to the list of ways\n        ways.append(ways_with_color)\n        \n    # Return the last element of the list of ways, which represents the number of ways of painting the fence\n    return ways[-1][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the number of ways to 0\n    count = 0\n\n    # Loop through each possible arrangement of colors\n    for i in range(1, k + 1):\n        # Calculate the number of ways of painting the fence with i colors\n        ways = n // i\n        \n        # If there are at most 2 adjacent posts with the same color, add 2 to the count\n        if (n - (ways * i)) <= 2:\n            count += ways * 2\n    \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Function to count number of ways to paint fence with n posts and k colors\n    def count_ways(n, k, curr_color, prev_color, ways):\n        # base case: if there are only 1 or 0 colors, there is only one way\n        if n == 0 or k == 0:\n            ways[curr_color][prev_color] = 1\n            return 1\n        \n        # recursive case: for each possible color, there are ways to paint the fence with n-1 posts and k-1 colors,\n        # and with the same color if curr_color == prev_color, and with the opposite color if curr_color!= prev_color\n        ways[curr_color][prev_color] = count_ways(n-1, k-1, curr_color, curr_color, ways) + count_ways(n-1, k-1, curr_color, curr_color^1, ways)\n        \n        # return the number of ways to paint the fence\n        return ways[curr_color][prev_color]\n    \n    # initialize two-dimensional array to store number of ways for each color pair\n    ways = [[0] * k for _ in range(k)]\n    \n    # call the count_ways function with n-1, k-1, 0, 0, ways as arguments\n    count_ways(n-1, k-1, 0, 0, ways)\n    \n    # return the value stored in ways[0][0] which is the number of ways to paint the fence\n    return ways[0][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Base case: If there are only k colors, there can be 1 way to paint the fence\n    if k == 1:\n        return 1\n\n    # Base case: If the fence has n posts, there can be 1 way to paint the fence\n    if n == 1:\n        return 1\n\n    # Initialize a 2D array to store the number of ways for each color\n    ways = [[0] * (k + 1) for i in range(n + 1)]\n\n    # Initialize the first row and first column of the array\n    ways[0][1] = 1\n    ways[1][0] = 1\n\n    # Fill the rest of the array\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i][j - 1]\n\n    # Return the number of ways to paint the fence with n posts and k colors\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Creating a dictionary to store the number of ways to paint the fence with n posts and k colors\n    ways = {}\n\n    # Base case for when n is 0 or 1\n    if n == 0 or n == 1:\n        ways[0] = 1\n\n    # Recursive case for when n is greater than 1\n    else:\n        for i in range(k + 1):\n            ways[i] = 0\n\n        for i in range(2, n + 1):\n            for j in range(k + 1):\n                if i - 2 <= k:\n                    ways[j] += ways[j - 1]\n                else:\n                    ways[j] += ways[j]\n\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: if n is 0 or 1, there is only one way to paint the fence\n    if n <= 1:\n        return 1\n    \n    # initialize a 2D list to store the count of ways to paint the fence\n    count = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # initialize the count of ways to paint the fence for the first 2 posts\n    count[1][2] = 1\n    \n    # fill the count of ways to paint the fence for the remaining posts\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # if the previous posts have the same color, there are two ways to paint the fence\n            if j % 2 == count[i-1][j-2]:\n                count[i][j] = count[i-1][j] + count[i-1][j-2]\n            else:\n                count[i][j] = count[i-1][j]\n    \n    # return the count of ways to paint the fence for the last post\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Helper function to check if two adjacent posts have the same color\n    def same_color(post1, post2):\n        return post1[-1] == post2[-1]\n    \n    # Helper function to count the ways to paint the fence with k colors\n    def count_ways_with_k_colors(left, right):\n        if left == right:\n            return 1\n        elif left < right:\n            return count_ways_with_k_colors(left + 1, right) + count_ways_with_k_colors(left, right - 1)\n        else:\n            return count_ways_with_k_colors(left, right - 1) + count_ways_with_k_colors(left + 1, right)\n\n    # Count the number of ways to paint the fence with at most 2 adjacent posts of the same color\n    ways = 0\n    for i in range(n - 1):\n        if same_color(i, i + 1):\n            ways += count_ways_with_k_colors(i + 1, n - 1)\n\n    # Count the number of ways to paint the fence with at most 1 adjacent post of the same color\n    ways += count_ways_with_k_colors(0, n - 1)\n\n    return ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient\n    quotient = int(n/m)\n    # calculate the remainder\n    remainder = n%m\n    # check if the remainder is less than or equal to half of the divisor\n    if remainder <= m/2:\n        # add 1 to the quotient to get the correct result\n        quotient += 1\n    # return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n/m\n    return int(q)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero!\"\n    else:\n        quotient = n//m\n        return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w**2)+(h**2))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the square root of the semi-perimeter\n    s_sqrt = math.sqrt(s)\n\n    # Calculate the third side of the triangle\n    third_side = s_sqrt * math.tan(math.pi / 6)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    c = math.sqrt(s * (s - w) * (s - h))\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s * h)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    third_side = math.sqrt(w**2+h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the first side\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the length of the second side\n    c = math.sqrt(w**2 + s**2)\n\n    # Calculate the length of the third side\n    third_side = s\n\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return max(listval, key=lambda x: type(x))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value to be the first value in the list\n    max_val = listval[0]\n    # loop through the list and update max_val if a greater value is found\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the maximum value.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value\n    max_val = listval[0]\n    \n    # iterate through list and compare each element with max value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    \n    # return max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    elif isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of any data type as input and returns the maximum value in the list.\n    '''\n    # initialize max_val to the first value in the list\n    max_val = listval[0]\n\n    # iterate through the list\n    for i in range(1, len(listval)):\n        # if the current value is greater than max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    else:\n        raise ValueError(\"List contains invalid data type.\")"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of divisors\n    total = 0\n    \n    # Iterate through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the input number is divisible by i\n        if number % i == 0:\n            # If it is, add i to the total sum\n            total += i\n    \n    # Return the total sum of divisors\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through all numbers from 1 to number\n    for i in range(1, number+1):\n        # if number is divisible by i, add it to sum\n        if number % i == 0:\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Divide the array into two halves\n    half = n // 2\n\n    # Count inversions in left and right halves recursively\n    left_inv = get_Inv_Count(arr[:half])\n    right_inv = get_Inv_Count(arr[half:])\n\n    # Count inversions in current sub-array\n    left, right = 0, 0\n    inv_count = 0\n\n    while left < half and right < n - half:\n        if arr[left] < arr[right]:\n            inv_count += half - left\n            left += 1\n        else:\n            inv_count += n - half - right\n            right += 1\n\n    # Merge the two halves and count inversions\n    for i in range(half):\n        if arr[i] > arr[half + i]:\n            inv_count += half - i\n            left_inv = i\n\n    for i in range(half, n):\n        if arr[i] > arr[i - half]:\n            inv_count += n - half - i\n            left_inv = i - half\n\n    return left_inv + right_inv + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(left, mid, right):\n        \"\"\"\n        Merge two sorted arrays into a single sorted array.\n        \"\"\"\n        i, j = 0, 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged += left[i:]\n        merged += right[j:]\n        return merged\n\n    def merge_sort(arr):\n        \"\"\"\n        Sort an array using merge sort algorithm.\n        \"\"\"\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, mid, right)\n\n    def count_inversions(arr):\n        \"\"\"\n        Count inversions in an array using merge sort.\n        \"\"\"\n        inv_count = 0\n        sorted_arr = merge_sort(arr)\n        for i in range(1, len(sorted_arr)):\n            inv_count += sorted_arr[i] - sorted_arr[i - 1]\n        return inv_count\n\n    return count_inversions(arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\ndef merge_sort_inv(arr):\n    inv_count = 0\n    inv_index = 0\n\n    while inv_index < len(arr) - 1:\n        left = arr[:inv_index + 1]\n        right = arr[inv_index + 1:]\n\n        sorted_left = merge_sort(left)\n        sorted_right = merge_sort(right)\n\n        inv_count += inv_merge(sorted_left, sorted_right)\n\n        inv_index += 1\n\n    return inv_count\n\ndef inv_merge(left, right):\n    i = j = 0\n    inv_count = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] > right[j]:\n            inv_count += len(left) - i\n            i += 1\n        else:\n            i += 1\n\n    inv_count += len(left) - i\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    arr = merge_sort_inv(arr)\n    return arr[len(arr) // 2]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # One-Pass Sorting\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += j-i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Divide the array into two halves and recursively count inversions in each half\n    def merge_count(arr, low, mid, high):\n        inv_count = 0\n        i, j = low, mid + 1\n        # Merge the two halves of the array using a temporary array\n        temp = [0] * n\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                temp[i + j - low] = arr[i]\n                i += 1\n            else:\n                temp[i + j - low] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n        while i <= mid:\n            temp[i + j - low] = arr[i]\n            i += 1\n        while j <= high:\n            temp[i + j - low] = arr[j]\n            j += 1\n        # Copy the merged array back to the original array\n        for i in range(n):\n            arr[low + i] = temp[i]\n        return inv_count\n\n    def merge_sort(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            inv_count = merge_sort(arr, low, mid) + merge_sort(arr, mid + 1, high)\n            inv_count += merge_count(arr, low, mid, high)\n            return inv_count\n        else:\n            return 0\n\n    return merge_sort(arr, 0, n - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n                j = n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            if arr[i] > arr[left]:\n                left += 1\n            elif arr[i] < arr[right]:\n                right -= 1\n            else:\n                left += 1\n                right -= 1\n\n        count += right - i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    # Find the size of the array\n    n = len(arr)\n    # Initialize variables to keep track of counts\n    left = 0\n    right = n-1\n    count = 0\n    # Iterate through the array from both ends\n    while left < right:\n        # Find the largest element on the left side of the array\n        max_left = arr[left]\n        for i in range(left+1, right+1):\n            if arr[i] > max_left:\n                max_left = arr[i]\n        # Find the largest element on the right side of the array\n        max_right = arr[right]\n        for j in range(left, right):\n            if arr[j] > max_right:\n                max_right = arr[j]\n        # If the largest elements are not equal, swap them\n        if max_left < max_right:\n            arr[left], arr[right] = max_left, max_right\n            # Increment the count of inversions\n            count += right - left\n            # Move the pointers to search for the next pair of inversions\n            left += 1\n            right -= 1\n        else:\n            # If the largest elements are equal, move the left pointer to the right\n            left += 1\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(sorted_arr) - 1):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Helper function to swap elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Recursive function to sort the array\n    def merge_sort(arr, l, r):\n        if l < r:\n            m = l + (r - l) // 2\n            merge_sort(arr, l, m)\n            merge_sort(arr, m + 1, r)\n            merge(arr, l, m, r)\n\n    # Recursive function to merge two sorted arrays into a single sorted array\n    def merge(arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(n1):\n            L[i] = arr[l + i]\n        for j in range(n2):\n            R[j] = arr[m + 1 + j]\n\n        i = j = 0\n        k = l\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    # Main function to count inversions in the array\n    def count_inversions(arr, l, r):\n        if l < r:\n            # Calculate the midpoint of the array\n            m = l + (r - l) // 2\n\n            # Count the inversions in the left and right subarrays\n            count_inversions(arr, l, m)\n            count_inversions(arr, m + 1, r)\n\n            # Merge the subarrays and count the inversions in the merged subarray\n            merge_sort(arr, l, r)\n            inv_count = 0\n            i, j = l, m + 1\n            while i <= m and j <= r:\n                if arr[i] <= arr[j]:\n                    i += 1\n                else:\n                    inv_count += m - i + 1\n                    j += 1\n            return inv_count\n\n    # Call the main function to count inversions in the array\n    inv_count = count_inversions(arr, 0, n - 1)\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if type(element) is list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    Flattens a list of lists into a single list.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Initialize an empty list to store flattened list\n    flattened_list = []\n    # Loop through each element of the nested list\n    for element in list1:\n        # If the element is a list, recursively call the function on that list\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            # Otherwise, append the element to the flattened list\n            flattened_list.append(element)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Create an empty list to store the flattened list\n    flat_list = []\n\n    # Iterate through each element in the input list\n    for element in list1:\n        # Check if the element is a list itself\n        if type(element) == list:\n            # Recursively call the flatten_list function on the sub-list\n            flat_list.extend(flatten_list(element))\n        else:\n            # If the element is not a list, add it to the flattened list\n            flat_list.append(element)\n\n    # Return the flattened list\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for i in stdata:\n        max_dict[i[0]] += i[1]\n    max_agg = 0\n    for i in max_dict.values():\n        if i > max_agg:\n            max_agg = i\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    curr_agg = 0\n    max_dates = defaultdict(list)\n    curr_dates = defaultdict(list)\n    for date, amount in stdata:\n        curr_agg += amount\n        curr_dates[date].append(amount)\n        if len(curr_dates[date]) > 2:\n            del curr_dates[date][0]\n        max_dates[max(curr_dates[date], key=abs)].append(date)\n        max_agg = max(max_agg, curr_agg)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Define a defaultdict to store the maximum aggregate for each type of product\n    max_aggs = defaultdict(float)\n\n    # Iterate over the list of tuples\n    for product, price in stdata:\n        # If the price is greater than the current maximum aggregate, update the maximum aggregate\n        if price > max_aggs[product]:\n            max_aggs[product] = price\n\n    # Return the maximum aggregate\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict with empty lists for each day of the week\n    weekdays = defaultdict(list)\n    # Loop through the list of tuples and add the values to the defaultdict\n    for date, item in stdata:\n        weekdays[date].append(item)\n    # Loop through the defaultdict and find the maximum aggregate\n    max_agg = 0\n    for items in weekdays.values():\n        agg = sum(items)\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes in a list of tuples (item, price) and calculates the maximum aggregate.\n    '''\n    # create a defaultdict to store the maximum aggregate of each item\n    max_agg_dict = defaultdict(float)\n\n    # loop through the list of tuples\n    for item, price in stdata:\n        # add the price to the max_agg_dict for that item\n        max_agg_dict[item] += price\n\n    # find the maximum aggregate in the defaultdict\n    max_agg = max(max_agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_list = defaultdict(int)\n    max_dict = {}\n\n    for item in stdata:\n        if item[0] in max_list:\n            max_list[item[0]] += item[1]\n        else:\n            max_list[item[0]] = item[1]\n\n    for key, value in max_list.items():\n        if value > max_dict.get(key, 0):\n            max_dict[key] = value\n\n    max_aggregate = 0\n    for item in stdata:\n        if item[0] in max_dict:\n            max_aggregate = max(max_aggregate, item[1] + max_dict[item[0]])\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_agg = float('-inf')\n\n    for student, aggregate in stdata:\n        max_dict[student] += aggregate\n        max_agg = max(max_agg, max_dict[student])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the total amount for each customer\n    customer_total = defaultdict(int)\n\n    # loop through each transaction in the list\n    for transaction in stdata:\n        # update the total amount for the customer in the dictionary\n        customer_total[transaction[0]] += transaction[1]\n\n    # loop through the dictionary and find the maximum total amount\n    max_total = 0\n    for total in customer_total.values():\n        if total > max_total:\n            max_total = total\n\n    return max_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of each item in each transaction\n    agg_dict = defaultdict(int)\n    for item, price in stdata:\n        agg_dict[item] += price\n    \n    # calculate the maximum aggregate by iterating over the defaultdict and finding the maximum sum\n    max_agg = max(agg_dict.values())\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    Parameters:\n    stdata (list): A list of tuples where each tuple contains two elements - name and amount.\n\n    Returns:\n    max_amount (int): The maximum aggregate amount.\n    '''\n    max_amount = 0\n    counts = defaultdict(int)\n\n    for name, amount in stdata:\n        counts[name] += amount\n        max_amount = max(max_amount, sum(counts.values()))\n\n    return max_amount"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    # generate all possible binary sequences of length 2n\n    seqs = [bin(i)[2:].zfill(2*n) for i in range(2**n)]\n\n    # count the number of sequences with the given property\n    count = 0\n    for seq in seqs:\n        if seq[n-1] == seq[2*n-1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        if sum(bin(i)[2:].zfill(n)) == sum(bin(i)[2:].zfill(n+1)):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nresult = count_binary_seq(n)\nprint(\"Count of binary sequences of length 2*n with sum of first n bits and sum of last n bits are same is:\", result)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        first_half = bin(i)[2:]\n        last_half = bin(i + 2**n - 1)[2:]\n        if first_half == last_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if i < 2**n-1:\n            first_n = i\n            last_n = 2**n-i-1\n            if sum(bin(first_n)[2:].zfill(n)) == sum(bin(last_n)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # create a set to store the binary sequences with the given sum\n    result = set()\n\n    # loop through all possible binary strings of length n\n    for i in range(2**n):\n        # extract the first n bits from the string\n        bits = bin(i)[2:].zfill(n)\n\n        # calculate the sum of the first n bits\n        first_sum = sum(int(bit) for bit in bits[:n])\n\n        # calculate the sum of the last n bits\n        last_sum = sum(int(bit) for bit in bits[-n:])\n\n        # if the sum of the first n bits is equal to the sum of the last n bits, add the binary sequence to the result set\n        if first_sum == last_sum:\n            result.add(bits)\n\n    # return the count of the binary sequences in the result set\n    return len(result)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        first_bit = i % 2\n        second_bit = (i - first_bit) % 2\n        if (first_bit + second_bit) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        if sum(binary_seq[:n]) == sum(binary_seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize an empty dictionary to store the count of sequences\n    count = {}\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary number to a list of bits\n        bits = [int(digit) for digit in bin(i)[2:]]\n        # Sort the list of bits in ascending order\n        bits.sort()\n        \n        # Calculate the sum of first n bits\n        sum_first_n = sum(bits[:n])\n        \n        # Calculate the sum of last n bits\n        sum_last_n = sum(bits[-n:])\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if sum_first_n == sum_last_n:\n            # If they are same, increment the count in the dictionary\n            if bits not in count:\n                count[bits] = 1\n            else:\n                count[bits] += 1\n    \n    # Return the count of sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_bit = int(binary_str[0])\n        last_bit = int(binary_str[-1])\n        if first_bit == last_bit:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        # convert binary number to list of bits\n        bits = [int(bit) for bit in bin(i)[2:]]\n        # check if the sum of first n bits is equal to the sum of last n bits\n        if bits[:n].count(True) == bits[-n:].count(True):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [d]\n    while stack:\n        curr_dict = stack.pop()\n        for key in curr_dict:\n            if isinstance(curr_dict[key], dict):\n                stack.append(curr_dict[key])\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])+1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        value = d[key]\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = 1 + dict_depth(value)\n            if new_depth > max_depth:\n                max_depth = new_depth\n        else:\n            new_depth = 0\n        if current_depth + new_depth > max_depth:\n            max_depth = current_depth + new_depth\n        current_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1 + dict_depth(d[key])\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 1\n        for value in d.values():\n            if isinstance(value, dict):\n                new_depth = 1 + dict_depth(value)\n                if new_depth > max_depth:\n                    max_depth = new_depth\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a depth counter to zero\n    depth = 0\n    # Recursively traverse the dictionary and increment the depth counter for each sub-dictionary\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array and a list of ranges and a list of rotations.\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if count % 2 == 0:\n            # even index\n            if index >= i and index < i + ranges[count // 2]:\n                return i\n        else:\n            # odd index\n            if index >= i + ranges[count // 2] and index < i + 2 * ranges[count // 2]:\n                return i\n        count += 1\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after rotations in a given array.\n\n    Args:\n    arr (list): array to search in\n    ranges (list): list of ranges of elements to search in each array\n    rotations (list): list of rotations to apply to each range\n    index (int): index to search for\n\n    Returns:\n    int: element at given index after rotations\n    \"\"\"\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        rotations_to_apply = rotations[i]\n        for j in range(rotations_to_apply):\n            end = end - arr[start]\n            start = (start + end) % len(arr)\n        if index >= start and index < end:\n            return arr[index]\n    raise ValueError(\"Index out of range\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the index after rotations\n    newIndex = (index - rotations) % len(arr)\n    # If the new index is less than the length of the array, return the element at the new index\n    if newIndex < len(arr) :\n        return arr[newIndex]\n    # If the new index is greater than or equal to the length of the array, return the element at the new index - length of array\n    else :\n        return arr[newIndex - len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Sort the given array\n    arr.sort()\n\n    # Calculate the minimum and maximum values in the sorted array\n    min_value = arr[0]\n    max_value = arr[-1]\n\n    # Initialize variables to keep track of the index of the current element\n    current_index = 0\n\n    # Iterate through the ranges and rotations\n    for i in range(len(ranges)):\n        # Calculate the number of elements to rotate the current element\n        num_elements = (max_value - min_value + 1) * (ranges[i] - 1) / (rotations[i] - 1)\n\n        # Calculate the index of the current element after rotating\n        new_index = (current_index + (i + 1) * (num_elements - 1)) % len(arr)\n\n        # Check if the new index is the index we are looking for\n        if new_index == index:\n            # Return the value of the current element\n            return arr[new_index]\n\n        # Update the current index\n        current_index = new_index\n\n    # If we reach this point, the element was not found\n    return \"Element not found\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a list of rotations and an index\n    It finds the element at the given index after rotations.\n\n    Args:\n        arr: An array\n        ranges: A list of ranges\n        rotations: A list of rotations\n        index: The index at which the element needs to be found\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n    # Initialize the current index and the final index\n    current_index = index\n    final_index = index\n\n    # Loop through the ranges and rotations lists\n    for i in range(len(ranges)):\n        # If the current index is within the range, update the current index\n        if current_index >= ranges[i]:\n            current_index = current_index - ranges[i] + rotations[i]\n        # If the current index is less than the range, update the final index\n        elif current_index < ranges[i]:\n            final_index = final_index - ranges[i] + rotations[i]\n\n    # Return the element at the final index\n    return arr[final_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        # Move the last element to the first position and then move the first element to the last position\n        arr.append(arr.pop(0))\n        arr.insert(0, arr.pop())\n        # Move the element at the given index to the first position\n        arr.insert(index, arr.pop(index))\n        arr.append(arr.pop(0))\n        # Move the element at the index that was just moved to the given index position\n        arr.insert(index, arr.pop(index))\n        arr.append(arr.pop(0))\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Let's write the Python function to solve the problem."
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    n = len(arr)\n    x = 0\n\n    # Perform rotations\n    for i in range(rotations):\n        # Calculate new position of x\n        pos = (x + ranges[i]) % n\n\n        # Swap values at x and pos\n        arr[x], arr[pos] = arr[pos], arr[x]\n\n        # Update x\n        x = pos\n\n    # Find element at given index\n    for i in range(index):\n        x = (x + 1) % n\n\n    return arr[x]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a certain number of rotations.\n\n    Args:\n        arr (list): The input array.\n        ranges (list): The number of rotations for each element in the array.\n        rotations (int): The number of rotations required to find the element at the given index.\n        index (int): The index of the element to find after rotating the array.\n\n    Returns:\n        The element at the given index after rotating the array.\n\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i in ranges:\n            rotations -= ranges[i]\n            if rotations == 0:\n                return arr[i]\n            arr[i], arr[index] = arr[index], arr[i]\n            rotations += ranges[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array arr, a list of ranges ranges, a list of rotations rotations, and the index index as input.\n    It returns the element at the given index after number of rotations.\n    \"\"\"\n\n    # Calculate the number of rotations required to find the element at the given index\n    rotations = rotations + ranges[index]\n\n    # Initialize the result to None\n    result = None\n\n    # Loop through the rotations and find the element\n    for rotation in rotations:\n        if result is None:\n            result = arr[(rotation + index) % len(arr)]\n        else:\n            result = arr[(result + rotation) % len(arr)]\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p') # regular expression pattern to match words starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None # if no word is found"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define a regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n    \n    # Use the re.findall() function to find all the words that match the pattern\n    matches = re.findall(pattern, words)\n    \n    # Return the first two matches found\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern for starting with 'p'\n    pattern = re.compile(r'^p[a-z]*$')\n\n    # Filter words that match the pattern\n    result = [word for word in words if pattern.match(word)]\n\n    # Return the two words that match the pattern\n    if len(result) == 2:\n        return result[0], result[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression to match words starting with letter 'p'\n    pattern = r'^p\\w+'\n    # use the regular expression to find all matches in the list of words\n    matches = re.findall(pattern,''.join(words))\n    # return the first two matches if there are any\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]*')  # compile regex pattern to match words starting with 'p'\n    for word in words:\n        if pattern.match(word):  # check if the word matches the regex pattern\n            return word, words[words.index(word) + 1]  # return the matched word and the next word\n    return None  # return None if no words are found"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n    # List to store the matching words\n    matching_words = []\n    # Iterate over the list of words\n    for word in words:\n        # Match the word with the pattern and append it to the list if it matches\n        if re.match(pattern, word):\n            matching_words.append(word)\n    # If there are more than two matching words, return the first two\n    if len(matching_words) > 2:\n        return matching_words[0:2]\n    # If there are exactly two matching words, return them as a tuple\n    elif len(matching_words) == 2:\n        return tuple(matching_words)\n    # If there are no matching words, return an empty list\n    else:\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern for the start of a word\n    pattern = r'^p'\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the current word starts with 'p' using the regular expression\n        if re.match(pattern, words[i]):\n            # If it does, return the two words at indices i and i+1\n            return words[i], words[i+1]\n    # If no words start with 'p', return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0] == 'p':\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower() == 'p':\n            return [word, word.replace('p', 'P', 1)]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return \"No two words starting with letter 'p' found in the list.\""
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Calculate the length of the subsequence including kth element\n    length = 0\n    for i in range(index, n):\n        if a[i] >= a[index]:\n            length += 1\n    \n    # Calculate the maximum sum of increasing subsequence from prefix until ith index and including kth element\n    max_sum = 0\n    for i in range(index, index + length):\n        if i == k:\n            max_sum += a[i]\n        else:\n            max_sum += a[i] - a[index]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array with all zeros\n    dp = [0] * (n+1)\n    # Initialize max_sum with the first element of the array\n    max_sum = a[0]\n    # Initialize start of increasing subsequence with the first element\n    start = 0\n    # Initialize sum of increasing subsequence with the first element\n    sum_inc = a[0]\n\n    # Calculate the sum of increasing subsequence of a[0], a[1],..., a[k]\n    for i in range(1, k+1):\n        sum_inc += a[i]\n\n    # Initialize max_sum with the sum of increasing subsequence\n    dp[0] = sum_inc\n\n    # Loop through the array from 1 to n-1\n    for i in range(1, n):\n        # Calculate the sum of increasing subsequence of a[start], a[start+1],..., a[i]\n        for j in range(start, i):\n            sum_inc -= a[j]\n            dp[i] = max(dp[i], dp[j] + a[i])\n            sum_inc += a[j]\n        # Update the start of increasing subsequence and the sum of increasing subsequence\n        start = i\n        sum_inc = a[i]\n\n        # Update max_sum if current sum of increasing subsequence is greater\n        max_sum = max(max_sum, dp[i])\n\n    # Return the maximum sum of increasing subsequence including a[k]\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and the maximum sum of increasing subsequence\n    max_sum = float('-inf')\n    max_sum_increasing = float('-inf')\n    # Initialize a dictionary to store the maximum sum of increasing subsequence ending at each index\n    max_sum_dict = {}\n    # Iterate through the prefix\n    for i in range(index, n):\n        # If the current element is greater than or equal to k, calculate the sum of the current element and the maximum sum of increasing subsequence ending at the index i-1\n        if a[i] >= k:\n            current_sum = a[i] + max_sum_dict.get(i-1, float('-inf'))\n            # Update the maximum sum and the maximum sum of increasing subsequence if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_increasing = a[i]\n        # If the current element is not greater than or equal to k, update the maximum sum of increasing subsequence ending at the index i-1\n        else:\n            max_sum_dict[i] = max_sum_dict.get(i-1, float('-inf'))\n    # Return the maximum sum of increasing subsequence\n    return max_sum_increasing\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k > index:\n        return 0\n\n    dp = [0] * n\n\n    # Initialize the first element of dp array\n    dp[0] = a[0]\n\n    # Calculate the sum of the first subsequence\n    for i in range(1, index):\n        dp[i] = max(dp[i - 1] + a[i], a[i])\n\n    # Initialize the second element of dp array\n    if a[index] >= a[k - 1]:\n        dp[index] = a[index]\n    else:\n        dp[index] = max(dp[index - 1] + a[index], a[index])\n\n    # Calculate the maximum sum of increasing subsequence\n    max_sum = max(dp[0:index + 1])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], a[i])\n    \n    max_sum = dp[index]\n    max_sum_ending_at_k = dp[index]\n    \n    for i in range(index + 1, k):\n        max_sum = max(dp[i - 1] + a[i], max_sum)\n        max_sum_ending_at_k = max(dp[i - 1] + a[i], max_sum_ending_at_k)\n    \n    return max_sum_ending_at_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    max_sum = float('-inf')\n    for i in range(index, k + 1):\n        prefix_sum = a[0] * i\n        if i == k:\n            prefix_sum += a[k]\n        else:\n            prefix_sum += a[i]\n        max_sum = max(max_sum, prefix_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k > index:\n        return -1\n\n    if k == index:\n        return a[k]\n\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(index, k):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # base case\n    if index == n:\n        return 0\n    \n    # initialize variables\n    max_sum = 0\n    current_sum = 0\n    max_sum_ending_at_i = 0\n    current_sum_ending_at_i = 0\n    \n    # iterate over all elements from i to n-1\n    for i in range(index, n):\n        if i == index:\n            current_sum = a[i]\n            current_sum_ending_at_i = a[i]\n        elif i == k:\n            current_sum += a[i]\n            current_sum_ending_at_i += a[i]\n        else:\n            current_sum = max(current_sum, a[i])\n            current_sum_ending_at_i = max(current_sum_ending_at_i, current_sum)\n            \n        max_sum = max(max_sum, current_sum_ending_at_i - current_sum)\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize the maximum sum with 0\n    max_sum = 0\n    # Initialize the prefix sum with 0\n    prefix_sum = [0] * n\n    # Initialize the sum with 0\n    sum = 0\n    # Traverse the array from 0 to i-1\n    for i in range(n):\n        # If the current element is greater than or equal to k\n        if a[i] >= k:\n            # Update the prefix sum and the sum by adding a[i] to it\n            prefix_sum[i] = prefix_sum[i-1] + a[i]\n            sum = sum + a[i]\n            # If the current sum is greater than the maximum sum\n            if sum > max_sum:\n                max_sum = sum\n        # If the current element is less than k\n        else:\n            # Update the prefix sum by adding a[i] to it\n            prefix_sum[i] = prefix_sum[i-1] + a[i]\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    elif index == 0:\n        return max(a[k], max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k),\n                   max_sum_increasing_subseq(a, n, index, k - 1))\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    colon = deepcopy(tuplex)\n    \n    # Get the length of the tuple\n    length = len(colon)\n    \n    # Check if the length of the colon is less than m\n    if length < m:\n        # Pad the colon with None values\n        colon.extend(None for _ in range(m - length))\n    \n    # Check if the length of the colon is greater than m\n    if length > m:\n        # Truncate the colon to m elements\n        colon = colon[:m]\n    \n    # Check if the length of the colon is less than n\n    if length < n:\n        # Pad the colon with None values\n        colon.extend(None for _ in range(n - length))\n    \n    # Check if the length of the colon is greater than n\n    if length > n:\n        # Truncate the colon to n elements\n        colon = colon[:n]\n    \n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex (tuple): tuple to get colon from.\n        m (int): length of tuple.\n        n (int): number of colon in the tuple.\n\n    Returns:\n        list: list of colon tuples.\n\n    \"\"\"\n    colons = []\n    for i in range(m):\n        colon_tup = tuple(tuplex[i::n])\n        colons.append(colon_tup)\n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a deep copy of the input tuple\n    copy_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(copy_tuplex)\n    # Get the indices of the first and last elements\n    first_index = 0\n    last_index = length - 1\n    # Check if the indices are valid\n    if first_index < m and last_index < n:\n        # Print the colon of the tuple\n        print(\" \".join(str(x) for x in copy_tuplex[first_index:last_index+1]))\n    else:\n        # If the indices are invalid, print an error message\n        print(\"Error: Invalid indices\")"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # Calculate the length of the colon\n    colon_length = m - n\n\n    # Calculate the number of tuples in the colon\n    colon_count = length // colon_length\n\n    # Calculate the remainder of the division\n    remainder = length % colon_length\n\n    # Check if there is a remainder after division\n    if remainder > 0:\n        colon_count += 1\n\n    # Split the tuple into subtuples based on the colon length\n    subtuples = [new_tuplex[i:i+colon_length] for i in range(0, length, colon_length)]\n\n    # Create a new list to store the colon\n    new_colon = []\n\n    # Loop through the subtuples and append the values to the new colon\n    for subtuple in subtuples:\n        new_colon.append(tuple(subtuple))\n\n    # Return the new colon\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex: tuple, the original tuple\n    m: int, the number of rows in the colon\n    n: int, the number of columns in the colon\n\n    Returns:\n    list, the colon of the tuple\n    '''\n\n    # Create a copy of the tuple to avoid modifying the original\n    copy_tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_elems = len(copy_tuplex)\n\n    # Check if the new tuple will have more elements than the original\n    if num_elems > m * n:\n        raise ValueError(\"The new tuple will have more elements than the original.\")\n\n    # Check if the number of columns is greater than the number of rows\n    if n > m:\n        raise ValueError(\"The number of columns must be less than or equal to the number of rows.\")\n\n    # Get the indices for the rows and columns in the new tuple\n    row_indices = [i for i in range(m)]\n    col_indices = [j for j in range(n)]\n\n    # Create a new list to store the colon of the tuple\n    colon = []\n\n    # Iterate through the rows\n    for i in range(m):\n        # Create a new list to store the values for the new tuple\n        row = []\n\n        # Iterate through the columns\n        for j in range(n):\n            # Get the index of the element in the original tuple\n            index = i * n + j\n\n            # Check if the index is valid\n            if index < num_elems:\n                # Get the value of the element in the original tuple\n                value = copy_tuplex[index]\n\n                # Add the value to the new list of the row\n                row.append(value)\n            else:\n                # If the index is out of range, add None to the new list of the row\n                row.append(None)\n\n        # Add the row to the colon list\n        colon.append(row)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Convert the input tuple to a list\n    lst = list(tuplex)\n\n    # Copy the list to create the colon\n    new_lst = deepcopy(lst)\n\n    # Create the colon by looping through the original list and appending elements to the new list\n    for i in range(n):\n        new_lst.append(lst[i])\n\n    # Convert the new list back to a tuple\n    new_tuplex = tuple(new_lst)\n\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = tuple(new_tuplex[i:i+n])\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Make a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the indices of the elements to be colonized\n    indices = set()\n    for i in range(len(tuplex_copy)):\n        for j in range(m):\n            if tuplex_copy[i][j]!= '':\n                indices.add((i, j))\n\n    # Colonize the elements\n    colonized_tuplex = []\n    for index in indices:\n        i, j = index\n        row = []\n        for k in range(n):\n            if k == j:\n                row.append(' ')\n            else:\n                row.append(tuplex_copy[i][k])\n        colonized_tuplex.append(row)\n\n    # Return the colonized tuple\n    return colonized_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # calculate the number of elements in the new tuple\n    num_elements = len(new_tuplex)\n    # calculate the number of columns\n    num_cols = num_elements // m\n    # calculate the number of rows\n    num_rows = num_elements // n\n    # calculate the remainder of num_elements divided by m\n    remainder_m = num_elements % m\n    # calculate the remainder of num_elements divided by n\n    remainder_n = num_elements % n\n    # loop through the rows of the new tuple and insert the correct number of elements into each row\n    for i in range(num_rows):\n        for j in range(m):\n            new_tuplex[i*m+j] = (i+1)*1000+j+1\n    # loop through the columns of the new tuple and insert the correct number of elements into each column\n    for i in range(num_cols):\n        for j in range(n):\n            new_tuplex[i*n+j] = (i+1)*10000+j+1\n    # loop through the remainder rows of the new tuple and insert the correct number of elements into each row\n    for i in range(remainder_m):\n        for j in range(m):\n            new_tuplex[num_rows*m+i*m+j] = (num_rows+1)*1000+i*1000+j+1\n    # loop through the remainder columns of the new tuple and insert the correct number of elements into each column\n    for i in range(remainder_n):\n        for j in range(n):\n            new_tuplex[num_rows*n+i*n+j] = (num_rows+1)*10000+i*10000+j+1\n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = new_tuplex[:m]\n    new_tuplex += (0,) * (n - len(new_tuplex))\n    return new_tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the specified number of N products\n    for _ in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product1 = nums1[-1] * nums1[-2]\n        product2 = nums2[-1] * nums2[-2]\n        \n        # Add the product to the result list\n        result.append(product1)\n        result.append(product2)\n        \n        # Remove the largest numbers from each list\n        nums1.pop(-1)\n        nums2.pop(-1)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n\n    for i in range(N):\n        product1 = nums1[i] * nums1[i + 1] * nums1[i + 2]\n        product2 = nums2[i] * nums2[i + 1] * nums2[i + 2]\n\n        largest_products.append(max(product1, product2))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must be of the same length.\")\n    if N > len(nums1):\n        raise ValueError(\"The number of products to be found cannot be greater than the length of the first list.\")\n    \n    # Calculate the products of the selected factors\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= max(nums1[i], nums2[i])\n        product2 *= max(nums1[i], nums2[i])\n    \n    # Calculate the products of the remaining factors\n    product3 = 1\n    product4 = 1\n    for i in range(N):\n        if i < len(nums1) // 2:\n            product3 *= max(nums1[i], nums2[i])\n        else:\n            product4 *= max(nums1[i], nums2[i])\n    \n    # Return the largest product\n    return max(product1, product2, product3, product4)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    max_products = [0] * N\n    \n    # loop through each element of the first list\n    for i in range(len(nums1)):\n        # loop through each element of the second list\n        for j in range(len(nums2)):\n            # check if the product of the corresponding elements is greater than the current max product\n            if nums1[i] * nums2[j] > max_products[i]:\n                max_products[i] = nums1[i] * nums2[j]\n    \n    # return the maximum products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the largest N products\n    max_product1 = max(nums1[0] * nums1[1], nums1[0] * nums2[0], nums2[0] * nums1[1], nums2[0] * nums2[1])\n    max_product2 = max(nums2[0] * nums1[1], nums2[0] * nums2[1], nums1[0] * nums2[1], nums1[0] * nums1[1])\n\n    # Return the largest products\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        max_product = max(nums1[i], nums2[i])\n        min_product = min(nums1[i], nums2[i])\n        products.append(max_product * min_product)\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize the maximum product as zero\n    max_product = 0\n    \n    # Iterate through the given lists\n    for i in range(N):\n        # Find the maximum product for the first factor\n        factor1_max_product = max(nums1[i] * nums1[j] for j in range(i+1, N))\n        \n        # Find the maximum product for the second factor\n        factor2_max_product = max(nums2[i] * nums2[j] for j in range(i+1, N))\n        \n        # Update the maximum product if the current product is greater than the previous maximum product\n        if factor1_max_product * factor2_max_product > max_product:\n            max_product = factor1_max_product * factor2_max_product\n    \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the desired number of products\n    for _ in range(N):\n        # Calculate the largest product for the first factor\n        prod1 = nums1[0] * nums1[1]\n        # Calculate the largest product for the second factor\n        prod2 = nums2[0] * nums2[1]\n        # Add the two products together if the first factor is greater than the second factor\n        if prod1 > prod2:\n            result.append(prod1)\n            # Remove the two largest numbers from the lists\n            nums1 = nums1[2:]\n            nums2 = nums2[2:]\n        # If the first factor is less than or equal to the second factor, add the larger number\n        else:\n            result.append(prod2)\n            nums1 = nums1[1:]\n            nums2 = nums2[1:]\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two input lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables to store the largest products\n    largest_prod1 = 0\n    largest_prod2 = 0\n\n    # loop through the list of N elements and find the largest products\n    for i in range(N):\n        # calculate the product of the first factor\n        prod1 = nums1[i] * nums1[i+1] * nums1[i+2] *... * nums1[i+N-1]\n\n        # calculate the product of the second factor\n        prod2 = nums2[i] * nums2[i+1] * nums2[i+2] *... * nums2[i+N-1]\n\n        # update the largest products if the current one is larger\n        if prod1 > largest_prod1:\n            largest_prod1 = prod1\n        if prod2 > largest_prod2:\n            largest_prod2 = prod2\n\n    return largest_prod1, largest_prod2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to keep track of the largest products and their indices\n    max1 = [float('-inf')] * N\n    max2 = [float('-inf')] * N\n    max1_idx = [0] * N\n    max2_idx = [0] * N\n    \n    # Loop through the two lists and find the largest N products of one factor\n    for i in range(N):\n        for j in range(len(nums1)):\n            if nums1[j] * nums2[i] > max1[i]:\n                max1[i] = nums1[j] * nums2[i]\n                max1_idx[i] = j\n        for j in range(len(nums2)):\n            if nums2[j] * nums1[i] > max2[i]:\n                max2[i] = nums2[j] * nums1[i]\n                max2_idx[i] = j\n    \n    # Find the largest N products of both factors\n    max_product = float('-inf')\n    for i in range(N):\n        if max1[i] > max_product:\n            max_product = max1[i]\n        if max2[i] > max_product:\n            max_product = max2[i]\n    \n    return max_product, max1_idx, max2_idx"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to -1\n    bit_pos = -1\n    # Iterate through the bits of n from right to left\n    for i in range(31, -1, -1): \n        # Check if the bit is set\n        if n & (1 << i): \n            # If the bit is set, update the leftmost unset bit\n            bit_pos = i\n            break\n    # Set the leftmost unset bit to 1\n    n |= (1 << bit_pos)\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Convert the binary representation of n to a list of bits \n    bits = [int(bit) for bit in bin(n)[2:]] \n\n    # Iterate through the bits in reverse order \n    for i in range(len(bits)-1, -1, -1): \n        \n        # If the bit is 0, set it to 1 and move on to the next bit \n        if bits[i] == 0: \n            bits[i] = 1\n            break \n        \n        # If the bit is 1, move on to the next bit \n        else: \n            continue \n    \n    # Convert the list of bits back to an integer \n    n_new = int(''.join(str(bit) for bit in bits), 2) \n\n    return n_new"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2**((n.bit_length()-1)).bit_length()"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index of the set bit to -1\n    set_bit_index = -1\n    # Iterate over all the bits of the number n\n    for i in range(32):\n        # Check if the ith bit is set to 1\n        if (n & (1 << i)):\n            # If it is set to 1, then set the set_bit_index to i\n            set_bit_index = i\n            break\n    # If there is no set bit, return n unchanged\n    if set_bit_index == -1:\n        return n\n    # Set the left most set bit to 1\n    n |= (1 << set_bit_index)\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the unset bits\n    unset = 0\n    \n    # Find the number of set bits in the binary representation of n\n    count = bin(n).count('1')\n    \n    # Set the unset bits to the number of set bits in the binary representation of n\n    unset = (1 << count) - 1\n    \n    # Set the leftmost unset bit to 1\n    n |= unset\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer `n`.\n    '''\n    # Loop through each bit in the binary representation of `n`\n    for i in range(31, -1, -1):\n        # Check if the ith bit is 0\n        if (n & (1 << i)) == 0:\n            # If it is, set the ith bit to 1 and return the new value of `n`\n            n = n | (1 << i)\n            return n\n    # If all bits are set to 1, return the original value of `n`\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert integer to binary string\n    binary_str = bin(n)[2:]\n    # iterate over the binary string and find the left most unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            # set the left most unset bit\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n            break\n    # convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize an array to keep track of unset bits\n    unset_bits = [1] * (n.bit_length() + 1)\n\n    # Iterate through the unset_bits array and set the first unset bit to 1\n    for i in range(1, len(unset_bits)):\n        if unset_bits[i] == 1:\n            unset_bits[i] = 0\n            break\n\n    # Convert unset_bits array back to integer\n    unset_bits = int(\"\".join(map(str, unset_bits)), 2)\n\n    # Set the leftmost unset bit of n to 1\n    return n | unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n    # Initialize the index and bit position to 0\n    index = 0\n    bit_pos = 0\n    \n    # Loop through all the bits of the given number\n    while n:\n        # If the current bit is 0, increment the index and reset the bit position\n        if n & 1 == 0:\n            index += 1\n            bit_pos = 0\n        # If the current bit is 1, check if the bit position is less than 31, which means there is an unset bit\n        elif bit_pos < 31:\n            bit_pos += 1\n        # If there is no unset bit, stop the loop\n        else:\n            break\n            \n    # If there is an unset bit, shift the bits to the left and set the leftmost unset bit to 1\n    if bit_pos < 31:\n        n = n << bit_pos | 1\n    # If there is no unset bit, return the original number\n    else:\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Get the binary representation of n\n    binary_str = bin(n)[2:]\n    # Iterate through the binary string and set the leftmost unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            n = n | (1 << i)\n            break\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*(r**3) + math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Parameters:\n    r: radius of the base of the cone\n    h: height of the cone\n    \n    Returns:\n    volume: volume of the cone\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Calculate the volume of the cone\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function finds the volume of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n    \"\"\"\n\n    V = (1/3) * math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula:\n    V = \u03c0r^2h.\n\n    Parameters:\n        r (float): radius of the cone.\n        h (float): height of the cone.\n\n    Returns:\n        float: volume of the cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of a cone\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function returns the highest power of 2 that is less than or equal to n.\n    '''\n    # To find the highest power of 2, we can start with n and shift it by a power of 2 until it becomes less than n.\n    # Then we divide the power of 2 by 2 to get the next highest power of 2.\n    while n >= 2:\n        n >>= 1 # shift by a power of 2\n    return n # return the final result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return highest_Power_of_2(n//2) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 \n    that is less than or equal to n.\n    '''\n\n    # Initialize a variable to store the highest power of 2 found so far.\n    highest_pow_of_2 = 1\n\n    # Loop until we find the highest power of 2 that is less than or equal to n.\n    while highest_pow_of_2 <= n:\n        # Check if the current power of 2 is less than or equal to n. If so, update the highest power of 2 found so far.\n        if highest_pow_of_2 * 2 <= n:\n            highest_pow_of_2 *= 2\n        # If the current power of 2 is greater than n, we have found the highest power of 2 that is less than or equal to n.\n        else:\n            break\n\n    return highest_pow_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    highest_power = 1\n    while highest_power < n:\n        highest_power <<= 1\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if (1 << i) > n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while True:\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            n = n >> 1\n            count = 0\n            while n:\n                count += 1\n                n = n >> 1\n            return count"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize the highest power of 2 variable and its value as 0\n    highest_power_of_2 = 0\n    highest_power_of_2_value = 0\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Check if the current number is a power of 2\n        if i == 1:\n            highest_power_of_2 = 1\n            highest_power_of_2_value = i\n        elif i == 2:\n            highest_power_of_2 = 1\n            highest_power_of_2_value = i\n        elif i == 4:\n            highest_power_of_2 = 2\n            highest_power_of_2_value = i\n        elif i == 8:\n            highest_power_of_2 = 3\n            highest_power_of_2_value = i\n        elif i == 16:\n            highest_power_of_2 = 4\n            highest_power_of_2_value = i\n        elif i == 32:\n            highest_power_of_2 = 5\n            highest_power_of_2_value = i\n        elif i == 64:\n            highest_power_of_2 = 6\n            highest_power_of_2_value = i\n        elif i == 128:\n            highest_power_of_2 = 7\n            highest_power_of_2_value = i\n        elif i == 256:\n            highest_power_of_2 = 8\n            highest_power_of_2_value = i\n        elif i == 512:\n            highest_power_of_2 = 9\n            highest_power_of_2_value = i\n        elif i == 1024:\n            highest_power_of_2 = 10\n            highest_power_of_2_value = i\n        elif i == 2048:\n            highest_power_of_2 = 11\n            highest_power_of_2_value = i\n        elif i == 4096:\n            highest_power_of_2 = 12\n            highest_power_of_2_value = i\n        elif i == 8192:\n            highest_power_of_2 = 13\n            highest_power_of_2_value = i\n        elif i == 16384:\n            highest_power_of_2 = 14\n            highest_power_of_2_value = i\n        elif i == 32768:\n            highest_power_of_2 = 15\n            highest_power_of_2_value = i\n        elif i == 65536:\n            highest_power_of_2 = 16\n            highest_power_of_2_value = i\n        elif i == 131072:\n            highest_power_of_2 = 17\n            highest_power_of_2_value = i\n        elif i == 262144:\n            highest_power_of_2 = 18\n            highest_power_of_2_value = i\n        elif i == 524288:\n            highest_power_of_2 = 19\n            highest_power_of_2_value = i\n        elif i == 1048576:\n            highest_power_of_2 = 20\n            highest_power_of_2_value = i\n        elif i == 2097152:\n            highest_power_of_2 = 21\n            highest_power_of_2_value = i\n        elif i == 4194304:\n            highest_power_of_2 = 22\n            highest_power_of_2_value = i\n        elif i == 8388608:\n            highest_power_of_2 = 23\n            highest_power_of_2_value = i\n        elif i == 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through powers of 2 from 1 to 32\n    for i in range(1, 33):\n        # if the current power of 2 is less than or equal to n, return it\n        if i <= n:\n            return i\n    # if no power of 2 is less than or equal to n, return -1\n    return -1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two lucas numbers\n    lucas_prev = 2\n    lucas_curr = 1\n    \n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the next lucas number\n        lucas_next = lucas_prev + lucas_curr\n        \n        # Update the current and previous lucas numbers\n        lucas_prev = lucas_curr\n        lucas_curr = lucas_next\n    \n    # Return the nth lucas number\n    return lucas_curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base case:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive case:\n    a, b = 2, 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    \n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = format(element, string)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(lst, fmt_str):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    lst: a list of elements\n    fmt_str: a format string that can be used to apply to the elements in lst\n\n    Returns:\n    a new list with the applied format string\n    \"\"\"\n    return [fmt_str.format(elem) for elem in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert the first list to a dictionary\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n\n    # Convert the second list to a dictionary\n    d2 = {}\n    for i in range(len(l2)):\n        d2[l1[i]] = l3[i]\n\n    # Merge the two dictionaries into a new dictionary\n    d3 = {**d1, **d2}\n\n    return d3"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n\n    # iterate over the lists\n    for i in range(len(l1)):\n        # create a new dictionary for each list element\n        nested_dict[str(l1[i])] = {}\n\n        # iterate over the nested dictionary of the current list\n        for j in range(len(l2[i])):\n            # add key-value pairs to the nested dictionary of the current list\n            nested_dict[str(l1[i])][str(l2[i][j])] = l3[i][j]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary to store the converted data\n    data = {}\n    # Loop through the three lists and append the data to the dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    # Return the dictionary of data\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    \n    # loop through each list and convert it to dictionary\n    for i in range(len(l1)):\n        # convert the list to dictionary\n        d = dict(zip(l2[i], l3[i]))\n        # add the dictionary to the result dictionary\n        result[l1[i]] = d\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    \n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dict = {key2: value2 for key2, value2 in zip(l3[i], l2[i])}\n        result[key] = sub_dict\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Use dictionary comprehension to create nested dictionary\n    nested_dict = {k: {v: list(map(int, list(filter(lambda x: x.isdigit(), item)))) for v, item in enumerate(l2)} for k, item in enumerate(l1)}\n    # Add nested dictionary to a new dictionary with keys from l1 and values from l3\n    final_dict = {key: value for key, value in zip(l1, l3)}\n    final_dict.update(nested_dict)\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if value in l3:\n            sub_dict = {}\n            for j in range(len(l2)):\n                sub_key = l2[j]\n                sub_value = l3[l2[j]]\n                sub_dict[sub_key] = sub_value\n            result[key] = sub_dict\n        else:\n            result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through each list\n    for i in range(len(l1)):\n        # add the key to the dictionary\n        result[l1[i]] = {}\n        # loop through each sublist of the first list\n        for j in range(len(l2)):\n            # add the key to the inner dictionary\n            result[l1[i]][l2[j]] = l3[i][j]\n    # return the nested dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        f_n = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n        if f_n > n:\n            return f_n\n        else:\n            return n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, return n\n    if n == 1:\n        return n\n    \n    # Recursive case: compute the sum of the first n/5 terms\n    first_sum = get_max_sum(n/5)\n    \n    # Compute the sum of the other n/5 terms\n    other_sum = get_max_sum(n-5)\n    \n    # Return the maximum of the two sums\n    return max(first_sum + other_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    return max(fibonacci(n/5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, i):\n        if i == 0:\n            return n\n        else:\n            return max(n + helper(n // 2, i - 1), helper(n // 3, i - 1)) + helper(n // 4, i - 1) + helper(n // 5, i - 1)\n\n    return helper(n, 4)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    def get_sum_of_fractions(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return get_sum_of_fractions(n//2) + get_sum_of_fractions(n//2)\n        else:\n            return get_sum_of_fractions(n//2) + n\n\n    return max(get_sum_of_fractions(n//5) + n, get_sum_of_fractions(n//4) + get_sum_of_fractions(n//4) + get_sum_of_fractions(n//4) + get_sum_of_fractions(n//4) + get_sum_of_fractions(n//4) + n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    # Loop through the input list\n    for item in input_list:\n        # Check if the current item has a length greater than the current max length\n        if len(item) > max_length:\n            # If yes, update the max length and max list\n            max_length = len(item)\n            max_list = item\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize the maximum length to 0\n    max_len = 0\n    \n    # Loop through each list in the input list\n    for lst in input_list:\n        # Check if the length of the current list is greater than the maximum length\n        if len(lst) > max_len:\n            # Update the maximum length to be the length of the current list\n            max_len = len(lst)\n    \n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements from the tuple\n    unique_set = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Using a set to remove duplicates and checking if it's empty\n    return not test_tup in set(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # check if the set has any elements\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store characters and their frequency\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeating character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as an argument and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    # Iterate through the dictionary and find the first non-repeated character\n    for char in count_dict:\n        if count_dict[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    # Find the first character with count 1 in the dictionary\n    for char in count:\n        if count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the string and return the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Create an empty dictionary to store character count\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count\n        else:\n            char_count[char] += 1\n\n    # Loop through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return \"No non-repeating characters found\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not isinstance(string, str):\n        return False\n    \n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function finds the median of three numbers by sorting the numbers\n    and finding the middle element.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Find the middle two numbers\n    middle_nums = sorted_nums[1:-1]\n\n    # Calculate the median\n    median = sum(middle_nums) / len(middle_nums)\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Find the middle number\n    middle_number = numbers[1]\n    \n    # Find the median based on the number of elements in the list\n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, find the average of the middle two numbers\n        median = (middle_number + numbers[2]) / 2\n    else:\n        # If the length of the list is odd, find the middle number\n        median = middle_number\n        \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Calculate the indices of the middle two numbers\n    mid_index = len(numbers) // 2\n    # Calculate the middle two numbers\n    mid_num1 = numbers[mid_index - 1]\n    mid_num2 = numbers[mid_index]\n    # Calculate the median by averaging the middle two numbers\n    median = (mid_num1 + mid_num2) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the given numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median of three numbers\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        median = nums[len(nums) // 2]\n\n    # Return the median of three numbers\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # find the median\n    if len(nums) % 2 == 0:\n        # even number of numbers\n        median = (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2\n    else:\n        # odd number of numbers\n        median = nums[len(nums) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as inputs and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n    mid = len(sorted_list)//2\n    \n    # Check if the length of the list is even or odd\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Find the middle index\n    mid = len(nums) // 2\n\n    # If the length of the sorted list is odd, the median is the middle number\n    if len(nums) % 2!= 0:\n        median = nums[mid]\n\n    # If the length of the sorted list is even, the median is the average of the two middle numbers\n    else:\n        median = (nums[mid - 1] + nums[mid]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the list\n    length = len(sorted_numbers)\n    \n    # If the length of the list is odd, then the median is the middle number\n    if length % 2 == 1:\n        median = sorted_numbers[length//2]\n    \n    # If the length of the list is even, then the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[length//2] + sorted_numbers[length//2-1])/2\n    \n    # Return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sums = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        digit_sums.append(digit_sum)\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # sum up the digits\n        total_sum = sum(digits)\n        # print the sum of digits for each number\n        print(f\"The sum of digits for {num} is {total_sum}\")"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of characters\n        num_str = str(num)\n        digit_list = list(num_str)\n        \n        # Iterate through each character in the list and convert it to an integer\n        for digit in digit_list:\n            digit = int(digit)\n            \n            # Add the integer to the total sum\n            total_sum += digit\n            \n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(sum, map(int, str(num)))))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # Convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Sum the digits and append the result to the list of total sums\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # iterate through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into its individual digits\n        digits = [int(d) for d in str(num)]\n        \n        # add up the digits and add it to the sum variable\n        sum += sum(digits)\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # Initialize a variable to store the sum of digits of each number\n    sum_of_digits = 0\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Convert each character in the string to an integer and add it to the sum_of_digits variable\n        for char in num_str:\n            sum_of_digits += int(char)\n            \n    return sum_of_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n    # loop through each element in the first tuple\n    for i in range(4):\n        # perform bitwise xor operation on the corresponding elements of the two tuples\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Bitwise XOR is defined as the result of performing the exclusive OR operation on the binary representations of the two operands\n    # Exclusive OR is defined as: A ^ B = A \u2227 \u00acB\n    # In Python, we can use the bitwise_or() function to perform the exclusive OR operation, and then use the bitwise_not() function to negate the result\n    # To perform the XOR operation, we need to know the length of the two tuples, and then loop through each index of the tuples\n    # We can then perform the XOR operation on the binary representation of the tuple element at that index\n    xor_result = 0\n    max_len = max(len(test_tup1), len(test_tup2))\n    for i in range(max_len):\n        xor_result ^= ((test_tup1[i] & test_tup2[i]) | (~test_tup1[i] & ~test_tup2[i]))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the length of the tuples\n    length = len(test_tup1)\n    \n    # Initialize the result tuple with all elements set to 0\n    result_tup = (0,) * length\n    \n    # Iterate through each element of the tuples\n    for i in range(length):\n        # Perform the bitwise xor operation on the i-th element of both tuples\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n        \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples\n    tup1 = test_tup1\n    tup2 = test_tup2\n\n    # check if both tuples have the same number of elements\n    if len(tup1)!= len(tup2):\n        print(\"Error: Both tuples must have the same number of elements!\")\n        return\n\n    # perform the mathematical bitwise xor operation across the tuples\n    result_tup = tuple(map(lambda x, y: x ^ y, tup1, tup2))\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tuple"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables to store the result and temporary variables\n    result = 0\n    temp = 0\n    \n    # iterate through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        temp = test_tup1[i] ^ test_tup2[i]\n        result |= temp\n    \n    # return the final result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    seen = set()\n    for item in test_list:\n        if tuple(item) not in seen:\n            seen.add(tuple(item))\n    return len(seen)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if type(item) == tuple:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    freq_dict = {}\n    for tup in unique_tuples:\n        freq_dict[tup] = test_list.count(tup)\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        for subitem in item:\n            unique_tuples.add((subitem,))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if len(test_tup1[i]) == len(test_tup2[i]):\n                result_tup += (tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i]))),\n            else:\n                print(\"Error: Length of sub-tuples does not match in both tuples.\")\n                return\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i]),\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize an empty list to store the sum of each tuple element\n    result = []\n\n    # iterate over both tuples simultaneously\n    for i in range(len(test_tup1)):\n        # for each tuple element, add it with its corresponding element from the other tuple\n        result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x,y: x+y, test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = tuple(sum(x) for x in zip(test_tup1[i], test_tup2[i]))\n        result.append(new_tuple)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n            else:\n                raise ValueError('The second tuple does not have enough elements to perform addition')\n        elif isinstance(test_tup2[i], tuple):\n            raise ValueError('The first tuple does not have enough elements to perform addition')\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Returns the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    # check if a is less than b\n    if a < b:   \n        return a  \n    else:   \n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1: \n        if x in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    This function checks whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two tuples as input and checks whether a particular element exists in the first tuple.\n    '''\n    \n    # Check if the first tuple is not empty\n    if not tuple1: \n        return \"The first tuple is empty.\"\n    \n    # Check if the element exists in the first tuple\n    if tuplex in tuple1: \n        return \"The element exists in the first tuple.\"\n    else:\n        return \"The element does not exist in the first tuple.\""
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:\n        print(x, \"is even and has an odd parity.\")\n    else:\n        print(x, \"is odd and has an odd parity.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: #if the number is even\n        return \"The number is even.\"\n    else: #if the number is odd\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is an even number.\")\n    else:\n        print(x, \"is an odd number.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a positive integer x as input and returns True if the parity of the number is odd, \n    and False otherwise.\n    '''\n\n    if x % 2 == 0:  # If x is even\n        return False\n    else:  # If x is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n        return \"even\"\n    else:\n        print(x, \"is odd\")\n        return \"odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the number is positive or negative\n    if x >= 0:\n        # If it is positive, check if the remainder of the number divided by 2 is 1\n        if x % 2 == 1:\n            return True\n        else:\n            return False\n    else:\n        # If it is negative, check if the remainder of the absolute value of the number divided by 2 is 1\n        if abs(x) % 2 == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    number_str = str(n)\n\n    # Initialize a list to store the digits of the number\n    number_list = []\n\n    # Convert the string to a list of digits\n    for digit in number_str:\n        number_list.append(int(digit))\n\n    # Reverse the list of digits\n    number_list = number_list[::-1]\n\n    # Find the largest digit in the list\n    largest_digit = max(number_list)\n\n    # Create a new list with the digits of the original number shifted by one position to the right\n    new_number_list = [largest_digit + 1] + number_list[:-1]\n\n    # Convert the new list of digits back to a string\n    new_number_str = ''.join(str(digit) for digit in new_number_list)\n\n    # Convert the string back to an integer\n    new_number = int(new_number_str)\n\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    result = ''\n    for digit in n:\n        result += str(int(digit) + 1)\n    result = int(result)\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Get the list of digits of n\n    digits = list(str(n))\n    # Find the largest digit in the list\n    largest_digit = max(digits)\n    # Create a new list with digits in decreasing order\n    decreasing_digits = sorted(set(digits), reverse=True)\n    # Combine the two lists to get the next bigger number\n    next_bigger = int(''.join(str(digit) for digit in decreasing_digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Function to find the next bigger number by rearranging the digits\n    def next_bigger(num):\n        # Check if the number is a palindrome\n        if is_palindrome(num):\n            # Reverse the number and add 1 to get the next smaller number\n            return str(int(str(num)[::-1]) + 1)\n        else:\n            # Find the first non-palindrome digit and reverse the rest of the digits\n            for i in range(len(str(num))):\n                if not is_palindrome(int(str(num)[:i] + str(num)[i+1:])):\n                    # Reverse the digits and add 1 to get the next smaller number\n                    return str(int(str(num)[:i] + str(num)[i+1:]) + 1)\n            # If no non-palindrome digit is found, return the original number\n            return str(num)\n\n    # Call the function to get the next bigger number\n    return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Initialize variables\n    num = str(n)\n    n_len = len(num)\n\n    # Find the largest digit\n    max_digit = num[0]\n    for digit in num:\n        if int(digit) > int(max_digit):\n            max_digit = digit\n\n    # Reverse the digits of the largest digit\n    max_digit_rev = ''\n    for digit in max_digit:\n        max_digit_rev = digit + max_digit_rev\n\n    # Reverse the entire number\n    num_rev = ''\n    for i in range(n_len-1, -1, -1):\n        num_rev += num[i]\n\n    # Compare the reversed digits of the largest digit with the reversed digits of the original number\n    if int(max_digit_rev) > int(num_rev):\n        # Create the next bigger number by rearranging the digits of the original number\n        num_new = ''\n        for i in range(n_len):\n            num_new += num[i]\n            if num[i] == max_digit:\n                num_new += str(int(max_digit) + 1)\n        return int(num_new)\n    else:\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Reverse the list of digits\n    digits.reverse()\n    \n    # Convert the list of digits back to a number\n    result = int(''.join(map(str, digits)))\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Args:\n    n (int): A positive integer\n\n    Returns:\n    int: The next bigger number that can be created by rearranging the digits of n.\n    \"\"\"\n    digits = list(str(n))\n    for i in range(len(digits)):\n        if digits[i] == '9':\n            digits[i] = '1'\n        elif int(digits[i]) < 9:\n            digits[i] = str(int(digits[i]) + 1)\n            break\n    new_n = int(''.join(digits))\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize an empty list to store the digits of n\n    digits = []\n    # extract the digits of n from the input number\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    # reverse the list of digits to obtain the digits in descending order\n    digits.reverse()\n    # initialize an empty list to store the digits of the next bigger number\n    next_digits = []\n    # loop through the reversed list of digits\n    for digit in digits:\n        # add the next bigger digit to the list of next digits\n        if digit == 9:\n            next_digits.append(8)\n        elif digit == 8:\n            next_digits.append(7)\n        elif digit == 7:\n            next_digits.append(6)\n        elif digit == 6:\n            next_digits.append(5)\n        elif digit == 5:\n            next_digits.append(4)\n        elif digit == 4:\n            next_digits.append(3)\n        elif digit == 3:\n            next_digits.append(2)\n        elif digit == 2:\n            next_digits.append(1)\n        elif digit == 1:\n            next_digits.append(0)\n    # concatenate the list of next digits into a single integer and return it\n    return int(''.join(map(str, next_digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits_sorted = sorted(digits, reverse=True)\n    digits_reversed = digits[::-1]\n    index = 0\n    for i in range(len(digits)):\n        if digits[i] < digits_sorted[index]:\n            digits[i], digits_reversed[index] = digits_reversed[index], digits[i]\n            index += 1\n    return int(''.join(str(d) for d in digits_reversed))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Get the list of digits of the input number\n    digits = list(str(n))\n\n    # Initialize the current number as the input number\n    current = n\n\n    # Iterate through the digits of the current number\n    for digit in digits:\n        # Check if the digit is greater than 9\n        if int(digit) > 9:\n            # Find the index of the digit in the digits list\n            index = digits.index(digit)\n\n            # Iterate through the digits list until the current digit is found\n            while digits[index] == digit:\n                index += 1\n\n            # Swap the current digit with the digit at the index found\n            digits[index], digits[digits.index(digit)] = digits[digits.index(digit)], digits[index]\n\n            # Convert the list of digits back to an integer and update the current number\n            current = int(''.join(digits))\n\n            # Reset the index\n            index = 0\n\n    # Return the current number\n    return current"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    min_heap_size = 0\n\n    for num1 in nums1:\n        while min_heap_size < k:\n            if not min_heap or num1 < min_heap[0][0]:\n                heapq.heappush(min_heap, (num1, float('inf')))\n                min_heap_size += 1\n            else:\n                heapq.heappop(min_heap)\n                min_heap_size -= 1\n\n        for num2 in nums2:\n            if num1 + num2 <= min_heap[0][0]:\n                heapq.heappush(min_heap, (num1 + num2, float('inf')))\n\n    result = []\n    for i in range(min_heap_size):\n        result.append(min_heap[i])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the first array and create a min heap of size k\n    min_heap = []\n    heapq.heapify(min_heap)\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Initialize a list to store the k smallest pairs\n    result = []\n    \n    # Iterate through the second array\n    for num in nums2:\n        # Pop the smallest elements from the heap and add the new element\n        min_num = heapq.heappop(min_heap)\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, min_num)\n        else:\n            heapq.heappush(min_heap, min(min_num, num))\n        # Add the new pair to the result list\n        result.append((min_num, num))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Iterate through the lists and calculate the sum of the pairs\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            pair_sum = num1 + num2\n            \n            # Check if the pair sum is already in the min heap\n            if pair_sum in min_heap:\n                # If it is, remove the current pair from the min heap and add the new pair to the min heap\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (pair_sum, (num1, num2)))\n                k -= 1\n                \n            # If the heap size is less than k, add the current pair to the heap\n            if k == 0:\n                heapq.heappush(min_heap, (pair_sum, (num1, num2)))\n                break\n            \n    # Extract and return the k smallest pairs from the heap\n    result = []\n    while min_heap:\n        pair_sum, pair = heapq.heappop(min_heap)\n        result.append(pair)\n        k -= 1\n        if k == 0:\n            break\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of tuples (distance, index) for each number in nums1\n    heap = [(0, i) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    # initialize a list to store the k smallest pairs\n    pairs = []\n    # loop while the heap has at least k elements\n    while k > 0 and heap:\n        # extract the smallest distance and index from the heap\n        d, i = heapq.heappop(heap)\n        # add the pair to the list\n        pairs.append((nums1[i], nums2[i]))\n        # decrement k and reinsert the smallest element in the heap\n        k -= 1\n        if k > 0:\n            # get the indices of the elements to compare with\n            j = i + 1 if i < len(nums1) - 1 else 0\n            # add the distance to the heap for the next comparison\n            heapq.heappush(heap, (d + (nums1[i] - nums1[j]) ** 2, j))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements in nums1 and nums2\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    for num in nums2:\n        # Check if there are enough elements in the min heap to form a pair\n        if len(min_heap) > k:\n            break\n        # If there are at least k elements in the heap, add the pair to the result list and remove the smallest element from each array\n        pair = (heapq.heappop(min_heap), num)\n        heapq.heappush(min_heap, pair)\n        if len(min_heap) == k:\n            yield pair"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three parameters - nums1, nums2 and k.\n    nums1 is a list of integers representing the first array.\n    nums2 is a list of integers representing the second array.\n    k is an integer representing the number of pairs we need to find.\n\n    The function returns a list of tuples representing the k smallest pairs.\n\n    The function first sorts the two arrays and then uses heapq to find the k smallest pairs.\n    \"\"\"\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n    \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Initialize the first index of the first element in nums1\n    i = 0\n    \n    # Initialize the second index of the second element in nums2\n    j = 0\n    \n    # Initialize a variable to store the smallest pair\n    smallest_pair = None\n    \n    # Loop until we find k smallest pairs\n    while k > 0:\n        # Check if the current pair is smaller than the current smallest pair\n        if (nums1[i] + nums2[j]) < smallest_pair:\n            # If it is, add it to the min heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            \n            # If the size of the min heap is greater than k, remove the smallest element from it\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            \n            # If the size of the min heap is equal to k, set the smallest pair to the smallest element in it\n            if len(min_heap) == k:\n                smallest_pair = heapq.heappop(min_heap)[0]\n            \n            # If we have found the k smallest pairs, break out of the loop\n            k -= 1\n            \n            # Move the i and j indices\n            i += 1\n            j += 1\n            \n        # If the current pair is greater than the current smallest pair, move the j index\n        else:\n            j += 1\n            \n    # Create a list of tuples representing the k smallest pairs\n    k_smallest_pairs = [(x[1], x[0]) for x in min_heap]\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes three arguments:\n    - nums1: a list of integers\n    - nums2: a list of integers\n    - k: an integer representing the number of pairs to return\n\n    This function returns a list of pairs consisting of one element from the first array and one element from the second array,\n    sorted by the smallest element in the first array. The function uses a min-heap to keep track of the k smallest pairs.\n    '''\n\n    # Create a min-heap of size k\n    min_heap = [(-num2, num1) for num1, num2 in zip(nums1, nums2)]\n    heapq.heapify(min_heap)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate until there are k pairs in the heap\n    while k > 0:\n        # Get the smallest pair and remove it from the heap\n        pair = heapq.heappop(min_heap)\n\n        # Add the pair to the result list\n        result.append(pair)\n\n        # Increment the number of pairs left\n        k -= 1\n\n    # Sort the result list by the smallest element in the first array\n    result.sort()\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a min-heap of size k to store the k smallest pairs\n    min_heap = []\n\n    # Iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add (num1, num2) to the min-heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1, num2))\n            # If the heap size is greater than or equal to k, compare the top element with the current pair\n            # If the top element is smaller, remove it and add the current pair to the heap\n            elif num1 <= min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1, num2))\n            # If the top element is larger, compare the top element with the current pair\n            # If the top element is larger, remove it and add the current pair to the heap\n            else:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1, num2))\n\n    # Extract the k smallest pairs and store them in a list\n    pairs = []\n    while min_heap:\n        pairs.append(heapq.heappop(min_heap))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the current pair\n            current_pair = (nums1[i], nums2[j])\n            # If the current pair is smaller than the smallest pair in the heap, add it to the heap\n            if len(min_heap) < k or current_pair < min_heap[0]:\n                heapq.heappush(min_heap, current_pair)\n            # Otherwise, if the current pair is larger than the smallest pair in the heap, remove the smallest pair from the heap\n            elif current_pair > min_heap[0]:\n                heapq.heappop(min_heap)\n    # Return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a list to store the pairs\n    pairs = []\n    \n    # Create a min heap to store the pairs with their indices\n    min_heap = []\n    \n    # Iterate through the first array and for each element, find the corresponding element in the second array\n    for i in range(len(nums1)):\n        # Find the index of the minimum element in the second array which is greater than or equal to nums1[i]\n        j = bisect_right(nums2, nums1[i])\n        \n        # Add the pair to the pairs list and the min heap\n        pairs.append((nums1[i], nums2[j]))\n        heapq.heappush(min_heap, (nums1[i], j))\n        \n        # If the min heap has more than k elements, remove the minimum element from it\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n            \n    # Return the k smallest pairs\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product as infinity\n    min_product = float('inf')\n    \n    # loop through each tuple in the list\n    for tup in list1:\n        # loop through each tuple in the list\n        for tup2 in list1:\n            # check if each tuple is a pair and is not equal to the current pair\n            if len(tup) == 2 and len(tup2) == 2 and tup!= tup2:\n                # multiply the values of the tuples and check if the result is less than the current minimum product\n                product = tup[0] * tup2[1]\n                if product < min_product:\n                    min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize variables for minimum and maximum\n    minimum = float('inf')\n    maximum = float('-inf')\n\n    # loop through list of tuples\n    for i in range(len(list1)):\n        # check if tuple is greater than current maximum\n        if list1[i][0] > maximum:\n            maximum = list1[i][0]\n\n        # check if tuple is less than current minimum\n        if list1[i][0] < minimum:\n            minimum = list1[i][0]\n\n        # check if tuple is greater than current maximum\n        if list1[i][1] > maximum:\n            maximum = list1[i][1]\n\n        # check if tuple is less than current minimum\n        if list1[i][1] < minimum:\n            minimum = list1[i][1]\n\n    # calculate minimum product\n    min_product = minimum * maximum\n\n    # return minimum product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2 == 1:\n        return \"Error: List should have even length.\"\n    \n    min_product = float('inf')\n    min_pair = ()\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n                min_pair = pair\n    \n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and returns the minimum product of two tuples within the list.\n\n    Args:\n    list1: a list of tuples\n\n    Returns:\n    int: the minimum product of two tuples within the list\n\n    Examples:\n    min_product_tuple([(1,2), (3,4), (5,6)])  # returns 36\n    min_product_tuple([(7,8), (9,10), (11,12)])  # returns 720\n    \"\"\"\n\n    # initialize variables to store minimum product and current minimum product\n    min_product = float('inf')\n    current_min_product = float('inf')\n\n    # loop through the list of tuples\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples and compare to current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < current_min_product:\n                current_min_product = product\n\n            # update the minimum product if the current minimum product is smaller than the current minimum product\n            if current_min_product < min_product:\n                min_product = current_min_product\n\n    # return the minimum product of two tuples within the list\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < minimum_product:\n                minimum_product = product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[0])\n    n = len(list1)\n    min_product = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            products.append(list1[i] * list1[j])\n    min_product = min(products)\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        raise ValueError(\"List should not be empty\")\n    \n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of values as input and returns the minimum value in the list.\n    '''\n    if not listval:\n        raise ValueError('The input list is empty.')\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # Loop through the remaining elements of the list\n    for val in listval[1:]:\n        # If the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # Loop through the list and compare each element with the minimum value\n    for element in listval[1:]:\n        if element < min_val:\n            min_val = element\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initialize minimum value to first value in list\n    for item in listval:\n        if item < min_val:\n            min_val = item # update minimum value if current value is smaller\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = None\n    # Loop through the list and compare each value to the current minimum value\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_num = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_num:\n                min_num = listval[i]\n        return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # iterate over the list and find the minimum value\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # create a regular expression pattern to split the string by underscore\n    pattern = re.compile('(_)')\n    # split the string by underscore and convert the first letter to lowercase\n    camel_case_word = pattern.sub(lambda x: x.group(1).upper(), word).lstrip('_')\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with capitalized letters\n    camel_case_word = ''.join(words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # split the word into words by underscores\n    words = re.findall(r'_[a-z]', word)\n    # join the words into a camel case string\n    camel_case = ''.join([word[2:].capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words using regex\n    words = re.findall(r'\\w+', word)\n    \n    # Convert the first word to camel case\n    result = words[0]\n    \n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        word = words[i]\n        if i == len(words) - 1:\n            result += word.capitalize()\n        else:\n            result += word.capitalize() + '_'\n    \n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscores\n    words = re.findall(r'([A-Za-z0-9]+)', word)\n    \n    # Initialize the camel case string\n    camel_case_word = ''\n    \n    # Convert the first word to lowercase and add to camel case string\n    camel_case_word += words[0].lower()\n    \n    # Iterate through the rest of the words\n    for word in words[1:]:\n        # Convert the word to uppercase and add to camel case string\n        camel_case_word += word.capitalize()\n        \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to snake case\n    snake_case = re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()\n    # Convert the snake case to camel case\n    camel_case = ''.join(snake.capitalize() for snake in snake_case.split('_'))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), *[x.capitalize() for x in re.findall(r'_\\w', word)]])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in word:\n        if i.isupper():\n            camel_case += i\n        elif i.islower():\n            if len(camel_case) > 0:\n                camel_case += \"_\"\n            camel_case += i.upper()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1):\n        raise ValueError(\"n is greater than the length of the list.\")\n\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    if n < 1 or n > len(list1):\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n\n    Parameters:\n    list1 (list): A list of tuples.\n    n (int): The position of the element to be extracted.\n\n    Returns:\n    The nth element from the list.\n    '''\n\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list):\n        return list1[n-1]\n    else:\n        raise TypeError(\"Invalid input: list1 should be a list of tuples.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n    \n    Parameters:\n    - lst: list of tuples\n    - n: index of the element to extract\n    \n    Returns:\n    - nth element from lst or None if the index is out of bounds\n    \"\"\"\n    if n < 0 or n >= len(lst):\n        return None\n    else:\n        return lst[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the given list of tuples is empty\n    if not list1:\n        return \"The list is empty.\"\n    \n    # Extract the nth element from the list of tuples\n    nth_element = list1[n-1][1]\n    \n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Parameters:\n    lst (list): A list of tuples.\n    n (int): The index of the element to extract.\n\n    Returns:\n    The nth element from the list of tuples, or None if the index is out of range.\n    \"\"\"\n    if len(lst) >= n and n >= 0:\n        return lst[n]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not list1 or n < 1:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any overlapping \n    value between them and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    It returns True if there is any overlapping element in both the sequences.\n    Otherwise, it returns False.\n    \"\"\"\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            print(f\"{item} is present in both lists\")\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as inputs and checks whether any value in the first list exists in the second list.\n    Returns True if there is an overlap and False if there is not.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any element in the first list exists in the second list and vice versa, otherwise it returns False.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    for element in list2:\n        if element in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as inputs and returns True if any value in the first sequence exists in the second sequence or False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create an empty set to store the common elements of the two lists\n    common_set = set()\n\n    # Iterate through each element of the first list and check if it exists in the second list\n    for element in list1:\n        if element in list2:\n            common_set.add(element)\n\n    # Check if any value was added to the set\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Use a set to store the values in list1\n    set1 = set(list1)\n\n    # Iterate through list2 and check if any values are in set1\n    for item in list2:\n        if item in set1:\n            return True\n\n    # If no values were found in list2, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with highest product\n    from the array.\n\n    :param arr: an array of integers\n    :return: a tuple containing the pair with highest product from the array\n    \"\"\"\n\n    # Initialize variables to store the maximum and minimum values and their corresponding indices\n    max_value = arr[0]\n    max_index = 0\n    min_value = arr[0]\n    min_index = 0\n\n    # Iterate over the array and update the maximum and minimum values and indices\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n        elif arr[i] < min_value:\n            min_value = arr[i]\n            min_index = i\n\n    # Return the pair with the highest product\n    return (max_index, min_index)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def find_max_product(left, right):\n        max_left = max_right = float('-inf')\n        for num in left:\n            if num > max_left:\n                max_left = num\n        for num in right:\n            if num > max_right:\n                max_right = num\n        return max_left * max_right\n\n    sorted_arr = merge_sort(arr)\n    max_product = find_max_product(sorted_arr, sorted_arr[::-1])\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize two variables to store the maximum and minimum values\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update the maximum and minimum values\n        max_val = max(max_val * arr[i], arr[i], max_val)\n        min_val = min(min_val * arr[i], arr[i], min_val)\n    \n    # Return the maximum and minimum values\n    return max_val, min_val"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        curr_product = arr[i] * max(arr[i] * arr[i+1], arr[i+1] * arr[i+1])\n        if curr_product > max_product:\n            max_product = curr_product\n            max_pair = (arr[i-1], arr[i])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_1 = max_2 = arr[0]\n    min_1 = min_2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n            \n        if arr[i] < min_1:\n            min_2 = min_1\n            min_1 = arr[i]\n        elif arr[i] < min_2:\n            min_2 = arr[i]\n            \n    return (max_1, max_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the indices of the two maximum products.\n    '''\n\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    max_idx = None\n    min_idx = None\n\n    for i, num in enumerate(arr):\n        if num > max1:\n            max2 = max1\n            max1 = num\n            max_idx = i\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n            min_idx = i\n        elif num < min2:\n            min2 = num\n\n    return (max_idx, min_idx)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]\n    for num in arr:\n        if num > max1:\n            max2, max1 = max1, num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = min1, num\n        elif num < min2:\n            min2 = num\n    return max(max1 * max2, max2 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    max_1 = arr[0]\n    min_1 = arr[0]\n    max_2 = arr[0]\n    min_2 = arr[0]\n\n    for num in arr:\n        if num > max_1:\n            max_2 = max_1\n            max_1 = num\n        elif num < min_1:\n            min_2 = min_1\n            min_1 = num\n        else:\n            pass\n\n        if num > max_2:\n            max_2 = num\n        elif num < min_2:\n            min_2 = num\n        else:\n            pass\n\n    return max(max_1 * max_2, min_1 * min_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = [-1, -1]\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [i, j]\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tup in Input: \n        if tup[0] in common_first_element: \n            common_first_element.append(tup[0]) \n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in Input:\n        if len(common) == 0:\n            common.append(i[0])\n        else:\n            if i[0] == common[-1]:\n                common.append(i[1])\n            else:\n                common.pop()\n                common.append(i[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    \n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.add(tup[0])\n    \n    return tuple(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if i == 0:\n            common_element = Input[i]\n        else:\n            if Input[i][0] == common_element[0]:\n                common_element = (common_element[0],)\n                common_element += Input[i][1:]\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary\n    common_dict = {}\n    \n    # loop through each tuple in the list\n    for tuple in Input:\n        # get the first element of the tuple\n        first_element = tuple[0]\n        \n        # if the first element is not already in the dictionary, add it as a key with an empty list\n        if first_element not in common_dict:\n            common_dict[first_element] = []\n        \n        # add the tuple to the list of tuples for the corresponding first element\n        common_dict[first_element].append(tuple)\n    \n    # loop through the dictionary to find the common first element(s)\n    for first_element, tuples in common_dict.items():\n        # if there are more than one tuples for this first element, check if they all have the same second element\n        if len(tuples) > 1:\n            for tuple in tuples:\n                if len(set(tuple[1])) > 1:\n                    print(f\"Common first element(s) in the list: {first_element}\")\n                    break\n            else:\n                print(f\"Common first element(s) in the list: {first_element}\")\n                break\n    \n    # return the dictionary of common elements\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    # initializing an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    for t in Input: \n        # checking if the first element of the tuple is already in the dictionary\n        if t[0] in count_dict: \n            # incrementing the count of that element in the dictionary\n            count_dict[t[0]] += 1\n        else: \n            # adding the first element of the tuple to the dictionary with count 1\n            count_dict[t[0]] = 1\n\n    # initializing an empty list to store the result\n    result = []\n\n    # looping through the keys of the dictionary\n    for key in count_dict: \n        # checking if the count of the current key is greater than 1\n        if count_dict[key] > 1: \n            # appending the key to the result list only if it is not already present\n            if key not in result: \n                result.append(key)\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns the list of tuples where the common first element is the same for each tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], Input[i][1], Input[j][1]))\n                Input.pop(j)\n                j -= 1\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if j!= i:\n                if Input[i][0] == Input[j][0]:\n                    common_list.append(Input[i])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            common_element = None\n            break\n        elif tup[0] < common_element:\n            common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    common_tuple = None\n    for i in Input:\n        if common_tuple is None:\n            common_tuple = i\n        elif common_tuple[0] == i[0]:\n            common_tuple = common_tuple + i\n        else:\n            common_tuple = None\n            break\n    return common_tuple"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes in a list as input and returns the element of the list with maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes in a list as an argument and returns the element of the list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    # Loop through the list and compare the length of each element with the current maximum length\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_element = elem\n    \n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = \"\"\n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return lst[lst.index(max(lst, key=len))][max_len-1]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Find the maximum length of the list\n    max_length = max([len(i) for i in lst])\n\n    # Find the element of the list having maximum length\n    max_element = [i for i in lst if len(i) == max_length][0]\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max([len(i) for i in lst])\n    for i in lst:\n        if len(i) == max_length:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for num in list1:\n        sum_list += round(num)\n    print(sum_list * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for num in list1:\n        sum_list += round(num)\n    print(\"The total sum multiplied by the length of the list is\", sum_list * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        rounded_num = round(num)\n        total_sum += rounded_num\n        print(rounded_num)\n    print(\"Total sum:\", total_sum)\n    print(\"Total sum times list length:\", total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list\n    list1_rounded = [round(num) for num in list1]\n\n    # Calculate the total sum\n    total_sum = sum(list1_rounded)\n\n    # Print the result\n    print(total_sum * len(list1_rounded))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list as input and calculates the sum of each number in the list, then rounds each number to 2 decimal places and multiplies the total sum by the length of the list.\n    '''\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num, 2)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total_sum = sum([round(x) for x in lst])\n    print(total_sum * len(lst))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i*i\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function calculates the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_nums = [i for i in range(2, n+1, 2)] # generate a list of even natural numbers\n    sum_of_cubes = sum([num**3 for num in even_nums]) # calculate the cube sum of even natural numbers\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i*i\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    for i in range(1, n+1, 2):\n        count += i**3\n    return count"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '|'\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    new_list = []\n    for item in test_tup:\n        new_list.append(str(item))\n    return delimiter.join(new_list)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(elem) for elem in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #initialize the sum and count variables to zero\n    sum = 0\n    count = 0\n\n    #loop through the first n numbers\n    for i in range(1, n+1):\n        #calculate the cube of the current number and add it to the sum\n        sum += i**3\n        #increment the count variable\n        count += 1\n\n    #calculate the average of the cubes of the first n natural numbers\n    average = sum/count\n\n    #return the average of the cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize a counter variable to keep track of number of cubes\n    counter = 0\n    \n    # initialize a sum variable to keep track of the sum of cubes\n    sum_cubes = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of i\n        cube_i = i ** 3\n        \n        # add the cube of i to the sum_cubes variable\n        sum_cubes += cube_i\n        \n        # increment the counter variable by 1\n        counter += 1\n        \n    # calculate the average of cubes of first n natural numbers\n    average_of_cubes = sum_cubes / counter\n    \n    # return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0   # initialize sum of cubes variable\n\n    for i in range(1,n+1):   # loop from 1 to n inclusive\n        sum_of_cubes += i**3   # calculate cube of i and add to sum_of_cubes\n\n    average = sum_of_cubes / n   # calculate average of cubes\n\n    return average   # return the average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result += i ** 3\n    return result / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize the sum and count of cubes to 0\n    sum_cubes = 0\n    count_cubes = 0\n\n    # Calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count_cubes += 1\n\n    # Calculate the average of cubes\n    average_cubes = sum_cubes/count_cubes\n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # define an empty list to store the rear index elements of each string\n    rear_list = []\n    # loop through each string in the tuple\n    for string in test_tuple:\n        # extract the rear index element of the string and append it to the list\n        rear_list.append(string[-1])\n    # return the list of rear index elements\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_elements = []\n    for string_element in test_tuple:\n        # Using string slicing to extract the rear element from the string\n        rear_element = string_element[-1]\n        rear_index_elements.append(rear_element)\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_indices.append(i)\n    rear_elements = []\n    for i in rear_indices:\n        rear_elements.append(test_tuple[i])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in test_tuple:\n        rear_elements.append(i[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == x:\n                count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(lst, elem):\n    count = 0\n    for sublist in lst:\n        if elem in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Initialize an empty list to hold the odd numbers\n    odd_nums = []\n    \n    # Iterate over each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If the number is odd, add it to the odd_nums list\n            odd_nums.append(num)\n    \n    # Return the filtered list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filter out odd numbers from a list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with only the odd numbers from the original list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert the date string from yyyy-mm-dd format to dd-mm-yyyy format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, dt)\n    \n    # If a match is found, use the re.sub() function to replace the matched pattern with the new format\n    if match:\n        new_format = match.group(0).replace('-', '/')\n        return new_format\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Use the re.sub() function to replace the month name with its corresponding number\n    dt = re.sub(r'(?<=\\b\\w{3})\\b\\w{3}\\b', lambda m: str(months.index(m.group())), dt)\n\n    # Use the datetime module to convert the date string to datetime object\n    import datetime\n    date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n\n    # Return the date in the format dd-mm-yyyy\n    return date_obj.strftime('%d-%m-%Y')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regular expressions to extract the year, month and day from the date string\n    match = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        # Reverse the order of the day, month and year to convert to dd-mm-yyyy format\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use the re.sub() method to replace the matched pattern with the desired format\n    dt = re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    dd_mm_yyyy = re.compile(r'\\d{2}-\\d{2}-\\d{4}')\n    \n    if yyyy_mm_dd.match(dt):\n        match = yyyy_mm_dd.match(dt)\n        yyyy = match.group(1)\n        mm = match.group(2)\n        dd = match.group(3)\n        \n        new_date = f'{dd}-{mm}-{yyyy}'\n        return new_date\n    \n    elif dd_mm_yyyy.match(dt):\n        match = dd_mm_yyyy.match(dt)\n        dd = match.group(1)\n        mm = match.group(2)\n        yyyy = match.group(3)\n        \n        new_date = f'{yyyy}-{mm}-{dd}'\n        return new_date\n    \n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define a regular expression to match a date in yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the regular expression to search for a match in the date string\n    match = re.search(pattern, dt)\n\n    # If a match was found, convert it to dd-mm-yyyy format\n    if match:\n        return match.group().replace('-', '/')\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace '-' with '-' and convert to lowercase\n    dt = dt.replace('-', '-').lower()\n\n    # Split the date string into year, month, and day components\n    year, month, day = re.split(r'-(?=.*-)', dt)\n\n    # Convert the day, month, and year components to their corresponding numeric values\n    year = int(year)\n    month = int(month)\n    day = int(day)\n\n    # Construct the new date string in the required format\n    new_date = f'{day}-{month:02d}-{year:04d}'\n\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            \n            my_list[j] = temp\n            \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and temp < my_list[j - h]:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Do increments of gap size\n    gap = n // 2\n    while gap > 0:\n        # Insertion sort for gap size elements\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not of equal length!\")\n        return None\n\n    # Iterate through the tuples and extract the elementwise and\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    # Return the elementwise and tuple\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples should have the same length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tups = []\n    # Iterate over each element in both tuples\n    for i in range(len(test_tup1)):\n        # Check if both tuples have the same element and append the result to the list\n        if test_tup1[i] and test_tup2[i]:\n            and_tups.append((test_tup1[i], test_tup2[i]))\n    # Return the list of elementwise and tuples\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # loop through both tuples and check if each element is True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            # if both are True, add the corresponding element to a new tuple\n            new_tup = test_tup1[i], test_tup2[i]\n            return new_tup\n    # if no True elements found, return None\n    return None"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    \n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n        \n    return result"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The parabola has no real root.\")\n        return None\n    \n    # calculate the two roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n\n    # check if the roots are real and in ascending order\n    if root1 < root2:\n        return root1, root2\n    else:\n        return root2, root1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the coefficients of the quadratic equation\n    d = b**2 - 4*a*c\n    \n    # Check if the quadratic equation has real roots\n    if d > 0:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n    else:\n        x1 = None\n        x2 = None\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the slope of the parabola\n    delta = b**2 - 4*a*c\n    \n    # Check if the parabola has a real or imaginary root\n    if delta < 0:\n        # Parabola has no real root\n        return \"Parabola has no real root\"\n    \n    elif delta == 0:\n        # Parabola has a single real root\n        root = (-b) / (2*a)\n        return f\"The directrix of the parabola is {root}\"\n    \n    else:\n        # Parabola has two real roots\n        root1 = (-b + delta**0.5) / (2*a)\n        root2 = (-b - delta**0.5) / (2*a)\n        return f\"The directrix of the parabola is {root1} and {root2}\"\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The equation has no real roots.\"\n    elif discriminant == 0:\n        return \"The directrix is the unique root.\"\n    else:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return \"The directrix is the average of the roots: {:.2f}\".format((root1 + root2)/2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    x1 = -b / (2 * a)\n    x2 = -b / (2 * a) + c / a\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    print(\"The directrix of the parabola is:\", x1)\n    print(\"The directrix of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        return \"The parabola has no real roots.\"\n    elif determinant == 0:\n        return \"The parabola has two real roots.\"\n    else:\n        x1 = (-b + determinant**0.5) / (2*a)\n        x2 = (-b - determinant**0.5) / (2*a)\n        return \"The directrix of the parabola is %.2f.\" % (x1 + x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc > 0:\n        return (-b + disc**0.5)/(2*a)\n    elif disc == 0:\n        return -b/2/a\n    else:\n        return (-b - disc**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a**2 + b**2 == 4*c:\n        return -b/(2*a)\n    else:\n        return 'The equation does not have a unique directrix.'"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # Loop through each element in the first list\n    for elem in list1:\n        # Check if the element is in the second list\n        if elem in list2:\n            return True\n    # If no common elements were found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for num in list1:\n        if num in list2 and num not in common_list:\n            common_list.append(num)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set from each list and find the intersection of their elements\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n\n    # if there are any common elements, return True\n    if len(common_set) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Use set intersection to find common elements\n    common_set = set(list1) & set(list2)\n\n    # Check if there is at least one element in the common set\n    return bool(common_set)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and then convert them back to lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n\n    # Loop through each element in both lists and check if it exists in the other list\n    for element in list1:\n        if element in list2:\n            return True\n\n    # If no common element is found, return false\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5*(base1+base2)*(height)\n    semi_perimeter = 0.5*(base1+base2)\n    median_length = math.sqrt(area/math.tan(math.pi/4))\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the area of the top half of the trapezium\n    area_top_half = 0.5 * (base1 + base2) * half_height\n\n    # calculate the area of the bottom half of the trapezium\n    area_bottom_half = 0.5 * (base1 + base2) * (height - half_height)\n\n    # calculate the total area of the trapezium\n    total_area = area + area_top_half + area_bottom_half\n\n    # calculate the trapezium's length\n    length = total_area / area\n\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the half of the trapezium at the base\n    half1 = height / 2\n    half2 = height / 2\n\n    # Calculate the area of the trapezium using the trapezium rule\n    area = (half1 * base1) + (half2 * base2)\n\n    # Calculate the lengths of the two halves of the trapezium\n    half1_len = (base1 + (height / 2)) / 2\n    half2_len = (base2 + (height / 2)) / 2\n\n    # Calculate the difference between the lengths of the two halves of the trapezium\n    diff = half1_len - half2_len\n\n    # Calculate the median length of the trapezium using the difference formula\n    median = diff / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the total length of the trapezium\n    total_length = base1 + base2 + height\n\n    # Calculate the lengths of the three equal parts of the trapezium\n    a = (height / 2)\n    b = (base1 * height) / 2\n    c = (base2 * height) / 2\n\n    # Calculate the sum of the lengths of the three equal parts\n    sum_lengths = a + b + c\n\n    # Calculate the median of the three equal parts\n    median = sum_lengths / 3\n\n    # Calculate the difference between the total and median lengths\n    diff = total_length - 2 * median\n\n    # If the difference is greater than the length of the trapezium, then the median is greater than the total length\n    if diff > 0:\n        return median\n\n    # If the difference is less than or equal to the length of the trapezium, then the median is less than the total length\n    else:\n        # Calculate the length of the third part of the trapezium\n        third_part = (base1 + base2) * height\n\n        # Calculate the sum of the lengths of the three equal and third parts of the trapezium\n        sum_parts = a + b + c + third_part\n\n        # Calculate the median of the three equal and third parts of the trapezium\n        median_parts = sum_parts / 3\n\n        # Return the median of the three equal and third parts of the trapezium\n        return median_parts"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes in the three parameters:\n    - base1: the length of the first base of the trapezium\n    - base2: the length of the second base of the trapezium\n    - height: the height of the trapezium\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the shorter base\n    shorter_base = min(base1, base2)\n    # Calculate the length of the longer base\n    longer_base = max(base1, base2)\n    # Calculate the difference in length between the shorter and longer bases\n    diff = longer_base - shorter_base\n    # Calculate the height of the shorter base\n    shorter_height = height / 2\n    # Calculate the height of the longer base\n    longer_height = shorter_height\n    # Calculate the area of the shorter base\n    area_shorter = 0.5 * shorter_base * shorter_height\n    # Calculate the area of the longer base\n    area_longer = 0.5 * longer_base * longer_height\n    # Calculate the area of the smaller trapezium\n    area_smaller = area - area_shorter - area_longer\n    # Return the median length of the trapezium\n    if area_smaller > area_longer:\n        return diff * 0.5\n    else:\n        return diff * 1.5"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the area of the smaller of the two trapeziums\n    small_area = 0.5 * (base1 + base2) * math.sqrt(2)\n\n    # calculate the perimeter of the smaller of the two trapeziums\n    small_perimeter = 2 * (base1 + base2)\n\n    # calculate the distance from the center of the smaller of the two trapeziums to the center of the trapezium\n    d = math.sqrt((small_area / small_perimeter) ** 2 - area / 2)\n\n    # calculate the median length of the trapezium\n    median = small_perimeter / 2\n\n    # return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Find the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Find the length of the top half of the trapezium\n    top_half = 0.5 * base1 * (height + base1 + base2)\n\n    # Find the length of the bottom half of the trapezium\n    bottom_half = 0.5 * base2 * (height + base1 + base2)\n\n    # Find the median length\n    median = (top_half + bottom_half) / 2\n\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the sum of the bases and height\n    area = (base1 + base2) * height\n    # calculate the sum of the squares of the bases and heights\n    area_squared = area * (base1 ** 2 + base2 ** 2)\n    # calculate the difference between the areas\n    area_diff = abs(area_squared - base1 * base2 * height)\n    # calculate the area of the trapezium\n    trapezium_area = base1 + base2\n    # calculate the median using the formula for a median of a trapezium\n    median = 0.5 * trapezium_area + 0.5 * area_diff\n    # return the median length of the trapezium\n    return round(median, 2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the length of the shorter side of the trapezium\n    shorter_side = min(base1, base2)\n    \n    # calculate the length of the longer side of the trapezium\n    longer_side = max(base1, base2)\n    \n    # calculate the length of the shorter side of the triangle formed by the shorter side and height\n    shorter_triangle_len = 0.5 * shorter_side * height\n    \n    # calculate the length of the longer side of the triangle formed by the longer side and height\n    longer_triangle_len = 0.5 * longer_side * height\n    \n    # find the median length of the trapezium by finding the average of the length of the shorter and longer sides and the area of the trapezium\n    return (shorter_triangle_len + longer_triangle_len) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using the formula:\n    #   L = (b1 + b2) / 2\n    # where L is the length of the trapezium, b1 and b2 are the\n    # lengths of the two bases and height is the height of the trapezium.\n    L = (base1 + base2) / 2\n\n    # Calculate the area of the trapezium using the formula:\n    #   A = L * h\n    # where A is the area of the trapezium, L is the length of the trapezium,\n    # and h is the height of the trapezium.\n    A = L * height\n\n    # Calculate the middle of the trapezium using the formula:\n    #   x = (b1 + b2) / 2\n    x = (base1 + base2) / 2\n\n    # Calculate the y-coordinate of the top of the first base:\n    #   y1 = 0\n    y1 = 0\n\n    # Calculate the y-coordinate of the bottom of the first base:\n    #   y2 = h\n    y2 = height\n\n    # Calculate the y-coordinate of the top of the second base:\n    #   y3 = 0\n    y3 = 0\n\n    # Calculate the y-coordinate of the bottom of the second base:\n    #   y4 = h\n    y4 = height\n\n    # Calculate the intersection points of the two trapezoids using the formula:\n    #   x1 = max(0, x - b1 / 2)\n    x1 = max(0, x - base1 / 2)\n\n    #   x2 = min(x, b2 / 2)\n    x2 = min(x, base2 / 2)\n\n    # Check if the intersection point is on the left or right of x\n    if x1 > x2:\n        # If it's on the left of x, swap x1 and x2\n        x1, x2 = x2, x1\n\n    # Check if the intersection point is on the top or bottom of the first trapezoid\n    if y1 > y2:\n        # If it's on the top of the first trapezoid, swap y1 and y2\n        y1, y2 = y2, y1\n\n    # Check if the intersection point is on the top or bottom of the second trapezoid\n    if y3 > y4:\n        # If it's on the top of the second trapezoid, swap y3 and y4\n        y3, y4 = y4, y3\n\n    # Calculate the length of the intersection area using the formula:\n    #   L1 = (y1 - y2) * (x1 - x2)\n    L1 = (y1 - y2) * (x1 - x2)\n\n    # Calculate the area of the first trapezoid using the formula:\n    #   A1 = L1 * (y1 + y2)\n    A1 = L1 * (y1 + y2)\n\n    # Calculate the area of the second trapezoid using the formula:\n    #   A2 = L1 * (y3 + y4)\n    A2 = L1 * (y3 + y4)\n\n    # Calculate the length of the trapezoid formed by the intersection area:\n    #   L2 = (y1 + y2) * (x1 + x2)\n    L2 = (y1 + y2) * (x1 + x2)\n\n    # Calculate the area of the intersection area:\n    #   A3 = L2 * (y1 + y2)\n    A3 = L2 * (y1 + y2)\n\n    # Calculate the length of the trapezoid formed by the two trapezoids:\n    #   L3 = L1 + L2\n    L3 = L1 + L2\n\n    # Calculate the area of the trapezoid formed by the two trapezoids:\n    #   A4 = A1 + A2\n    A4 = A1 + A2\n\n    # Check which trapezoid has the smallest area\n    if A4 <= A3:\n        # If the smallest area is the first trapezoid, calculate the median\n        # length as the sum of the length of the intersection area and the\n        # length of the two trapezoids\n        median = L1 + L3\n\n    else:\n        # If the smallest area is the second trapezoid,"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Check whether a given number is greater than the elements of a given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=.*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string and returns True if it has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    # Convert the number to a string and extract the last digit using slicing\n    last_digit = n % 10\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of that integer.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers in the original list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns a new list containing the negative numbers in the original list.\n    '''\n    # loop through the list and add negative numbers to a new list\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    odd_chars = []\n    for char in string:\n        if ord(char) % 2!= 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with odd characters removed.\n    \"\"\"\n    return ''.join([char for char in string if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the new string\n    new_str = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, append it to the new string\n        if char % 2!= 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the even characters\n    even_chars = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is even (i.e. an odd number), add it to the even_chars string\n        if int(char) % 2 == 0:\n            even_chars += char\n    # return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Create an empty string to store the new string\n    new_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, append it to the new string\n            new_str += char\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    return ''.join([char for char in string if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isdigit() or x % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the even characters\n    even_str = \"\"\n    # iterate through the string\n    for char in str1:\n        # if the character is even, append it to the even_str\n        if char % 2 == 0:\n            even_str += char\n    # return the even_str as the result\n    return even_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                if test_list[j] in test_list[i:j]:\n                    count += 1\n            else:\n                if test_list[i] in test_list[i+1:j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][1] and test_list[i][0] > test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n\n    # iterate over the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if both tuples are the same\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n                break\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list or (test_list[j][0], test_list[i][1]) in test_list:\n                counter += 1\n    return counter"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through the list\n    for num in L:\n        # Add the current number to the result\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n\n    Args:\n    L (list): A list of integers.\n\n    Returns:\n    int: The single integer obtained by joining the integers in the list.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expression to find all adverbs\n    pattern = r'\\b(?:\\w+)(?:st|nd|rd|th)\\b'\n    # Use findall method to get all the matches in the sentence\n    adverbs = re.findall(pattern, text)\n    # Check if there are any adverbs in the sentence\n    if adverbs:\n        # Print the adverbs and their positions in the sentence\n        for i, adverb in enumerate(adverbs):\n            print(f\"{i+1}. {adverb}\")\n    else:\n        print(\"No adverbs found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[A-Z][a-z]*\\b', text)\n    \n    # Create a list of tuples for each adverb and their position in the sentence\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i+1, adverb))\n    \n    # Sort the list of tuples by their position in the sentence\n    adverb_positions.sort(key=lambda x: x[0])\n    \n    # Return the first adverb and its position\n    return adverb_positions[0] if adverb_positions else None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input, and returns a list of tuples containing the first adverb and their positions in the given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'(?<![a-z0-9])(the|a|an) (\\w+)(\\w+)(?!([.,?!]))'\n\n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Iterate over all matches and extract the adverb and its positions\n    for match in matches:\n        adverb = match[0].lower()\n        position = text.index(match[1])\n        positions.append((adverb, position))\n\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # create a regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+)([a-zA-Z\\']*ed|ing|ly|edly|ingly)\\b'\n    \n    # use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    \n    # create a dictionary to store the adverbs and their positions in the sentence\n    adverb_positions = {}\n    \n    # loop through all the adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb[0]] = (i, adverb[1])\n        \n    # return the dictionary of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Remove all non-alphanumeric characters and split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n    # Iterate over the words and search for adverbs\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'^.*ing$', word):\n            # Add the adverb to the list of adverbs and its position to the list of adverb positions\n            adverbs.append((word, i))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b([a-z]+\\s*[-\u2013\\s]*[a-z]+)\\b'\n\n    # Use re.findall() to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Initialize a dictionary to store the adverbs and their positions\n    position_dict = {}\n\n    # Loop through all the adverbs and add them to the dictionary\n    for i, adv in enumerate(adverbs):\n        position_dict[adv] = i\n\n    return position_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    # regular expression pattern for adverbs\n    pattern = r'\\b(also|although|also|although|except|except|hence|hence|if|if|since|since|when|when)\\b'\n    # find all adverbs in the text using the pattern\n    matches = re.findall(pattern, text)\n    # iterate over the matches and extract the positions of the adverbs\n    for match in matches:\n        adverb = match.lower()\n        position = text.lower().find(adverb)\n        adverbs.append((adverb, position))\n    # return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(adverb|adv)\\b'\n\n    # Use the pattern to search for adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Print the adverbs and their positions in the sentence\n    for i, match in enumerate(matches):\n        print(f'{match}: {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b([a-z]*ed|[a-z]*er|[a-z]*est|[a-z]*est|[a-z]*ly|[a-z]*sly|[a-z]*tly)\\b', text, re.IGNORECASE)\n    \n    # Find the position of each adverb in the sentence\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i, adverb))\n    \n    # Return the list of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for matching adverbs\n    pattern = r'\\b(much|too|very|quite|very|almost|really|well|well|just|just|right|right|good|good|okay|okay|amazing|amazing)\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Check if any matches were found\n    if matches:\n        # Print the adverbs and their positions in the sentence\n        for i, match in enumerate(matches):\n            print(f'{match} at position {i+1}')\n    else:\n        print('No adverbs found in the sentence.')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n\n    # calculate the volume of the cube\n    volume = l**3\n\n    # calculate the surface area of the cube using the formula: 6 * (l^2 + l^2)\n    surface_area = 6 * (l**2)\n\n    # return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Count the number of positive numbers in the array\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n\n    # Calculate the ration of positive numbers\n    ratio = count / len(nums)\n\n    # Return the ration\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i')\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n            positive_count += 1\n    if positive_count == 0:\n        return 0\n    return positive_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    num_list = nums.tolist()\n\n    # Initialize the count of positive numbers and the count of negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the list of integers\n    for num in num_list:\n        # Check if the number is positive\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Calculate the ratio of positive numbers to all numbers in the list\n    ratio = pos_count / len(num_list)\n\n    # Return the ratio as a float\n    return float(ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    positive = array('i')\n    positive.fromlist([1 if num > 0 else 0 for num in nums])\n    positive_count = sum(positive) / n\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        count.append(num)\n    count.sort()\n    total = len(nums)\n    pos_count = 0\n    for num in count:\n        if num > 0:\n            pos_count += 1\n    return pos_count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    count = array('i')\n    for num in nums:\n        if num > 0:\n            positives += 1\n            count.append(1)\n        else:\n            count.append(0)\n    return positives / len(nums), count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # convert the array to a list\n    nums_list = list(nums)\n\n    # initialize the count of positive numbers\n    pos_count = 0\n\n    # iterate over the list of integers\n    for num in nums_list:\n        # check if the number is positive\n        if num > 0:\n            pos_count += 1\n\n    # calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums)\n\n    # return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    if positive_count == 0:\n        return 0\n    else:\n        return positive_count / (positive_count + negative_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i', [0]) # initialize an array to store the count of positive numbers\n    neg = array('i', [0]) # initialize another array to store the count of negative numbers\n\n    for num in nums:\n        if num > 0:\n            pos[0] += 1\n        elif num < 0:\n            neg[0] += 1\n\n    pos_ratio = pos[0] / (pos[0] + neg[0])\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = -999999999999999999999999999999\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize the largest negative number to the smallest possible integer value\n    largest_num = float('-inf')\n    # Loop through the list to find the largest negative number\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    # Return the largest negative number\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') # initial value of largest\n    for num in list1: \n        if num < 0 and num > largest: # if the number is negative and greater than the largest, update largest\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1: \n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple_ in test_list:\n        new_tuple = tuple(sorted(tuple_, reverse=True)[:K])\n        new_list.append(new_tuple)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(0, len(tup), K))\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i] for i in range(len(tup)) if i % K == 0)\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # get the length of the tuple\n        length = len(test_list[i])\n        # if the length of the tuple is less than k, pad it with None values\n        if length < K:\n            pad = [None] * (K - length)\n            test_list[i] = test_list[i] + pad"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for i in range(len(test_list)):\n        # Split the tuple into its elements\n        elements = test_list[i]\n\n        # Trim each element by k\n        trimmed_elements = []\n        for j in range(len(elements)):\n            if j % K == 0:\n                trimmed_elements.append(elements[j])\n\n        # Reconstruct the trimmed tuple\n        test_list[i] = tuple(trimmed_elements)\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            new_tup = tup[:K]\n        else:\n            new_tup = tup\n        print(new_tup)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j == 0:\n                test_list[i] = test_list[i][K:]\n            elif j == len(test_list[i]) - K:\n                test_list[i] = test_list[i][:K]\n            else:\n                test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize a new tuple with the same length as the input tuple\n    result_tup = tuple([0]*len(test_tup1))\n\n    # Iterate through the input tuples and multiply their corresponding elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Check if the input tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    # Initialize an empty list to store the multiplication results\n    result_lst = []\n    # Iterate over the indices of the tuples\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements of the two tuples and append the result to the result list\n        result_lst.append(test_tup1[i] * test_tup2[i])\n    # Return the result list\n    return result_lst"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with 0 values\n    result_tup = (0, 0, 0, 0, 0)\n    \n    # Iterate over each index of the two tuples\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements of the two tuples and add them to the result tuple\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding element of the first tuple with the corresponding element of the second tuple\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    for x in lst:\n        if x in c:\n            c[x] += 1\n    return c"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst) \n    for item in tup: \n        if item in counter: \n            counter[item] += 1 \n        else: \n            counter[item] = 1 \n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the list to a set to remove duplicates and convert it back to a list for the Counter function.\n    unique_list = list(set(lst))\n\n    # Count the occurrence of each element in the tuple using Counter.\n    count_dict = Counter(tup).most_common()\n\n    # Count the occurrence of each element in the unique list.\n    count_dict_unique = Counter(unique_list).most_common()\n\n    # Create a new dictionary to store the count for each element in both tuples.\n    count_dict_merged = {}\n\n    # Merge the dictionaries.\n    for tup_elem, count in count_dict:\n        count_dict_merged[tup_elem] = count\n\n    for tup_elem, count in count_dict_unique:\n        if tup_elem in count_dict_merged:\n            count_dict_merged[tup_elem] += count\n        else:\n            count_dict_merged[tup_elem] = count\n\n    return count_dict_merged"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    \n    # Iterate over all elements of the tuple\n    for elem in tup: \n        # If the element is in the list, increment its count in the dictionary\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    \n    # Return the dictionary containing the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for i in range(len(tup)):\n        count = count_dict[tup[i]]\n        if count in result:\n            result[count] += 1\n        else:\n            result[count] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        if i in count: \n            count[i] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Use Counter to count the occurrence of each element of list in the tuple\n    count = Counter(tup)\n\n    # Loop through the list and count the occurrence of each element in the tuple\n    for elem in lst:\n        count[elem] += 1\n\n    # Return the count dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert the list into a set to remove duplicate elements\n    set_lst = set(lst)\n    \n    # Use Counter to count the number of occurrences of each element in the tuple\n    count_dict = Counter(tup)\n    \n    # Combine the two dictionaries into a single dictionary with the count for each element\n    count_dict.update(set_lst)\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    return tuple(tup[i] for i in range(len(tup)) if tup[i] in count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two parameters: \n    - tup: a tuple of elements \n    - lst: a list of elements \n    It returns a dictionary where each key is an element of lst and the value is the count of \n    that element in the tuple tup.\n    '''\n    count_dict = Counter(lst)\n    final_dict = {}\n    for key in count_dict:\n        count = count_dict[key]\n        for i in range(len(tup)):\n            if tup[i] == key:\n                final_dict[key] = count\n    return final_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Cube the number and add it to a new list\n        new_list.append(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store cubes\n    cubes = []\n    \n    # Loop through each element in the list\n    for num in nums:\n        # Calculate the cube of the current element and add it to the cubes list\n        cubes.append(num ** 3)\n    \n    # Return the list of cubes\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i+1) // 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += 1/i\n    return s\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the first\", n, \"perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 1, 2, 4, 7, 13, 24, 44, 81, 159, 298, 517, 876, 1483, 2580]\n    return sum(perrin_nums[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize sum of perrin numbers to 0\n    sum_perrin = 0\n    \n    # Iterate over each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of perrin numbers up to i\n        sum_perrin += perrin_sum(i)\n    \n    # Return the sum of perrin numbers\n    return sum_perrin\n\ndef perrin_sum(n):\n    '''\n    Helper function to calculate the sum of perrin numbers up to n.\n    '''\n    # Initialize sum of perrin numbers to 0\n    sum_perrin = 0\n    \n    # Iterate over each digit of n\n    for digit in str(n):\n        # Calculate the sum of perrin numbers up to the digit\n        sum_perrin += digit\n    \n    # Return the sum of perrin numbers up to n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    sum_numbers = 0\n    \n    for num in perrin_numbers:\n        if num % 2 == 0:\n            sum_numbers += num\n    \n    return sum_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i**2\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_list = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    total = 0\n    for i in range(1, n+1):\n        total += perrin_list[i-1]\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(n): \n        s += i \n    return s "
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts a specified number of strings from it.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if i >= size:\n            break\n        result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for str_value in str_list:\n        if len(str_value) == size:\n            result.append(str_value)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and extracts specified size of strings from the list.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:size]\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of strings of specified size.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    Extract a specified size of strings from a list of strings.\n\n    Parameters:\n    str_list (list): a list of strings\n    length (int): the desired length of the strings to extract\n\n    Returns:\n    list: a list of extracted strings\n    \"\"\"\n    return [s[:length] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts strings of specified size from a list of strings.\n    '''\n    return [str for str in str_list if len(str) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings of specified size.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of strings and an integer value representing the length of strings to extract.\n    It returns a list of strings of the specified length extracted from the input list.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string[:length])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string\n    text2 = re.sub(r'\\s+','', text1)\n    \n    # return the result\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text1 = re.sub('\\s+','', text1)\n    # Removing whitespaces from the start and end of the string\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Return the cleaned string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = []\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i*i) == 0:\n            if i % 2 == 0:\n                even_factors.append(i)\n\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    \n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize the sum to 0 \n    sum = 0 \n    # Initialize a flag to 1 \n    flag = 1 \n    # Loop through all the odd numbers from 3 to n-1 \n    for i in range(3, n, 2): \n        # If the flag is 1, then check if i is a factor of n \n        if flag == 1: \n            if n % i == 0: \n                # If i is a factor of n, then add it to the sum \n                sum += i \n                # Set the flag to 0 \n                flag = 0 \n    # Return the sum of even factors of n \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables\n    even_sum = 0\n    # Loop through numbers from 2 to the square root of the input number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If the number is evenly divisible by i, add it to the even_sum\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    # Return the even_sum\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0 and n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through each factor of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # if the factor is even and divides n evenly, add it to the total\n        if n % i == 0 and n % (2*i) == 0:\n            total += i\n    # return the total\n    return total"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b' # regex pattern to match words containing 'z'\n    matches = re.findall(pattern, text) # find all matches using regex pattern\n    return matches # return list of matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r\"\\b[a-zA-Z]+z\\b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum > 12:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum in [4,6,9,11]:\n        return True\n    elif monthnum == 2:\n        if monthnum2[-2:] == '02' or monthnum2[-2:] == '04' or monthnum2[-2:] == '06' or monthnum2[-2:] == '09' or monthnum2[-2:] == '11':\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # create a dictionary to store the number of days in each month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # check if the given month number exists in the dictionary\n    if monthnum2 in days_in_month:\n        # check if the number of days in the month is 31\n        if days_in_month[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        # if the given month number is not in the dictionary, return False\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the month number is between 1 and 12\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        # check if the month number is divisible by 3\n        if monthnum2 % 3 == 0:\n            # month number contains 31 days\n            return True\n        else:\n            # month number does not contain 31 days\n            return False\n    else:\n        # invalid month number\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(str(monthnum2)) == 2:\n        if int(monthnum2) in range(1, 13):\n            if int(monthnum2) % 2 == 0:\n                return True\n            else:\n                return False\n        else:\n            print(\"Invalid month number\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12 and (monthnum2 == 2 and not ((year % 4 == 0 and year % 100!= 0) or (year % 400 == 0))) :\n        return True\n    elif 1 <= monthnum2 <= 12:\n        return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    if len(str(monthnum2)) == 2:\n        monthnum = int(monthnum2)\n        if monthnum >= 1 and monthnum <= 12:\n            if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n                return True\n            else:\n                if monthnum % 2 == 0:\n                    if monthnum % 4 == 0:\n                        if monthnum % 100 == 0:\n                            if monthnum % 400 == 0:\n                                return True\n                        else:\n                            return True\n                    else:\n                        return True\n                else:\n                    if monthnum % 4 == 0:\n                        if monthnum % 100 == 0:\n                            if monthnum % 400 == 0:\n                                return True\n                        else:\n                            return True\n                    else:\n                        return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf') # initializing the minimum length to infinity\n    min_sublist = [] # initializing the minimum sublist as an empty list\n    \n    # loop through all the sublists of the input list\n    for i in range(1, len(lst)+1):\n        sublist = lst[i:] # taking the sublist starting from index i\n        if len(sublist) < min_length: # checking if the length of the sublist is less than minimum length\n            min_length = len(sublist) # updating the minimum length if required\n            min_sublist = sublist # updating the minimum sublist if required\n    \n    return min_sublist # returning the minimum sublist as the output"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initial value for minimum length\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Finding the length of the list of lists\n    len_lst = len(lst)\n    # Initializing the minimum length variable\n    min_len = float('inf')\n    # Initializing the minimum length sublist variable\n    min_lst = []\n    # Looping through each sublist in the list of lists\n    for i in range(len_lst):\n        # Getting the length of the current sublist\n        len_sub = len(lst[i])\n        # If the current sublist has less length than the minimum length, updating the minimum length and the minimum length sublist\n        if len_sub < min_len:\n            min_len = len_sub\n            min_lst = lst[i]\n    # Returning the minimum length sublist\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = None # initialize minimum sublist to null\n    \n    # loop through all sublists in the list\n    for sublist in lst:\n        # check if the current sublist length is less than the minimum length\n        if len(sublist) < min_length:\n            # if it is, update the minimum length and the minimum sublist\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = lst\n    min_length = len(sublist)\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp_list = lst[i:j+1]\n            if len(temp_list) < min_length:\n                min_length = len(temp_list)\n                sublist = temp_list\n    \n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = lst.copy()\n    sub_lst.sort()\n    min_len = len(lst)\n    for i in range(len(sub_lst)):\n        if len(sub_lst[i]) < min_len:\n            min_len = len(sub_lst[i])\n    return sub_lst[min_len]"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(f\"The area of the rectangle is {area}.\")"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define the pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Use the re.sub() function to remove uppercase substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through each word and remove any uppercase substrings\n    for i in range(len(words)):\n        # Remove any uppercase letters in the word\n        words[i] = re.sub(r'[A-Z]', '', words[i])\n    \n    # Join the words back together into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use the re.findall() function to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'(?i)[A-Z]+', str1)\n    # Iterate through the uppercase substrings and remove them from the string\n    for uppercase_substring in uppercase_substrings:\n        str1 = str1.replace(uppercase_substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]', str1)\n\n    # Loop through each uppercase substring and remove it from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # use the re.findall() function to find all uppercase substrings in the string\n    upper_substrings = re.findall(pattern, str1)\n    \n    # iterate through the list of upper substrings and remove them from the string\n    for upper_substring in upper_substrings:\n        str1 = str1.replace(upper_substring, '')\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n    # Iterate over each match and remove the uppercase substring from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    # find all uppercase substrings in the given string\n    pattern = re.compile(r'[A-Z]+')\n    matches = pattern.findall(str1)\n    # iterate through the matches and remove each one from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n\n        # Initialize an empty list to store the remaining elements\n        remaining_elements = list1[:i] + list1[i+1:]\n\n        # Loop through the remaining elements to generate all possible combinations\n        for j in range(len(remaining_elements)):\n            combo = [list1[i]] + remaining_elements[j:]\n            combinations.append(combo)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            yield list1[i-1], list1[j-1]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to store the combinations\n    combinations = []\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # loop through each element in the list again, excluding the current element\n        for j in range(i+1, len(list1)+1):\n            # append the combination to the list of combinations\n            combinations.append(list1[i:j])\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    :param list1: the list of elements to be combined\n    :return: a list of all possible combinations of the elements in the input list\n    \"\"\"\n\n    # create a list of all possible pairs of indices for the elements in the input list\n    pairs = list(combinations(range(len(list1)), 2))\n\n    # create an empty list to hold the combinations\n    combinations = []\n\n    # loop over the pairs of indices and generate the combinations\n    for pair in pairs:\n        # extract the elements from the input list at the indices in the pair\n        sublist = [list1[i] for i in pair]\n        # add the sublist to the combinations list\n        combinations.append(sublist)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)\n    result = []\n\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n\n    result = []\n    for i in range(len(list1)):\n        rest_list = list1[:i] + list1[i+1:]\n        combinations = combinations_list(rest_list)\n        for comb in combinations:\n            result.append([list1[i]] + comb)\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of a given array.\n\n    Args:\n        arr (list): A list of integers representing the array.\n\n    Returns:\n        int: The maximum product subarray.\n\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        if current_product > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        \n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, n):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys())!= len(set(dict.values())):\n        return False\n    else:\n        for val in dict.values():\n            if len(val)!= n:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if len(set(value))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n            count += 1\n        else:\n            if value!= first_value:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first key-value pair from the dictionary\n    first_key, first_value = next(iter(dict.items()))\n\n    # Check if all the values in the dictionary are same as the first value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    for i in range(len(values)):\n        if values[i]!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i == n:\n            count += 1\n    if count == len(dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            count = 1\n        else:\n            if value!= dict[dict.keys()[0]]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) <= 1:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], min_product * arr[i], arr[i])\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize max_product and min_product variables\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    # Loop through the array from the second element to the end\n    for i in range(1, len(arr)):\n        # Calculate the maximum and minimum product of the current element and its previous elements\n        current_product = arr[i] * max_product\n        previous_product = max_product * min_product\n        \n        # Update the max_product and min_product variables based on the current element's product\n        max_product = max(current_product, previous_product)\n        min_product = min(current_product, previous_product)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(n):\n        if i == 0 or arr[i] < arr[i-1]:\n            product = 1\n        else:\n            product = arr[i] * product\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Calculate the prefix sums of the array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Initialize variables to store the maximum product found so far\n    max_product_1 = float('-inf')\n    max_product_2 = float('-inf')\n\n    # Traverse the array and find the maximum product formed by multiplying two adjacent numbers\n    for i in range(1, n):\n        if prefix_sum[i] - prefix_sum[i - 1] > max_product_1:\n            max_product_2 = max_product_1\n            max_product_1 = prefix_sum[i] - prefix_sum[i - 1]\n        elif prefix_sum[i] - prefix_sum[i - 1] > max_product_2:\n            max_product_2 = prefix_sum[i] - prefix_sum[i - 1]\n\n    return max(max_product_1, max_product_2)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    This function takes an array of integers as input and returns the maximum product formed by multiplying\n    numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    for i in range(2, n):\n        temp_product = arr[i] * min(max_product, min_product)\n        max_product = max(max_product, temp_product)\n        min_product = min(min_product, temp_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    # Initialize variables to keep track of the maximum product and the current product\n    max_product = float('-inf')\n    curr_product = 1\n\n    # Loop through the array and calculate the maximum product formed by increasing subsequences\n    for i in range(len(arr)):\n        # Check if the current element is greater than the maximum product found so far\n        if arr[i] > max_product:\n            # If it is, update the maximum product and reset the current product to the current element\n            max_product = arr[i]\n            curr_product = 1\n        # If the current element is not greater than the maximum product found so far,\n        # add it to the current product and continue looping\n        else:\n            curr_product *= arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = 0\n    current_product = 1\n\n    for num in arr:\n        if num > 0:\n            current_product = current_product * num\n            max_product = max(max_product, current_product)\n        elif num < 0:\n            current_product = current_product * num\n        else:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length == 0:\n        return 0\n    elif length == 1:\n        return test_tup[0]\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pair_sum = 0\n    for i in range(len(test_tup)-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # get the length of the tuple\n    length = len(test_tup)\n    # initialize the pairwise sum\n    pairwise_sum = 0\n    # loop through the tuple\n    for i in range(length-1):\n        # add the neighboring elements to get the current element\n        current_element = test_tup[i] + test_tup[i+1]\n        # add the current element to the pairwise sum\n        pairwise_sum += current_element\n    # return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    result = []\n    for i in range(size):\n        result.append(test_tup[i] + test_tup[(i+1) % size])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2!= 0:\n        return \"The given tuple must have an even number of elements.\"\n    else:\n        sum_pairs = 0\n        for i in range(0, n-1, 2):\n            sum_pairs += test_tup[i] + test_tup[i+1]\n        return sum_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n    \n    total = test_tup[0]\n    for i in range(1, len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n        \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum of pairwise additions to zero\n    sum_pairwise = 0\n    \n    # loop through the tuple and add the pairwise additions to the sum\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    \n    # return the sum of pairwise additions\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup) - sum(test_tup[1:])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product as 1\n    product = 1\n    # Iterate over each element in the array\n    for num in arr:\n        # Find the product of the current element and the previous product modulo n\n        product = (product * num) % n\n    # Return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n, and returns the product of their array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result * i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two lists as arguments: arr and n.\n    arr is a list of integers and n is an integer.\n    The function calculates the product of the elements in arr modulo n,\n    and returns the result.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr: \n        result *= num \n    return result % n "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr1, arr2, n):\n    \"\"\"\n    Write a python function to find the product of two arrays modulo n.\n    \"\"\"\n    # Calculate the product of the arrays\n    product = 1\n    for i in range(len(arr1)):\n        product = (product * arr1[i]) % n\n\n    # Calculate the remainder of the product\n    remainder = product % n\n\n    # Return the remainder\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n as input. It multiplies the elements of the array and returns the result modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product*i) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the product variable\n    product = 1\n    \n    # Loop through each element in the array\n    for num in arr: \n        # Multiply the current element with the product variable\n        product = (product * num) % n\n    \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            count += 1\n            if count == len(l)-1:\n                return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            print(\"The list contains consecutive numbers.\")\n            return True\n        i += 1\n    print(\"The list doesn't contain consecutive numbers.\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] == l[i+1]+1:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize variables\n    prev_num = None\n    consecutive = False\n    # loop through the list\n    for num in l:\n        # check if the current number is equal to the previous number\n        if num == prev_num:\n            consecutive = True\n        # update the previous number\n        prev_num = num\n    # return the result\n    return consecutive"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    l (list): The list to check for consecutive numbers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert tuple list into set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back into a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    result = set()\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] == test_list2[i]:\n            result.add(test_list1[i])\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Find the common elements of the two tuples using set intersection\n    common_set = set(test_list1) & set(test_list2)\n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup in test_list1:\n        if tup in test_list2:\n            intersection.append(tup)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the list to sets to remove duplicates\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n    # find the intersection of the sets\n    intersection = test_list1.intersection(test_list2)\n    # convert the intersection back to a list\n    intersection = list(intersection)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the lists to get the intersection in the desired order\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty set to store the intersection\n    intersection = set()\n\n    # Iterate through the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the elements are equal, add it to the set and move both pointers\n        if test_list1[i] == test_list2[j]:\n            intersection.add(test_list1[i])\n            i += 1\n            j += 1\n        # If the first list has a smaller element, move to the next element\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # If the second list has a smaller element, move to the next element\n        else:\n            j += 1\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the lists to sets so that we can find their intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a tuple and return it\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty dictionary to store the unique elements\n    unique_elements = {}\n    \n    # iterate through the first list and add each element to the dictionary\n    for item in test_list1:\n        unique_elements[item] = True\n    \n    # iterate through the second list and check if the element exists in the dictionary\n    for item in test_list2:\n        if item in unique_elements:\n            unique_elements[item] = True\n        else:\n            del unique_elements[item]\n    \n    # return the dictionary as a tuple list\n    return tuple(unique_elements.keys())"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_set = set(test_list1).intersection(set(test_list2))\n    return tuple(intersection_set)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize a new string to hold the modified string\n    new_str = ''\n    # iterate through each character in the input string\n    for char in str1:\n        # if the current character is equal to the character to be replaced\n        if char == ch:\n            # append the new character to the new string\n            new_str += newch\n        # otherwise, append the current character to the new string\n        else:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character with a new character in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # sort the dictionary by value in ascending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    # create a Counter object from the sorted dictionary\n    counter = Counter(sorted_dict)\n    # sort the Counter object by value in descending order\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # sort the counter by value\n    sorted_counter = counter.most_common()\n    \n    # convert the sorted counter back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    \n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # count the number of occurrences of each element in the dictionary\n    count_dict = Counter(dict1)\n\n    # sort the dictionary by values in ascending order\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1])\n\n    # create a new dictionary with the sorted elements\n    sorted_count_dict = {}\n    for item in sorted_dict:\n        sorted_count_dict[item[0]] = item[1]\n\n    return sorted_count_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values to the first and last elements in the array\n    largest = nums[0]\n    smallest = nums[-1]\n    # Loop through the rest of the array, updating the largest and smallest values as necessary\n    for i in range(1, len(nums)-1):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the largest value\n    largest = nums[0]\n    # Find the smallest value\n    smallest = nums[-1]\n    # Calculate the sum of the largest and smallest values\n    total = largest + smallest\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements.\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Finding the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Returning the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest value\n    sum_largest_smallest = nums[0] + nums[1]\n    # Return the sum\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values in the array\n    max_val = float('-inf')\n    min_val = float('inf')\n    # Iterate through the array and update the max_val and min_val variables\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    sum_largest_smallest = largest + smallest\n    \n    return sum_largest_smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    This function converts a given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() function to find all the lowercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Use the replace() function to replace the lowercase substrings with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Loop through each word and convert to uppercase\n    result = [word.upper() for word in words]\n    # Join the words back into a string\n    result =''.join(result)\n    # Return the final result\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'[^a-zA-Z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Define the pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the pattern to find all lowercase substrings in the string\n    matches = re.findall(pattern, str1)\n\n    # Iterate through the matches and replace them with an empty string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'\\b[a-z]\\w+\\b')\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Compile the regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b\\w+\\b', re.IGNORECASE)\n\n    # Find all lowercase substrings in the given string\n    substrings = pattern.findall(str1)\n\n    # Remove all lowercase substrings from the string\n    for substr in substrings:\n        str1 = str1.replace(substr, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Return the first digit of the given number\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to string\n    num = str(n)\n    # find the first digit of the string\n    digit = num[0]\n    # convert the digit to integer and return it\n    return int(digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 100"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to string\n    str_n = str(n)\n\n    # Convert the first character of the string to integer\n    first_digit = int(str_n[0])\n\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Remove any non-digit characters from the number\n    num_str = ''.join(filter(str.isdigit, str(n)))\n    # Convert the string back to an integer\n    num = int(num_str)\n    # Return the first digit of the number\n    return num // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list containing only the odd numbers in the original list.\n    '''\n\n    # Define a new list to hold the odd numbers\n    odd_list = []\n\n    # Loop through each number in the original list\n    for num in list: \n        # Check if the number is odd and add it to the new list\n        if num % 2!= 0: \n            odd_list.append(num)\n\n    # Return the new list of odd numbers\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    # Initialize an empty list to store the odd numbers\n    odd_list = []\n\n    # Loop through each number in the list\n    for num in list:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # Add the odd number to the odd_list\n            odd_list.append(num)\n\n    # Return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_nums = sum(range(1, n+1))\n    return sum_cubes - sum_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Sum of the first n natural numbers\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    # Difference between the two sums\n    difference = sum_of_natural_numbers - sum_of_cubes\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = 0\n    natural_sum = 0\n\n    for i in range(1, n+1):\n        cubes_sum += i ** 3\n        natural_sum += i\n\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    # Sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    \n    # Sum of first n natural numbers\n    sum_natural = 0\n    for i in range(n):\n        sum_natural += i\n    \n    # Find the difference\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    # Function to find the sum of cubes of the first n natural numbers\n    def cube_sum(n):\n        return n * (n+1) * (2 * n + 1) // 6\n    \n    # Function to find the sum of the first n natural numbers\n    def sum_of_nums(n):\n        return n * (n+1) // 2\n    \n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = cube_sum(n)\n    \n    # Find the sum of the first n natural numbers\n    sum_nums = sum_of_nums(n)\n    \n    # Find the difference between the two sums\n    diff = sum_cubes - sum_nums\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Calculate the sum of the cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    def sum_of_numbers(n):\n        \"\"\"\n        Calculate the sum of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    sum_cubes = sum_of_cubes(n)\n    sum_numbers = sum_of_numbers(n)\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    # Calculate sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate sum of first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Return difference between sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Initializing variables\n    sum_of_cubes = 0\n    sum_of_natural = 0\n\n    # Calculating sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Calculating sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural += i\n\n    # Finding difference between sum of cubes and sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural\n\n    # Printing result\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of N integers and returns the number of odd pairs in the array.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value & 1:  # check if the bit at the position of the xor value is 1\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n                if count == N:\n                    return count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    # Count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes a list A of size N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isupper() else chr(ord(c) ^ 32) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    characters = list(string)\n    \n    # Loop through each character in the list\n    for i in range(len(characters)):\n        # If the character is uppercase, convert it to lowercase\n        if characters[i].isupper():\n            characters[i] = characters[i].lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            characters[i] = characters[i].upper()\n            \n    # Convert the list of characters back to a string and return it\n    return ''.join(characters)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    \n    # loop through the characters in the string\n    for i in range(len(string)):\n        # if the character is uppercase, convert it to lowercase\n        if string[i] >= 'A' and string[i] <= 'Z':\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is lowercase, convert it to uppercase\n        elif string[i] >= 'a' and string[i] <= 'z':\n            string = string[:i] + string[i].upper() + string[i+1:]\n    \n    # return the toggled string\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num_sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        num1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        num2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        digit_diff = abs(num1 - num2)\n        num_sum += digit_diff\n    return num_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = 0\n    while n1!= 0 and n2!= 0:\n        difference += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # Calculate the sum of the absolute differences of each digit\n    diff_sum = sum(abs(n1%10 - n2%10))\n    \n    # Calculate the sum of the absolute differences of the digits together\n    digit_sum = sum(abs(n1 // 10 - n2 // 10))\n    \n    # Calculate the sum of the per-digit differences\n    per_digit_diff = diff_sum + digit_sum\n    \n    # Return the total sum of per-digit differences\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    digit_sum = 0\n    for i in range(len(str(abs(diff)))):\n        digit_sum += abs(diff) // 10**(i+1)\n        diff %= 10**(i+1)\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    # calculate the per-digit difference between the two numbers\n    diff_sum = 0\n    for i in range(len(str_n1)):\n        diff = int(str_n1[i]) - int(str_n2[i])\n        diff_sum += abs(diff)\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Use a list comprehension to convert the integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the absolute differences between the two lists of digits\n    distance = sum(abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits))\n\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(str(max(n1, n2))) + 1):\n        digit1 = n1 // (10 ** i) % 10\n        digit2 = n2 // (10 ** i) % 10\n        total_sum += abs(digit1 - digit2)\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings to get digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    # calculate the per-digit difference between the two numbers\n    diff = [abs(int(num1_str[i]) - int(num2_str[i])) for i in range(len(num1_str))]\n    # return the sum of the per-digit differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n\n    sum_of_differences = 0\n    for digit in str(diff):\n        sum_of_differences += int(digit)\n\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both numbers to strings and get their digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_digits = [int(d) for d in num1_str]\n    num2_digits = [int(d) for d in num2_str]\n    \n    # Calculate the per-digit difference and add up the differences\n    diff_sum = 0\n    for i in range(max(len(num1_digits), len(num2_digits))):\n        diff = abs(num1_digits[i] - num2_digits[i])\n        diff_sum += diff\n    \n    # Return the sum of the differences\n    return diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_length = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        current_length += 1\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < 0:\n            current_sum = 0\n            current_length = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')  # initialize max sum to negative infinity\n    curr_sum = 0  # initialize current sum to zero\n\n    for i in range(size):\n        curr_sum += a[i]  # add current element to the current sum\n        max_sum = max(max_sum, curr_sum)  # update max sum if current sum is greater\n\n        if curr_sum < 0:  # if current sum becomes negative, reset it to zero\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        size = len(a)\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum subarray sum and the maximum sum so far\n    max_sum = float('-inf')\n    max_window_sum = 0\n\n    # Iterate over the array\n    for i in range(size):\n\n        # Calculate the sum of the current window\n        window_sum = a[i]\n\n        # Update the maximum window sum and the maximum sum\n        max_window_sum = max(window_sum, max_window_sum + window_sum)\n        max_sum = max(max_sum, max_window_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    max_sum = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n        \n        if max_ending_here < 0:\n            max_ending_here = a[i]\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"The size of the sublist must be smaller than or equal to the length of the input list\")\n    \n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n        elif current_sum > max_sum:\n            max_sum = current_sum\n        else:\n            continue\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes in a list of integers a and a size parameter and returns the sum of the largest contiguous sublist of size size in the list a.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(len(a)):\n        curr_sum += a[i]\n\n        if i >= size - 1:\n            curr_sum -= a[start]\n            max_sum = max(max_sum, curr_sum)\n\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # Remove duplicates from the union using a set\n    unique_union = set(union)\n    \n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(unique_union))\n    \n    # Output the sorted union\n    print(\"The union of the elements of the two tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # create a set of all elements in the first tuple\n    set1 = set(test_tup1)\n\n    # create a set of all elements in the second tuple\n    set2 = set(test_tup2)\n\n    # combine the two sets to get the union of all elements\n    union = set1.union(set2)\n\n    # convert the union set back to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Convert the combined tuple into a set to remove duplicates\n    unique_elements = set(combined_tuple)\n    \n    # Convert the set back into a list and sort it in ascending order\n    union_elements_list = sorted(list(unique_elements))\n    \n    # Output the union of the elements in sorted order\n    return union_elements_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # get the union of the two tuples\n    union = test_tup1 + test_tup2\n    \n    # sort the union in ascending order\n    union.sort()\n    \n    # print the union\n    print(\"The union of the two tuples is:\", union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union_list = sorted(list(union_set))\n    return sorted_union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the elements in the two tuples\n    union = sorted(set(test_tup1) | set(test_tup2))\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the tuples to sets to remove duplicates and sort the elements\n    test_tup1_set = sorted(set(test_tup1))\n    test_tup2_set = sorted(set(test_tup2))\n    \n    # Find the union of the sets\n    union = test_tup1_set + test_tup2_set\n    \n    # Convert the set back to a tuple and return it\n    return tuple(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of all the elements in the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a tuple and sort it\n    sorted_union = tuple(sorted(union_set))\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    # convert the list to a set to remove duplicates\n    combined_set = set(combined_list)\n    # convert the set back to a list and sort it\n    union_list = sorted(list(combined_set))\n    # convert the list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Union of the two tuples\n    union = sorted(set(test_tup1 + test_tup2))\n    \n    # Print the union\n    print(\"The union of the elements of the two tuples is:\", union)\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    sublist = []\n    \n    for i in lst:\n        sublist.append(i)\n        while sublist[0] > sublist[-1] and len(sublist) > max_len:\n            sublist.pop(0)\n        max_len = max(max_len, len(sublist))\n    \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    # Loop through each element in the list\n    for element in lst:\n        # Add 1 to the current length for this element\n        current_length += 1\n        # If the current length exceeds the maximum length seen so far, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n        # If the current length is less than the maximum length seen so far, remove the first element from the list\n        elif current_length == max_length:\n            lst.remove(element)\n            current_length -= 1\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1  # Assume all sublists start with length 1\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currLength = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            currLength += 1\n        else:\n            if currLength > maxLength:\n                maxLength = currLength\n            currLength = 0\n    if currLength > maxLength:\n        maxLength = currLength\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            current_length = 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max length to 1 and current length to 1\n    max_length = 1\n    current_length = 1\n\n    # Iterate over all sublists of the input list\n    for i in range(1, len(lst)):\n        # If the current element is greater than the previous element, increment current length by 1\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        # Otherwise, reset current length to 1\n        else:\n            current_length = 1\n\n        # Update max length if current length is greater than max length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    currentLength = 0\n\n    for i in range(len(lst)):\n        currentLength += 1\n        if i == len(lst)-1 or lst[i]!= lst[i+1]:\n            maxLength = max(maxLength, currentLength)\n            currentLength = 0\n\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if j == i:  \n                continue  \n            else:  \n                length = j - i + 1  \n                if length > max_length:  \n                    max_length = length  \n    return max_length  "
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?P<value>[^\"]+)(?=\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('value')\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(\\w+)\"'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group(1))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Function to extract values between quotation marks from a string.\n    '''\n\n    # find all matches between quotation marks\n    matches = re.findall(r'\"(.*?)\"', text)\n\n    # extract values from matches\n    values = [match.strip() for match in matches]\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"')\n    return pattern.findall(text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?:(?!\\2).)*?(?=\\2)'\n    return re.findall(pattern, text)\n\ntext = \"The quick brown fox \\\"jumped\\\" over the lazy dog.\"\nprint(extract_values(text))"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    # define a regular expression pattern to match values between quotation marks\n    pattern = r'\"(\\w+)\"'\n    \n    # use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    values = re.findall(pattern, text)\n    \n    # return the list of values\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # create a dictionary to store frequency of elements in the array\n    freq = {}\n    # loop through the array and update the frequency of elements in the dictionary\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # initialize variables to store count of pairs and the maximum count\n    count = 0\n    max_count = 0\n\n    # loop through the dictionary and check for pairs where both elements are unequal\n    for key in freq:\n        if key!= 0:\n            # check if the frequency of the key is greater than 1, if so, increment the count of pairs\n            if freq[key] > 1:\n                count += freq[key] // 2\n                # update the maximum count if the current count is greater than the previous maximum count\n                if count > max_count:\n                    max_count = count\n\n    # return the maximum count of pairs\n    return max_count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    \"\"\"\n    # Initialize a variable to store the count of pairs\n    count = 0\n    # Initialize two variables to keep track of the current pair\n    i, j = 0, 0\n    # Iterate through the list of integers\n    while i < n:\n        # If both elements are equal, increment the count by 1\n        if arr[i] == arr[j]:\n            count += 1\n            # Move both pointers to the next element\n            i += 1\n            j += 1\n        # If the element at position i is less than the element at position j, move the pointer to the next element\n        elif arr[i] < arr[j]:\n            i += 1\n        # If the element at position i is greater than the element at position j, move the pointer to the next element\n        else:\n            j += 1\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Using a set to remove duplicates from the list\n    arr = list(set(arr))\n    count = 0\n    # Using nested loops to find all pairs of elements in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Checking if the elements are unequal and adding to the count if true\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # Check if the list has at least two elements\n    if n < 2:\n        return 0\n\n    # Initialize variables to store the number of pairs\n    count = 0\n    i = 0\n\n    # Loop through each element in the list\n    while i < n - 1:\n        # Check if the current element is not equal to the next element\n        if arr[i]!= arr[i + 1]:\n            # If the current element is not equal to the next element, increment the count\n            count += 1\n        # Increment the indices\n        i += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a set to store unique pairs of numbers\n    pairs = set()\n\n    # Iterate over all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the current pair is not in the set\n            if (arr[i] + arr[j], arr[j] + arr[i]) not in pairs:\n                # If it is, add it to the set\n                pairs.add((arr[i] + arr[j], arr[j] + arr[i]))\n\n    return len(pairs)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    characters = []\n\n    # loop through each character in the word\n    for char in word:\n        # add the character to the list of characters\n        characters.append(char)\n\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Split a string into characters.\n\n    :param word: The string to split.\n    :return: A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into a list of characters\n    characters = list(word)\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string to get its digits\n    digits = str(n)\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize variable to store the sum\n    sum_of_digits = 0\n    # convert the input number to a string\n    str_num = str(n)\n    # loop through each digit in the string and add it to the sum\n    for digit in str_num:\n        sum_of_digits += int(digit)\n    # return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to iterate over its digits\n    n_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each digit of the number\n    while n > 0:\n        # Add the current digit to the sum variable\n        sum += n % 10\n        # Remove the last digit from the number\n        n //= 10\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert n to a string to access its digits\n    digits = str(n)\n    # Initialize the sum to 0\n    total = 0\n    # Loop over each digit of the string\n    for digit in digits:\n        # Convert the digit to an integer and add it to the total\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through the digits of the input number\n    while n > 0:\n        # get the last digit of the input number\n        last_digit = n % 10\n        # add the last digit to the sum variable\n        sum += last_digit\n        # remove the last digit from the input number\n        n = n // 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    str_n = str(n)\n    \n    # Initialize a variable to store the sum\n    sum_digits = 0\n    \n    # Loop through each character in the string\n    for digit in str_n:\n        # Convert the character to an integer and add it to the sum\n        sum_digits += int(digit)\n    \n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) == 1:\n        return True\n    elif list1[0] < list1[1]:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) > 1:\n        if list1[0] < list1[1]:\n            for i in range(1, len(list1)-1):\n                if list1[i] < list1[i-1] or list1[i] > list1[i+1]:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    \"\"\"\n    A function to check whether a specified list is sorted or not.\n\n    :param lst: a list of numbers or characters to be checked for sorting.\n    :type lst: list\n    :return: True if the list is sorted, False otherwise.\n    :rtype: bool\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    This function takes an integer as input, and returns a list of length N, where N is the input integer. \n    Each element of the list is a dictionary that is initially empty.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for sublist in list1:\n        sublist.sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Use the built-in `sort` function to sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty set to store the unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the nums list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not in the set, add it to the set and print it\n            if num not in unique_nums:\n                unique_nums.add(num)\n                print(num)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of lists.\n\n    Args:\n    nums (list of lists): a list of lists containing integers\n\n    Returns:\n    list: a list of unique integers\n    \"\"\"\n    # Convert all lists in the input to sets, to remove duplicates\n    unique_nums = [list(set(num)) for num in nums]\n    # Flatten the resulting list of sets to obtain a list of unique integers\n    unique_int_list = [num for sublist in unique_nums for num in sublist]\n    return unique_int_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty dictionary to store the unique numbers\n    unique_nums = {}\n\n    # Loop through the lists of numbers and add the unique numbers to the dictionary\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums[num] = True\n\n    # Return the unique numbers in a list\n    return list(unique_nums.keys())"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty list to hold the unique numbers\n    unique_nums = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is already in the unique_nums list\n        if num not in unique_nums:\n            # If it's not, add it to the list\n            unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # Create a dictionary to store unique elements from each list\n    unique_elements = {}\n\n    # Iterate through each list\n    for num_list in nums:\n        # Iterate through each element in the list\n        for element in num_list:\n            # If the element is already in the dictionary, remove it from the list\n            if element in unique_elements:\n                unique_elements[element].remove(element)\n            # If the element is not in the dictionary, add it to the dictionary with a list of length 1\n            else:\n                unique_elements[element] = [element]\n\n    # Create a new list to store the unique elements from each list\n    new_list = []\n\n    # Iterate through the dictionary and add each element to the new list if its length is 1\n    for key in unique_elements:\n        if len(unique_elements[key]) == 1:\n            new_list.append(key)\n\n    return new_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates using a set\n    unique_nums = set(nums)\n    # Convert the set back to a list\n    result = list(unique_nums)\n    # Return the list with unique numbers\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Create a set to store unique numbers in the list\n    unique_set = set(list_data)\n\n    # Calculate the product of unique numbers in the set\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set of unique numbers from the given list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    # create a set to remove duplicates and then convert it back to a list\n    unique_list = list(set(list_data))\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # get unique numbers from the list\n    prod = 1\n    for num in unique_nums: # calculate the product of all unique numbers\n        prod *= num\n    return prod"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_set = set(list_data)\n    unique_list = sorted(unique_set)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n\n    Args:\n    list_data (list): a list of integers\n\n    Returns:\n    int: the product of the unique numbers in the list\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    area = 2 * math.pi * r * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 # Formula for surface area of a circle\n    volume = (math.pi * r**2 * h) / 3 # Formula for volume of a cylinder\n    surface_area = (2 * area) + (2 * volume) # Total surface area of a cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    volume = math.pi * r**2 * h / 3\n    return area, volume"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    \n    Inputs:\n    r - radius of the cylinder\n    h - height of the cylinder\n    \n    Returns:\n    area - surface area of the cylinder\n    '''\n    \n    #calculate the surface area of the cylinder\n    area = 2 * pi * r * r + 2 * pi * r * h + pi * r * r + pi * r * h + pi * h * h + pi * h * r\n    \n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if the length of A is smaller than B.\n    if len(A) < len(B):\n        return False\n\n    # Check for each element of B in A.\n    for i in range(len(B)):\n        # If B[i] is not in A, return False.\n        if B[i] not in A:\n            return False\n\n    # If all elements of B are present in A, return True.\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Check if the first list is sublist of the second list\n    if len(A) > len(B) and A in B: \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return \"False\"\n\n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return \"True\"\n    \n    return \"False\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(A, list) or not isinstance(B, list):\n        raise TypeError(\"Input must be of type list.\")\n    elif len(B) > len(A):\n        raise ValueError(\"B must be smaller than or equal to A.\")\n    elif len(A) % len(B)!= 0:\n        raise ValueError(\"A must be divisible by len(B) to be a sublist of B.\")\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i:i+len(B)] == B[j:j+len(B)]:\n            i += len(B)\n            j += len(B)\n        else:\n            i += 1\n            j = 0\n            \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): # If B is a sublist of A\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n        if i == len(A):\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    :param A: A list.\n    :param B: Another list.\n    :return: True if A is a sublist of B, False otherwise.\n    \"\"\"\n    return sorted(B) == sorted(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if B.index(A[i])!= i:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in its factorial.\n    \"\"\"\n    # initialize the last digit to zero\n    last_digit = 0\n\n    # loop through each digit of n\n    while n > 0:\n        # add the last digit to the total factorial\n        last_digit += n % 10\n\n        # divide n by 10 to remove the last digit\n        n //= 10\n\n    # return the last digit as the result\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n\n    Example:\n    >>> last_Digit_Factorial(5)\n    0\n    >>> last_Digit_Factorial(10)\n    5\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Convert the last character of the string to a number and return it\n    return int(num_str[-1])"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 10:  # base case\n        return n\n\n    else:\n        last_digit = n % 10  # find the last digit\n        factorial = last_Digit_Factorial(n // 10)  # call the function recursively with the last digit removed\n\n        return factorial * last_digit  # return the last digit multiplied by the factorial of the number without the last digit\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit in its factorial.\n    '''\n    #initialize a variable to store the last digit\n    last_digit = 0\n    #iterate through each digit of the factorial\n    for i in range(1, n+1):\n        #if the current digit is greater than the last digit, update the last digit\n        if i//10 > last_digit:\n            last_digit = i//10\n    #return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer input and finds the last digit in the factorial of that number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # remove the first character (which is the sign)\n    num = num[1:]\n    # convert the string back to an integer\n    n = int(num)\n    # initialize the last digit to 0\n    last_digit = 0\n    # loop through each digit in the number\n    for digit in str(n):\n        # multiply the last digit by the factorial of the current digit\n        last_digit *= int(digit)\n        # add the last digit to the last digit variable\n        last_digit += last_digit\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = int(n)\n    factorial = 1\n    while num > 0:\n        factorial *= num\n        num //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    # calculate factorial\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # get last digit of factorial\n    last_digit = factorial % 10\n    \n    # return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1): \n        factorial *= i \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the last digit of the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    last_digit = str(factorial)[-1]\n\n    # Return the last digit of the factorial of the given number\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n\n    # initialize the empty interleaved list\n    interleaved_list = []\n\n    # iterate over each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Append the ith element of the first list to the result list\n        result.append(list1[i])\n        # Append the ith element of the second list to the result list\n        result.append(list2[i])\n        # Append the ith element of the third list to the result list\n        result.append(list3[i])\n\n    # Return the final result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    result += list1[i:]\n    result += list2[j:]\n    result += list3[k:]\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Lists must have the same length\"\n    \n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Loop through each list\n    for i in range(len(list1)):\n        # Append the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:  # list3[k] < list1[i] and list3[k] < list2[j]:\n            result.append(list3[k])\n            k += 1\n    result += list1[i:]\n    result += list2[j:]\n    result += list3[k:]\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): First list to be interleaved.\n        list2 (list): Second list to be interleaved.\n        list3 (list): Third list to be interleaved.\n\n    Returns:\n        list: Flattened list of interleaved lists.\n    \"\"\"\n    # Find the length of the lists\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n\n    # Check if all lists have the same length\n    if length1!= length2 or length1!= length3:\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Loop through each list in turn, appending the first element to the result\n    # and then the second element, and so on until all elements have been processed\n    for i in range(length1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # iterate through the lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n    \n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is in the second tuple\n        if element not in test_tup2:\n            # add the element to the dissimilar set\n            dissimilar_set.add(element)\n    \n    # return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n\n    # Loop through the first tuple and check if each element is present in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_set.add(element)\n\n    # Loop through the second tuple and check if each element is present in the first tuple\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_set.add(element)\n\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Iterate through both tuples\n    for i in range(len(test_tup1)):\n        # If the elements are not equal, add it to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # iterate through the two tuples and check for dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # return the dissimilar element\n            return test_tup1[i]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # If the element at the current index in the first tuple is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the element at the current index to the dissimilar_list\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of elements that are present in\n    test_tup1 but not in test_tup2.\n\n    If both tuples have the same length and all elements are present in both tuples, then the function\n    will return an empty list.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # check if the first element of the tuple is a tuple\n    if type(test_tuple[0]) == tuple:\n        # recursively call the function for each element of the nested tuple\n        for elem in test_tuple:\n            even_ele(elem, even_fnc)\n    elif even_fnc(test_tuple):\n        # check if the element meets the criteria for even elements\n        test_tuple = test_tuple[0]\n        print(\"The element is even:\", test_tuple)\n    else:\n        # print the element as it is\n        print(\"The element is odd:\", test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Use a list comprehension to iterate through the nested tuple and extract even elements\n    even_list = [even_fnc(elem) for elem in test_tuple if even_fnc(elem)]\n    \n    # Return the list of even elements\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def remove_uneven_elements(nested_tuple):\n        '''\n        Remove uneven elements from a nested tuple.\n        '''\n        return tuple(filter(lambda x: even_fnc(x), nested_tuple))\n\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"The input must be a tuple.\")\n\n    return remove_uneven_elements(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for i in range(len(test_tuple)):\n        if len(even_fnc(test_tuple[i])) == 1:\n            uneven_list.append(test_tuple[i])\n    return uneven_list\n\ndef odd_fnc(num):\n    if num % 2 == 1:\n        return [num]\n    else:\n        return []\n\ndef even_fnc(num):\n    if num % 2 == 0:\n        return [num]\n    else:\n        return []\n\nmy_tuple = ([1, 2, 3], (4, 5, 6, 7), [8, 9], (10, 11, 12, 13), (14, 15, 16, 17), [18, 19, 20])\nprint(even_ele(my_tuple, even_fnc))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_ele(item, even_fnc)\n            if len(new_item) > 0:\n                new_tuple.append(new_item)\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # initialize the even_tuple\n    even_tuple = []\n    \n    # loop through each element in the input tuple\n    for item in test_tuple:\n        \n        # check if the item is even\n        if even_fnc(item):\n            \n            # if the item is even, append it to the even_tuple\n            even_tuple.append(item)\n    \n    # return the even_tuple\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            uneven_list.append(item)\n    return uneven_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the function is even or odd\n    if even_fnc == 'odd':\n        even_fnc = lambda x: x % 2 == 1\n    elif even_fnc == 'even':\n        even_fnc = lambda x: x % 2 == 0\n    else:\n        raise ValueError('Invalid even function.')\n\n    # loop through the nested tuple and check if each element is even\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        new_sub_tuple = []\n        for element in sub_tuple:\n            if even_fnc(element):\n                new_sub_tuple.append(element)\n        new_tuple.append(new_sub_tuple)\n\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the base\n    base_area = b * s\n    \n    # Calculate the surface area of the pyramid\n    pyramid_area = 4 * base_area\n    \n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b+s)*b/2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b**2)+(b+s)*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(base, height): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = (base * height) + (base * height) + (base * height) + (base * height)\n    \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of a square pyramid using the formula:\n    #   surface area = 1/2 * b * h * (1 + (sin(90))^2)\n    # where b is the base edge and h is the height.\n\n    # Calculating the base edge.\n    base_edge = b\n\n    # Calculating the height.\n    height = s\n\n    # Calculating the sine of 90 degrees.\n    sin_90 = math.sin(math.pi/2)\n\n    # Calculating the value of (1 + (sin(90))^2) using the formula:\n    #   (1 + (sin(90))^2) = 1 + sin(90)^2\n    # Since we are using the sin(90) value, we can simplify the expression to:\n    #   (1 + sin(90)^2) = 1\n    # which simplifies to:\n    #   (1 + sin(90)^2) = 1\n    # and we get:\n    #   (1 + sin(90)^2) = 1 + sin(90)^2\n    # Therefore, we can use the above formula to calculate the value of (1 + (sin(90))^2).\n    one_plus_sin_90_squared = 1 + math.sin(math.pi/2)**2\n\n    # Calculating the surface area of the square pyramid.\n    surface_area = 0.5 * base_edge * height * one_plus_sin_90_squared\n\n    # Returning the surface area.\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    surface_area = 0.5*b*s*s\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the length of the base side\n    base_side = b * 2\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 6 * b * s + 6 * b * base_side + 6 * base_side * s - 6 * base_side * base_side\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of each triangle of the pyramid\n    area_triangle = (b**2 * s) / 2\n    # Calculate the total surface area of the pyramid\n    total_area = area_triangle * 4  # 4 triangles per pyramid\n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 6 * b + 6 * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s/2) * b ** 2  # finding the area of the base using the Pythagorean theorem\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n < 0:\n        return \"Invalid input. n must be non-negative.\"\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    catalan = [0]*(n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    catalan[2] = 2\n\n    for i in range(3, n+1):\n        catalan[i] = 4*catalan[i-1] - catalan[i-2]\n\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth Catalan number using the formula:\n    C(n) = (2n)! / ((n+1)! * (n)!).\n    '''\n    numerator = (2 * n)\n    denominator = ((n + 1) * n)\n    return numerator // denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number using recursion.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The\", n, \"Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula: C(n) = (2n+1)!/(n!(n-1)!)\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n + 1) * catalan_number(n - 1) / (n * catalan_number(n - 2))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num - 1) * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the rows\n    for i in range(1, num + 1):\n        # Calculate the number of nodes in each row\n        num_nodes = 2 * i - 1\n\n        # Calculate the number of paths from the root to each node\n        num_paths = (2 * i - 1) * (2 * i - 2) / 2\n\n        # Add the number of paths to the result\n        result += num_paths * num_nodes\n\n    # Return the final result\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n < 0:\n        return None\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 1\n    \n    catalan = [1] * (2*n + 1)\n    for i in range(2, 2*n+1):\n        for j in range(1, i+1):\n            catalan[i] += catalan[j-1] * catalan[i-j]\n    \n    return catalan[2*n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Helper function to compute the catalan number using matrix exponentiation\n    def matrix_exponentiation(matrix, n):\n        if n == 1:\n            return matrix\n        elif n % 2 == 0:\n            half_power = matrix_exponentiation(matrix, n // 2)\n            return matrix_multiply(half_power, half_power)\n        else:\n            return matrix_multiply(matrix, matrix_exponentiation(matrix, n - 1))\n\n    # Compute the first two terms of the Catalan sequence\n    catalan_sequence = [1, 1]\n    for i in range(2, num+1):\n        catalan_sequence.append(catalan_sequence[-1] + catalan_sequence[-2])\n\n    # Compute the nth term of the Catalan sequence using matrix exponentiation\n    matrix = [[0, 1], [1, 0]]\n    return matrix_exponentiation(matrix, len(catalan_sequence))[0][0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text.lower())\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # find all the positions of adverbs ending with ly in the given text\n    positions = re.findall(pattern, text)\n\n    # return a list of tuples containing the adverb and its positions in the text\n    return [(match, text.index(match)) for match in positions]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]\\w*ly\\b'\n    # Find all non-overlapping occurrences of the pattern in the given string\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Return a list of the positions of the adverbs found in the string\n    return [text.index(match) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w+\\s*ly\\b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Create a list of tuples containing the first adverb ending with \"ly\" and its position in the given text\n    adverbs = [(match, text.index(match)) for match in matches]\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # define the regular expression pattern for the adverb ending with ly\n    pattern = r'\\b[aeiou].*[aeiou]y\\b'\n\n    # use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # loop through the matches and extract the positions of the adverbs\n    for match in matches:\n        # extract the positions of the adverb from the match\n        start, end = match.span()\n\n        # print the adverb and its positions\n        print(text[start:end])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regex pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(adverb)\\s+ly\\b'\n\n    # Find all occurrences of the pattern in the given string\n    occurrences = re.findall(pattern, text, re.IGNORECASE)\n\n    # If there are no occurrences of the pattern, return an empty list\n    if not occurrences:\n        return []\n\n    # Define a function to extract the adverb ending with \"ly\" from each match\n    def extract_adverb(match):\n        return match.group(1)\n\n    # Apply the function to each match to extract the adverb ending with \"ly\"\n    adverbs = list(map(extract_adverb, occurrences))\n\n    # Return a list of tuples containing the positions of the adverbs and their ending\n    return [(match.start(), adverb) for match, adverb in zip(occurrences, adverbs)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for adverbs ending with 'ly'\n    pattern = r'\\b([aeiou]y)\\b'\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Loop through all matches and add their positions to the list\n    for match in matches:\n        positions.append(text.index(match[0]))\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z][a-zA-Z]*ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return a list of tuples containing the adverb and its starting and ending positions in the text\n    return [(m, text.find(m), text.find(m, m.end())) for m in matches]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of size n and initialize it with the first n items in the dataset\n    heap = list(items[:n])\n    heapq.heapify(heap)\n\n    # Iterate through the remaining items in the dataset\n    for item in items[n:]:\n        # If the item is less expensive than the minimum element in the heap, remove the minimum element and add the new item\n        if item[1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the heap in descending order (highest price first)\n    return [x[0] for x in sorted(heap, key=lambda x: x[1], reverse=True)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n\n    # Iterate through the dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(max_heap, item)\n\n    # Extract the n most expensive items from the heap and return them as a list\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    items: a list of tuples representing the items in the dataset, where each tuple has two elements:\n    the price of the item and the item itself.\n    n: the number of most expensive items to find.\n\n    Returns:\n    A list of the n most expensive items from the dataset.\n    '''\n    # Build a min-heap of the n most expensive items\n    heap = items[:n]\n    heapq.heapify(heap)\n\n    # Remove the n most expensive items from the heap and add the next most expensive item\n    for item in items[n:]:\n        if item[0] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the heap\n    return [item[1] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and an integer n and returns the n most expensive items in the dataset.\n    The function uses a priority queue (heapq) to find the n most expensive items.\n    '''\n    if n > len(items):\n        return \"Error: n should be less than or equal to the number of items in the list.\"\n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    heap = []\n    max_heap = []\n    \n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n            max_heap.append(item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(heap, item)\n                max_heap.append(item)\n                \n    return max_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items: a list of items, where each item is a tuple of the form (price, weight, name)\n    - n: an integer, the number of items to find the most expensive\n\n    Returns:\n    - a list of tuples, where each tuple contains the name and price of the n most expensive items\n    \"\"\"\n\n    # Sort the items by price in descending order\n    items.sort(key=lambda x: x[0], reverse=True)\n\n    # Find the n most expensive items\n    most_expensive = items[:n]\n\n    # Extract the names and prices of the n most expensive items\n    names_and_prices = [(item[2], item[0]) for item in most_expensive]\n\n    return names_and_prices"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns the n most expensive items in the dataset.\n    '''\n    # Initialize a min heap to store the n most expensive items\n    min_heap = []\n\n    # Iterate over the items and add each one to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return l\n    else:\n        mid = len(l) // 2\n        left = split_Arr(l[:mid], n-1)\n        right = split_Arr(l[mid:], n-1)\n        return left + [l[mid]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If the length of the list is less than n, return the original list\n    if len(l) < n:\n        return l\n    \n    # Find the index of the nth element\n    i = 0\n    while i < n-1:\n        i += 1\n    \n    # Split the list at the nth element\n    mid = len(l)//2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # Add the first part of the list to the end of the right half of the list\n    for j in range(len(left)):\n        right.insert(j, left[j])\n    \n    return right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0 or n >= len(l):\n        return None\n    \n    first_part = l[:n]\n    last_part = l[n:]\n    new_list = first_part + last_part\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return \"Invalid index\"\n    else:\n        temp = l[:n]\n        l = l[n:]\n        l.extend(temp)\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError('n is greater than the length of the list')\n    elif n == 0:\n        return l\n    else:\n        # split the list at the nth element\n        mid = len(l) // 2\n        l1 = l[:mid]\n        l2 = l[mid:]\n        \n        # add the first part to the end of l2\n        l1.extend(l2)\n        \n        return l1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty\n    if not l:\n        print(\"List is empty!\")\n        return\n    \n    # find the index of the element at the nth position\n    index = l.index(n)\n    \n    # split the list at the nth element\n    left_part = l[:index]\n    right_part = l[index+1:]\n    \n    # add the first part of the list to the end of the right part\n    result = right_part + left_part\n    \n    # return the result\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.append(l[n:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n > len(l):\n        return \"List is not long enough\"\n\n    if n == 1:\n        return [l[0]]\n\n    elif n == len(l):\n        return l\n\n    else:\n        return l[:n] + split_Arr(l[n:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer.')\n    # Check if n is valid\n    if n < 0 or n >= len(l):\n        raise ValueError('n is out of range.')\n    # Split the list at n\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    new_list = l[:n] + [l[n]]\n    # reverse the list\n    new_list = new_list[::-1]\n    # add the last element to the end of the list\n    new_list.append(l[-1])\n    # return the new list\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # Convert the list to a tuple using the tuple() function.\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # return the difference between the largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # sort the list in descending order\n    nums.sort(reverse=True)\n    # return the difference between the largest and smallest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    if len(nums) < 2:\n        return None\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list as input and returns the difference between the largest and smallest value in the list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list\n    nums.sort()\n\n    # Finding the difference between largest and smallest value\n    diff = nums[-1] - nums[0]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all the numbers between a and b\n    for i in range(a, b+1):\n        # check if the square is a perfect square\n        if i * i == a * a:\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers, `a` and `b`, as input and returns a list of perfect squares between them.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares = []\n    # loop through all numbers between a and b\n    for num in range(a, b+1):\n        # if the square of the number is equal to the number itself, it is a perfect square\n        if num == num**2:\n            perfect_squares.append(num)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n\n    for i in range(a, b+1):\n        j = i * i\n        if j == i:\n            result.append(i)\n\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the number is a perfect square\n        is_perfect_square = True\n        square = i\n        while square**2 <= i:\n            if i % square!= 0:\n                is_perfect_square = False\n                break\n            square += 1\n        # If the number is a perfect square, add it to the list\n        if is_perfect_square:\n            perfect_squares.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes in two numbers and returns the number of perfect squares between them.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i**2 == i:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i**2 == a or i**2 == b:\n            # If it is, return i\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    perfect_square_sum = 0\n    for i in range(a, b + 1):\n        if i*i == a:\n            perfect_square_sum += 1\n        elif i*i == b:\n            perfect_square_sum += 1\n    return perfect_square_sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize variables\n    squares = set()\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = i ** 2\n        if square == int(square):\n            squares.add(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all numbers from a to b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            # if it is, print the square root of i\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    This function takes in polar coordinates (x and y) and returns their rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2+y**2)\n    phi = cmath.phase(x+y*1j)\n    return r*cmath.cos(phi), r*cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    r = cmath.sqrt(x**2 + y**2) #calculate the magnitude of the vector\n    theta = cmath.phase(x + y*1j) #calculate the angle in radians\n\n    #convert the magnitude and angle to rectangular coordinates\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n\n    # Calculate the magnitude and angle of the vector\n    mag = cmath.sqrt(x**2 + y**2)\n    angle = cmath.phase(x + y*1j)\n\n    # Convert the angle to radians\n    angle = angle.real\n\n    # Calculate the x and y coordinates of the point in the rectangular plane\n    x_rect = mag * cmath.cos(angle)\n    y_rect = mag * cmath.sin(angle)\n\n    # Return the converted point in a tuple\n    return (x_rect.real, y_rect.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Args:\n        r (float): The length of the radial component of the coordinate.\n        theta (float): The angle of the line segment formed by the point (0, 0) and the point (r, 0).\n\n    Returns:\n        tuple: A tuple containing the x and y coordinates of the rectangular coordinate.\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function converts polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians from the x-axis to the point.\n\n    Returns:\n    tuple: (x, y) in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to complex numbers\n    z = complex(x,y)\n\n    # Calculate the rectangular coordinates\n    r = abs(z)\n    theta = cmath.phase(z)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    # Return the rectangular coordinates\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # create a variable to store the length of the list\n    n = len(newList)\n    \n    # check if the length of the list is greater than 1\n    if n > 1:\n        # set the first and last elements of the list to temporary variables\n        first = newList[0]\n        last = newList[n-1]\n        \n        # set the first element of the list to the last element and the last element to the first element\n        newList[0] = last\n        newList[n-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"Error: List has less than two elements.\"\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        print(\"List has less than two elements.\")\n        return\n    # Check if the list has odd or even length\n    if length % 2 == 0:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # Interchange the first and middle elements\n        newList[0], newList[length//2] = newList[length//2], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2: \n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return None\n    elif len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        num = fact\n        for i in range(1,k+1):\n            num = num//i\n        return num"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    for i in range(k, n+1):\n        binomial_coeff = 1\n        for j in range(1, i+1):\n            binomial_coeff *= j\n        sum_of_products += binomial_coeff\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k): \n    #initialize the sum of the product of consecutive binomial co-efficients to zero\n    sum_coeff = 0\n\n    #loop through all possible values of k from 0 to n\n    for i in range(k+1):\n        #loop through all possible values of n-k+1 from 0 to n\n        for j in range(n-k+1):\n            #find the coefficient of the binomial equation and add it to the sum of the product of consecutive binomial co-efficients\n            coeff = (n-j) * (k-i) // (i+j)\n            sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of the product of consecutive co-efficients\n    sum_of_product = 0\n    # Iterate from 0 to n-k, inclusive\n    for i in range(n - k + 1):\n        # Find the co-efficient of i and k\n        co_factor = (n - i) // k\n        # Multiply the co-efficient of i and k with the sum of the product of previous co-efficients\n        sum_of_product += co_factor * i\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integers, n and k, representing the binomial coefficients \n    and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum to 0\n    result = 0\n    # calculate the product of consecutive binomial coefficients\n    for i in range(k+1):\n        result += (n-i) * (k-i)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, k+1):\n        sum += n * ((n-i+1) * (i)) // i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k,n+1):\n        sum += i*binomial_Coeff(n,i)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        sum_of_product = 0\n        for i in range(1, k+1):\n            sum_of_product += binomial_Coeff(n-i, k-i)\n        return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two arguments n and k. It then returns the sum of the product of consecutive binomial co-efficients.\n    \n    Example:\n    binomial_Coeff(4,2) will return 16\n    '''\n    if k > n:\n        return 0\n    \n    if k == 0 or k == n:\n        return 1\n    \n    sum = 0\n    for i in range(k+1):\n        sum += binomial_Coeff(n-1, i)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if the given values are valid\n    if k < 0 or k > n:\n        return None\n    elif n == 0 or n == 1:\n        return 1\n\n    # Initialize the sum and product variables\n    sum = 0\n    product = 1\n\n    # Calculate the binomial coefficient\n    for i in range(n):\n        if i >= k:\n            sum += product\n        product *= (n-i)\n\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$'\n    match = re.match(pattern, ip)\n    \n    if match:\n        ip_parts = match.groups()\n        for i, part in enumerate(ip_parts):\n            if part.startswith('0'):\n                ip_parts[i] = int(part[1:])\n                \n        return '.'.join(map(str, ip_parts))\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,3}\\.){3}\\d{1,3}$'\n    if re.match(pattern, ip):\n        return re.sub(r'^0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^0+', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^0+(\\d+)'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Use regex to match leading zeros and remove them\n    ip = re.sub(r'^\\D+', '', ip)\n\n    # Return the cleaned up ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(?:0+(?::|$)){4}', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expressions to remove leading zeroes from the IP address\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n    ip (str): An IP address in string format.\n\n    Returns:\n    str: An IP address with leading zeroes removed.\n    \"\"\"\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$'\n    if re.match(pattern, ip):\n        return '.'.join(ip.split('.')[1:])\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    # Check if the list is not empty\n    if not list1:\n        return \"The list is empty\"\n    \n    # Find the first even number in the list\n    even_num = None\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number in the list\n    odd_num = None\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # If no even or odd number is found, return an error message\n    if even_num is None or odd_num is None:\n        return \"No even or odd number is found in the list\"\n    \n    # Find the difference of the even and odd numbers and return the result\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    if even_first % 2 == 0 and odd_first % 2 == 1:\n        diff = even_first - odd_first\n    else:\n        diff = abs(even_first - odd_first)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    even_count = 0\n    odd_count = 0\n\n    for index, num in enumerate(list1):\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                even_index = index\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                odd_index = index\n        if even_count == 1 and odd_count == 1:\n            break\n\n    if even_index > odd_index:\n        difference = list1[even_index] - list1[odd_index]\n    else:\n        difference = list1[odd_index] - list1[even_index]\n\n    return difference"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input list is empty\n    if len(list1) == 0:\n        return \"The list is empty\"\n    \n    # Initialize the variables to store the even and odd numbers\n    even_num = odd_num = None\n    \n    # Loop through the list to find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return \"The list contains more than one even number\"\n        elif odd_num is None:\n            odd_num = num\n        else:\n            return \"The list contains more than one odd number\"\n    \n    # Return the difference between the even and odd numbers\n    if even_num is None:\n        return \"The list contains only odd numbers\"\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    if len(lst) < 2:\n        return \"List must have at least two elements\"\n    \n    first_even = None\n    first_odd = None\n    \n    for i in lst:\n        if i % 2 == 0:\n            if first_even is None:\n                first_even = i\n            else:\n                return abs(first_even - i)\n        \n        if i % 2!= 0:\n            if first_odd is None:\n                first_odd = i\n            else:\n                return abs(first_odd - i)\n    \n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list is empty or contains only one element\n    if len(list1) < 2:\n        return \"List should contain at least two elements.\"\n    # Check if the first element is even\n    if list1[0] % 2 == 0:\n        return \"The first element is even.\"\n    # Check if the first element is odd\n    if list1[0] % 2!= 0:\n        return \"The first element is odd.\"\n    # Check if the second element is even\n    if list1[1] % 2 == 0:\n        return \"The second element is even.\"\n    # Check if the second element is odd\n    if list1[1] % 2!= 0:\n        return \"The second element is odd.\"\n    # Calculate the difference of the first even and first odd number\n    diff = list1[0] - list1[1]\n    # Return the difference\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    if n!= len(str2):\n        return \"Invalid input\"\n    \n    swap_count = 0\n    \n    # Traverse both strings from left to right\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swap_count += 1\n            \n            # Swap characters at positions i and i+1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            \n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            str1[i], str2[i] = str2[i], str1[i]\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings and returns the minimum number of swaps required to convert them.\n    \"\"\"\n    n = len(str1)\n    i = j = 0\n    while i < n and j < n:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0' and str2[j] == '1':\n                i += 1\n                j += 1\n            elif str1[i] == '1' and str2[j] == '0':\n                i += 1\n                j += 1\n            elif str1[i] == '1' and str2[j] == '1':\n                if str1[i+1] == '0' and str2[j+1] == '1':\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n            elif str1[i] == '0' and str2[j] == '0':\n                if str1[i+1] == '1' and str2[j+1] == '0':\n                    i += 1\n                    j += 1\n                else:\n                    i += 1\n                    j += 1\n        else:\n            i += 1\n            j += 1\n    return i - n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary format\n    binary1 = ''.join(map(str, bin(int(str1, 10))[2:]))\n    binary2 = ''.join(map(str, bin(int(str2, 10))[2:]))\n\n    # Compare the binary strings and find the minimum number of swaps required\n    count = 0\n    for i in range(len(binary1)):\n        if binary1[i]!= binary2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # check if the two strings have equal length\n    if len(str1)!= len(str2):\n        return -1\n\n    # convert the two strings to binary\n    binary1 = bin(int(str1, 2))[2:]  # remove the '0b' prefix\n    binary2 = bin(int(str2, 2))[2:]\n\n    # initialize a counter for swaps\n    count = 0\n\n    # iterate over the binary strings and compare them\n    for i in range(len(binary1)):\n        # if the bits are different, increment the counter\n        if binary1[i]!= binary2[i]:\n            count += 1\n\n    # return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # XOR the two integers\n    xor = int1 ^ int2\n\n    # count the number of bits set in the XOR result\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n\n    # find the minimum number of swaps required to convert int1 to int2\n    min_swaps = 0\n    while xor:\n        if xor & 1:\n            min_swaps += count\n        xor >>= 1\n        count -= 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    \n    # Convert both strings to lists of integers\n    int1 = [int(x) for x in str1]\n    int2 = [int(x) for x in str2]\n\n    # Initialize two lists to store the carry bits and the current digit value\n    carry1 = [0]*len(int1)\n    carry2 = [0]*len(int2)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Loop through each digit of the first binary string\n    for i in range(len(int1)-1, -1, -1):\n\n        # If the current digit is greater than 0, add 1 to the next digit in the second binary string\n        if int1[i] > 0:\n            int2[i] += 1\n\n        # Compute the carry bits using the two previous carry bits and the current digit value\n        carry1[i] = carry1[i+1] ^ carry2[i+1] ^ int1[i]\n\n        # Compute the new current digit value\n        int1[i] = carry1[i] ^ carry2[i]\n\n        # Update the minimum number of swaps if the new current digit value is less than the current minimum number of swaps\n        if int1[i] < min_swaps:\n            min_swaps = int1[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Find the difference between the two numbers\n    diff = num1 - num2\n    \n    # Convert the difference to binary string\n    bin_diff = format(diff, 'b')\n    \n    # Count the number of swaps required to convert the binary string to its decimal equivalent\n    count = 0\n    for i in range(len(bin_diff)):\n        if bin_diff[i] == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert binary strings to binary integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # check if the two integers are equal\n    if num1 == num2:\n        return 0\n\n    # check if the binary strings are of equal length\n    if len(str1)!= len(str2):\n        return \"The binary strings are not of equal length.\"\n\n    # calculate the maximum difference between the two integers\n    max_diff = max(abs(num1 - num2), abs(num2 - num1))\n\n    # initialize a list to store the number of swaps required for each bit\n    swaps = []\n\n    # iterate through the bits of the binary strings\n    for i in range(len(str1)):\n        # find the difference between the corresponding bits of the two integers\n        diff = abs(num1 & (1 << i) - (num2 & (1 << i)))\n\n        # check if the difference is less than or equal to the maximum difference\n        if diff <= max_diff:\n            # add the number of swaps required for this bit to the list\n            swaps.append(max_diff - diff)\n\n    # calculate the minimum number of swaps required\n    min_swaps = min(swaps)\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    count = 0\n    i = j = 0\n    while i < len(str1) and j < len(str2) :\n        if str1[i] > str2[j] :\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            count += 1\n        i += 1\n        j += 1\n    if i == len(str1) :\n        while j < len(str2) :\n            str2[j], str2[j-1] = str2[j-1], str2[j]\n            j += 1\n            count += 1\n    else :\n        while i < len(str1) :\n            str1[i], str1[i-1] = str1[i-1], str1[i]\n            i += 1\n            count += 1\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # get the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    # return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    size_list = []\n    for t in tuple_list:\n        size_list.append(sys.getsizeof(t))\n    return sum(size_list)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    total_size = 0\n    for element in tuple_list:\n        total_size += sys.getsizeof(element)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Loop through each tuple in the list\n    for i in range(len(tuple_list)):\n\n        # Get the size of each element in the tuple\n        size = sys.getsizeof(tuple_list[i])\n\n        # Add up the total size of all tuples\n        total_size += size\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    sys.setrecursionlimit(100000)\n\n    def get_size(obj, seen=None):\n        \"\"\"\n        Recursively finds the size of an object.\n        \"\"\"\n        if seen is None:\n            seen = set()\n\n        if id(obj) in seen:\n            return 0\n\n        seen.add(id(obj))\n\n        if isinstance(obj, dict):\n            size = 0\n            for key, value in obj.items():\n                size += get_size(key, seen)\n                size += get_size(value, seen)\n        elif isinstance(obj, tuple):\n            size = 0\n            for element in obj:\n                size += get_size(element, seen)\n        elif hasattr(obj, '__dict__'):\n            size = 0\n            for key in obj.__dict__:\n                size += get_size(obj.__dict__[key], seen)\n        elif hasattr(obj, '__slots__'):\n            size = 0\n            for slot in obj.__slots__:\n                size += get_size(getattr(obj, slot), seen)\n        else:\n            size = sys.getsizeof(obj)\n\n        return size\n\n    size = 0\n    for tup in tuple_list:\n        size += get_size(tup)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to store the size in bytes\n    size_in_bytes = 0\n    \n    # Loop through each tuple in the list\n    for i in tuple_list:\n        # Calculate the size in bytes of the tuple and add it to the total size\n        size_in_bytes += sys.getsizeof(i)\n    \n    # Return the total size in bytes\n    return size_in_bytes"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three parameters:\n    arr1: the first sorted array\n    arr2: the second sorted array\n    k: the index of the element that needs to be found\n\n    This function returns the kth element from the given two sorted arrays.\n    '''\n\n    i = 0\n    j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Compare the first element of each array\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the first elements are equal, check if it is the kth element\n            if i + 1 == k:\n                return arr1[i]\n            elif i + 1 > k:\n                j += 1\n            else:\n                i += 1\n\n    # If there are any remaining elements in the first array, return those\n    while i < n1:\n        return arr1[i]\n\n    # If there are any remaining elements in the second array, return those\n    while j < n2:\n        return arr2[j]\n\n    # If we reach this point, there is no such element\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k or len(arr2) < k:\n        return None\n    \n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n            \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize variables for the index of arr1 and arr2\n    i, j = 0, 0\n\n    # initialize variables for the current index in the merged array\n    kth = 0\n\n    # loop through the array until one of the arrays is exhausted\n    while i < len(arr1) and j < len(arr2):\n        # if the current element in arr1 is smaller than the current element in arr2, increment arr1 index\n        if arr1[i] < arr2[j]:\n            i += 1\n            kth += 1\n        # if the current element in arr2 is smaller than the current element in arr1, increment arr2 index\n        else:\n            j += 1\n\n    # add the remaining elements from the remaining array to the merged array\n    while i < len(arr1):\n        kth += 1\n        i += 1\n    while j < len(arr2):\n        kth += 1\n        j += 1\n\n    # return the kth element from the merged array\n    return arr1[kth - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            k -= 2\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Returns the kth smallest element from two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    if k == 1:\n        return arr1[i] if i < len(arr1) else arr2[j]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments: the first array, the second array and k.\n    It returns the kth smallest element from the two arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Initialize kth element as 0\n    kth_element = 0\n    \n    while i < n1 and j < n2:\n        # If the current elements are equal, compare their indices\n        if arr1[i] == arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            elif k == 3:\n                return arr1[i]\n            else:\n                return kth_element\n            # Move to the next element\n            i += 1\n            j += 1\n        # If the current element in arr1 is smaller, move to the next element in arr1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If the current element in arr2 is smaller, move to the next element in arr2\n        else:\n            j += 1\n    \n    # If k is 1, the kth element is the smallest element in arr1\n    if k == 1:\n        return arr1[n1-1]\n    \n    # If k is 2, the kth element is the smallest element in arr2\n    elif k == 2:\n        return arr2[n2-1]\n    \n    # If k is 3, the kth element is the smallest element in arr1 or arr2\n    elif k == 3:\n        return min(arr1[n1-1], arr2[n2-1])\n    \n    # If k is greater than 3, the kth element is the smallest element greater than all elements in arr1 and arr2\n    else:\n        return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[k] = arr1[k], arr1[i]\n            i += 1\n            k += 1\n        elif arr1[i] > arr2[j]:\n            arr2[j], arr2[k] = arr2[k], arr2[j]\n            j += 1\n            k += 1\n        else:\n            i += 1\n    \n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(num):\n    '''\n    Function to check whether a given number is an Armstrong number or not.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # initialize a variable to keep track of the sum of the cubes of each digit\n    digit_sum = 0\n    # loop through each digit of the number\n    for digit in num_str:\n        # convert each digit to an integer and cube it\n        cube = int(digit) ** 3\n        # add the cube to the digit_sum\n        digit_sum += cube\n    # check if the digit_sum is equal to the original number\n    if digit_sum == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # convert number to string\n    num_str = str(number)\n\n    # calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n\n    # check if the sum of the cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        arm_sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            arm_sum += digit ** 3\n            temp //= 10\n        return arm_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Check whether the given number is armstrong or not.\n\n    :param number: The number to be checked for armstrongity.\n    :return: True if the number is armstrong, False otherwise.\n    \"\"\"\n    if number < 10:\n        return False\n\n    # Convert the number to a string and split it into a list of digits.\n    digits = [int(digit) for digit in str(number)]\n\n    # Calculate the sum of the cubes of the digits.\n    cube_sum = sum([digit ** 3 for digit in digits])\n\n    # Compare the result with the original number.\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    sum = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** power\n    \n    if sum == number:\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(d) for d in str(number)]\n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([d**3 for d in digits])\n    # Check if the sum of cubes is equal to the original number\n    if number == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Remove any leading zeros from the number\n    number = str(number)[number.find('0'):]\n\n    # Calculate the sum of the digits of the number\n    sum_of_digits = 0\n    for digit in number:\n        sum_of_digits += int(digit)\n\n    # Return whether the sum of the digits is equal to the original number\n    return sum_of_digits == int(number)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Function to calculate the sum of the cubes of digits of a given number\n    def sum_of_cubes(num):\n        return sum(int(digit)**3 for digit in str(num))\n\n    # Check whether the given number is greater than 9 or not\n    if number > 9:\n        # Convert the number to a string and calculate the sum of the cubes of its digits\n        sum_of_digits = sum_of_cubes(number)\n        # Check whether the sum of the cubes of digits is equal to the original number\n        return sum_of_digits == number\n    else:\n        # Number is less than or equal to 9, so it cannot be an armstrong number\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    if n < 10:\n        return False\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for i in range(1, number+1):\n        total_sum += i\n        count += 1\n    \n    average = total_sum / count\n    \n    return total_sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the number of natural numbers to be summed: \"))\n    sum_of_numbers = 0\n    for i in range(n):\n        num = int(input(\"Enter the {}th natural number: \".format(i+1)))\n        sum_of_numbers += num\n    average = sum_of_numbers/n\n    print(\"The sum of the first {} natural numbers is: {}\".format(n, sum_of_numbers))\n    print(\"The average of the first {} natural numbers is: {}\".format(n, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    print(\"The sum of the first {} natural numbers is: {}\".format(number, sum))\n    print(\"The average of the first {} natural numbers is: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    while count < number:\n        total += count\n        count += 1\n\n    average = total / number\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function finds the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    return total, count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is odd')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number\", n, \"is even.\")\n    else:\n        print(\"The number\", n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through each character in the string and find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to list to iterate over characters\n    lst = list(str1)\n    # loop through the list and find the first repeated character\n    for i in range(len(lst)):\n        if i == lst.index(lst[i]):\n            return lst[i]\n    # if no repeated character found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character and its count\n    for char, count in char_count.items():\n        if count > 1:\n            return char, count\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character if it exists.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i <= n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        lucid = (i * (i + 1)) / 2\n        if lucid <= n:\n            lucid_numbers.append(lucid)\n        else:\n            break\n        i += 1\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Determine whether a given integer is a lucid number.\n    '''\n    if n < 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = 1\n    lucid_list = []\n    while lucid <= n:\n        if lucid % 2 == 0:\n            lucid_list.append(lucid)\n        lucid += 1\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if i == 2 or i == 3:\n            ludic_numbers.append(i)\n        else:\n            is_lucid = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                ludic_numbers.append(i)\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # Initialize an empty list to store the lucid numbers\n    lucid_list = []\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of digits of i\n        digit_sum = sum(int(digit) for digit in str(i))\n        \n        # Check if the digit sum is less than or equal to n\n        if digit_sum <= n:\n            # Add the lucid number to the list if its digit sum is less than or equal to n\n            lucid_list.append(i)\n    \n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        # Check if the number is lucid\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit)**i for digit in str(i)) == i:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(n):\n        ludic_num = i * (i + 1) // 2\n        ludic_nums.append(ludic_num)\n    return ludic_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Initialize a variable to keep track of the current lucid number\n    current_lucid_number = 0\n\n    # Loop through all numbers between 1 and n\n    for i in range(1, n+1):\n\n        # Check if the current number is a lucid number\n        if all(int(digit) == digit for digit in str(i)) and int(i)!= 1:\n\n            # If the current number is a lucid number, append it to the lucid_numbers list\n            lucid_numbers.append(int(i))\n\n    # Return the lucid_numbers list\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = [word[::-1] for word in words]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    reversed_s = \" \".join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string with spaces in between\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list\n    words.reverse()\n    # join the words back into a single string with spaces in between\n    reversed_s =''.join(words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    words = [word[::-1] for word in words]\n    # join the words back into a string with spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    # Check if the given number is 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # Check if the given number is divisible by 2 or 3\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    # Check if the given number is divisible by any number between 4 and the square root of the given number\n    else:\n        for i in range(5, int(num ** 0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7))  # True\nprint(is_prime(10)) # False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            yield match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all the substrings that match the pattern\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and print the result\n    for match in matches:\n        print(\"Match:\", match)\n        start = text.find(match)\n        end = start + len(match)\n        print(\"Start index:\", start)\n        print(\"End index:\", end)\n        print()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes in two arguments, text and pattern, and returns a tuple containing the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        first_match = matches[0]\n        start_index = text.find(first_match)\n        end_index = start_index + len(first_match)\n        return first_match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(\"Match found: '{}'\".format(match))\n        print(\"Start index: {}\".format(start_index))\n        print(\"End index: {}\".format(end_index))\n        print(\"\\n\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Find all matches using re.findall()\n    matches = re.findall(pattern, text)\n    \n    # Initialize empty list to store results\n    results = []\n    \n    # Loop through matches and append to results\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        results.append((match, start_index, end_index))\n        \n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n, memo={}):\n    '''\n    This function takes an integer n as input and returns the nth Bell number using memoization technique.\n    '''\n    if n in memo:\n        return memo[n]\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        memo[n] = bell_Number(n-1, memo) + bell_Number(n-2, memo)\n        return memo[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return (2 * (n - 1)) + bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return 'Invalid input'\n    elif n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [0, 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1378, 1430, 1483, 1537, 1592, 1647, 1703, 1760, 1818, 1877, 1937, 1998, 2060, 2123, 2187, 2252, 2318, 2385, 2452, 2520, 2589, 2659, 2730, 2802, 2874, 2948, 3022, 3098, 3174, 3251, 3329, 3408, 3487, 3567, 3648, 3730, 3812, 3896, 3980, 4065, 4151, 4237, 4325, 4413, 4502, 4592, 4682, 4773, 4865, 4957, 5050, 5144, 5238, 5333, 5429, 5525, 5622, 5719, 5817, 5916, 6015, 6115, 6215, 6316, 6417, 6519, 6621, 6724, 6827, 6931, 7036, 7141, 7247, 7354, 7461, 7569, 7678, 7787, 7897, 8008, 8120, 8232, 8345, 8459, 8574, 8689, 8805, 8922, 9039, 9157, 9275, 9394, 9514, 9634, 9755, 9876, 100]\n    if n > 100:\n        print(\"Invalid input\")\n        return\n    return bell_numbers[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*(2*n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += i**2\n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (1/(2*n-1)) * (2*n-1) + bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)-1, -1, -1):\n        if i!= L-1:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1) - 1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # Remove the kth element from the list\n    return list1 # Return the updated list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return \"Invalid input: The value of L should be less than or equal to the length of the list\"\n    elif L == 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list1[:L-1] + [list1[-1]]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n\n    # Convert the input list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Check if the length of the list is less than L\n    if len(list1) < L:\n        return None\n\n    # Check if the length of the list is greater than L\n    elif len(list1) > L:\n        # Remove the kth element from the set\n        list1.pop()\n\n        # Convert the set back to a list\n        list1 = list(list1)\n\n        return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    count = 0\n    max_val = 0\n    for i in range(len(test_list)):\n        if count == N:\n            break\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n        count += 1\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value of then'th column\n    max_val = float('-inf')\n    # Loop through each row of the matrix\n    for row in test_list:\n        # Check if the value at then'th column is greater than the current maximum value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, test_list[i][N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if N-1 >= len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = test_list[i][N-1]\n        else:\n            if max_val < test_list[i][N-1]:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the matrix is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # get the length of the first row of the matrix\n    row_length = len(test_list[0])\n    \n    # check if the N is valid\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # check if the N is within the range of row_length\n    if N > row_length:\n        raise ValueError(\"N must be less than or equal to the number of rows in the matrix.\")\n    \n    # initialize an empty list to store the max values of each column\n    max_vals = []\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # loop through each element of the row to find the max value of then'th column\n        for i in range(row_length):\n            if i == N-1:\n                # check if the current element is greater than the previous max value\n                if row[i] > max_vals[-1]:\n                    max_vals[-1] = row[i]\n            else:\n                if row[i] > max_vals[-1]:\n                    max_vals.append(row[i])\n                    \n    # return the maximum value of then'th column\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_val = max(test_list[i][N-1])\n        else:\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n        else:\n            max_val = 0\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input list is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input list should be a list of lists\")\n    \n    # Check if N is an integer\n    if not isinstance(N, int) or N < 1:\n        raise ValueError(\"N should be an integer greater than 0\")\n    \n    # Initialize variables for the max value and its index\n    max_val = float('-inf')\n    max_idx = 0\n    \n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Check if the current row has N columns\n        if len(row) < N:\n            raise ValueError(\"Input matrix should have at least N columns\")\n        \n        # Find then'th column value and compare it to the current max value\n        col_val = row[N-1]\n        if col_val > max_val:\n            max_val = col_val\n            max_idx = N-1\n    \n    # Return the max value and its index\n    return max_val, max_idx"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append([lst[i][0], lst[i+1][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        if isinstance(lst[i][0], list):\n            merged_list.append([lst[i][0][0], lst[i][1]])\n        else:\n            merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    result = []  \n    for sublist in lst:  \n        if len(sublist) == 2:  \n            result.append([sublist[0], sublist[1]])  \n    return result  \n  \n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        cumulative_sum += tup[0]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            total_sum += test_list[i][j]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n\n    Args:\n        test_list (list): A list of tuples. Each tuple contains multiple values.\n\n    Returns:\n        int: The cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    result = 0\n    for item in test_list:\n        for value in item:\n            result += value\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # add the value of the tuple to the cumulative sum\n        cum_sum += tup[1]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    result = []\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    avg = total / count\n    result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input list\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the list\n        averages.append(avg)\n        \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = [0, 0]\n    count = 0\n\n    for tup in nums:\n        for num in tup:\n            total[count] += num\n            count += 1\n\n    for i in range(len(total)):\n        total[i] /= len(nums)\n\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the sum of all values in the tuple\n        total = sum(tup)\n        # calculate the average value of the tuple\n        avg = total / len(tup)\n        # append the average value to the avg_list\n        avg_list.append(avg)\n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if type(num) == tuple:\n            avg = sum(num) / len(num)\n            result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum = 0\n        count = 0\n        for num in num_tuple:\n            sum += num\n            count += 1\n        averages.append(sum / count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    total = 0\n    count = 0\n    for num in nums:\n        total += sum(num)\n        count += len(num)\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        averages.append(total/len(tup))\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Checking if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples is not the same!\")\n        return None\n    \n    # Performing element wise modulo operation\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo operation on them.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = steps\n    d = d\n    min_jumps = 0\n    end_point = (d, 0)\n    if steps % d == 0:\n        steps = steps // d\n        min_jumps += steps\n    else:\n        min_jumps = 0\n    for i in range(1, steps + 1):\n        if (i*d, 0) == end_point:\n            break\n        else:\n            min_jumps += 1\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    num_jumps = 0\n    curr_pos = 0\n    current_dist = 0\n    \n    while curr_pos < len(steps):\n        if current_dist <= d:\n            current_dist += steps[curr_pos]\n            curr_pos += 1\n            num_jumps += 1\n        else:\n            curr_pos += 1\n            current_dist -= steps[curr_pos-1]\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    pos = 0\n    \n    # Iterate until all positions have been visited\n    while pos < len(steps):\n        # Check if the current position has a value greater than 0\n        if steps[pos] > 0:\n            # Decrement the current position value\n            steps[pos] -= 1\n            # Update the position\n            pos += 1\n            # Increment the number of jumps\n            jumps += 1\n        # If the current position has a value of 0, reset it to 1 to avoid repetition\n        else:\n            steps[pos] = 1\n\n    # Return the number of jumps required to reach the required point\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables to store the number of jumps required and the remaining distance to reach (d, 0)\n    jumps = 0\n    remaining_distance = d\n\n    # Loop until remaining distance is 0\n    while remaining_distance > 0:\n        # Calculate the minimum number of jumps required to reach (d, 0) from origin\n        min_jumps = remaining_distance // 2\n        \n        # Add the minimum number of jumps required to the number of jumps required\n        jumps += min_jumps\n        \n        # Update the remaining distance to reach (d, 0) from origin\n        remaining_distance -= 2*min_jumps\n        \n        # Check if the remaining distance is less than the minimum jump distance\n        if remaining_distance < min_jumps:\n            # If yes, then the minimum number of jumps required will be the remaining distance divided by 2\n            jumps += remaining_distance // 2\n            remaining_distance = 0\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    steps = int(steps)\n    d = int(d)\n    count = 0\n    prev_x = 0\n    prev_y = 0\n\n    # loop through the list of steps\n    for i in range(len(steps)):\n        x = steps[i][0]\n        y = steps[i][1]\n\n        # check if we have reached the desired point\n        if x == d and y == 0:\n            count += 1\n            break\n\n        # check if we can reach the desired point from previous position\n        if y == prev_y - 1:\n            if x > prev_x:\n                count += 1\n        elif y == prev_y + 1:\n            if x > prev_x:\n                count += 1\n        else:\n            # check if we can reach the desired point from previous position in any other way\n            if abs(x - prev_x) > abs(y - prev_y):\n                if x > prev_x:\n                    count += 1\n            elif abs(x - prev_x) < abs(y - prev_y):\n                if x < prev_x:\n                    count += 1\n\n        # update the previous position\n        prev_x = x\n        prev_y = y\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    # Step 1: Initialize variables\n    max_jumps = 0  # Maximum number of jumps required to reach (d, 0)\n    curr_pos = (0, 0)  # Current position in the form (x, y)\n    total_jumps = 0  # Total number of jumps made\n    \n    # Step 2: Iterate through all possible positions\n    while steps > 0: \n        # Step 2.1: Determine the next position based on the current position\n        if curr_pos[0] == d:  # If the current position is (d, 0)\n            max_jumps = max(max_jumps, total_jumps)  # Update the maximum number of jumps\n            steps -= 1  # Reduce the number of steps left\n        else:\n            next_pos = (curr_pos[0] + 1, curr_pos[1]) if curr_pos[1] < d else (curr_pos[0], curr_pos[1] + 1)\n            if next_pos in visited:  # If the next position is already visited\n                max_jumps = max(max_jumps, total_jumps)  # Update the maximum number of jumps\n                steps -= 1  # Reduce the number of steps left\n            else:\n                visited.add(next_pos)  # Mark the next position as visited\n                total_jumps += 1  # Increment the total number of jumps\n                curr_pos = next_pos  # Update the current position\n    \n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps.sort()\n    n = len(steps)\n    jumps = 0\n    for i in range(1, n):\n        if steps[i] - steps[i-1] == d:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    n = len(steps)\n    jumps = 0\n    i = 0\n\n    # Check if first step is not equal to d\n    if steps[0]!= d:\n        return -1\n\n    # Find the first step that is greater than d\n    while i < n-1 and steps[i] > d:\n        i += 1\n\n    # Check if there are any steps left\n    if i == n-1:\n        return jumps\n\n    # Traverse the list of steps\n    while i < n-1:\n        # If the next step is equal to d, then there are no more jumps possible\n        if steps[i+1] == d:\n            return -1\n\n        # If the next step is greater than d, then we can add one more jump\n        if steps[i+1] > d:\n            jumps += 1\n\n        # Move to the next step\n        i += 1\n\n    # If the last step is less than d, then we can add another jump to reach that point\n    if steps[n-1] < d:\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    if steps == 1:\n        return 0\n    \n    if d == 0:\n        return 1\n    \n    steps = max(1, steps)\n    d = max(1, d)\n    \n    jumps = 0\n    end_point = 0\n    \n    while end_point < steps:\n        if end_point + d >= steps:\n            end_point = steps\n            jumps += 1\n        else:\n            end_point += d\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Step 1: Find the number of possible steps (for the given length of steps)\n    total_steps = steps * (steps - 1) // 2\n    \n    # Step 2: Calculate the number of jumps required to reach the required point (d, 0)\n    jumps = total_steps // d\n    \n    # Step 3: If the number of jumps required is greater than or equal to the number of steps, return -1\n    if jumps >= total_steps:\n        return -1\n    \n    # Step 4: Otherwise, return the number of jumps required\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Lists have different lengths\")\n        return\n\n    # Divide each element of the two lists\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        nums2[i] = nums1[i] / nums2[i]\n\n    # Return the divided lists\n    return nums1, nums2"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n\n    Parameters:\n    nums1: list\n        The first list of numbers to be divided.\n    nums2: list\n        The second list of numbers to be divided.\n\n    Returns:\n    list\n        A list of elements that are the result of dividing each element of\n        nums1 by the corresponding element of nums2.\n    \"\"\"\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists have different lengths.\")\n\n    # Divide each element of nums1 by the corresponding element of nums2\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero.\")\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists have different lengths\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length!\")\n        return\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    # split the string into list of characters\n    str_list = list(test_str)\n    # create an empty string to store the numbers\n    num_str = ''\n    # loop through each character in the list\n    for char in str_list:\n        # if the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # otherwise, add it to the string (excluding the numbers)\n        else:\n            test_str = ''.join(str_list)\n            return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is not a number, add it to the end of the string\n        else:\n            test_str = test_str + char\n\n    # join the list of numbers with no separator to form the final string\n    final_str = ''.join(num_list)\n\n    # return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    \n    # Create a variable to store the index of the last character\n    last_index = len(char_list) - 1\n    \n    # Loop through the characters from the end of the list\n    for i in range(last_index, -1, -1):\n        # Check if the character is a number\n        if char_list[i].isdigit():\n            # Move the number to the end of the list\n            char_list.insert(last_index + 1, char_list.pop(i))\n            last_index -= 1\n    \n    # Convert the list of characters back to a string\n    final_string = ''.join(char_list)\n    \n    return final_string"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall('\\d+', test_str) # find all numbers in the string\n    num_list = [int(i) for i in nums] # convert the numbers to integers\n    nums_str = ''.join(str(i) for i in num_list) # convert the integers back to strings\n    test_str = re.sub('\\d+', nums_str, test_str) # replace all numbers in the string with the new numbers\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            test_str = ''.join(num_list) + test_str\n            num_list = []\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing an empty string to store the non-number characters\n    non_num_str = ''\n    # initializing a variable to store the index of the next non-number character\n    next_non_num_index = 0\n    # iterating over the characters in the given string\n    for i in range(len(test_str)):\n        # checking if the character is a number\n        if test_str[i].isdigit():\n            # moving the number to the end of the non-number string\n            non_num_str = test_str[i] + non_num_str\n            # updating the index of the next non-number character\n            next_non_num_index = i\n        # moving the non-number character to the end of the non-number string\n        else:\n            non_num_str = test_str[i] + non_num_str\n    # returning the final string with all the numbers moved to the end\n    return non_num_str + test_str[:next_non_num_index]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    alpha_list = []\n    \n    # loop through each character in the string\n    for char in test_str:\n        if char.isdigit():\n            # if the character is a number, append it to the num_list\n            num_list.append(char)\n        else:\n            # if the character is not a number, append it to the alpha_list\n            alpha_list.append(char)\n    \n    # concatenate the alpha_list with the num_list in reverse order\n    result_str = ''.join(alpha_list) + ''.join(num_list)[::-1]\n    \n    # return the result string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # initializing an empty string to store the numbers\n    numbers = ''\n\n    # iterating through each character in the given string\n    for char in test_str:\n        # if the character is a number, append it to the numbers string\n        if char.isdigit():\n            numbers += char\n\n    # iterating through each character in the given string\n    for i, char in enumerate(test_str):\n        # if the character is a number, move it to the end of the string\n        if char.isdigit():\n            test_str = test_str[:i] + numbers + test_str[i:]\n\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                size += 1\n                break\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    count = 0\n    current_sum = 0\n    current_set = []\n    max_count = 0\n    max_set = []\n    for i in range(len(a)):\n        current_sum += a[i]\n        current_set.append(a[i])\n        while current_sum % 2 == 0:\n            if len(current_set) > max_count:\n                max_count = len(current_set)\n                max_set = current_set\n            current_sum -= current_set.pop(0)\n            count += 1\n    return max_set"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    # Create a list of all possible pairs of numbers from the input list\n    pairs = [(x, y) for x in a for y in a if x!= y]\n\n    # Sort the pairs by the smaller number first\n    pairs.sort(key=lambda x: x[0])\n\n    # Initialize the largest subset size to 0\n    largest_size = 0\n\n    # Initialize the current subset size to 0\n    current_size = 0\n\n    # Iterate through the sorted pairs\n    for i in range(len(pairs)):\n        # If the current pair is divisible by 2, add 1 to the current size and update the largest size if needed\n        if pairs[i][1] % 2 == 0:\n            current_size += 1\n            if current_size > largest_size:\n                largest_size = current_size\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    count = {}\n    max_size = 0\n    for num in a:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n        while max_size < len(count) and count[a[max_size]] % 2!= 0:\n            max_size += 1\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    max_subset_size = 0\n    max_subset = []\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Iterate through the remaining elements\n        for j in range(i+1, len(a)):\n            # Check if the elements are divisible\n            if a[i] % a[j] == 0:\n                # If they are, update the maximum subset size and add the pair to the subset\n                max_subset_size = max(max_subset_size, j-i+1)\n                max_subset = max_subset + [a[i], a[j]]\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 0\n\n    # Iterate through the list\n    for num in a:\n        # Increment the current subset size\n        curr_size += 1\n\n        # Check if the current subset size is greater than the maximum subset size\n        if curr_size > max_size:\n            max_size = curr_size\n\n        # Check if the difference between the current number and the next number is divisible by 2\n        if num % (a[curr_size] - num)!= 0:\n            # If the difference is not divisible by 2, reduce the current subset size and move on to the next number\n            curr_size -= 1\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n    max_subset_size = 1\n    max_subset = [a[0]]\n    for i in range(1, len(a)):\n        if a[i] % max_subset[-1] == 0:\n            max_subset.append(a[i])\n        else:\n            max_subset_size = max(max_subset_size, len(max_subset))\n            max_subset = [a[i]]\n    max_subset_size = max(max_subset_size, len(max_subset))\n    return max_subset_size\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    max_len = 0\n    dp = [1] * n\n    \n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n        \n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize variables to keep track of the size of the largest subset and the indices of the last element in each subset\n    largest_size = 1\n    last_indices = [0] * len(a)\n\n    # iterate over the sorted input list\n    for i in range(1, len(a)):\n        # check if the current element can be added to the largest subset\n        if a[i] % a[last_indices[-1]] == 0:\n            # if it can, update the largest size and update the last element indices of the subset\n            largest_size += 1\n            last_indices.append(i)\n        else:\n            # if it cannot, truncate the largest subset and initialize a new one with the current element as the first element\n            last_indices = [i]\n\n    # return the largest size of the largest subset\n    return largest_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    sorted_arr = sorted(arr1 + arr2)\n    \n    # Find the median index\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If the length of the merged list is even, return the average of the middle two elements\n        return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2\n    else:\n        # If the length of the merged list is odd, return the middle element\n        return sorted_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1) == len(arr2):\n        # Sort both lists\n        sorted_arr1 = sorted(arr1)\n        sorted_arr2 = sorted(arr2)\n        # Get the midpoints of the sorted lists\n        midpoint1 = len(sorted_arr1) // 2\n        midpoint2 = len(sorted_arr2) // 2\n        # Get the median\n        if len(sorted_arr1) % 2 == 0:\n            median = (sorted_arr1[midpoint1] + sorted_arr1[midpoint1 - 1]) / 2\n        else:\n            median = sorted_arr1[midpoint1]\n        if len(sorted_arr2) % 2 == 0:\n            median += (sorted_arr2[midpoint2] + sorted_arr2[midpoint2 - 1]) / 2\n        else:\n            median += sorted_arr2[midpoint2]\n        # Return the median\n        return median\n    else:\n        # If the lists are not of the same size, return None\n        return None"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three arguments: two sorted lists and their size n.\n    It then calculates and returns the median of the two sorted lists.\n\n    Assumptions:\n    1. All the elements of the two sorted lists are distinct.\n    2. The two sorted lists have same size n.\n\n    Time Complexity: O(n)\n    '''\n\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Find the middle element of the merged list\n    middle_index = n // 2\n\n    # Find the median of the merged list\n    if n % 2 == 0:\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        median = merged_list[middle_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of same size, arr1 and arr2, \n    and the number of elements in each list, n, as input and returns the median.\n    \"\"\"\n    # Merge the two lists and remove duplicates\n    merged = list(set(arr1 + arr2))\n    # Sort the merged list in ascending order\n    merged.sort()\n    # Get the middle element\n    if n % 2 == 0:\n        median = (merged[n//2-1] + merged[n//2]) / 2\n    else:\n        median = merged[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:  # if n is even\n        mid1 = n // 2\n        mid2 = n // 2\n        median = (arr1[mid1-1] + arr1[mid1]) / 2\n    else:  # if n is odd\n        mid1 = n // 2\n        mid2 = n // 2\n        median = arr1[mid1]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the length of the list\n    length = len(arr)\n\n    # If the length of the list is odd, return the middle element\n    if length % 2 == 1:\n        return arr[length // 2]\n    # If the length of the list is even, return the average of the middle two elements\n    else:\n        return (arr[length // 2 - 1] + arr[length // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Find the middle element\n    mid = n // 2\n    # Check if the size of the sorted list is odd or even\n    if n % 2 == 0:\n        # If it's even, return the middle two elements\n        return sorted_list[mid-1], sorted_list[mid]\n    else:\n        # If it's odd, return the middle element\n        return sorted_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a new list to store the merged array\n    merged_arr = []\n\n    # Merge the two input arrays\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Append any remaining elements from either array\n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n\n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged_arr[mid-1] + merged_arr[mid])/2\n    else:\n        return merged_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid-1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median.\n    If the input lists have different sizes, the function will return None.\n    '''\n\n    # check if the input lists have the same size\n    if len(arr1)!= len(arr2) or len(arr1)!= n:\n        return None\n\n    # find the middle index of the arrays\n    mid1 = n // 2\n    mid2 = n - mid1 - 1\n\n    # find the minimum element from both arrays\n    min1 = min(arr1[mid1-1], arr1[mid1])\n    min2 = min(arr2[mid2-1], arr2[mid2])\n\n    # if the minimum element is in the first array, it must be in the first half of the median\n    if min1 <= min2:\n        # if the minimum element is in the first array, return the first half of the median\n        if arr1[mid1] <= arr1[mid2]:\n            return arr1[mid1]\n        else:\n            return arr1[mid2]\n\n    # if the minimum element is in the second array, it must be in the second half of the median\n    else:\n        # if the minimum element is in the second array, return the second half of the median\n        if arr2[mid2] <= arr2[mid1]:\n            return arr2[mid2]\n        else:\n            return arr2[mid1]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input, \n    and returns a new list with the nth power of each number.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert string to uppercase\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string contains only uppercase letters.\n    '''\n    if not string.isupper():\n        return False\n    else:\n        return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Reverse the list to make the swapping easier\n    newList = newList[::-1]\n\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Reverse the list again to make the swapping back to its original order\n    newList = newList[::-1]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length >= 2:\n        # Swap the first and last elements in the list\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList\n    else:\n        return \"The list must have at least two elements.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    # initialize the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    # create a new list with the first and last elements interchanged\n    newList = [last] + newList[:-1]\n    # return the new list with the first and last elements interchanged\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # Checking if the list is empty or not\n    if len(newList) == 0:\n        print(\"The list is empty\")\n        return\n    # Swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The modified list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define the first and last indices of the list\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # Swap the first and last elements\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    if len(newList) == 1:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function swaps the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length < 2:\n        # Raise a ValueError if the list has less than two elements\n        raise ValueError(\"The given list has less than two elements.\")\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The new list after swapping the first and last elements is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        return \"List must have at least two elements.\"\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = 3 * r**2 / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle that can be inscribed in a semicircle\n    area = (1/2) * math.sin(math.pi/3) * r ** 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 2*r\n    b = math.sqrt(r**2 - 1)\n    c = 2*r\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle radius\n    s = r * 2\n\n    # Calculate the area of a triangle using Heron's formula\n    a = (3 * r ** 2) / 4\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    b = 3 * r ** 2\n\n    # Calculate the area of the largest triangle that can be inscribed in the original circle\n    c = (3 * r ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    d = a + b + c\n\n    # Calculate the area of the smallest triangle that can be inscribed in the original circle\n    e = (a + b + c) / 2\n\n    # Calculate the area of the largest triangle that can be inscribed in the smallest semicircle\n    f = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest circle\n    g = (s ** 2) / 4\n\n    # Calculate the area of the largest triangle that can be inscribed in the original circle\n    h = (3 * r ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the original circle\n    i = (3 * r ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    j = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the largest semicircle\n    k = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest circle\n    l = (3 * r ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    m = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    n = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    o = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    p = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    q = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    r = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    s = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    t = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    u = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    v = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    w = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    x = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    y = (s ** 2) / 4\n\n    # Calculate the area of the smallest triangle that can be inscribed in the smallest semicircle\n    z = (s ** 2) / 4\n\n    # Calculate the area of the largest triangle that can be inscribed in the smallest semicircle\n    a = ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) / 2) + ((a + b + c) /"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2  # Base case: the largest triangle is a square with side r\n    while True:\n        s = (area / r) ** 0.5  # Calculate the semi-perimeter\n        area = r * (3 + s) / 2  # Update the area\n        if area > r ** 2:  # If the new area is greater than the square of the radius, break the loop\n            break\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula to find the area of a triangle given its base and height\n    def triangle_area_formula(b, h):\n        return 0.5 * b * h\n    \n    # Formula to find the area of a semi-circle with the given radius\n    def semicircle_area_formula(r):\n        return 3.14 * r * r\n    \n    # Find the side length of the triangle that can be inscribed in a semicircle with the given radius\n    s = r * (2 - 2 * (2 * r - 1) / (2 * r))\n    \n    # Find the area of the triangle with the given side length\n    a = triangle_area_formula(s, s)\n    \n    # Find the area of the largest triangle inscribed in the semicircle with the given radius\n    return max(a, semicircle_area_formula(r))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        r: float, the radius of the semicircle.\n\n    Returns:\n        float, the area of the largest triangle that can be inscribed in the semicircle.\n    \"\"\"\n\n    # We want the area of the largest triangle that can be inscribed in the semicircle, so we need to find the area of a triangle with sides of length 2r and length sqrt(r^2 - x^2)\n    # This is the formula for the area of a triangle with sides of length a, b, c:\n    # area = 1/2 * base * height\n    # where base = max(a, b, c) and height = min(a, b, c)\n\n    # Let's first calculate the area of the largest triangle that can be inscribed in the semicircle with radius r\n    area = 0.5 * r**2\n\n    # Now we want to find the side of the largest triangle that can be inscribed in the semicircle\n    # We know that the area of the largest triangle can be inscribed in the semicircle, so let's use this knowledge to find the side of the triangle that can be inscribed in the semicircle\n    # The formula for the side of a triangle with sides of length a, b, c is:\n    # side = sqrt(a^2 + b^2)\n    # where a, b, and c are the lengths of the sides of the triangle\n    # Since we are working with a semicircle, we can assume that the longest side of the triangle will be at most sqrt(r^2 - x^2)\n    # Therefore, we can calculate the side of the largest triangle as follows:\n    # side = sqrt(r^2 - x^2)\n    # Let's substitute x = r^2:\n    # side = sqrt(r^2 - r^2)\n    # Simplifying:\n    # side = 2 * sqrt(r)\n    side = 2 * r\n\n    # We have found the area and side of the largest triangle that can be inscribed in the semicircle, so we can now calculate the area of the other triangle that can be inscribed in the same semicircle\n    # Let's assume that the semicircle has a center at the origin, so the triangle's vertices are:\n    # (0, 0), (r, 0), (0, sqrt(r^2 - x^2))\n    # Let's start by finding the length of the longest side of the triangle:\n    # Let's assume that the side of the triangle with sides of length a, b, and c is c\n    # Therefore, we have:\n    # a = 2 * c\n    # b = 2 * sqrt(r^2 - c^2)\n    # Simplifying:\n    # b = 2 * sqrt(r^2 - 2 * c^2)\n    # b = 4 * c * sqrt(r^2 - 1)\n    # Simplifying:\n    # b = 4 * c * (r^2 - r)\n    # b = 4 * c * r\n    # Now, we can use the formula for the area of a triangle with sides of length a, b, and c to find the area of the other triangle:\n    # area = 0.5 * base * height\n    # where base = 2 * c and height = 4 * c * r\n    # We have found the area of the other triangle, so we can now use this information to find the area of the largest triangle:\n    # area = 0.5 * 2 * c * r\n    # Substituting the values we found:\n    # area = 0.5 * 2 * 2 * r = 0.5 * 4 * r\n    # Now, we can calculate the area of the largest triangle:\n    # area = 0.5 * 4 * r\n    # Substituting the values we found:\n    # area = 0.5 * 4 * r\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the area of a triangle with sides of length 2*r\n    triangle_area = math.sqrt(3)/4 * r**2\n    \n    # Calculate the radius of the semicircle that inscribes the triangle\n    semicircle_radius = 2*r\n    \n    # Calculate the area of the semicircle\n    semicircle_area = math.pi * semicircle_radius**2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_triangle_area = min(triangle_area, semicircle_area)\n    \n    # Return the area of the largest triangle\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Calculate the semi-circle's diameter\n    diameter = 2*r\n    \n    # Calculate the circumference of the semicircle\n    circumference = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (diameter**2)/4*math.tan(math.pi/4)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    # Formula to find the area of a triangle given the semi-perimeter\n    area = (math.pi * r * r) / 4\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The starting index of the search range. Default is 0.\n        end (int): The ending index of the search range. If None, the search range will be the entire array. Default is None.\n\n    Returns:\n        int: The smallest missing number from the given sorted list of natural numbers.\n\n    Example:\n        find_First_Missing([1, 3, 5, 7, 9]) # Output: 2\n        find_First_Missing([1, 2, 3, 4, 5, 6]) # Output: 7\n    \"\"\"\n    # Check if the array is sorted\n    if not all(array[i] <= array[i + 1] for i in range(len(array) - 1)):\n        raise ValueError(\"Array must be sorted.\")\n\n    # Check if the start and end indices are valid\n    if end is None:\n        end = len(array) - 1\n    if start < 0 or start >= end:\n        raise ValueError(\"Start index must be between 0 and the end index.\")\n    if end < 0 or end >= len(array):\n        raise ValueError(\"End index must be between 0 and the length of the array.\")\n\n    # Use binary search to find the smallest missing number\n    left, right = start, end\n    while left <= right:\n        mid = (left + right) // 2\n        if mid > 0 and array[mid - 1] == mid - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    if start > end:\n        return None\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): List of natural numbers.\n        start (int): Start index of the array (default 0).\n        end (int): End index of the array (default None).\n\n    Returns:\n        int: Smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_numbers = []\n\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        sub[-1] = (sub[-1][0]+1, sub[-1][1])\n    if ele[0] < len(sub)-1:\n        sub.append((ele[0]+1, ele[1]))\n    if ele[0] > 0:\n        sub.append((ele[0]-1, ele[1]))\n    if ele[1] < len(sub[0])-1:\n        sub.append((ele[0], ele[1]+1))\n    if ele[1] > 0:\n        sub.append((ele[0], ele[1]-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        return sub + [(ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0]-1, ele[1])]\n    elif len(ele) == 3:\n        return sub + [(ele[0], ele[1]+1, ele[2]), (ele[0], ele[1]-1, ele[2]), (ele[0]+1, ele[1], ele[2]), (ele[0]-1, ele[1], ele[2])]\n    else:\n        return None"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    neighbors = []\n    if x > 0:\n        neighbors.append((x - 1, y))\n    if x < 99:\n        neighbors.append((x + 1, y))\n    if y > 0:\n        neighbors.append((x, y - 1))\n    if y < 99:\n        neighbors.append((x, y + 1))\n    return neighbors + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1,y), (x-1,y), (x,y+1), (x,y-1)]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns all its adjacent coordinates.\n    The function uses a list comprehension to generate all the possible adjacent coordinates \n    based on the current coordinate.\n    '''\n    x, y = ele\n    adj_coords = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    sub.extend(adj_coords)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # Add adjacent coordinates to the list of sublists\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 0:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 0:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function takes a coordinate tuple as input and returns a list of adjacent coordinates.\n    \n    Example:\n    >>> adjac((2, 3))\n    [(1, 3), (2, 2), (3, 3)]\n    \n    \"\"\"\n    \n    # Extract the coordinates from the tuple\n    x, y = ele\n    \n    # Create a list of adjacent coordinates\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    # Filter out the coordinates that are outside the bounds of the grid\n    adj = [coord for coord in adj if 0 <= coord[0] < len(sub) and 0 <= coord[1] < len(sub[0])]\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract all the coordinates from the given tuple\n    coords = tuple(ele)\n\n    # Define the adjacent coordinates\n    adjacent = [(coords[0] + 1, coords[1]), (coords[0] - 1, coords[1]), (coords[0], coords[1] + 1), (coords[0], coords[1] - 1)]\n\n    # Filter out the invalid coordinates\n    adj_coords = [coord for coord in adjacent if coord[0] >= 0 and coord[0] < 5 and coord[1] >= 0 and coord[1] < 5]\n\n    # Append the current coordinates to the list of sub-lists\n    sub.append(coords)\n\n    # Recursively call the function for all the adjacent coordinates and append the result to the list of sub-lists\n    for coord in adj_coords:\n        adjac(coord, sub)\n\n    # Return the list of sub-lists containing all the adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 3:\n        sub.append(ele)\n    else:\n        x, y = ele\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if i!= 0 or j!= 0:\n                    sub.append((x+i, y+j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n\n    if isinstance(ele, tuple):\n        x, y = ele\n        adj = [(x-1, y), (x, y-1), (x+1, y), (x, y+1), (x-1, y-1), (x-1, y+1), (x+1, y-1), (x+1, y+1)]\n        for i in adj:\n            if (0 <= i[0] < 9 and 0 <= i[1] < 9) and (i not in sub):\n                sub.append(i)\n\n    elif isinstance(ele, list):\n        for i in ele:\n            if isinstance(i, tuple):\n                x, y = i\n                adj = [(x-1, y), (x, y-1), (x+1, y), (x, y+1), (x-1, y-1), (x-1, y+1), (x+1, y-1), (x+1, y+1)]\n                for j in adj:\n                    if (0 <= j[0] < 9 and 0 <= j[1] < 9) and (j not in sub):\n                        sub.append(j)\n\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Convert the given string to lowercase\n    text = text.lower()\n\n    # Initialize an empty string to store the modified string\n    modified_text = \"\"\n\n    # Loop through each character in the string\n    for char in text:\n        # If the character is a space, replace it with an underscore\n        if char == \" \":\n            modified_text += \"_\"\n        # Otherwise, append the character as is\n        else:\n            modified_text += char\n\n    # Return the modified string\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscore = \"_\"\n    new_text = \"\"\n    for char in text:\n        if char == spaces:\n            new_text += underscore\n        elif char == underscore:\n            new_text += spaces\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # check if the string contains only alphabets or only spaces\n    if text.isalpha() or text.isspace():\n        # replace all spaces with underscores\n        new_text = text.replace(' ', '_')\n        # return the modified string\n        return new_text\n    else:\n        # if the string contains non-alphanumeric characters, return the original string\n        return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Initialize an empty string to store the output\n    output = ''\n    # Loop through each character in the string\n    for char in text:\n        # If the character is a whitespace character (space, tab, newline, etc.), replace it with an underscore\n        if char.isspace():\n            output += '_'\n        # Otherwise, add the character to the output string\n        else:\n            output += char\n    # Return the output string with whitespaces replaced with underscores\n    return output"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_to_underscore = {\n       '': '_',\n        '\\t': '_',\n        '\\n': '_',\n        '\\r': '_',\n        '\\f': '_',\n        '\\v': '_',\n        '\u00e2': 'a',\n        '\u00e1': 'a',\n        '\u00e0': 'a',\n        '\u00e4': 'a',\n        '\u00e5': 'a',\n        '\u00e3': 'a',\n        '\u00e6': 'ae',\n        '\u00e7': 'c',\n        '\u00e9': 'e',\n        '\u00e8': 'e',\n        '\u00eb': 'e',\n        '\u00ed': 'i',\n        '\u00ec': 'i',\n        '\u00ef': 'i',\n        '\u00ee': 'i',\n        '\u00f3': 'o',\n        '\u00f2': 'o',\n        '\u00f6': 'o',\n        '\u00f5': 'o',\n        '\u00fa': 'u',\n        '\u00f9': 'u',\n        '\u00fc': 'u',\n        '\u00fb': 'u',\n        '\u00ff': 'y',\n        '\u00c0': 'A',\n        '\u00c1': 'A',\n        '\u00c2': 'A',\n        '\u00c3': 'A',\n        '\u00c4': 'A',\n        '\u00c5': 'A',\n        '\u00c6': 'AE',\n        '\u00c7': 'C',\n        '\u00c8': 'E',\n        '\u00c9': 'E',\n        '\u00ca': 'E',\n        '\u00cb': 'E',\n        '\u00cc': 'I',\n        '\u00cd': 'I',\n        '\u00ce': 'I',\n        '\u00cf': 'I',\n        '\u00d0': 'D',\n        '\u00d1': 'N',\n        '\u00d2': 'O',\n        '\u00d3': 'O',\n        '\u00d4': 'O',\n        '\u00d5': 'O',\n        '\u00d6': 'O',\n        '\u00d8': 'O',\n        '\u00d9': 'U',\n        '\u00da': 'U',\n        '\u00db': 'U',\n        '\u00dc': 'U',\n        '\u00dd': 'Y',\n        '\u00de': 'TH',\n        '\u00df':'ss',\n        '\u00e0': 'a',\n        '\u00e1': 'a',\n        '\u00e2': 'a',\n        '\u00e3': 'a',\n        '\u00e4': 'a',\n        '\u00e5': 'a',\n        '\u00e6': 'ae',\n        '\u00e7': 'c',\n        '\u00e9': 'e',\n        '\u00e8': 'e',\n        '\u00eb': 'e',\n        '\u00ed': 'i',\n        '\u00ec': 'i',\n        '\u00ef': 'i',\n        '\u00ee': 'i',\n        '\u00f3': 'o',\n        '\u00f2': 'o',\n        '\u00f6': 'o',\n        '\u00f5': 'o',\n        '\u00fa': 'u',\n        '\u00f9': 'u',\n        '\u00fc': 'u',\n        '\u00fb': 'u',\n        '\u00fd': 'y',\n        '\u00fe': 'th',\n        '\u00ff': 'y'\n    }\n    underscore_to_space = {v: k for k, v in space_to_underscore.items()}\n    result = ''\n    for char in text:\n        if char in space_to_underscore:\n            result += underscore_to_space[char]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    # create a new list with all zeroes at the end\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    \n    # move all zeroes to the end of the new list\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            new_list.pop(i)\n    \n    # append the new list to the original list\n    num_list.extend(new_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list[i], num_list[i-1] = num_list[i-1], num_list[i]\n        i -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    non_zero_index = 0\n\n    while non_zero_index < len(num_list):\n        if num_list[non_zero_index]!= 0:\n            num_list[zero_index], num_list[non_zero_index] = num_list[non_zero_index], num_list[zero_index]\n            zero_index += 1\n        non_zero_index += 1\n\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one for moving non-zero elements and another for zero elements\n    non_zero_pointer = 0\n    zero_pointer = len(num_list)\n\n    # Iterate through the list\n    for i in range(len(num_list)):\n        # If the element is not zero, move it to the next position\n        if num_list[i]!= 0:\n            num_list[non_zero_pointer] = num_list[i]\n            non_zero_pointer += 1\n        # If the element is zero, move it to the previous position\n        else:\n            num_list[zero_pointer] = num_list[i]\n            zero_pointer -= 1\n\n    # Move all non-zero elements to the end of the list\n    while non_zero_pointer < zero_pointer:\n        num_list[non_zero_pointer] = 0\n        non_zero_pointer += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            new_list.append(num_list[i])\n            for j in range(zero_count):\n                new_list.append(0)\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n    if zero_count == 0:\n        return num_list\n    else:\n        for i in range(len(num_list)-1, -1, -1):\n            if num_list[i] == 0:\n                num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n                zero_count += 1\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_new = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list_new.append(num_list[i])\n    num_list_new += [0]*len([x for x in num_list if x == 0])\n    return num_list_new"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # Initialize the sum variable with 0\n    xor_sum = 0\n\n    # Loop through the list and calculate the xor of all pairs\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of 0 and any number is 0\n    # XOR of any number and 0 is 0\n    # XOR of any number and any number is the xor of those numbers\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR operation to find the sum of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes an array of n integers and returns the sum of xor of all pairs of integers in the array.\n    '''\n\n    # Initialize the sum to 0\n    xor_sum = 0\n\n    # Iterate through the array and calculate the xor of pairs of elements\n    for i in range(n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n\n    # Return the sum\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n    # Extract the maximum element from the heap\n    max_element = iterable[0]\n    # Pop the maximum element from the heap and append it to the sorted list\n    sorted_list = [max_element]\n    # Remove the maximum element from the heap and heapify the remaining elements\n    hq.heapify(iterable[1:])\n    # Repeatedly extract the maximum element and append it to the sorted list until the heap is empty\n    while iterable:\n        # Extract the maximum element from the heap and append it to the sorted list\n        max_element = iterable[0]\n        sorted_list.append(max_element)\n        # Remove the maximum element from the heap and heapify the remaining elements\n        hq.heapify(iterable[1:])\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n    # convert the list to a heap\n    hq.heapify(arr)\n    # sort the heap using heapsort algorithm\n    heapq.heapify(arr)\n    for _ in range(len(arr) - 1, 0, -1):\n        # extract the maximum element from the heap\n        hq.heappop(arr)\n        # append the maximum element to the end of the sorted list\n        arr.append(hq.heappop(arr))\n    # return the sorted list\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    \n    # Extract the elements in sorted order\n    result = []\n    while hq.heappop(iterable) is not None:\n        result.append(hq.heappop(iterable))\n    \n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using the heap sort algorithm.\n\n    Args:\n        iterable (list): A list of elements to be sorted.\n\n    Returns:\n        A sorted list.\n    '''\n    # Convert the iterable to a heap\n    heap = list(iterable)\n    heapq.heapify(heap)\n\n    # Extract elements from the heap and append to the sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # convert the given list to a max-heap\n    heap = hq.heapify(iterable)\n    # extract the maximum element from the heap and store it in a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    heap = [(-item, index) for index, item in enumerate(iterable)]\n    heapq.heapify(heap)\n\n    # Extract and sort the heap\n    sorted_list = [heapq.heappop(heap)[1] for _ in range(len(iterable))]\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap from the given iterable\n    hq.heapify(iterable)\n    # Pop the smallest element from the heap\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap from the given list\n    heap = hq.heapify(iterable)\n\n    # Iterate through the list and extract elements from the max heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the given list\n    hq.heapify(iterable)\n\n    # extract and remove the largest element from the heap\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable = iterable[1:]\n        hq.heappop(iterable)\n\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount == 0:\n        return True\n\n    profit = actual_cost - sale_amount\n    if profit == 0:\n        return True\n\n    loss = sale_amount - actual_cost\n    if loss == 0:\n        return True\n\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount: \n        print(\"The sale amount is greater than actual cost.\")\n        return False\n\n    elif actual_cost < sale_amount: \n        print(\"The sale amount is less than actual cost.\")\n        return False\n\n    else: \n        print(\"The sale amount is equal to actual cost.\")\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        # Check if the sale amount is greater than the actual cost\n        if sale_amount > actual_cost:\n            print(\"The given amount has no profit but with loss\")\n        else:\n            print(\"The given amount has no loss but with profit\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check for no profit and no loss\n    if actual_cost - sale_amount <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount paid for the sale\n\n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check whether the given amount has no profit and no loss\n    if actual_cost >= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    g = 9.80665 # acceleration due to gravity in m/s^2\n    c = 1.0 # absolute zero wind speed in m/s\n    h = 0.02 # heat index constant\n    T = t + 273.15 # convert celsius to Kelvin\n    Tc = T - 273.15 # convert Kelvin to Celsius\n    U = math.sqrt(v**2 + g**2) # calculate absolute wind speed at constant pressure\n    S = 25.0 * math.log10(U) # calculate atmospheric pressure in hPa\n    L = 0.0065 * T**4 # calculate psychrometric constant\n    C = (13.12 + 0.6215 * Tc) * math.exp((17.625 * Tc) / (T + 243.5)) # calculate dew point temperature in Celsius\n    e = 0.000066 * T**4 + 0.0018 * T**3 - 0.0325 * T**2 + 0.08 + 0.000028 * T\n    delta = C - (h * S / (U + 13.12)) # calculate dew point depression\n    delta_e = delta - e\n    f = 1.0 + (0.0068 * delta_e) + (0.3548 * delta_e**2) + (0.0012 * delta_e**3)\n    C_e = C + (f * (delta_e - 0.25))\n    E = math.sqrt(2.0 * (T_e - T) / Tc)\n    beta = (C_e - 273.15) / 1.8\n    phi = math.exp((17.27 * beta) / (T + 237.3))\n    alpha = 13.12 - 0.6215 * C\n    psi = (1.0 - (0.0065 * C**4)) * math.exp((-0.1332 * C + 0.3389 * C**2) / (C + 273.15))\n    D = (C + 273.15) * (1.0 - 0.0065 * C**4) * math.exp((-0.1332 * C + 0.3389 * C**2) / (C + 273.15))\n    gamma = psi * (U / c)**phi\n    D_T = D / (T + 273.15)\n    delta_D_T = delta / (D_T + 273.15)\n    gamma_T = gamma / (T + 273.15)\n    theta = (1.0 - (0.0065 * C**4)) * (1.0 - 0.000023 * T**4) * math.exp((-0.1332 * C + 0.3389 * C**2) / (C + 273.15))\n    phi_T = 0.0065 * (T + 273.15)**4\n    psi_T = 0.0065 * T**4\n    theta_T = 0.000023 * (T + 273.15)**4\n    x = 1.0 + (0.018 * delta_e) + (0.289 * delta_e**2) + (0.031 * delta_e**3)\n    y = 1.0 + (0.018 * delta) + (0.289 * delta**2) + (0.031 * delta**3)\n    z = 1.0 + (0.033 * delta) + (0.216 * delta**2) + (0"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :type v: float\n    :param t: temperature in celsius\n    :type t: float\n    :return: wind chill index rounded to the nearest integer\n    :rtype: int\n    \"\"\"\n    if v < 1:\n        raise ValueError(\"Wind velocity must be greater than or equal to 1 km/h.\")\n\n    if t < -40:\n        raise ValueError(\"Temperature must be greater than or equal to -40\u00b0C.\")\n\n    # Calculate the dew point temperature using the given temperature and wind velocity\n    if t < 0:\n        t = 0\n    elif t > 100:\n        t = 100\n    else:\n        t = (100 - t) / (100 - 0.0065 * v - 0.0001 * v ** 2)\n\n    # Calculate the wind chill index using the given temperature and wind velocity\n    if t <= 11:\n        w = 13.12 + 0.6215 * t - 11.37 * t ** 2 + 0.3965 * t ** 3\n    elif t > 11 and t <= 21:\n        w = 35.74 + 0.6215 * t - 35.59 * t ** 2 + 14.57 * t ** 3\n    elif t > 21 and t <= 31:\n        w = 58.67 + 0.6215 * t - 11.37 * t ** 2 + 0.3965 * t ** 3\n    elif t > 31 and t <= 41:\n        w = 76.77 + 0.6215 * t - 21.74 * t ** 2 + 0.8028 * t ** 3\n    elif t > 41 and t <= 51:\n        w = 84.01 + 0.6215 * t - 28.26 * t ** 2 + 1.209 * t ** 3\n    elif t > 51 and t <= 61:\n        w = 87.50 + 0.6215 * t - 32.00 * t ** 2 + 1.534 * t ** 3\n    elif t > 61 and t <= 71:\n        w = 89.25 + 0.6215 * t - 33.75 * t ** 2 + 1.687 * t ** 3\n    elif t > 71 and t <= 81:\n        w = 90.00 + 0.6215 * t - 34.50 * t ** 2 + 1.777 * t ** 3\n    elif t > 81 and t <= 91:\n        w = 89.25 + 0.6215 * t - 33.75 * t ** 2 + 1.687 * t ** 3\n    elif t > 91 and t <= 101:\n        w = 87.50 + 0.6215 * t - 32.00 * t ** 2 + 1.534 * t ** 3\n    else:\n        raise ValueError(\"Temperature must be between -40\u00b0C and 100\u00b0C.\")\n\n    # Round the wind chill index to the nearest integer\n    return int(math.ceil(w))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 35.74  # temperature coefficient\n\n    if v <= 0:\n        return None\n\n    elif v < 5:\n        wc = (c * t) / v\n    else:\n        wc = (c * (t + 16.67)) / (v + 0.83)\n\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    v = v / 1.60934 # convert km/h to m/s\n    c = 0.6219718 * math.exp((17.27 * t) / (t + 237.3))\n    w = (v - 0.14) / (0.07 * c + 0.0065 * t + 0.00035 * (v - 0.14)**2)\n    return math.ceil(w)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t <= 0 or v <= 0:\n        return None\n    \n    # calculate the wind chill in degrees Celsius\n    wc = (t - 32) * 5/9\n    \n    # calculate the wind chill index\n    wci = 13.12 + 0.6215 * wc - 11.37 * math.pow(wc, 2) + 0.3965 * math.pow(wc, 3)\n    \n    # round to the nearest integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in the wind velocity in km/h and the temperature in celsius as inputs and returns the wind chill index rounded to the nearest integer.\n\n    The wind chill index is calculated using the formula:\n\n    wci = -45.76 + 2.04 * log10(u) + 10.14 * (t - t0)\n\n    where u is the wind velocity in m/s, t is the temperature in K, and t0 is the freezing point temperature in K.\n\n    Note that this function uses the math module to perform basic mathematical operations.\n    '''\n\n    # Define the constants used in the formula\n    w = 1.16\n    t0 = 273.15\n\n    # Convert the wind velocity to meters per second\n    u = v * 1000\n\n    # Calculate the temperature difference from the freezing point\n    delta_t = t - t0\n\n    # Calculate the wind chill index using the formula\n    wci = -45.76 + 2.04 * math.log10(u) + 10.14 * delta_t\n\n    # Round the wind chill index to the nearest integer\n    wci = int(wci + 0.5)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    c = 1.4 # specific heat ratio of air at constant pressure [J/kg/K]\n    k = 0.0622 # coefficient of diffusion of water vapor [W/m^2/K]\n    R = 8.314 # universal gas constant [J/K/mol]\n    T = t # temperature in Kelvin\n\n    # calculate the heat flux\n    q = 0.5 * (v ** 2) * k * (T - 273.15)\n\n    # calculate the enthalpy of the air at constant pressure\n    h_air = (R * T) / (c + (R * T) / k)\n\n    # calculate the enthalpy of the water at constant pressure\n    h_water = (R * T) / (c + (R * T) / k) + (R * T) * (1 / (c + (R * T) / k) - 1)\n\n    # calculate the heat capacity of the air\n    c_air = (R * T) / (c + (R * T) / k)\n\n    # calculate the enthalpy difference\n    h_diff = h_air - h_water\n\n    # calculate the difference in enthalpy and energy\n    diff_ent_en = h_diff - (h_water * q / (R * T))\n\n    # calculate the heat capacity ratio\n    c_ratio = c_air / c\n\n    # calculate the cooling rate\n    rate = (diff_ent_en * c_ratio) / ((h_air * h_air) - (h_water * h_water))\n\n    # calculate the wind chill index\n    wci = math.ceil(rate * 100)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v: wind velocity in km/h\n    t: temperature in celsius\n\n    Returns:\n    wind chill index rounded to the next integer\n    \"\"\"\n\n    # convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # calculate heat index\n    heat_index = 0.5 * v**2 + (0.6215 * math.log(t_f) - 11.37 * t_f)\n\n    # calculate wind chill index\n    wci = 35.74 + 0.6215 * t_f - 35.75 * math.exp((17.625 * t_f) / (t_f + 243.5))\n\n    # calculate wind chill index rounded to the next integer\n    wci_rounded = round(wci)\n\n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert wind speed to m/s\n    v_ms = v * 1.60934\n\n    # calculate the dew point temperature\n    dpt = 10.14 * (math.log((t + 273.15)/(t + 273.15 + 10.14))) + 35.72\n\n    # calculate the wind chill index\n    wci = 35.72 + 0.6215 * v_ms + 17.624 * (t - 273.15) + 0.3965 * (dpt - t)\n\n    # round the wind chill index to the nearest integer\n    wci_int = math.ceil(wci)\n\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Args:\n    v (float): Wind velocity in km/h\n    t (float): Temperature in celsius\n    \n    Returns:\n    int: Wind chill index rounded to the nearest integer\n    '''\n    return round(max(13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t ** 2, -42.379))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # define the function\n    def remove_names():\n        '''\n        Function to remove the names that start with a lowercase letter from the sample_names list.\n        '''\n        for name in sample_names:\n            if name[0].islower():\n                sample_names.remove(name)\n\n    # call the function\n    remove_names()\n\n    # initialize a variable to store the sum of the lengths of the remaining names\n    total_length = 0\n\n    # loop through the remaining names\n    for name in sample_names:\n        # add the length of each name to the total_length\n        total_length += len(name)\n\n    # return the total_length\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    total_length = sum([len(name) for name in valid_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name.strip() for name in sample_names]\n    valid_names = [name for name in names if name[0].isalpha()]\n    total_length = sum([len(name) for name in valid_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize sum variable to 0\n    total_length = 0\n\n    # Iterate through each name in the sample_names list\n    for name in sample_names:\n\n        # Remove the lowercase letter from the name\n        name = name.replace('a', 'A')\n\n        # Check if the first character of the name is a lowercase letter\n        if name[0].islower():\n\n            # If the first character is a lowercase letter, ignore it and move on to the next name\n            continue\n\n        # Add the length of the remaining name to the total_length variable\n        total_length += len(name)\n\n    # Return the total_length variable\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Split the string into words\n    words = items.split()\n    # Initialize an empty list to store the cleaned words\n    clean_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the word contains any parenthesis\n        if re.search(r'\\(', word):\n            # If it does, remove the parenthesis and any whitespace that comes between them\n            clean_word = re.sub(r'\\(.*?\\)', '', word)\n            # Remove any whitespace between the parenthesis and the word\n            clean_word = re.sub(r'\\s*\\(.*?\\)', '', clean_word)\n            # Check if the cleaned word is not an empty string and add it to the list\n            if clean_word!= '':\n                clean_words.append(clean_word)\n    # Join the cleaned words into a string\n    cleaned_items =''.join(clean_words)\n    return cleaned_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    cleaned_string = pattern.sub('', items)\n    return cleaned_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to match the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    # find all the parenthesis and what is inbetween them\n    result = re.findall(pattern, items)\n    # remove the parenthesis and what is inbetween them from the original string\n    new_items = [item.strip('()') for item in items.split() if item.strip('()') not in result]\n    # return the new string with the parenthesis and what is inbetween removed\n    return''.join(new_items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a regular expression to find any parenthesis and the content inside them\n    pattern = r'(\\([^)]+\\))'\n    # Use the re.findall() function to find all the matches in the string\n    matches = re.findall(pattern, items)\n    # Loop through the matches and remove the parenthesis and what is inbetween them\n    for match in matches:\n        items = items.replace(match, '')\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    def is_perfect_square(n):\n        return int(n**0.5)**2 == n\n\n    def nth_nonagonal(n):\n        return (n*n) // 2\n\n    return is_perfect_square(nth_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n\n    # Calculate the total number of squares\n    total_squares = 2 * n\n\n    # Calculate the total number of digits in the square root of total_squares\n    digits = 0\n    square_root = int(total_squares ** 0.5)\n    while square_root > 0:\n        digits += 1\n        square_root = int(square_root ** 0.5)\n\n    # Calculate the number of nonagonal numbers with given number of digits\n    nonagonal_count = 0\n    for i in range(1, 10):\n        nonagonal_count += i * (i - 1)\n\n    return nonagonal_count - total_squares"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 1\n    while i <= n:\n        k = 1\n        while j <= n:\n            if i*j == n:\n                return i*j\n            k += 1\n            j += 1\n        i += 1\n        j = 1\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return b\n\nn = int(input(\"Enter a positive integer: \"))\nresult = is_nonagonal(n)\nprint(f\"The {n}th nonagonal number is: {result}\")"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize variables\n    nonagonal = 1\n    odd_rows = 1\n    even_rows = 1\n\n    # loop through the rows and columns\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            nonagonal += 2 * odd_rows\n            odd_rows += 1\n        else:\n            nonagonal += 2 * even_rows\n            even_rows += 1\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Check if n is positive integer\n    if n <= 0:\n        return False\n\n    # Initialize sum of squares of all numbers from 1 to n\n    sum_squares = (n * (n + 1)) // 2\n\n    # Initialize sum of cubes of all numbers from 1 to n\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n\n    # Return the sum of squares and cubes of all numbers\n    return sum_squares + sum_cubes"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # Initialize the variable to 1\n    k = 1\n    # Initialize the variable to 1\n    nonagonal = 1\n    # Loop until k reaches n\n    while k <= n:\n        # Add k to nonagonal\n        nonagonal += k\n        # Increment k by 2\n        k += 2\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = 0\n    for i in range(1, n+1):\n        nonagonal += (i * (i+1)) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 0\n    b = 1\n    c = a + b\n    for i in range(2, n):\n        a = b\n        b = c\n        c = a + b\n    return c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nonagonal_number = 0\n    while i <= n:\n        nonagonal_number += i\n        i += 1\n    return nonagonal_number"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b(?<!z)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-zA-Z])[z](?![a-zA-Z])'\n    return re.search(pattern, text)\n\ntext = \"The quick brown fox jumps over the lazy dog. Zzzzzz\"\nresult = text_match_wordz_middle(text)\nif result:\n    print(\"The word 'z' was found at the middle of the string.\")\nelse:\n    print(\"The word 'z' was not found at the middle of the string.\")"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_match_wordz_middle(text):\n    pattern = r\"\\b[zZ]+\\b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through the words and check if there is a 'z' at the start or end of the word\n    for word in words:\n        if word[0] == 'z':\n            return False\n        if word[-1] == 'z':\n            return False\n    \n    # If we reach here, then there was no 'z' at the start or end of the word\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!z)z\\b(?!z)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_match_wordz_middle(text):\n    # Define a regular expression pattern to match words ending in 'z'\n    pattern = re.compile(r'\\b\\w+z\\b', re.IGNORECASE)\n\n    # Search for all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Check if any occurrences were found\n    if matches:\n        # Return True if any matches were found, False otherwise\n        return True\n    else:\n        # Return False if no matches were found\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Use regex to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word\n    for word in words:\n        # Check if the first and last characters are 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If they are, return True\n            return True\n\n    # If the loop completes without finding a word containing 'z' in the middle, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Replace any non-alphanumeric characters with spaces\n    text = re.sub(r'[^a-zA-Z0-9]','', text)\n    # Split the text into words\n    words = text.split()\n    # Check if the first and last words contain 'z'\n    if words[0][-1] == 'z':\n        return False\n    if words[-1][0] == 'z':\n        return False\n    # Check if any other words contain 'z' except at the start and end of the word\n    for i in range(len(words)):\n        if i > 0 and i < len(words) - 1:\n            if 'z' in words[i]:\n                return True\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    start = 0\n    end = k - 1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(input) - 1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Swap the elements at the left and right pointers\n        input[left], input[right] = input[right], input[left]\n        # Move the left pointer to the right\n        left += 1\n        # Move the right pointer to the left\n        right -= 1\n\n    # Reverse the array from the k-th position to the end\n    input = input[k-1:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new list to store the reversed array\n    reversed_array = []\n    \n    # Loop through the original array from the beginning to the k-th element\n    for i in range(k):\n        # Append the current element to the new list\n        reversed_array.append(input[i])\n    \n    # Loop through the original array from the k-th element to the end\n    for j in range(k, len(input)):\n        # Append the current element to the new list\n        reversed_array.append(input[j])\n    \n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to the given position\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from the given position to the end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Length of the input array\n    n = len(input)\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input = input[::-1]\n    # Reverse the array from k to n-1\n    for i in range(k, len(input)):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Length of the input array\n    n = len(input)\n    # Reverse the first k elements of the array\n    input = input[:k][::-1] + input[k:]\n    # Reverse the remaining elements of the array\n    input = input[::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a tuple\n    new_tup = tuple(test_dict.items())\n    # add the tuple to the original tuple\n    result_tup = test_tup + new_tup\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple = new_tuple + tuple(test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the two dictionaries into one\n    combined_dict = {**test_dict, **test_tup}\n    # Convert the dictionary to a tuple\n    return tuple(combined_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = dict(test_dict)\n    new_tuple = test_tup + (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Loop through the keys of the dictionary and add each key-value pair to the tuple\n    for key, value in test_dict.items():\n        test_tup = test_tup + (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup, test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Initialize an empty dictionary to store the added values\n    added_dict = {}\n    # Loop through each value in the test_dict\n    for key, value in test_dict.items():\n        # Check if the key already exists in the added_dict\n        if key in added_dict:\n            # If it does, update the corresponding value\n            added_dict[key] = value\n        else:\n            # If it doesn't, add the key and value to the added_dict\n            added_dict[key] = value\n    # Loop through each value in the test_tup\n    for value in test_tup:\n        # Check if the value already exists in the added_dict\n        if value in added_dict.values():\n            # If it does, add the value to the tuple\n            test_tup = test_tup + (value,)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n    visited = [[False] * n for _ in range(n)]\n    path = [(-1, -1)]\n    total_cost = 0\n    \n    # fill the visited matrix with True for all the cells in the cost matrix\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n    \n    # helper function to find the maximum average of a given path\n    def findMaxAvg(curr_path):\n        nonlocal max_avg, max_path\n        avg_cost = sum(cost[p[0]][p[1]] for p in curr_path) / len(curr_path)\n        if avg_cost > max_avg:\n            max_avg = avg_cost\n            max_path = curr_path\n            \n    # helper function to check if a given path is valid\n    def isPathValid(curr_path):\n        nonlocal total_cost, visited\n        if len(curr_path) > 1:\n            # check if the current cell is adjacent to the previous one\n            if curr_path[0] == (0, 0) and (curr_path[1] == (1, 1) or curr_path[1] == (0, 1)):\n                return False\n            # check if the current cell is not visited before\n            if not visited[curr_path[-1][0]][curr_path[-1][1]]:\n                return False\n            # compute the total cost of the path and update the total cost variable\n            total_cost += sum(cost[p[0]][p[1]] for p in curr_path)\n            # mark the current cell as visited and call the helper function recursively\n            visited[curr_path[-1][0]][curr_path[-1][1]] = True\n            findMaxAvg(curr_path)\n            visited[curr_path[-1][0]][curr_path[-1][1]] = False\n            return True\n        return False\n    \n    # try all possible paths and check if the maximum average is greater than the current maximum average\n    for i in range(n):\n        for j in range(n):\n            if cost[i][j]!= 0 and visited[i][j]:\n                # add the current cell to the path and call the helper function recursively\n                path.append((i, j))\n                if isPathValid(path):\n                    path.pop()\n                else:\n                    path.pop()\n                    break\n    \n    return max_path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Calculate the minimum and maximum values of cost\n    min_cost = min(cost[i][j] for i in range(N) for j in range(N))\n    max_cost = max(cost[i][j] for i in range(N) for j in range(N))\n    # Initialize variables for dynamic programming\n    dp = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]+cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]+cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                max_avg = max(max_avg, (dp[i][j] - min_cost) / (j + 1))\n            elif j == 0:\n                max_avg = max(max_avg, (dp[i][j] - min_cost) / (i + 1))\n            else:\n                max_avg = max(max_avg, (dp[i][j] - min_cost) / (i + 1))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    n = len(cost)\n    dp = [[0] * n for i in range(n)]\n    \n    # fill the dp table\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average\n    max_avg = max(dp[0][i] / (i+1) for i in range(n))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n\n    for i in range(N):\n        dp[i][0] = dp[i][N-1] = cost[i][0]\n\n    for j in range(N):\n        dp[0][j] = dp[N-1][j] = cost[0][j]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if dp[i][j] == dp[i-1][j]:\n                avg_path = 1\n            elif dp[i][j] == dp[i][j-1]:\n                avg_path = 1\n            else:\n                avg_path = 2\n            avg_cost = dp[i][j] / avg_path\n            max_avg = max(max_avg, avg_cost)\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    \n    # Calculate total cost and number of cells visited\n    total_cost = 0\n    num_cells = 0\n    \n    # Initialize a queue to store paths with cost equal to 0\n    queue = [(0, 0, (0, 0), 0, [])]\n    \n    # Loop through the matrix and find paths with cost greater than 0\n    for i in range(n):\n        for j in range(n):\n            if cost[i][j] > 0:\n                # Calculate the cost and number of cells for this cell and append to the queue\n                cost_i_j = cost[i][j]\n                num_cells_i_j = 1\n                queue.append((cost_i_j, num_cells_i_j, (i, j), 0, [(i, j)]))\n                \n                # Look for paths with cost equal to 0\n                while queue:\n                    cost_path, num_cells_path, current_cell, path_avg, path = queue.pop(0)\n                    \n                    # If we have reached the bottom right cell, check if the current path is better than the previous one\n                    if current_cell == (n-1, n-1):\n                        avg = cost_path / num_cells_path\n                        if avg > max_avg:\n                            max_avg = avg\n                            best_path = path\n                            \n                    # If we have not reached the bottom right cell, check if we can move right or down and update the queue\n                    else:\n                        cost_right = cost_path + cost[current_cell[0]][current_cell[1]+1]\n                        num_cells_right = num_cells_path + 1\n                        queue.append((cost_right, num_cells_right, (current_cell[0], current_cell[1]+1), path_avg+avg, path+(current_cell,)))\n                        \n                        cost_down = cost_path + cost[current_cell[0]+1][current_cell[1]]\n                        num_cells_down = num_cells_path + 1\n                        queue.append((cost_down, num_cells_down, (current_cell[0]+1, current_cell[1]), path_avg+avg, path+(current_cell,)))\n                        \n    return max_avg, best_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Function to calculate average of the path\n    def calculate_average(path):\n        # Initialize variables to calculate average\n        total_cost = 0\n        total_cells = 0\n        \n        # Loop through the path and calculate total cost and total number of cells\n        for i in range(len(path)):\n            total_cost += path[i]\n            total_cells += 1\n        \n        # Return average\n        return total_cost / total_cells\n    \n    # Initialize variables to store maximum average and path\n    max_average = 0\n    max_path = []\n    \n    # Loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Initialize path and path cost\n            path = [[i, j]]\n            path_cost = cost[i][j]\n            \n            # Loop through possible next moves\n            while True:\n                # Check if next cell is valid\n                if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                    # If next cell is bottom right cell, add path cost to the path and break loop\n                    path.append([i, j])\n                    break\n                elif i == len(cost) - 1:\n                    # If next cell is bottom row, move down\n                    j += 1\n                elif j == len(cost[0]) - 1:\n                    # If next cell is right column, move right\n                    i += 1\n                else:\n                    # If next cell is valid, move down or right\n                    if cost[i+1][j] < cost[i][j+1]:\n                        # If down is better, move down\n                        i += 1\n                    else:\n                        # If right is better, move right\n                        j += 1\n                    \n                # Add current cell to the path and break loop\n                path.append([i, j])\n                break\n            \n            # Calculate average of the path\n            path_average = calculate_average(path)\n            \n            # If average is greater than the current maximum, update maximum average and path\n            if path_average > max_average:\n                max_average = path_average\n                max_path = path.copy()\n    \n    # Return maximum average and path\n    return max_average, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N-1):\n            if i == 0 and j == 0:\n                curr_avg = cost[i][j]\n            elif i == 0:\n                curr_avg = max(cost[i][j], curr_avg + cost[i][j+1])\n            elif j == 0:\n                curr_avg = max(cost[i][j], curr_avg + cost[i+1][j])\n            else:\n                curr_avg = max(cost[i][j], curr_avg + cost[i+1][j] + cost[i][j+1] - cost[i-1][j-1])\n            max_avg = max(max_avg, curr_avg)\n    return max_avg/N"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables for the number of cells visited and the maximum average\n    num_cells = 0\n    max_avg = 0\n    \n    # Iterate through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if the current cell is not visited before\n            if (i,j) not in visited:\n                # Mark the current cell as visited\n                visited.add((i,j))\n                # Recursively explore the neighboring cells\n                path_avg = maxAverageOfPath(cost)\n                # Update the number of cells visited and the maximum average\n                num_cells += 1\n                max_avg = max(path_avg, max_avg)\n                # Mark the current cell as unvisited\n                visited.remove((i,j))\n                \n    # Return the maximum average over all existing paths\n    return max_avg / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_avg = max(max_avg, dp[i][i])\n    for k in range(N):\n        for i in range(N-k-1):\n            j = i+k+1\n            avg = dp[i][j-1] + cost[i+1][j] + cost[j][j-1] - cost[i][i] - cost[j][j]\n            dp[i][j] = max(dp[i][j], avg)\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_sum = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = cost[0][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][0] + dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum/N**2"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter students with height and weight above the minimum\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    # initialize a dictionary to keep track of the count of the number of times it appears in the second list\n    count = {}\n    # iterate over the numbers in the first list\n    for num in nums1:\n        # check if the number is already in the count dictionary\n        if num in count:\n            # increment its count if it is\n            count[num] += 1\n        else:\n            # otherwise, add it to the dictionary with a count of 1\n            count[num] = 1\n    # initialize a list to keep track of the indices where the counts are the same for both lists\n    indices = []\n    # iterate over the numbers in the second list\n    for num in nums2:\n        # check if the number is already in the count dictionary\n        if num in count:\n            # check if the count of the number in the second list is the same as the count in the first list\n            if count[num] == count[num] in count:\n                # if they are, add the index to the list of indices\n                indices.append(nums2.index(num))\n    # return the list of indices\n    return indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize an empty dictionary to store the count of the same values\n    count = {}\n    \n    # loop through each element in the first list\n    for i in range(len(nums1)):\n        # check if the element exists in the second list\n        if nums2[i] in count:\n            # increment the count of the same value\n            count[nums2[i]] += 1\n        else:\n            # add the element to the dictionary with a count of 1\n            count[nums2[i]] = 1\n    \n    # loop through each element in the second list and check if it exists in the dictionary\n    for i in range(len(nums2)):\n        # if the element exists in the dictionary, increment the count\n        if nums1[i] in count and count[nums1[i]] > 0:\n            # decrement the count of the same value\n            count[nums1[i]] -= 1\n        else:\n            # otherwise, add the element to the dictionary with a count of 1\n            count[nums1[i]] = 1\n    \n    # count the number of indices where the values are the same\n    count_same = 0\n    for value in count.values():\n        if value > 0:\n            count_same += 1\n    \n    return count_same"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    # Create a set of the first list to check for duplicates\n    set1 = set(nums1)\n    # Initialize a count variable to keep track of the number of pairs\n    count = 0\n    # Loop through the second list to compare values with the first list\n    for i in range(len(nums2)):\n        # Check if the current value is in the set of the first list\n        if nums2[i] in set1:\n            # Increment the count if the value is present in both lists\n            count += 1\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result.append(i)\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # initialize a dictionary to store the count of each value\n    value_counts = {}\n\n    # iterate over the lists and count the number of times each value appears\n    for num in nums1:\n        value_counts[num] = value_counts.get(num, 0) + 1\n\n    # initialize a list to store the indices of values that appear more than once\n    same_indices = []\n\n    # iterate over the lists and check if each value appears more than once\n    for i in range(len(nums1)):\n        if nums1[i] not in value_counts or value_counts[nums1[i]] == 1:\n            same_indices.append(i)\n\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # using the eq operator to compare the values in the lists\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # convert base to string\n    base_str = str(base)\n    # initialize sum to 0\n    sum = 0\n    # loop through each digit of the base\n    for digit in base_str:\n        # convert digit to int and multiply with the power\n        digit_int = int(digit)\n        digit_power = power * digit_int\n        # add the digit to the sum\n        sum += digit_power\n    # return the sum of all digits raised to the power of power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_sum = 0\n    for digit in str(base):\n        base_sum += int(digit) ** power\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the power of the digit\n        power_digit = digit_int ** power\n        # Add the power of the digit to the sum\n        sum += power_digit\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit ** power\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += sum(int(digit) for digit in str(base))\n        base *= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into digits\n    digits = list(str(base))\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through each digit of the base and calculate the sum of all digits to the specified power\n    for digit in digits:\n        power_sum = sum([int(digit)**p for p in range(power)])\n        total += power_sum\n    \n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base):\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while power > 0:\n        if power % 10 == 0:\n            temp *= 10\n            power /= 10\n        else:\n            result += (temp // (10 ** (power % 10)))\n            temp %= (10 ** (power % 10))\n        power //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function takes a string as input and returns a list of all the values between quotation marks in the string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to find all instances of quotation marks \" \"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    # extracting the values between the quotation marks\n    values = []\n    for match in matches:\n        # checking if the match is not empty\n        if match:\n            values.append(match.strip())\n    # returning the extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function will extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+N],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Get the length of the tuple\n    N = len(test_tup)\n    # Initialize an empty tuple to store the multiplied numbers\n    result_tup = ()\n    \n    # Loop through each pair of elements in the tuple\n    for i in range(N-1):\n        # Multiply the i-th and (i+1)-th elements and append the result to the result_tup\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    \n    # Append the last element of the original tuple to the result_tup and return the tuple\n    return result_tup + (test_tup[-1],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) * N\n    for i in range(1, N):\n        result_tup = (result_tup[0] * test_tup[i],) + result_tup[1:]\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_n = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the input tuple\n    N = len(test_tup) - 1\n    # initialize the output tuple with zeros\n    out_tup = [0] * N\n    # iterate through the input tuple and multiply each pair of elements\n    for i in range(N):\n        out_tup[i] = test_tup[i] * test_tup[i+1]\n    return out_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive duplicates\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)\n    \n    # Extract the unique elements from the grouped list\n    unique_nums = [num for _, group in grouped_nums for num in group]\n    \n    # Remove the duplicates from the original list\n    unique_nums = list(set(nums) - set(unique_nums))\n    \n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Define a helper function to find the first element of each group\n    def first_element(group):\n        return next(group)[0]\n    \n    # Use the groupby function to group the numbers into consecutive duplicate groups\n    groups = groupby(enumerate(nums), first_element)\n    \n    # Convert the groups into a list of lists of consecutive duplicates\n    result = [list(g) for k, g in groups]\n    \n    # Flatten the list of lists and remove any duplicates\n    return list(set(sum(result, [])))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums, lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Group the list by consecutive duplicates\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    prev_num = None\n    for num in nums:\n        if num == prev_num:\n            continue\n        else:\n            result.append(num)\n            prev_num = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the numbers by their next occurrence\n    grouped = groupby(enumerate(nums), lambda x: x[0] + 1)\n    # Convert the groups back to a list of lists\n    result = [list(group) for group in grouped]\n    # Flatten the list of lists\n    result = [num for group in result for num in group]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for _, group in groupby(sorted(nums)):\n        if not any(group):\n            # skip empty groups (e.g. consecutive duplicates of one number)\n            continue\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5 * r * h * math.tan(math.pi/6)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = math.pi * r**2 * h / 3\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using the formula A = pi * r^2 * h / 3\n    A = math.pi * r ** 2 * h / 3\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find lateral surface area of a cone\n    lateral_surface = math.pi * r * h / 3\n    \n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    '''\n    area = 2 * r * math.tan(math.pi/6)\n    lateral_surface = area * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * math.sin(math.pi / 3) + 2 * h * math.sin(math.pi / 3)\n    area = math.pi * r ** 2 + s\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\s+:', ': ', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s|\\,\\.|\\.'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[^a-zA-Z\\s:]'\n    repl = ':'\n    return re.sub(pattern, repl, text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces and commas with a colon\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[.!?,;:]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove all special characters except for alphanumeric\n    text = text.replace(' ', ':')  # Replace spaces with colons\n    text = text.replace(',', ':')  # Replace commas with colons\n    text = text.replace('.', ':')  # Replace dots with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match the special characters\n    pattern = r'\\s|\\.|,|:'\n    \n    # Use the re.sub() function to replace the special characters with a colon\n    text = re.sub(pattern, ':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s+|,|\\.|\\n'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[,\\s\\.]+'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Check if the array is sorted in ascending order\n    if A[0] <= A[-1]:\n        # Initialize left pointer to 0 and right pointer to length of array - 1\n        left = 0\n        right = len(A) - 1\n        # Initialize count to 0\n        count = 0\n        # Iterate through the array\n        while left <= right:\n            # Calculate midpoint of the array\n            mid = (left + right) // 2\n            # If x is equal to the element at mid index, increment count and check if count is greater than 1\n            if A[mid] == x:\n                count += 1\n                if count > 1:\n                    left = mid + 1\n                else:\n                    return mid\n            # If x is less than the element at mid index, update right pointer to mid - 1\n            elif A[mid] < x:\n                right = mid - 1\n            # If x is greater than the element at mid index, update left pointer to mid + 1\n            else:\n                left = mid + 1\n        # If the loop completes without finding x, return -1\n        return -1\n    else:\n        # If the array is not sorted in ascending order, return -1\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes an array A and a number x as input, and returns the index of the first occurrence of x in A.\n    If x is not in A, the function returns -1.\n\n    The time complexity of this function is O(log n) since it uses binary search to find the first occurrence of x.\n    \"\"\"\n\n    # Initialize the left and right indices\n    left = 0\n    right = len(A) - 1\n\n    # If x is not in A, return -1\n    if x not in A:\n        return -1\n\n    # If x is in the first half of A, use binary search on left half\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If x is in mid element, update left index\n        if A[mid] == x:\n            left = mid + 1\n        # If x is greater than mid element, search on right half\n        elif A[mid] < x:\n            left = mid + 1\n        # If x is less than mid element, search on left half\n        else:\n            right = mid - 1\n\n    # If x is not in the array, return -1\n    if left == right:\n        return -1\n\n    # If x is in the last half of A, use binary search on right half\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        # If x is in mid element, update right index\n        if A[mid] == x:\n            right = mid - 1\n        # If x is greater than mid element, search on left half\n        elif A[mid] < x:\n            left = mid + 1\n        # If x is less than mid element, search on right half\n        else:\n            right = mid - 1\n\n    # Return the index of the first occurrence of x in A\n    return left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(A)\n    while i < n and A[i]!= x:\n        i += 1\n    if i == n:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array and a number x as input.\n    It returns the index of the first occurrence of x in the array.\n    If x is not found in the array, it returns -1.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            # If the mid element is equal to x, return mid index\n            return mid\n        \n        elif A[mid] < x:\n            # If the mid element is greater than x, search in the right half\n            low = mid + 1\n            \n        else:\n            # If the mid element is less than x, search in the left half\n            high = mid - 1\n            \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    dp = [1] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] += dp[j] * arr[i-1]\n            dp[i] %= 1000000007\n            max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result as 0\n    result = 0\n    # Initialize a list to store products of each sublist\n    subarray_products = [1]\n    # Loop through all sublists from 1 to n\n    for i in range(1, n):\n        # Add the current element to the list of products\n        subarray_products.append(subarray_products[-1] * arr[i])\n        # Multiply the current product with the previous product and the current element\n        result += subarray_products[-1] * subarray_products[-2]\n    # Return the final result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # initialize variables\n    n = len(arr)\n    sub_array_prod = [1]*n\n\n    # calculate product of every sublist\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_array_prod[i] *= arr[j-1]\n\n    # calculate sum of products of every sublist\n    sum_sub_array_prod = sum(sub_array_prod)\n\n    return sum_sub_array_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    product = 1\n    prefix_product = [1] * n\n    suffix_product = [1] * n\n    for i in range(n):\n        prefix_product[i] *= arr[i]\n        suffix_product[i] *= arr[n-i-1]\n    ans = 0\n    for i in range(1, n):\n        for j in range(n-i):\n            k = j+i\n            if k <= n:\n                temp = 1\n                for l in range(j, j+i):\n                    temp *= arr[l]\n                ans += temp * prefix_product[k] * suffix_product[k]\n                if k < n-1:\n                    ans -= prefix_product[k+1] * suffix_product[k+1]\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize sum to 0\n    result = 0\n    # Initialize two pointers for sliding window\n    left = 0\n    right = 0\n    # Initialize an array to store product of each window\n    product_arr = []\n    # Initialize product of first window\n    product = 1\n    # Loop through the list\n    while right < len(arr):\n        # Calculate product of current window\n        product *= arr[right]\n        # If product is negative, make it positive\n        if product < 0:\n            product = abs(product)\n        # If product is 0, then all elements in the window are negative\n        if product == 0:\n            # Initialize sum to 0 for the next window\n            result = 0\n            # Initialize left pointer of next window\n            left = right + 1\n            # Initialize product of next window to be 1\n            product = 1\n            # If right pointer is equal to length of list, return the sum\n            if right == len(arr)-1:\n                return result\n            # Move right pointer of next window to the next element\n            right += 1\n        # If product is non-zero, calculate sum of products of all elements in the window\n        else:\n            # Calculate sum of products of all elements in the window\n            sub_sum = 1\n            for i in range(left, right+1):\n                sub_sum *= arr[i]\n            # Add sum to result\n            result += sub_sum\n            # Move left pointer of next window to the right\n            left = right + 1\n            # Initialize product of next window to be product of previous window\n            product = product_arr[right]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Function to find sum of products of all possible sublists of a given list\n    def sum_products(arr, k):\n        # Base case\n        if k == 1:\n            return [1] * len(arr)\n        \n        # Initialize result array and prefix sum array\n        result = [1] * len(arr)\n        prefix_sum = [0] * len(arr)\n        \n        # Calculate prefix sum array\n        prefix_sum[0] = arr[0]\n        for i in range(1, len(arr)):\n            prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        \n        # Calculate subarray products\n        for i in range(1, len(arr) - k + 1):\n            prod = 1\n            for j in range(k):\n                prod *= arr[i+j]\n            result[i] = prod\n        \n        # Calculate sum of products of all possible sublists\n        result_sum = sum(result)\n        \n        # Calculate sum of products of all possible sublists of length k\n        k_result = []\n        for i in range(len(arr) - k + 1):\n            k_result.append(result[i])\n        k_result_sum = sum(k_result)\n        \n        # Return sum of products of all possible sublists\n        return result_sum - k_result_sum\n    \n    # Calculate sum of products of all possible sublists of length 2\n    n = len(arr)\n    result_2 = sum_products(arr, 2)\n    \n    # Calculate sum of products of all possible sublists of length 3\n    result_3 = sum_products(arr, 3)\n    \n    # Return sum of products of all possible sublists\n    return result_2[n-1] + result_3[n-1]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # initialize the result\n    result = 0\n\n    # create a list of all possible sublists\n    n = len(arr)\n    sublists = [arr[i:j+1] for i in range(n) for j in range(i, n)]\n\n    # loop through each sublist and calculate the product\n    for sublist in sublists:\n        product = 1\n        for num in sublist:\n            product *= num\n        result += product\n\n    # return the result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Calculate the sum of products of subarrays of size k\n    for k in range(1, n + 1):\n        # Initialize the sum of products to 1\n        prod_sum = 1\n        # Calculate the sum of products of subarrays of size k\n        for i in range(n - k + 1):\n            prod_sum *= arr[i]\n            # Add the current sum of products to total_sum\n            total_sum += prod_sum\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    # Initialize a 2D list to store product of each subarray\n    product_list = [[0] * n for i in range(n)]\n    \n    # Calculate the product of each subarray\n    for i in range(n):\n        for j in range(i, n):\n            product_list[i][j] = arr[i] * arr[j]\n    \n    # Initialize a list to store the sum of products of subarrays\n    subarray_sum_list = []\n    \n    # Calculate the sum of products of each subarray\n    for i in range(n):\n        for j in range(i+1, n):\n            subarray_sum = 0\n            for k in range(i, j):\n                subarray_sum += product_list[i][k] * product_list[k+1][j]\n            subarray_sum_list.append(subarray_sum)\n    \n    # Initialize a list to store the total sum of products of subarrays\n    subarray_prod_list = []\n    \n    # Calculate the total sum of products of each subarray\n    for i in range(n):\n        subarray_prod = 0\n        for j in range(i+1, n):\n            subarray_prod += subarray_sum_list[j-i-1] * product_list[i][j]\n        subarray_prod_list.append(subarray_prod)\n    \n    return sum(subarray_prod_list)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    product = 1\n    max_product = 0\n    \n    # Generating all possible sublists of arr\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            count += 1\n            product *= arr[j]\n    \n    # Finding maximum product of any sublist\n    max_product = max(product, max_product)\n    \n    # Summing products of all sublists\n    for i in range(count):\n        if product == 1:\n            break\n        product //= arr[i]\n    \n    return count - 1, max_product"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the middle bit\n    mid_bit = (n.bit_length() - 2) // 2\n    # Get the first and last bits\n    first_bit = n & (1 << mid_bit)\n    last_bit = n & (1 << (mid_bit + 1))\n    # Toggle the middle bit\n    mid_bit_toggle = ~first_bit & (last_bit ^ first_bit)\n    # Combine the first and last bits\n    n = first_bit | mid_bit_toggle | last_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    n_binary = bin(n)[2:]  # Convert number to binary string without \"0b\" prefix\n    n_binary = n_binary.zfill(32)  # Pad with zeros to make it 32 bits long\n    n_binary = list(n_binary)  # Convert binary string to list of characters\n    if n_binary[0] == '0' and n_binary[-1] == '0':  # If number is already 0\n        n_binary[1] = '1'  # Toggle the first bit\n    else:\n        n_binary[1] = '0'  # Toggle the first bit\n    if n_binary[0] == '0' and n_binary[-1] == '1':  # If number is already 1\n        n_binary[-2] = '0'  # Toggle the last bit\n    else:\n        n_binary[-2] = '1'  # Toggle the last bit\n    n_binary = ''.join(n_binary)  # Convert list of characters back to binary string\n    n = int(n_binary, 2)  # Convert binary string back to integer\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle the middle bits of a number while leaving the first and last bits unchanged.\n    \"\"\"\n    # Convert the binary representation of the number to a list of digits\n    num_str = bin(n)[2:]\n    num_list = list(num_str)\n\n    # Toggle the middle bits\n    for i in range(int(len(num_list) / 2)):\n        if num_list[i] == '0':\n            num_list[i] = '1'\n        else:\n            num_list[i] = '0'\n\n    # Convert the list of digits back to a binary string and convert it to an integer\n    num_str = ''.join(num_list)\n    return int(num_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    n = [int(i) for i in n]\n    n[1] = not n[1]\n    n[-2] = not n[-2]\n    n = sum(n)\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # First bit is assumed to be 1\n    bit_1 = 1\n    \n    # Iterate through all bits but the first and last\n    for i in range(1, len(bin(n)[2:]) - 2):\n        # Toggle the bit at index i\n        bit_1 ^= (1 << i)\n    \n    # Return the number with middle bits toggled\n    return n ^ bit_1"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Initializing mask to toggle bits except the first and last bit\n    mask = ~(1 << 2)  # 00111111\n\n    # Shift the mask to the right by 1 bit and add it to the original number\n    n = (n ^ (n & mask)) << 1\n\n    # Shift the number to the left by 1 bit and add the shifted mask to it\n    n = (n ^ mask) << 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]  \n    # Remove the first and last bit\n    binary_str = binary_str[1:-1]  \n    # Reverse the binary string\n    binary_str = binary_str[::-1]  \n    # Convert the binary string back to decimal number\n    decimal_num = int(binary_str, 2)  \n    return decimal_num  "
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Finding the number of bits in the given number\n    num_bits = len(bin(n)[2:])\n\n    # Initializing the first and last bits of the number\n    first_bit = int(str(n)[0])\n    last_bit = int(str(n)[-1])\n\n    # Finding the number of set bits in the number except the first and last bits\n    set_bits = num_bits - 2\n\n    # Initializing the result variable with the first and last bits of the number\n    result = first_bit * (2**set_bits) + last_bit\n\n    # Finding the corresponding position of the set bits in the number\n    set_bit_positions = []\n    for i in range(num_bits - 2):\n        if int(str(n)[i]) == 1:\n            set_bit_positions.append(i)\n\n    # Loop through the set bits and toggle the corresponding bits in the result\n    for position in set_bit_positions:\n        result ^= (1 << position)\n\n    # Returning the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  \n    last_bit = n >> 31 & 1  \n    toggled_bits = 0  \n    for i in range(31):  \n        if i == 0 or i == 30:  \n            continue  \n        if (first_bit == 1 and last_bit == 0) or (first_bit == 0 and last_bit == 1):  \n            toggled_bits |= 1 << i  \n        else:  \n            toggled_bits &= ~(1 << i)  \n    return toggled_bits | (first_bit << 31) | (last_bit << 30)  "
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles bits of the number except for the first and last bit.\n\n    Parameters:\n    n (int): Number whose middle bits are to be toggled.\n\n    Returns:\n    int: Number with middle bits toggled.\n    \"\"\"\n    # Find the length of the binary representation of n\n    n_binary = bin(n)[2:]\n\n    # Find the number of bits in the binary representation of n\n    n_bits = len(n_binary)\n\n    # Find the index of the first and last bits\n    first_index = n_bits // 2\n    last_index = n_bits - 1 - n_bits // 2\n\n    # Reverse the binary representation of n\n    n_binary_reverse = n_binary[::-1]\n\n    # Toggle bits of the first and last bits\n    n_binary_reverse = n_binary_reverse[:first_index] + \"1\" + n_binary_reverse[first_index+1:]\n    n_binary_reverse = n_binary_reverse[:last_index] + \"1\" + n_binary_reverse[last_index+1:]\n\n    # Reverse the binary representation of n again\n    n_binary_reverse = n_binary_reverse[::-1]\n\n    # Convert the binary representation of n to an integer\n    n_int = int(n_binary_reverse, 2)\n\n    return n_int"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use bisect.bisect_left() function to find the left insertion point\n    # If the value is already present in the list, return the index where it is found\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return None\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the position of the value in the sorted list\n    i = bisect.bisect_left(a, x)\n\n    # If the value is already present in the list, return the current position\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If the value is greater than the last element in the list, return the length of the list\n    if i == len(a):\n        return len(a)\n\n    # If the value is greater than the element in the previous position, return the previous position\n    if a[i - 1] < x:\n        return i - 1\n\n    # If the value is less than the element in the next position, return the next position\n    if a[i] < x:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the leftmost element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    \n    # If x is greater than the last element in the array, i will be the length of the array\n    if i == len(a):\n        i = len(a)\n        \n    # If x is less than or equal to the first element in the array, i will be 0\n    if i == 0 or a[i-1] < x:\n        return i\n        \n    # If x is between two elements in the array, return the index of the previous element\n    return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect function to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is already in the list, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, return the left insertion point\n    else:\n        return index-1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*' \n    if re.match(regex, string): \n        print(f\"{string} is starting with a vowel.\")\n    else: \n        print(f\"{string} is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (1 / n) * (geometric_sum(n-1) + n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0 \n    i = 1 \n    num = 1 \n\n    while count < n: \n        count += 1 \n        num += i \n        i += 1 \n    \n    return count-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Define the function to check if a number is a triangular number\n    def is_triangular(num):\n        return math.sqrt(5*num + 1) == int(math.sqrt(5*num + 1))\n    \n    # Define the function to check if a number is a perfect square\n    def is_square(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n    \n    # Define the function to find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        i = 0\n        while True:\n            if is_triangular(i) and is_square(i):\n                return i\n            i += 1\n    \n    # Call the function to find the smallest triangular number with n digits\n    result = find_smallest_triangular(n)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    def triangular_number(n):\n        return int(math.factorial(n) / (math.factorial(n - 1) * math.factorial(2)))\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_digit_sum(n):\n        count = 0\n        for digit in str(n):\n            count += int(digit)\n        return count\n    \n    def count_digits(n):\n        count = 0\n        while n > 0:\n            n //= 10\n            count += 1\n        return count\n    \n    digits = count_digits(n)\n    while is_prime(triangular_number(digits)):\n        digits += 1\n    \n    index = triangular_number(digits) - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function returns the index of the smallest triangular number with n digits.\n\n    Args:\n    n (int): The number of digits in the smallest triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n\n    # initialize the result\n    result = 0\n\n    # calculate the first triangular number with n digits\n    triangular_num = 10**n\n\n    # loop until the triangular number is less than or equal to the square root of the integer limit\n    while triangular_num <= math.sqrt(int(1e9)):\n\n        # check if the triangular number is the smallest one with n digits\n        if triangular_num == 10**n:\n            result += 1\n\n        # calculate the next triangular number\n        triangular_num += 1\n\n    # return the result\n    return result"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    # find the smallest triangular number with n digits\n    num = math.ceil(10**n)\n    # find the index of the smallest triangular number\n    index = int(math.log10(num) + n)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Check if the given number of digits is valid \n    if n <= 0: \n        print(\"Invalid input\")\n        return\n    \n    # Find the index of the smallest triangular number with n digits \n    triangular_numbers = []\n    for i in range(1, int(math.pow(10, n-1))):\n        triangular_numbers.append(i*int(math.pow(10, n-1)))\n    \n    # Find the index of the smallest number in the triangular list \n    smallest_index = min(triangular_numbers)\n    \n    # Print the index of the smallest triangular number \n    print(\"Index of smallest triangular number with n digits =\", smallest_index)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and the count of digits\n    smallest = 7 * 9 * 10 ** n - 1\n    count = 1\n    # Calculate the sum of digits of the smallest triangular number\n    total = 0\n    while smallest > 0:\n        total += smallest % 10\n        smallest //= 10\n        count += 1\n    # Find the index of the smallest triangular number with n digits\n    index = total - 2 * count + 1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Find the nth triangular number using the formula: T(n) = n(n+1) // 2\n    T = math.factorial(2*n) // math.factorial(n) // math.factorial(n)\n    # Find the index of T using binary search\n    left, right = 0, T\n    while left <= right:\n        mid = (left + right) // 2\n        if T - mid >= 10**n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Taking n as input to generate all the triangular numbers of that length\n    triangular_nums = [int(math.comb(10**n, r)*r/math.factorial(r)) for r in range(1, 10**n+1)]\n    \n    # Sorting the list in ascending order\n    triangular_nums.sort()\n    \n    # Finding the index of the smallest triangular number\n    return triangular_nums.index(triangular_nums[0]) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # initialize the smallest triangular number with n digits \n    min_triangular = 10**(n-1)\n\n    # loop till the smallest triangular number reaches n digits \n    for i in range(1, n): \n        # calculate the next smallest triangular number \n        min_triangular = min_triangular + 10**(n-i-1)\n\n        # check if the current smallest triangular number is smaller than the smallest triangular number found so far \n        if min_triangular < min_triangular_found: \n            # update the smallest triangular number found so far \n            min_triangular_found = min_triangular\n            # update the index of the smallest triangular number \n            index_found = i \n    # return the index of the smallest triangular number \n    return index_found"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Check if the input is a tuple\n    if type(test_tup)!= tuple:\n        raise TypeError(\"Input must be a tuple\")\n    \n    # Create an empty dictionary\n    my_dict = {}\n    \n    # Iterate through the tuple using a for loop\n    for i in range(len(test_tup)-1):\n        # Extract the adjacent elements of the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        \n        # Add the key-value pair to the dictionary\n        my_dict[key] = value\n        \n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # initialize an empty dictionary\n    result = {}\n\n    # loop through the tuple using the enumerate() function\n    for i in range(0, len(test_tup), 2):\n        # if the key already exists in the dictionary, append the value to the list\n        if test_tup[i] in result:\n            result[test_tup[i]].append(test_tup[i+1])\n        # if the key doesn't exist in the dictionary, add the key-value pair to the dictionary\n        else:\n            result[test_tup[i]] = [test_tup[i+1]]\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        dict_obj[i] = test_tup[i]\n        if i < len(test_tup)-1:\n            dict_obj[i+1] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    my_dict = {}\n    # iterate over the tuple elements\n    for i in range(len(test_tup)-1):\n        # add the current element as the key and the next element as the value\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Invalid tuple length\")\n        return None\n    \n    dict_obj = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    key_list = []\n    value_list = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            key_list.append(test_tup[i])\n            value_list.append(test_tup[i+1])\n        else:\n            key_list.append(test_tup[i-1])\n            value_list.append(test_tup[i])\n    key_value_dict = dict(zip(key_list, value_list))\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether all the characters are the same or not.\n    '''\n    # If the string is empty, return True\n    if not s:\n        return True\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # If any two characters are not the same, return False\n        if s[i]!= s[i+1]:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Checks whether all the characters in a string are the same.\n    \"\"\"\n    # Create a set to store the unique characters in the string\n    unique_chars = set(s)\n    \n    # Check if the length of the set is 1 (i.e. all characters are the same)\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters are same in the string and False otherwise.\n    '''\n\n    # initialize a variable to keep track of the first character of the string\n    first_char = s[0]\n\n    # loop through each character of the string\n    for i in range(1, len(s)):\n        # if the current character is not the same as the first character, return False\n        if s[i]!= first_char:\n            return False\n\n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not in a given string.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n    # check if the first character is the same as the second character\n    elif s[0] == s[1]:\n        # check if all the characters are same\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a variable to store the first character of the string\n    first_char = s[0]\n    # loop through the string\n    for i in range(1, len(s)):\n        # if the current character is not the same as the first character, return False\n        if s[i]!= first_char:\n            return False\n    # if all the characters in the string are the same as the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in s are same, False otherwise.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = math.sqrt(s * (s - 1) * (s - 1) * (s - 1))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron with the given side length.\n    \n    Parameters:\n    side -- the length of one side of the tetrahedron\n    \n    Returns:\n    area -- the area of the tetrahedron\n    '''\n    \n    s = 1/3 * side\n    \n    # Calculate the semi-perimeter of the triangle\n    sp = s + s + s\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(sp * (sp - s) * (sp - 2 * s))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6 * side ** 2) / (4 * math.tan(math.pi / 6))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # First, calculate the semi-perimeter and its square\n    semi_perimeter = (3 * side ** 2) ** 0.5\n    area = math.pi / 6 * side ** 2\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Formula for calculating the area of a tetrahedron\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** (1/2)\n    area = (4/3) * math.pi * s * s * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * (side**2 + side**3 + side**4)\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[-m:] = list[:-m]\n    list[:m] = [list[m]] * n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    A function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a list to the right by a given number of items.\n\n    Args:\n        list (list): the list to rotate.\n        m (int): the number of items to rotate the list.\n\n    Returns:\n        list: the rotated list.\n    \"\"\"\n    n = len(list)\n    if m >= n:\n        return list\n    elif m == 0:\n        return list[::-1]\n    else:\n        # create a new list to hold the rotated items\n        result = [None] * n\n        # move the items to the right by m positions\n        for i in range(n - m, n):\n            result[i - m] = list[i]\n        # move the remaining items to the right by 0 positions\n        for i in range(n - m):\n            result[i] = list[i + m]\n        # return the new list with the rotated items\n        return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list[n:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list[:m] + list[m:]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.rotate(m)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[m:], list[:m] = list[:m], list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        list (list): A list to be rotated.\n        m (int): A positive integer indicating the number of items to be rotated.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    # Return the original list if the rotation count is 0\n    if m == 0:\n        return list\n    \n    # Calculate the length of the original list\n    length = len(list)\n    \n    # Calculate the new rotation index\n    new_index = (length + m) % length\n    \n    # Copy the first m items to the end of the list\n    list[-m:] = list[:m]\n    \n    # Copy the remaining items from the beginning to the rotation index\n    list[:new_index] = list[new_index:]\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # If the list has less than m items, then there is no need to rotate it.\n    if len(list) < m:\n        return list\n\n    # Get the last m items from the list.\n    last_m_items = list[-m:]\n\n    # Remove the last m items from the list.\n    list = list[:-m]\n\n    # Reverse the list.\n    list.reverse()\n\n    # Append the last m items to the front of the list.\n    list += last_m_items\n\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a given list by n items to the right direction.\n    \"\"\"\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for val in test_tup:\n        if val is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: all(digit in str(x) for digit in str(startnum) + str(endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(digit) == 0 for d in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    digits = list(str(startnum)) + list(str(endnum))\n    for i in range(len(digits)):\n        digits[i] = int(digits[i])\n    digits = sorted(digits)\n    result = []\n    for i in range(startnum, endnum+1):\n        if all(int(digit) == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 2 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 3 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 4 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 5 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 6 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 7 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 8 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 9 == 0 for digit in str(i)):\n            continue\n        if all(int(digit) % 10 == 0 for digit in str(i)):\n            result.append(i)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit % x == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1))\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % x == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(num % d == 0 for d in range(1, 10))\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(x % digit == 0 for digit in str(x)) and x >= startnum and x <= endnum"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is less than 360 degrees\n    if a >= 360:\n        return None\n    else:\n        # calculate area of sector\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * (r**2) * (a/360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if the angle is within the range of 0 to 360 degrees\n    if a < 0 or a > 360:\n        return None\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate the area of the sector\n    area = math.pi * (r ** 2) * a\n\n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * math.sin(math.radians(a/2))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r ** 2)\n        return area * (a / 360)\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi*(r**2)*a/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * a / 360\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function will find the longest common subsequence of three given strings.\n    \"\"\"\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # table to store lengths of LCS for subproblems\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # table to store LCS for subproblems\n    DP = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # calculation of lengths of LCS of X[0..m] and Y[0..n] and Z[0..p]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][k] = L[i-1][k-1] + 1\n                    DP[i][j][k] = \"X\"\n                elif Y[j-1] == X[i-1] and Z[k-1] == Y[j-1]:\n                    L[i][k] = L[i-1][k-1] + 1\n                    DP[i][j][k] = \"Y\"\n                elif Z[k-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][k] = L[i-1][k-1] + 1\n                    DP[i][j][k] = \"Z\"\n                else:\n                    L[i][k] = max(L[i-1][k], L[i][k-1], L[i-1][k-1])\n                    DP[i][j][k] = \" \"\n\n    # function to print LCS for given X, Y, and Z\n    def print_LCS(X, Y, Z, i, j, k):\n        if i == 0 or j == 0 or k == 0:\n            return\n\n        if DP[i][j][k] == \"X\":\n            print_LCS(X, Y, Z, i-1, j, k-1)\n            print(X[i-1])\n        elif DP[i][j][k] == \"Y\":\n            print_LCS(X, Y, Z, i, j-1, k-1)\n            print(Y[j-1])\n        elif DP[i][j][k] == \"Z\":\n            print_LCS(X, Y, Z, i, j, k-1)\n            print(Z[k-1])\n        else:\n            print_LCS(X, Y, Z, i-1, j, k-1)\n            print_LCS(X, Y, Z, i, j-1, k-1)\n            print_LCS(X, Y, Z, i, j, k-1)\n\n    print_LCS(X, Y, Z, m, n, p)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a dictionary to store lengths of LCS of all possible subsequences\n    dp = {}\n\n    # Base case: empty string\n    dp[(0, 0, 0)] = 0\n\n    # Fill the dp dictionary\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1\n                else:\n                    dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)])\n\n    # Return the length of the longest common subsequence\n    return dp[(len(X)-1, len(Y)-1, len(Z)-1)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    return p[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # creating a 3D table to store lengths of LCS for all possible subsequences\n    L = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n    \n    # filling the 3D table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] >= L[i][j-1][k]:\n                    L[i][j][k] = L[i-1][j][k]\n                else:\n                    L[i][j][k] = L[i][j-1][k]\n    \n    # returning the longest common subsequence\n    return X[L[m][n][o]:L[m][n][o+1]]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m = len(X)\n        n = len(Y)\n        p = [[0] * (n + 1) for i in range(m + 1)]\n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    p[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n        return p\n\n    def lcs_string(p):\n        i, j = len(X), len(Y)\n        lcs_len = p[i][j]\n        lcs_str = ''\n\n        while i > 0 and j > 0:\n            if X[i - 1] == Y[j - 1]:\n                lcs_str = X[i - 1] + lcs_str\n                i -= 1\n                j -= 1\n            elif p[i - 1][j] > p[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n\n        return lcs_str\n\n    p = lcs(X, Y, Z)\n    return lcs_string(p)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for _ in range(m+1)]\n\n    # Build dp table\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Return the longest common subsequence\n    lcs = []\n    i, j = m, p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the sequence and return\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store lengths of subsequences\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Create a list to store the common subsequence\n    lcs = []\n\n    # Starting from the last cell in the table\n    i = m\n    j = p\n\n    # Traverse the table in top down manner\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list to get the common subsequence in correct order\n    lcs = lcs[::-1]\n\n    return \"\".join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Convert the strings to lists of characters\n    X_list = list(X)\n    Y_list = list(Y)\n    Z_list = list(Z)\n    \n    # Initialize the matrix with zeros\n    matrix = [[0 for j in range(len(Z_list) + 1)] for i in range(len(X_list) + 1)]\n    \n    # Fill the matrix with the lengths of the LCS of each subsequence\n    for i in range(1, len(X_list) + 1):\n        for j in range(1, len(Z_list) + 1):\n            if X_list[i-1] == Z_list[j-1]:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n            else:\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])\n    \n    # Return the length of the longest common subsequence\n    return matrix[len(X_list)][len(Z_list)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Initialize a table to store the length of LCS of all prefixes of X, Y and Z \n    lcs_table = [[0] * (p + 1) for i in range(m + 1)]\n    \n    # Fill the table using dynamic programming approach \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs_table[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    lcs_table[i][j][k] = lcs_table[i-1][j-1][k-1] + 1 \n                else: \n                    lcs_table[i][j][k] = max(lcs_table[i-1][j][k], lcs_table[i][j-1][k], lcs_table[i][j][k-1])\n    \n    # Find the length of LCS of all prefixes of X, Y and Z \n    max_length = lcs_table[m][n][p]\n    \n    # Construct the LCS of all prefixes of X, Y and Z \n    lcs = ''\n    i = m\n    j = n\n    k = p\n    \n    while max_length!= 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs_table[i-1][j][k] == lcs_table[i][j-1][k]: \n            i -= 1\n        elif lcs_table[i][j-1][k] == lcs_table[i][j][k-1]: \n            j -= 1\n        else: \n            k -= 1\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Convert the words to capital letters and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all the special characters and digits from the string\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    output =''.join(words)\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    result = []\n    for word in words:\n        if word.isupper():\n            result.append(' '+word)\n        else:\n            result.append(word)\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', string)\n    return''.join([word.capitalize() if word.istitle() else word for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join(word.capitalize() for word in words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate over the words and add spaces before capital letters\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(''+ word)\n        else:\n            new_words.append(word)\n\n    # Join the words with spaces\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace all non-alphanumeric characters with a space\n    string = re.sub(r'[^\\w\\s]', '', string)\n    # Split the string into words\n    words = string.split()\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase and split it into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    \n    # Iterate over the words and join them with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphanumeric characters and convert to lowercase\n    str2 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1).lower()\n\n    # Split the string into words\n    words = str2.split()\n\n    # Add a space between words starting with capital letters\n    for i in range(len(words)):\n        if words[i].istitle() and i!= 0:\n            words[i] ='' + words[i]\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x.replace(',', '')))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all the numeric strings to integers\n    nums = [int(num) for num in nums_str]\n    # sort the list in ascending order using the sorted() function\n    nums.sort()\n    # convert the sorted list back to strings\n    nums_sorted = [str(num) for num in nums]\n    # return the sorted list of strings\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers using the built-in sort() function\n    nums.sort()\n    \n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all strings to float and sort them\n    nums = sorted(list(map(float, nums_str)))\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the list numerically\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # remove non-numeric characters from the strings\n    nums_str = [s.replace(',', '') for s in nums_str]\n    nums_str = [s.replace('.', '') for s in nums_str]\n    nums_str = [s.replace('-', '') for s in nums_str]\n    # convert all strings to float\n    nums_float = [float(s) for s in nums_str]\n    # sort the float numbers in ascending order\n    sorted_nums_float = sorted(nums_float)\n    # convert the sorted float numbers back to strings and join them with commas\n    sorted_nums_str = [str(s) for s in sorted_nums_float]\n    sorted_nums_str_joined = ', '.join(sorted_nums_str)\n    return sorted_nums_str_joined"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Splitting the strings into lists of integers\n    nums_int = [int(x) for x in nums_str]\n    # Sorting the lists of integers in ascending order\n    nums_int.sort()\n    # Converting the sorted lists of integers into strings\n    nums_str = [str(x) for x in nums_int]\n    # Joining the sorted lists of strings into one string\n    return \"\".join(nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers\n    nums.sort()\n    \n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the given list to a set to remove duplicates\n    test_set = set(test_list)\n    # Add the given tuple to the set\n    test_set.add(test_tup)\n    # Convert the set back to a list\n    test_list = list(test_set)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        test_list.append(i)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n\n    # append the tuple to the list\n    test_list.append(test_tup)\n\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        test_list[i] = test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == 1:\n        if arr[0] < arr[1]:\n            return False\n        else:\n            return True\n    else:\n        if arr[i//2] > arr[i]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case\n    if i < 1:\n        return True\n\n    # recursive case\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Base case\n    if i >= len(arr)//2:\n        return True\n    \n    # Check if root is smaller than left child and right child\n    if arr[i] < min(arr[2*i+1], arr[2*i+2]):\n        return False\n    \n    # Recursively check for left and right children\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    parent = (i-1)//2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 0 and i < len(arr):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < len(arr) and arr[i] > arr[left_child]:\n            return False\n        if right_child < len(arr) and arr[i] > arr[right_child]:\n            return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0 or len(arr) == 1:\n        return True\n\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # get the left and right child index\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # if left child is greater than or equal to array length or right child is greater than or equal to array length, then the heap is not a min heap\n    if left >= len(arr) or right >= len(arr):\n        return True\n    \n    # if both left and right child are smaller than their parent, then the heap is not a min heap\n    if arr[left] >= arr[i] and arr[right] >= arr[i]:\n        return False\n    \n    # if only left child is smaller than their parent, then the heap is a min heap\n    if arr[left] < arr[i]:\n        return check_min_heap_helper(arr, left)\n    \n    # if only right child is smaller than their parent, then the heap is a min heap\n    if arr[right] < arr[i]:\n        return check_min_heap_helper(arr, right)\n    \n    # if both left and right child are smaller than their parent and both of them are a min heap, then the heap is a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # call the helper function for each element of the array\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    \n    # loop through the array and check if each element is a min heap or not\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            return False\n    \n    # if all the elements are a min heap, then the heap is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n\n    # Start from the second node (index 1) and traverse up to the root node\n    for i in range(1, n // 2 + 1):\n        if arr[i] > arr[i * 2]:\n            # If a node is larger than its parent, then the array is not a min heap\n            return False\n        elif arr[i] < arr[i * 2]:\n            # If a node is smaller than its parent, then the array is a min heap\n            continue\n        else:\n            # If a node is equal to its parent, then the array is not a min heap\n            return False\n\n    # If we reach here, then the array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    parent_index = (i - 1) // 2\n    if arr[parent_index] > arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, parent_index)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 0\n        curr = 1\n        for i in range(2, n+1):\n            next_num = curr + prev\n            prev = curr\n            curr = next_num\n        return curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # initialize variables\n    jacobsthal_num = 0\n    lucas_num = 1\n    \n    # loop through n times\n    for i in range(n):\n        \n        # calculate the jacobsthal number\n        jacobsthal_num = 2 * jacobsthal_num + lucas_num\n        \n        # calculate the lucas number\n        lucas_num = lucas_num + 2\n        \n    return jacobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2) + 1\n    else:\n        return 2 * jacobsthal_num((n-1)//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_jac = 1\n        curr_jac = 1\n        for i in range(2, n+1):\n            jac = prev_jac + curr_jac\n            prev_jac = curr_jac\n            curr_jac = jac\n        return curr_jac"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (2 * jacobsthal_num(n//2)) - 1\n    else:\n        return (2 * jacobsthal_num((n-1)//2)) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (n * (jacobsthal_num(n-1) + jacobsthal_num(n-2))) % 1000"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_nums = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10925, 21855, 43721, 87461, 174945, 349907, 699821, 1399657, 2799331, 5598687, 11197391, 22394801, 44789637, 89579307, 179158641, 358317411, 716635037, 1433271097, 2866542431, 5733085081, 11466170201, 22932340461, 45864681085, 91729362241, 183458724635, 366917449437, 733834899121, 1467669798397, 2935339596969, 5870679194115, 11741358388391, 23482716777025, 46965433555287, 93930867111017, 187861734222385, 375723468445201, 751446936891861, 1502893873784997, 3005787747606801, 6011575495229361, 12023150990471461, 24046301980955561, 48092603961931411, 96185207923876461, 192370415847863945, 384740831695937141, 769481663392087805, 1538963326784409745, 3077926653569962821, 6155853307139976811, 12311706614280953631, 24623413228564155381, 49246826457130636985, 98493652914263474077, 196987305828548134681, 39397461165711552"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_numbers = [0, 1]\n\n    for i in range(2, n + 1):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] * jacobsthal_numbers[-2])\n\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Sorting the list of tuples\n    test_list.sort(key=lambda x: x[0])\n\n    # Finding the minimum K records and returning them\n    min_k_records = []\n    min_k_count = 0\n    for i in range(len(test_list)):\n        if min_k_count < K:\n            min_k_count += 1\n        else:\n            break\n        min_k_records.append(test_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list in ascending order based on first element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize an empty list to store the minimum k records\n    min_k_records = []\n    # Iterate over the sorted list and add the minimum k records to the list\n    for i in range(len(sorted_list)):\n        if len(min_k_records) < K:\n            min_k_records.append(sorted_list[i])\n        else:\n            if sorted_list[i][0] < min_k_records[-1][0]:\n                min_k_records.append(sorted_list[i])\n                min_k_records.sort(key=lambda x: x[0])\n                min_k_records.pop()\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the minimum k records\n    min_dict = {}\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # If the dictionary doesn't contain the key, add it and set its value to the current item\n        if item not in min_dict:\n            min_dict[item] = item\n        \n        # If the dictionary contains the key and the value is greater than the current item, update it\n        else:\n            if item < min_dict[item]:\n                min_dict[item] = item\n    \n    # Create a list of the minimum k records from the dictionary\n    min_list = []\n    for key, value in min_dict.items():\n        if len(min_list) < K:\n            min_list.append(value)\n        elif value < min_list[0]:\n            min_list.pop(0)\n            min_list.append(value)\n    \n    # Return the list of minimum k records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list (list of tuple): A list of tuples, where each tuple represents a record in the list. Each tuple consists of two elements, which represent the name of the person and their age.\n    \n    K (integer): The number of records to be returned.\n    \n    Returns:\n    A list of tuples, where each tuple represents a record from test_list. Each tuple consists of two elements, which represent the name of the person and their age.\n    \n    Example:\n    test_list = [(\"Alice\", 20), (\"Bob\", 30), (\"Charlie\", 25), (\"David\", 35), (\"Eve\", 22)]\n    K = 3\n    \n    Output:\n    [('Alice', 20), ('Charlie', 25), ('David', 35)]\n    '''\n    \n    # Sorting the list based on age\n    test_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Finding the minimum K records\n    min_k_records = []\n    for i in range(min(len(test_list), K)):\n        min_k_records.append(test_list[i])\n        \n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for item in test_list:\n        if item[0] not in freq:\n            freq[item[0]] = 0\n        freq[item[0]] += 1\n    \n    # Find the minimum frequency of the Kth element\n    min_freq = sorted(freq.values())[K-1]\n    \n    # Find the list of the Kth element with the minimum frequency\n    min_list = []\n    for item in test_list:\n        if freq[item[0]] == min_freq:\n            min_list.append(item)\n    \n    # Return the minimum Kth element with the minimum frequency\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Find the minimum K records from a tuple list.\n    '''\n    # Sort the tuple list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # Find the first K records\n    min_records = test_list[:K]\n    # Return the minimum K records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list based on the second element of each tuple\n    result = []\n    for i in range(K):\n        result.append(test_list[i])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize a variable to keep track of the minimum k records found so far\n    min_k_records = []\n    # Iterate through the sorted list and keep track of the minimum k records found so far\n    for i in range(len(sorted_list)):\n        # Check if the length of the min_k_records is less than k\n        if len(min_k_records) < K:\n            # Append the current tuple to the min_k_records\n            min_k_records.append(sorted_list[i])\n        # Check if the length of the min_k_records is equal to k\n        else:\n            # If the length of the min_k_records is equal to k, check if the current tuple is less than the first element of the min_k_records\n            if sorted_list[i] < min_k_records[0]:\n                # If the current tuple is less than the first element of the min_k_records, replace the first element of the min_k_records with the current tuple\n                min_k_records[0] = sorted_list[i]\n            # If the current tuple is greater than or equal to the first element of the min_k_records, append the current tuple to the min_k_records\n            else:\n                min_k_records.append(sorted_list[i])\n    # Return the minimum k records found so far\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize a variable to keep track of the minimum k records\n    min_k_records = []\n    # Initialize a variable to keep track of the count of the minimum k records\n    min_k_count = 0\n    # Loop through the sorted list\n    for i in range(len(sorted_list)):\n        # If the count of the minimum k records is less than k, append the current tuple to the list\n        if min_k_count < K:\n            min_k_records.append(sorted_list[i])\n            min_k_count += 1\n        # If the count of the minimum k records is equal to k, append the current tuple to the list\n        elif min_k_count == K:\n            min_k_records.append(sorted_list[i])\n            min_k_count += 1\n            # If the current tuple is less than the last minimum k record, replace the last minimum k record with the current tuple\n            if sorted_list[i][0] < min_k_records[-1][0]:\n                min_k_records[-1] = sorted_list[i]\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list containing the K tuples from the input list, sorted in ascending order based on their second element.\n\n    If there are less than K tuples in the input list, then the function returns the entire list sorted in ascending order based on the second element.\n    '''\n\n    # Sorting the list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # If there are less than K tuples in the list, then return the entire list sorted in ascending order based on the second element\n    if len(test_list) < K:\n        return test_list\n\n    # Return the first K tuples from the list sorted in ascending order based on the second element\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create an empty list to store the common elements\n    common = []\n    # loop through each index in l1, l2, l3\n    for i in range(len(l1)):\n        # if the element at the current index is common in all lists\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            # add it to the common list\n            common.append(l1[i])\n    # return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the current element is present in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n            \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if i not in common:\n                common.append(i)\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty set to store common elements\n    common_set = set()\n    \n    # Iterate through each index of l1, l2, l3\n    for i in range(len(l1)):\n        # Check if the element at index i is also present in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If the element is common, add it to the common_set\n            common_set.add(l1[i])\n            \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize the smallest and second smallest numbers to infinity\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # Loop through each number in the list\n    for num in numbers:\n        # If the current number is smaller than the smallest number, update the smallest and second smallest numbers\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        # If the current number is between the smallest and second smallest numbers, update only the second smallest number\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n\n    # Find the second smallest element\n    second_smallest = sorted_list[1]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List must have at least two elements.\"\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        first_smallest = min(numbers)\n        second_smallest = max(numbers)\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*?'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+(?=a)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?=b.*)')\n    result = pattern.search(text)\n    return result\n\ntext = \"abbaabbaabbabbaabbabbaabbabbaabbabbaabbabbaabbabbaabbabababbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    # Sort the list in decreasing order\n    test_list.sort(reverse=True)\n    # Traverse the list and check for reverse pairs\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            # Concatenate the two strings and check if they are equal\n            if test_list[left][::-1] == test_list[right][::-1]:\n                count += right - left\n                left += 1\n                right -= 1\n            elif test_list[left][::-1] < test_list[right][::-1]:\n                left += 1\n            else:\n                right -= 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for string in test_list:\n        left = 0\n        right = len(string) - 1\n        while left < right:\n            if string[left] == string[right]:\n                reverse_count += (right - left) // 2\n                left += 1\n                right -= 1\n            elif string[left] < string[right]:\n                left += 1\n            else:\n                right -= 1\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i == j:\n                continue\n            elif i < j:\n                left_string = test_list[i]\n                right_string = test_list[j]\n                if left_string == right_string[::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function takes a list of strings as input and returns the count of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize a dictionary to store the count of each unique sublist\n    count_dict = {}\n    \n    # Iterate through each element in the input list\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        \n        # If the tuple element is already in the dictionary, increment its count by 1\n        if tuple_element in count_dict:\n            count_dict[tuple_element] += 1\n        # Otherwise, add the tuple element to the dictionary with a count of 1\n        else:\n            count_dict[tuple_element] = 1\n            \n    # Return the dictionary with the count of each unique sublist\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count:\n                count[sublist_tuple] += 1\n            else:\n                count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # create a dictionary to store the number of occurences of each tuple\n    count = {}\n\n    # loop through each list in the input list\n    for i in range(len(list1)):\n        # convert the list to a tuple\n        tup = tuple(list1[i])\n        # check if the tuple is in the dictionary\n        if tup in count:\n            # increment the count of the tuple by 1\n            count[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count[tup] = 1\n\n    # return the dictionary of counts\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary\n    count_dict = {}\n    # iterate through the input list\n    for item in lst:\n        # convert the list to a tuple\n        tup = tuple(item)\n        # if the tuple is not already in the dictionary, add it and set its value to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # otherwise, increment its value by 1\n        else:\n            count_dict[tup] += 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique list\n    unique_list_count = {}\n    \n    # Iterate through the original list and convert each list to a tuple\n    for i in list1:\n        tuple_i = tuple(i)\n        \n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tuple_i not in unique_list_count:\n            unique_list_count[tuple_i] = 1\n        \n        # Otherwise, increment the count for that tuple by 1\n        else:\n            unique_list_count[tuple_i] += 1\n    \n    return unique_list_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each unique tuple\n    unique_count = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the current element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the dictionary\n            unique_count[tuple(element)] = unique_count.get(tuple(element), 0) + 1\n    # Return the dictionary containing the unique count of each unique tuple\n    return unique_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of unique sublists in the original list\n    sublist_count = {}\n\n    # Loop through each element of the original list\n    for i in list1:\n        # Convert the element to a tuple if it is a list, else leave it as it is\n        if isinstance(i, list):\n            i = tuple(i)\n        # If the tuple is already in the dictionary, increment its count\n        if i in sublist_count:\n            sublist_count[i] += 1\n        # Otherwise, add the tuple to the dictionary with count 1\n        else:\n            sublist_count[i] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Iterate over each element in the list\n    for i in range(len(list1)):\n        # Convert the list to a tuple\n        item = tuple(list1[i])\n\n        # Check if the tuple exists in the dictionary\n        if item in count_dict:\n            # If it does, increment its value by 1\n            count_dict[item] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a value of 1\n            count_dict[item] = 1\n\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublists:\n            sublists[sublist_tuple] = 1\n        else:\n            sublists[sublist_tuple] += 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Remove any non-numeric characters from the string\n        num = ''.join(filter(str.isdigit, num))\n        \n        # Check if the string is an integer or a float with a precision of 2\n        if num.replace('.', '', 1).isdigit():\n            return True\n        else:\n            return False\n    except:\n        # If the input is not a string, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        if '.' not in num:\n            return False\n        decimal_parts = num.split('.')\n        if len(decimal_parts)!= 2:\n            return False\n        for part in decimal_parts:\n            if not part.isdigit() or len(part) > 2:\n                return False\n        if len(decimal_parts[0]) > 1 or len(decimal_parts[1]) > 2:\n            return False\n        return True\n    except:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?[0-9]+\\.[0-9]{2}$'\n    if re.match(decimal_pattern, num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string starts with a decimal point\n    if num[0] == '.':\n        # Remove the decimal point from the string\n        num = num[1:]\n    # Check if the string contains any non-digit characters\n    if any(char.isdigit() for char in num):\n        # Check if the string contains any more digits after the decimal point\n        if '.' in num and any(char.isdigit() for char in num.split('.')[1]):\n            # Check if the string has a precision of 2\n            if len(num.split('.')[1]) <= 2:\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[i]!= '.' and not num_str[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        if '.' in num and num.split('.')[1].endswith('0'):\n            # check if the number has a precision of 2\n            return True\n        elif '.' in num and len(num.split('.')[1]) == 1:\n            # check if the number has a precision of 2\n            return True\n        else:\n            return False\n    except:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique = True\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n\n    count = 0\n    for num in arr:\n        if num in arr[count:]:\n            return False\n        count += 1\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set to store the unique elements\n    unique = set()\n\n    # Iterate through the list of elements and add each element to the set\n    for element in arr:\n        unique.add(element)\n\n    # Check if the set has only one element or not\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    for i in count:\n        if count[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for num in arr:\n        if arr.count(num)!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a set to store unique elements\n    unique = set(arr)\n\n    # check if the length of unique is equal to 1\n    if len(unique) == 1:\n        print(\"The list contains only one distinct element\")\n        return True\n    else:\n        print(\"The list contains multiple distinct elements\")\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check if the given month number is between 1 and 12\n    if not 1 <= monthnum3 <= 12:\n        return \"Invalid month number!\"\n    \n    # check if the given month number has 30 days\n    if monthnum3 == 2:  # February\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return \"February has 29 days\"\n        else:\n            return \"February has 28 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:  # March, May, September, November\n        return \"March, May, September, November have 30 days\"\n    else:  # All other months have 31 days\n        return \"All other months have 31 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return False\n        else:\n            return True\n    else:\n        if monthnum3 == 2:\n            return False\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum3 % 2 == 0 and monthnum3 % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"30 days in this month\")\n    elif monthnum in [4, 6, 9, 11]:\n        print(\"30 days in this month\")\n    else:\n        print(\"Not a valid month\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the given month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Please enter a month number between 1 and 12.\"\n    \n    # Check the month number and return the appropriate message\n    if monthnum3 == 2:\n        return \"The month of February has 29 days.\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"The month of April, June, September, or November has 30 days.\"\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"The month of March, May, July, August, October, or December has 31 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum3 in months:\n        if months[monthnum3] == 28 and monthnum3 in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # List of months with 30 days\n    months = [4, 6, 9, 11]\n    # Check if the given month number is in the list\n    if monthnum3 in months:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 3 == 0:\n            return True\n        elif monthnum3 % 2 == 0:\n            return False\n        else:\n            return False\n    else:\n        return \"Invalid month number!\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    # Sort the array \n    arr.sort() \n\n    # Initialize minimum difference \n    diff = float('inf') \n\n    # Initialize two pointers \n    i = 0 \n    j = n-1 \n\n    # Traverse through the sorted array \n    while i < j: \n        # Calculate the difference between the current elements \n        diff = abs(arr[i] - arr[j]) \n\n        # If the difference is smaller than the current minimum difference, update it \n        if diff < diff: \n            diff = arr[i] - arr[j] \n\n        # If the difference is negative, move the left pointer to the next element \n        if diff < 0: \n            i += 1 \n        else: \n            j -= 1 \n\n    return diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    \n    # initialize two variables to store the minimum and maximum values\n    min_diff = float('inf')\n    max_value = float('-inf')\n    \n    # loop through the array\n    for i in range(n):\n        # if the current element is greater than the maximum value, update the maximum value\n        if arr[i] > max_value:\n            max_value = arr[i]\n        \n        # if the current element is less than the minimum value, update the minimum value and the minimum difference\n        elif arr[i] < min_diff:\n            min_diff = arr[i] - max_value\n    \n    # if the maximum value is greater than the minimum difference, return the minimum difference\n    if max_value > min_diff:\n        return min_diff\n    # otherwise, return the maximum difference\n    else:\n        return max_value"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference\n    diff = arr[1] - arr[0]\n\n    # Traverse the array from second element\n    for i in range(1, n-1):\n        # Calculate the difference between current element and next element\n        diff = min(diff, arr[i+1] - arr[i])\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize two pointers left and right\n    left, right = 0, n-1\n\n    # initialize minimum difference\n    min_diff = float('inf')\n\n    while left < right:\n        # calculate difference between current elements\n        diff = arr[right] - arr[left]\n\n        # update minimum difference if current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # move left pointer if difference is negative\n        if diff < 0:\n            left += 1\n        # move right pointer if difference is positive\n        else:\n            right -= 1\n\n    # return minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the maximum value\n    min_diff = float('inf')\n\n    # Loop through the array to find the minimum difference\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It uses a sliding window approach where we maintain a window of size n and keep updating the minimum difference we have seen so far.\n    \"\"\"\n    if n > len(arr):\n        raise ValueError(\"Window size should be less than or equal to the length of the array\")\n\n    min_diff = float('inf')\n    current_window_min = arr[0]\n\n    for i in range(n, len(arr)):\n        current_window_min = min(current_window_min, arr[i])\n        min_diff = min(min_diff, current_window_min - arr[i])\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Iterate over all pairs of elements in the array\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Loop through the array\n    for i in range(n-1):\n\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Check if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two parameters - an array 'arr' of size n and an integer 'n' representing the size of the array.\n    It returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return is_polite(n - 1) + math.sqrt(5)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the polite number and its index\n    polite = 0\n    count = 0\n    # Iterate until the count reaches n\n    while count < n:\n        # Increment the polite number by 1\n        polite += 1\n        # If the polite number is odd, add 1 to its count\n        if polite % 2 == 1:\n            count += 1\n    return polite - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return \"Polite\"\n    else:\n        polite_number = 1\n        for i in range(2, n + 1):\n            polite_number *= 2 * i - 1\n        return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n\n    >>> is_polite(1)\n    1\n    >>> is_polite(2)\n    2\n    >>> is_polite(3)\n    3\n    >>> is_polite(4)\n    4\n    >>> is_polite(5)\n    5\n    >>> is_polite(6)\n    6\n    >>> is_polite(7)\n    7\n    >>> is_polite(8)\n    8\n    >>> is_polite(9)\n    9\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    num = 1\n    \n    while count < n:\n        if is_prime(num):\n            count += 1\n            \n        num += 1\n    \n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Create a list of prime numbers up to sqrt(n)\n    primes = [True] * (math.ceil(math.sqrt(n))+1)\n    primes[0] = primes[1] = False\n\n    # Sieve of Eratosthenes to find primes up to sqrt(n)\n    for p in range(2, int(math.sqrt(n))+1):\n        if primes[p]:\n            for i in range(p*p, n+1, p):\n                primes[i] = False\n\n    # Find the nth prime number and return it\n    for p in range(2, n+1):\n        if primes[p]:\n            return p"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 34\n    elif n == 9:\n        return 55\n    elif n == 10:\n        return 89\n    elif n == 11:\n        return 144\n    elif n == 12:\n        return 233\n    elif n == 13:\n        return 377\n    elif n == 14:\n        return 610\n    elif n == 15:\n        return 987\n    elif n == 16:\n        return 1597\n    elif n == 17:\n        return 2584\n    elif n == 18:\n        return 4181\n    elif n == 19:\n        return 6765\n    elif n == 20:\n        return 10946\n    else:\n        i = 0\n        while True:\n            a = 2*i + 1\n            if a**2 > n:\n                break\n            if is_prime(a):\n                return a\n            i += 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the variables\n    count = 0\n    x = 1\n    \n    # Calculate the nth polite number\n    while count < n:\n        x += 1\n        if is_prime(x):\n            count += 1\n    \n    # Return the nth polite number\n    return x\n\ndef is_prime(num):\n    '''\n    Function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Initialize the list of polite numbers\n    polite_numbers = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n    # Check if n is a valid input\n    if not isinstance(n, int) or n < 1:\n        return \"Invalid input.\"\n\n    # Check if n is a polite number\n    if n in polite_numbers:\n        return f\"The {n}th polite number is {polite_numbers[n-1]}\"\n\n    # Find the nth polite number using the formula:\n    # Pn = 2n + 1\n    # 2n + 1 is the nth odd prime number\n    # So, Pn = 2n + 1 is an odd prime\n    # n is the odd integer\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return \"Invalid input.\"\n        if i * i > n:\n            break\n    if n % i == 0:\n        n += 1\n    return f\"The {n}th polite number is {2 * n + 1}\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num): \n        '''\n        Checks if a given number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0: \n                return False\n        return True\n\n    def nth_prime(n): \n        '''\n        Returns the nth prime number.\n        '''\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num): \n                count += 1\n            num += 1\n        return num\n\n    return nth_prime(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    if len(l1) < 2:\n        return result\n    else:\n        for i in range(len(l1)-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst)):\n        if i < len(lst)-1:\n            pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function takes a list of numbers and a sum as input.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each pair in the list\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the sum of the current pair is equal to the given sum\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and the target sum. It returns the number of pairs in the list that add up to the target sum.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each element in the list\n    for i in range(len(arr)):\n        # Loop through each element in the list again\n        for j in range(i+1, len(arr)):\n            # If the sum of the elements is equal to the target sum, increment the count variable\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1).difference(set(li2)))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n + 1, 2):\n        total_sum += i ** 4\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        if i % 2!= 0:\n            sum += i**4\n        i += 1\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    This function finds the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    num = 3\n    while count <= n:\n        if num % 2!= 0:\n            sum += num ** 4\n        count += 1\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_numbers = []\n    for i in range(2, n+1, 2):\n        odd_numbers.append(i)\n    return sum([x**4 for x in odd_numbers])"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            odd_sum += i ** 4\n        i += 1\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    for char in exp:\n        if char.isdigit():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return \"Not balanced\"\n            top = stack.pop()\n            if i in [')', '}']:\n                if top!= '(':\n                    return \"Not balanced\"\n            elif i in [']']:\n                if top!= '[':\n                    return \"Not balanced\"\n    return \"Balanced\" if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_par = ['(', '[', '{']\n    close_par = [')', ']', '}']\n\n    for i in exp:\n        if i in open_par:\n            stack.append(i)\n        elif i in close_par:\n            if not stack:\n                return False\n            if close_par.index(i)!= open_par.index(stack.pop()):\n                return False\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char in ['(', '[']:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n            else:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through each word and check its length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            # Remove the word at index i\n            del words[i]\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the non-K-length words\n    non_K_length_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, add it to the list\n        if len(word)!= K:\n            non_K_length_words.append(word)\n    # Join the words in the list with a space\n    result =''.join(non_K_length_words)\n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the final result\n    final_words = []\n    # Iterate over each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the final_words list\n        if len(word)!= K:\n            final_words.append(word)\n    # Join the final words list into a string and return it\n    return''.join(final_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words using whitespace as the delimiter\n    words = test_str.split()\n    # Initialize an empty list to store the words with k length\n    words_k = []\n    # Loop through each word and check if its length is equal to K\n    for word in words:\n        if len(word) == K:\n            # If the length is equal to K, add it to the list of words with k length\n            words_k.append(word)\n    # Join the list of words with k length into a single string and return it\n    return''.join(words_k)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        occurrence = match.group()\n        position = match.start()\n        return occurrence,position\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    \n    for match in matches:\n        print(f\"Match found at position {text.find(match)}: {match}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], matches.index(matches[0])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.search() function to find all occurrences of pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there is any match\n    if matches:\n        # Loop through matches and print the position and count of each match\n        for i, match in enumerate(matches):\n            print(f\"Match {i+1}: {match}\")\n        return f\"There are {len(matches)} matches of '{pattern}' in the text.\"\n    else:\n        return f\"There is no match of '{pattern}' in the text.\""
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # if there are no matches, return None\n    if not matches:\n        return None\n\n    # loop through the matches and collect the results\n    results = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        results.append((start, end))\n\n    # return the list of matches\n    return results"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use re.findall to find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n    \n    # if matches is empty, return None\n    if not matches:\n        return None\n    \n    # create a list to store the positions of matches\n    positions = []\n    \n    # loop through matches and append their positions to positions\n    for i, match in enumerate(matches):\n        positions.append((text.index(match), len(match)))\n    \n    # sort positions in ascending order based on the first element of each tuple\n    positions.sort()\n    \n    # return the sorted list of positions\n    return positions"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum(nums[i-1:i+1]) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Loop through the list of numbers\n    for i in range(len(nums)):\n        # If the current number is odd\n        if nums[i] % 2!= 0:\n            # Increment the count by 1\n            count += 1\n    # If all odd numbers of the list have been found in odd positions\n    if count == len(nums) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n            else:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 1:\n            if sum(nums[i:]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if len(nums[i]) % 2!= 0:\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if not all(num % 2 == 0 for num in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a list to store the odd positions\n    odd_positions = []\n    \n    # Iterate through the list using a nested loop\n    for i in range(len(nums)):\n        for j in range(i+2, len(nums), 2):\n            # If the current odd position contains an odd number, append its index to the odd_positions list\n            if nums[j] % 2 == 1:\n                odd_positions.append(j)\n                break\n    \n    # Check if all odd positions contain odd numbers\n    if len(odd_positions) == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate over the unique elements and add them to the sum\n    for element in unique_elements:\n        sum += element\n    # Return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # create a set to keep track of non-repeated elements\n    seen = set()\n    # initialize the sum to zero\n    total = 0\n    # iterate over the list and add non-repeated elements to the set\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            total += num\n    # return the total sum\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    This function finds the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # convert the set to a list\n    unique_list = list(unique_set)\n    # calculate the sum of the unique list\n    sum_of_unique = sum(unique_list)\n    # return the sum of the unique list\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the given list to a set to remove duplicates\n    unique_set = set(arr)\n    # Calculate the sum of unique elements in the list\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n\n    Args:\n    arr (list): List of integers\n\n    Returns:\n    int: Sum of non-repeated elements in the list.\n    \"\"\"\n\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Calculate the sum of unique elements\n    unique_sum = sum(unique_elements)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Iterate through the frequency dictionary and add up the non-repeated elements\n    for num in freq:\n        if freq[num] == 1:\n            total += num\n\n    # Return the sum of non-repeated elements\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    # initialize the sum variable to zero\n    sum = 0\n    # loop through the list\n    for i in arr:\n        # check if the element is already in the list\n        if arr.count(i) == 1:\n            # add the element to the sum\n            sum += i\n    # return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of the non-repeated elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize the sum variable to zero\n    total_sum = 0\n    \n    # Loop through the dictionary and add up the non-repeated elements\n    for num, count in freq.items():\n        if count == 1:\n            total_sum += num\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of the elements in the list \n    unique_elements = set(arr)\n    \n    # Initialize the sum variable to zero \n    total_sum = 0\n    \n    # Iterate through the set of unique elements and add their values to the total sum \n    for element in unique_elements:\n        total_sum += element\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_of_unique_elements = 0\n    # Iterate over the unique elements and add their values to the sum of unique elements\n    for element in unique_elements:\n        sum_of_unique_elements += element\n    # Return the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = {}\n    for key, group in groupby(sorted(list1)):\n        if key in grouped_list:\n            grouped_list[key].append(list(group))\n        else:\n            grouped_list[key] = list(group)\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use itertools.groupby to group the list by consecutive duplicates\n    groups = groupby(list1)\n\n    # use a list comprehension to unpack the groups into sublists\n    packed_list = [list(group) for _, group in groups]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(g) for k, g in groupby(lst) if k == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates\n    grouped = groupby(enumerate(list1), lambda x: x[0] - x[1] == 1)\n    # Initialize an empty list to store the packed sublists\n    result = []\n    # Iterate through the grouped sublists and append their elements to the result list\n    for sublist in grouped:\n        if sublist:\n            sublist = [k for k, _ in sublist]\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(sorted(list1))\n    packed_list = []\n    for item in grouped_list:\n        sublist = list(item[1])\n        if len(sublist) > 1:\n            packed_list.extend(sublist)\n        else:\n            packed_list.append(sublist[0])\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(enumerate(list1), lambda x: x[0]-x[1]))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        sublists.add(item)\n    return dict(zip(sublists, [sublists.count(i) for i in sublists]))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lst = []\n    for item in lst:\n        if item not in unique_lst:\n            unique_lst.append(tuple(item))\n    count_dict = {}\n    for item in unique_lst:\n        count_dict[item] = unique_lst.count(item)\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple not in sublist_count:\n                sublist_count[item_tuple] = 1\n            else:\n                sublist_count[item_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a dictionary to store the number of occurrences of each sublist\n    counts = {}\n    # iterate over the sublists of the input list\n    for sublist in list1:\n        # turn the sublist into a tuple and add it to the dictionary if it doesn't exist yet\n        if sublist not in counts:\n            counts[sublist] = 1\n        # otherwise, increment its count by 1\n        else:\n            counts[sublist] += 1\n    # return the dictionary containing the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        # convert sublist to tuple and check if it exists in sublist_count dictionary\n        if tuple(sublist) not in sublist_count:\n            sublist_count[tuple(sublist)] = 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not in the dictionary yet, add it with a count of 1\n        if sublist_tuple not in counts:\n            counts[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[sublist_tuple] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem in count_dict:\n                count_dict[tuple_elem] += 1\n            else:\n                count_dict[tuple_elem] = 1\n\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # create a set of tuples in the given list\n    tuples_set = set(test_list)\n\n    # create a set of unique tuples with distinct elements\n    unique_tuples = set(combinations(tuples_set, r=2))\n\n    # create a dictionary to store the sum and the list of tuples\n    sum_dict = {}\n\n    # loop through each unique tuple\n    for tup in unique_tuples:\n        # create a tuple of the sum of the elements in the tuple\n        tup_sum = tuple(sum(tup))\n        # add the tuple and its sum to the dictionary\n        if tup_sum in sum_dict:\n            sum_dict[tup_sum].append(tup)\n        else:\n            sum_dict[tup_sum] = [tup]\n\n    # sort the dictionary by the keys and return the values\n    sorted_dict = dict(sorted(sum_dict.items()))\n    return sorted_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    combinations_list = []\n\n    # Sort the input list of tuples\n    test_list.sort()\n\n    # Iterate over all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n\n            # Calculate the sum of the tuples\n            sum_tuple = test_list[i][0] + test_list[j][1]\n\n            # Check if the sum is in the input list of sums\n            if sum_tuple in test_list:\n                # If the sum is found, create a combination of the tuples\n                combination = (test_list[i], test_list[j])\n                combinations_list.append(combination)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for comb in combinations(test_list, j):\n                if sum(comb) == 0:\n                    print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations_list.extend(combinations(test_list[i], j-i))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all combinations of sums with tuples in the given list.\n    '''\n    comb = []\n    for i in range(1, len(test_list)):\n        for j in range(i):\n            comb.extend(combinations(test_list, i))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    combinations_list = []\n    for i in range(1, total_sum+1):\n        comb = combinations(test_list, i)\n        combinations_list.extend(comb)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize empty list to store the combination of sums\n    combinations_list = []\n    \n    # loop through all possible tuples in the given tuple list\n    for i in range(1, len(test_list)+1):\n        # loop through all possible combinations of tuples of length i\n        for comb in combinations(test_list, i):\n            # check if the sum of the tuples in the combination is equal to the target sum\n            if sum(comb) == 0:\n                # if it is, add the combination to the combinations list\n                combinations_list.append(comb)\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def is_subset(sub, super):\n        for item in sub:\n            if item not in super:\n                return False\n        return True\n    \n    def find_combinations_helper(candidates, target, current_sum, current_combination, remaining_candidates, result):\n        if current_sum == target:\n            result.append(current_combination)\n            return\n        \n        if current_sum > target:\n            return\n        \n        for i in range(len(remaining_candidates)):\n            if current_sum + remaining_candidates[i] <= target and remaining_candidates[i] not in current_combination:\n                current_combination.append(remaining_candidates[i])\n                find_combinations_helper(candidates, target, current_sum + remaining_candidates[i], current_combination, remaining_candidates[:i] + remaining_candidates[i+1:], result)\n                current_combination.pop()\n    \n    result = []\n    candidates = set(test_list)\n    for i in range(len(candidates)):\n        for j in range(i+1, len(candidates)):\n            for k in range(j+1, len(candidates)):\n                current_combination = [candidates[i], candidates[j], candidates[k]]\n                if is_subset(current_combination, candidates):\n                    find_combinations_helper(candidates, sum(current_combination), 0, current_combination, candidates, result)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    result = []\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(sum(test_list[k]) == sum(test_list[i]) + sum(test_list[j]) for k in combinations(test_list, i+j)):\n                result.append(tuple(test_list[i] + test_list[j]))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            for k in range(j + 1, len(test_list)):\n                for l in range(k + 1, len(test_list)):\n                    combinations_list.append((test_list[i], test_list[j], test_list[k], test_list[l]))\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    if n == 1:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    else:\n        factors = math.factorial(n)\n        divisors = factors / (math.factorial(2*n) * math.factorial(n))\n        return math.isqrt(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    count_divisors = len(divisors)\n    if count_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n\n    def count_divisors_helper(num):\n        divisors = [1]\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    divisors.append(i)\n                divisors.append(num // i)\n        return divisors\n\n    def count_divisors_even(divisors):\n        return sum(1 for divisor in divisors if divisor % 2 == 0)\n\n    divisors = count_divisors_helper(n)\n    even_divisors = count_divisors_even(divisors)\n\n    if even_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    # count of divisors using nested loop\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    \n    # check if count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return \"The number of divisors is even.\"\n    else:\n        return \"The number of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    count = 0\n\n    # loop through all numbers from 1 to n/2\n    for i in range(1, int(n**0.5) + 1):\n        # check if n is divisible by i\n        if n % i == 0:\n            # if it is, add 1 to count\n            count += 1\n\n    # if count is even, return True\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the sum of the divisors of n\n    divisors_sum = sum([1 for i in range(1, int(math.sqrt(n))+1) if n%i == 0])\n    \n    # check if the sum of the divisors is even\n    if divisors_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number n.\n    It uses the following formula: n^0.5 + 1 for the number of divisors.\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    divisors = 0\n    for i in range(1, sqrt_n + 1):\n        if n % i == 0:\n            divisors += 2 if i!= sqrt_n else 1\n    return divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n//i!= i:\n                count += 1\n    return count % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += sum(arr[i:i+2])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd = 0\n\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            count += 1\n            if j-i+1 % 2 == 1:\n                sum_odd += sum(arr[i:j+1])\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum_odd += arr[j-2]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(1, n, 2):\n        for j in range(i, n, 2):\n            if j-i+1 % 2 == 1:\n                sum += arr[j] - arr[i-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1: # odd length\n                result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i+2, len(arr)+1, 2):\n            sum_of_odd_length_subarrays += arr[j-2]\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum_odd_len_subarrays = 0\n    left = 0\n    right = 0\n\n    while right < len(arr):\n        if right - left + 1 % 2 == 1:\n            sum_odd_len_subarrays += arr[right]\n        right += 1\n\n    return sum_odd_len_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        if i == 0 or (i > 0 and arr[i] % 2!= arr[i-1] % 2):\n            sub_arr = arr[i:i+2]\n            total += sum(sub_arr)\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            count = 0\n            sum = 0\n        if arr[i] % 2 == 1:\n            count += 1\n            sum += arr[i]\n        if count == 1:\n            sum += arr[i]\n        if count == 3 and arr[i] % 2 == 1:\n            sum += arr[i]\n        if i == n-1 and count == 3:\n            print(sum)\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray_sum += sum(arr[i:j])\n    return subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n    \"\"\"\n    # Convert R, G, and B values to float\n    r, g, b = map(float, (r, g, b))\n\n    # Find maximum and minimum values among R, G, and B\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    delta = max_value - min_value\n\n    # Set value of Hue\n    if max_value == min_value:\n        hue = 0\n    elif r == max_value:\n        hue = 60 * ((g - b) / delta) % 6\n    elif g == max_value:\n        hue = 60 * ((b - r) / delta) + 120\n    elif b == max_value:\n        hue = 60 * ((r - g) / delta) + 240\n\n    # Set value of Saturation\n    saturation = delta / max_value\n\n    # Set value of Value\n    value = max_value\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta_color = max_color - min_color\n    \n    if max_color == min_color:\n        h = 0\n        s = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta_color\n        elif max_color == g:\n            h = 2 + (b - r) / delta_color\n        else:\n            h = 4 + (r - g) / delta_color\n        \n        if h < 0:\n            h += 6\n        \n        s = delta_color / max_color\n    \n    v = max_color\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if max_color == min_color:\n        h = 0\n        s = 0\n    else:\n        if delta == 0:\n            h = 0\n        else:\n            if max_color == r:\n                h = 60 * (g - b) / delta\n            elif max_color == g:\n                h = 60 * (2 + (b - r) / delta)\n            else:\n                h = 60 * (4 + (r - g) / delta)\n        if h < 0:\n            h += 360\n        if max_color == 0:\n            s = 0\n        else:\n            s = delta / max_color\n    v = max_color\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color model.\n    '''\n\n    # Convert RGB to HSV\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n\n    h = int(h)\n    if h < 0:\n        h += 360\n\n    v = cmax\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n    h = h / 6\n    \n    if h < 0:\n        h += 1\n        \n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    \n    return round(h * 360), round(s * 100), round(v * 100)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes RGB color values in the range 0-255 and returns a tuple of\n    the HSV values for that color.\n    \n    H: Hue, 0-360 degrees\n    S: Saturation, 0-100 percent\n    V: Value, 0-100 percent\n    \n    Conversion formula:\n    H = hue\n    S = saturation\n    V = value\n    \n    R = red value / 255\n    G = green value / 255\n    B = blue value / 255\n    \n    Hue = 0\u00b0, 120\u00b0, 240\u00b0,..., 360\u00b0\n    Saturation = 0%, 100%, 0%, 0%, 100%, 0%\n    Value = 0%, 100%, 0%, 0%, 100%, 0%\n    \n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255  # Normalize color values to be between 0 and 1\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0  # Initialize hue to 0\n    \n    if max_val == min_val:\n        h = 0  # This is a gray color\n    elif max_val == r:\n        h = 60 * (((g - b) / (max_val - min_val)))  # 0\u00b0 - 60\u00b0\n    elif max_val == g:\n        h = 60 * (((b - r) / (max_val - min_val)) + 2)  # 60\u00b0 - 120\u00b0\n    else:\n        h = 60 * (((r - g) / (max_val - min_val)) + 4)  # 120\u00b0 - 180\u00b0\n    \n    h = round(h)  # Convert hue to an integer\n    \n    s = 0  # Initialize saturation to 0\n    \n    if max_val == 0:\n        s = 0  # This is a gray color\n    else:\n        s = 100 * ((max_val - min_val) / max_val)  # Saturation is the ratio between maximum and minimum values\n    \n    v = 100 * max_val  # Initialize value to maximum value\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h / 6.0\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b to floats\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Find the maximum value among the three values\n    max_val = max(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_val - min(r, g, b)\n\n    # Calculate the value for hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Scale the hue value to the range 0-1\n    hue *= 60\n\n    # Calculate the saturation and value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Scale the saturation value to the range 0-1\n    saturation *= 100\n\n    # Calculate the value for value\n    value = max_val * 100\n\n    # Return the values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0 # normalize the input values to be between 0 and 1\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / delta) % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h * 60 # convert to degrees\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / max_val\n    \n    v = max_val\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate the maximum and minimum values of the color components\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the distance between the maximum and minimum values of the color components\n    delta = max_val - min_val\n\n    # If the color components are all the same\n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    else:\n        # Calculate the hue value\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n\n        # Check if the hue value is greater than 360\n        if h < 0:\n            h += 360\n\n        # Calculate the saturation value\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        # Calculate the value (brightness) value\n        v = max_val\n\n    # Create a dictionary to store the values of the hsv color components\n    hsv_dict = {\n        'hue': h,\n       'saturation': s,\n        'value': v\n    }\n\n    return hsv_dict"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    product = even_count * odd_count\n    print(\"The product of the even and odd number of the list is:\", product)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            product *= lst[i]\n        else:\n            product *= lst[i] + 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    first_even = -1\n    first_odd = -1\n\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if first_even == -1:\n                first_even = list1[i]\n            else:\n                first_even *= list1[i]\n        else:\n            if first_odd == -1:\n                first_odd = list1[i]\n            else:\n                first_odd *= list1[i]\n\n    if first_even!= -1 and first_odd!= -1:\n        return first_even * first_odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= lst[0]\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables to store even and odd numbers respectively\n    even_num = 0\n    odd_num = 0\n\n    # loop through each element in the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # return the product of even and odd numbers\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and finds the product of first even and odd number of the list.\n    '''\n    even_product = odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count > 0:\n        even_product *= even_count\n    if odd_count > 0:\n        odd_product *= odd_count\n    \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        result *= num\n        \n        if even_count == odd_count:\n            break\n            \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables for even and odd numbers\n    even_sum = 0\n    odd_sum = 0\n    # loop through each number in the list\n    for num in list1:\n        # check if the number is even or odd\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    # calculate the product of even and odd numbers\n    product = even_sum * odd_sum\n    # return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    if even!= 0 and odd!= 0:\n        product = even * odd\n    else:\n        product = 0\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (str): Tuple string in the format (x, y, z).\n\n    Returns:\n        tuple: Integer tuple in the format (int(x), int(y), int(z)).\n    \"\"\"\n    return tuple(map(int, test_str.strip(\"()\").split(\",\")))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by spaces and convert each element to int\n    test_tuple = tuple(map(int, test_str.split()))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    # Split the string by comma and space to get the individual elements\n    t = test_str.split(\", \")\n    # Convert each element to integer and append to a new tuple\n    result = tuple(int(x) for x in t)\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    :param test_str: Tuple string.\n    :return: Integer tuple.\n    \"\"\"\n    int_str = []\n    for char in test_str:\n        if char.isdigit():\n            int_str.append(int(char))\n    return tuple(int_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        try:\n            test_str = tuple(int(x) for x in str(test_str))\n        except ValueError:\n            return None\n    return test_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into its components\n    components = [int(component) for component in test_str.split(',')]\n    # Convert the components to an integer tuple\n    int_tuple = tuple(components)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into list of strings\n    list_str = test_str.split(',')\n    # Initialize an empty list to store the integer values\n    int_list = []\n    # Loop through the list of strings and convert each string to an integer\n    for str_num in list_str:\n        # Convert the string to an integer\n        int_num = int(str_num)\n        # Append the integer value to the integer list\n        int_list.append(int_num)\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Parse the input string as a tuple of strings\n        input_tuple = tuple(test_str.split(','))\n        # Convert the tuple of strings to a tuple of integers\n        output_tuple = tuple(int(x) for x in input_tuple)\n        return output_tuple\n    except ValueError:\n        print(\"Input string is not a valid tuple string.\")\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.strip().split(','))"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        # If the value is greater than all the elements in the list, append it at the end.\n        a.append(x)\n        index = len(a) - 1\n    elif x < a[index]:\n        # If the value is less than the element at the index, insert it before it.\n        a.insert(index, x)\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif i > 0 and a[i-1] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    while i > 0 and a[i-1] == x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Find the right insertion point for a specified value in a sorted list.\n\n    Args:\n        a (list): A sorted list.\n        x (int): A value to find the insertion point for.\n\n    Returns:\n        int: The index of the right insertion point.\n\n    \"\"\"\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\s*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"There are matches!\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"There are no matches.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{3}b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=[^a]*b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba.{3}b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str + str(item) for item in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine both the list and string into a single string\n    combined_str = test_str +'' + test_list\n    \n    # Convert the combined string into a list of characters\n    char_list = list(combined_str)\n    \n    # Create a new tuple from the list of characters\n    new_tuple = tuple(char_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str,) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list[0], test_str.upper(), test_list[1])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n    test_list (list): A list to be added to the new tuple.\n    test_str (str): A string to be added to the new tuple.\n\n    Returns:\n    A new tuple with the test_list and test_str added to it.\n    \"\"\"\n    return (test_list + test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists\n    new_list = test_list + [test_str]\n    # convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Loop through the list\n    for i in range(0, len(nums), 2):\n        # Check if the current even index contains an even number\n        if nums[i] % 2 == 0:\n            # If so, check if the next even index contains an even number\n            if i < len(nums) - 1 and nums[i+1] % 2 == 0:\n                # If yes, return True, otherwise return False\n                if nums[i+1]!= 0:\n                    return True\n            # If no, return False\n            else:\n                return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if i+1 < len(nums) and nums[i] % 2 == 0 and nums[i+1] % 2 == 0:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count = 0\n            for j in range(len(nums)):\n                if i!= j:\n                    if nums[j] % 2 == 0:\n                        count += 1\n                        if count > 1:\n                            return False\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    if isinstance(test_tup, tuple):\n        return [x for tup in test_tup for x in remove_nested(tup)]\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create an empty list to store the non-tuple elements\n    new_list = []\n\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is a tuple, recursively call the function on it\n        if isinstance(element, tuple):\n            new_list.extend(remove_nested(element))\n        else:\n            new_list.append(element)\n\n    # Return the new list with non-tuple elements removed\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Using a loop to check if each element in the tuple is a tuple or not\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            # If the element is a tuple, then it contains another tuple, so recursively call the function\n            test_tup = remove_nested(test_tup[i])\n            # If the element is not a tuple, then remove it from the tuple\n            test_tup = tuple(t for t in test_tup if not isinstance(t, tuple))\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [elem for elem in test_tup if not isinstance(elem, tuple)]\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left - 1 if left!= len(arr) else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    This function takes in a sorted array and an element x and returns the last position of x in the array.\n    '''\n    left, right = 0, len(arr)-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    # Find the last index of x in the array\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # Return the index of x in the array\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right + 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of x.\n    If x is not found in the array, it will return -1.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        print(\"Element not found in array\")\n        return -1\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] == x:\n            return j\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element x. It returns the last position of the element x in the array.\n    \"\"\"\n    # Find the leftmost index of x in the array.\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # x is present at the leftmost occurrence of x in the array.\n            left = mid\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element x in a sorted array arr.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last index of the array respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the result variable to -1 (since we haven't found the element yet)\n    result = -1\n\n    # Initialize a boolean variable to keep track of whether we have found the element or not\n    found = False\n\n    # Loop until we find the element or we have exhausted the array\n    while left <= right and not found:\n        # Calculate the middle index of the current subarray\n        mid = (left + right) // 2\n\n        # If the middle element is the element we are looking for, update the result and the found boolean variable\n        if arr[mid] == x:\n            result = mid\n            found = True\n        # If the middle element is greater than the element we are looking for, update the right pointer to mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        # If the middle element is smaller than the element we are looking for, update the left pointer to mid + 1\n        else:\n            left = mid + 1\n\n    # If the element was not found, return -1\n    if not found:\n        return -1\n\n    # Otherwise, return the result\n    else:\n        return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found.'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match = re.search(r'a.*?b', text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[a-zA-Z]+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^b]*)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    total_sum = 0\n\n    while l <= r:\n        total_sum += l\n        if l % 2!= 0:\n            l += 2\n        else:\n            l += 1\n\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower and upper limit: \")), int(input(\"Enter the upper and lower limit: \"))\n    sum_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_odds += i\n    return sum_odds\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum_of_odds = 0\n    while l <= r:\n        sum_of_odds += l\n        if l % 2!= 0:\n            r = l - 1\n        else:\n            l += 2\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, 10**6\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n\n    # initialize the sum to zero\n    sum_of_odds = 0\n\n    # loop through the range from l to r\n    for i in range(n):\n\n        # check if the number is odd\n        if i % 2!= 0:\n\n            # add the number to the sum\n            sum_of_odds += i\n\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input from user\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n\n    # initialize sum variable to 0\n    total = 0\n\n    # loop through odd numbers between l and r and add them to total\n    for i in range(l, r+1, 2):\n        total += i\n\n    # print total\n    print(\"Sum of all odd numbers between\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd and greater than or equal to 1\n        if i % 2!= 0 and i >= 1:\n            # add the number to the sum\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0  # initialize sum to zero\n    for i in range(l, r+1, 2):\n        s += i  # add each odd number to the sum\n    return s"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary number to integer\n    n = int(n, 2)\n\n    # Calculate left rotation by d bits\n    left_rot = (n << d) | (n >> (32 - d))\n\n    # Convert integer back to binary number\n    left_rot = bin(left_rot)[2:]\n\n    # Pad with leading zeros to 32 bits\n    left_rot = left_rot.zfill(32)\n\n    # Convert binary number back to integer and return\n    return int(left_rot, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the binary representation of n\n    bin_n = bin(n)[2:]\n    # Calculate the number of bits to rotate\n    bits_to_rotate = d % 32\n    # Extract the last bits and shift the first bits to the right\n    last_bits = bin_n[-bits_to_rotate:]\n    shifted_bits = bin_n[:-bits_to_rotate]\n    # Concatenate the last_bits and shifted_bits\n    rotated_bits = last_bits + shifted_bits\n    # Convert the rotated_bits back to an integer\n    rotated_n = int(rotated_bits, 2)\n    # Return the rotated number\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n    # If the binary number is less than d bits long, we need to add zeros to the beginning\n    while len(binary_num) < d:\n        binary_num = \"0\" + binary_num\n    # If the binary number is less than d bits long, we need to add zeros to the end\n    while len(binary_num) < 32:\n        binary_num = binary_num + \"0\"\n    # Perform the left rotation\n    new_num = binary_num[d:] + binary_num[:d]\n    # Convert the new binary number back to an integer\n    new_num = int(new_num, 2)\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary and reverse the binary\n    binary = bin(n)[2:].zfill(32)[::-1]\n    # Rotate left d bits\n    rotated = binary[d:] + binary[:d]\n    # Convert back to decimal and return the result\n    return int(rotated, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    bits = len(bin(n)[2:])\n    num_rotations = d % bits\n    # Calculate the mask to rotate with\n    mask = (1 << bits) - 1\n    # Calculate the rotated number\n    rotated_num = ((n & mask) << num_rotations) | ((n & (~mask)) >> (bits - num_rotations))\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xFFFFFFFF # make sure the number is 32 bit\n    d &= 0x1F # make sure d is a valid rotation amount\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF # rotate and mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    if d == 0:\n        return n\n    if d >= 32:\n        d -= 32\n    return n << d | n >> (32 - d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff # bitwise AND to ensure that the result is 32 bits long"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    n = n & mask\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the number to binary string\n    binary = bin(n)[2:]\n\n    # pad the binary string with zeroes if necessary\n    padded_binary = '0' * d + binary\n\n    # reverse the padded binary string\n    reversed_padded_binary = padded_binary[::-1]\n\n    # convert the reversed padded binary string back to decimal\n    rotated_number = int(reversed_padded_binary, 2)\n\n    return rotated_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the text\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to find all occurrences of whitespace\n    whitespace_regex = re.compile(r'\\s+')\n    # Replace whitespace with empty string\n    return whitespace_regex.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all spaces from the string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, max(x, y, z)+1):\n        if x == i:\n            count += 1\n        if y == i:\n            count += 1\n        if z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if x % i == 0 and y % i == 0 and z % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    # Loop through the three integers and count the number of equal numbers\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(3):\n        for j in range(i+1, 3):\n            if x == y or y == z or x == z:\n                count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(1, x+1):\n        if i == y or i == z or i == x:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n            # find the first element in the increasing subarray\n            j = i + 1\n            while j < n and arr[j] <= arr[i]:\n                j += 1\n            # move the subarray to the left until it is sorted\n            for k in range(i+1, j):\n                arr[k], arr[k-count] = arr[k-count], arr[k]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == n-1 or arr[i] < arr[i+1]:\n            continue\n        else:\n            count += 1\n            arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n            # swap the last i elements with the first i elements\n            for j in range(i):\n                if j == i-1 or arr[n-i-1] < arr[n-i-j-1]:\n                    break\n                else:\n                    arr[n-i-1], arr[n-i-j-1] = arr[n-i-j-1], arr[n-i-1]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = [0] * 100\n\n    # count the occurrences of each element in the array\n    for i in range(n):\n        count[arr[i]] += 1\n\n    # find the minimum value in the count array\n    min_count = min(count)\n\n    # find the maximum value in the count array\n    max_count = max(count)\n\n    # initialize the result array with zeroes\n    res = [0] * n\n\n    # copy the elements from the array to the result array\n    for i in range(n):\n        res[i] = arr[i]\n\n    # perform counting sort\n    for i in range(min_count, max_count + 1):\n        j = 0\n        while j < n and count[i] > 0:\n            k = res[j]\n            if k == i:\n                res[j], res[j + 1] = res[j + 1], res[j]\n                count[i] -= 1\n                j += 2\n            else:\n                j += 1\n\n    # check if the result is sorted\n    if res == sorted(res):\n        # count the number of rotations\n        count = 0\n        for i in range(n - 1):\n            if res[i] > res[i + 1]:\n                count += 1\n\n        return count\n    else:\n        return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i!= 0 and arr[i] < arr[i-1]:\n            j = i - 1\n            while j >= 0 and arr[j] > arr[i]:\n                j -= 1\n            count += (i - j - 1)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n - 1 and arr[j] > arr[j+1]:\n            j += 1\n        if j == n - 1:\n            break\n        else:\n            temp = arr[i]\n            while j > 0 and arr[j] > temp:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j -= 1\n            arr[j], arr[i] = arr[i], arr[j]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # initialize two pointers, one starting at the beginning and the other starting at the end\n    left = 0\n    right = n - 1\n\n    # check if the array is already sorted\n    if arr[left] <= arr[right]:\n        return 0\n\n    # check if the array is already sorted in reverse order\n    if arr[left] >= arr[right]:\n        return n\n\n    # keep swapping the pointers until the pointers meet or cross each other\n    while left < right:\n        if arr[left] < arr[right]:\n            left += 1\n        elif arr[left] > arr[right]:\n            right -= 1\n        else:\n            return n  # found a pair of equal elements, return the number of rotations\n\n    # if the pointers did not cross each other, it means the array is sorted in reverse order, so return n\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Initialize two pointers: left and right\n    left = 0\n    right = n-1\n    # Initialize count to 0\n    count = 0\n    # Loop until the pointers meet\n    while left < right:\n        # If the elements at left and right pointers are not equal, increment count and move the right pointer to the next element\n        if arr[left] > arr[right]:\n            count += 1\n            right -= 1\n        # If the elements at left and right pointers are equal, move the left pointer to the next element\n        else:\n            left += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return 0\n        elif arr[i] > arr[i+1]:\n            return i+1\n    return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return count\n    # check if array is already rotated\n    if arr == arr[::-1]:\n        return 0\n    # check if array is in reverse order\n    if arr == arr[::-1][::-1]:\n        return 0\n    # check if array is already sorted in reverse\n    if arr[::-1] == sorted(arr[::-1]):\n        return 0\n\n    # check if array is already sorted in reverse and rotated\n    if arr[::-1] == sorted(arr[::-1])[::-1]:\n        return 0\n\n    # check if array is already sorted in reverse and in reverse\n    if arr == sorted(arr)[::-1][::-1]:\n        return 0\n\n    # check for any subarrays which are already sorted\n    for i in range(n):\n        for j in range(i + 1, n):\n            # check for unique elements\n            if len(set(arr[i:j+1])) == 1:\n                return count\n            # check for duplicates\n            elif len(set(arr[i:j+1])) > 1:\n                if j - i <= 2:\n                    count += 1\n                else:\n                    count += 2\n                break\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # Find the minimum and maximum elements in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the number of rotations required\n    if min_val!= max_val:\n        count = n - min_val + max_val\n    else:\n        count = 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    sqrt_n = math.sqrt(n)\n    return sqrt_n == int(sqrt_n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a perfect square, False otherwise.\n    \"\"\"\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    # Calculate the square root of the given number\n    sqrt_n = int(n ** 0.5) + 1\n    # Check if the square root is equal to the given number\n    if sqrt_n ** 2 == n:\n        return True\n    # If the above conditions are not met, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check whether a number is a perfect square or not\n    def check_square(num):\n        # Using the binary search method\n        low = 1\n        high = num\n        while low <= high:\n            mid = (low + high) // 2\n            if mid*mid == num:\n                return True\n            elif mid*mid < num:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return False\n    \n    # Checking if the number is a perfect square or not\n    if n == 0:\n        return True\n    elif n == 1 or n == 4 or n == 9 or n == 16:\n        return True\n    elif check_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    It returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid ** 2 == n:\n            return True\n        elif mid ** 2 < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if n <= 0:\n        return False\n    \n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    return sqrt_n ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    # Check if the given number is positive\n    if n <= 0:\n        return False\n    \n    # Calculate the square root of the given number using the math module\n    sqrt_n = int(n ** 0.5)\n    \n    # Check if the square root is an integer\n    if sqrt_n ** 2!= n:\n        return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square or False otherwise.\n    \"\"\"\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    # find the square root of the given number\n    root = int(n ** 0.5)\n    # check if the square root of the given number is an integer\n    if root ** 2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n\n    # Check if the number is negative or not\n    if n < 0:\n        return False\n\n    # Initialize variables\n    i = 0\n    root = 0\n\n    # Find the square root of the number\n    while i <= n:\n        root = (i + n // i) // 2\n        i += 1\n\n        # Check if the square root is equal to the number\n        if root * root == n:\n            return True\n\n    # If the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, else False.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        i = 1\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                return False\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    # Initialize variables to keep track of even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the list of numbers\n    for num in arr:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Check if the product of even and odd numbers is even\n    if even_count * odd_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(arr) > 1:\n        # Initialize a variable to store the product of all numbers in the list\n        product = 1\n        # Iterate over each number in the list\n        for num in arr:\n            # Multiply the current number with the product variable\n            product *= num\n        # Check if the product is even or not\n        if product % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        # If the length of the list is 1, return True because it is always even\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n\n    product = 1\n    \n    # Loop through the list and multiply each element with the product variable\n    for i in arr:\n        product *= i\n        \n    # Check if the product is even or odd using the modulo operator\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a list to store the sums of all the elements in the list of lists\n    sums = []\n    \n    # Loop through each list in the list of lists and calculate the sum of its elements\n    for sublist in lists:\n        total_sum = sum(sublist)\n        sums.append(total_sum)\n    \n    # Find the maximum sum in the sums list and return the corresponding sublist\n    return [sublist for sublist, sum_ in zip(lists, sums) if sum_ == max(sums)][0]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the sum and the list\n    max_sum = 0\n    max_list = []\n\n    # Loop through each list in the input list of lists\n    for sublist in lists:\n        # Initialize variables to store the current sum and the current list\n        current_sum = 0\n        current_list = []\n\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the current element to the current sum\n            current_sum += element\n\n            # Add the current element to the current list\n            current_list.append(element)\n\n            # Check if the current sum is greater than the max sum\n            if current_sum > max_sum:\n                # Update the max sum and max list\n                max_sum = current_sum\n                max_list = current_list\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = 0\n    max_list = []\n    current_sum = 0\n    \n    # iterate through lists and calculate sum and list with highest sum\n    for list in lists:\n        for num in list:\n            current_sum += num\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = list\n    \n    # return max sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Step 1: Calculate the sum of all the lists in the input list\n    total_sum = sum([sum(lst) for lst in lists])\n    \n    # Step 2: Initialize an empty dictionary to store the maximum sum for each sublist\n    max_dict = {}\n    \n    # Step 3: Loop through each sublist in the input list\n    for lst in lists:\n        # Step 3.1: Calculate the sum of the sublist\n        sublist_sum = sum(lst)\n        # Step 3.2: Calculate the difference between the total sum and the sublist sum\n        difference = total_sum - sublist_sum\n        # Step 3.3: Check if the difference is greater than the maximum sum for the sublist\n        if difference > max_dict.get(lst, 0):\n            # Step 3.3.1: Update the maximum sum for the sublist in the dictionary\n            max_dict[lst] = difference\n    \n    # Step 4: Return the list in the dictionary whose sum of elements is the highest\n    result = max(max_dict, key=max_dict.get)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    \n    # loop through each list in the lists list\n    for i in range(len(lists)):\n        # initialize a variable to store the current sum\n        current_sum = 0\n        \n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the current sum\n            current_sum += lists[i][j]\n            \n        # check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum\n            max_sum = current_sum\n            \n    # create an empty list to store the final output\n    final_output = []\n    \n    # loop through each list in the lists list\n    for i in range(len(lists)):\n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the final output list\n            final_output.append(lists[i][j])\n            \n    # append the maximum sum to the final output list\n    final_output.append(max_sum)\n    \n    # return the final output list\n    return final_output"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists[i])):\n            temp_sum = sum(lists[i][:j])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_lists = [lists[i][:j]]\n            elif temp_sum == max_sum:\n                max_lists.append(lists[i][:j])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_lists = []\n\n    for i in range(len(lists)):\n        sum_list = sum(lists[i])\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_lists = [lists[i]]\n        elif sum_list == max_sum:\n            max_lists.append(lists[i])\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    if len(lists) == 0:\n        return []\n\n    # Initialize variables\n    current_sum = 0\n    best_list = lists[0]\n    for num in lists[0]:\n        current_sum += num\n\n    for list_ in lists[1:]:\n        new_sum = current_sum\n        for num in list_:\n            new_sum += num\n\n        if new_sum > current_sum:\n            best_list = list_\n            current_sum = new_sum\n\n    return best_list\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    prev_char = None\n    start = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if prev_char is None or not prev_char.isupper():\n                count += 1\n                if count > max_count:\n                    max_count = count\n                    start = i\n            prev_char = char\n        else:\n            count = 0\n            prev_char = None\n\n    return test_str[start:start+max_count], max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables to store maximum run length and current run length\n    max_run = 0\n    current_run = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n\n        # If the current character is uppercase and the previous character was not uppercase,\n        # update the current run length\n        if char.isupper() and not test_str[current_run-1].isupper():\n            current_run += 1\n\n        # If the current run length is greater than the maximum run length found so far,\n        # update the maximum run length\n        elif current_run > max_run:\n            max_run = current_run\n\n        # Reset the current run length if the current character is not uppercase\n        else:\n            current_run = 0\n\n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start_index = 0\n    current_run = 0\n    is_uppercase = True\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if is_uppercase:\n                current_run += 1\n                if current_run > max_run:\n                    max_run = current_run\n                    start_index = i - current_run + 1\n            else:\n                is_uppercase = True\n                current_run = 0\n        else:\n            if is_uppercase:\n                is_uppercase = False\n                current_run = 0\n\n    if is_uppercase:\n        return (test_str[start_index:start_index+max_run], max_run)\n    else:\n        return (\"No uppercase run found\", 0)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables to store max run of uppercase characters and current run\n    max_run = 0\n    current_run = 0\n\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase, increment current run count\n        if test_str[i].isupper():\n            current_run += 1\n        # if the current character is not uppercase, reset current run count and compare with max run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # if the string ends with a run of uppercase characters, compare with max run\n    if current_run > max_run:\n        max_run = current_run\n\n    # return the maximum run of uppercase characters in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Args:\n        test_str (str): the input string to analyze\n\n    Returns:\n        int: the length of the maximum run of uppercase characters in the input string\n    \"\"\"\n    # Create an empty list to store the current run of uppercase characters\n    current_run = []\n\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the current character is uppercase, append it to the current run\n        if char.isupper():\n            current_run.append(char)\n        # Otherwise, check if the current run is longer than the previous longest run\n        else:\n            if len(current_run) > len(longest_run):\n                longest_run = current_run\n            # Reset the current run to start a new run\n            current_run = []\n\n    # If the current run is longer than the previous longest run, update the longest run\n    if len(current_run) > len(longest_run):\n        longest_run = current_run\n\n    # Return the length of the longest run of uppercase characters in the input string\n    return len(longest_run)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_run = 0\n    start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n            start = i + 1\n            if max_run < count:\n                max_run = count\n            count = 1\n    if max_run < count:\n        max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    current_char = ''\n    for i in range(len(test_str)):\n        current_char = test_str[i]\n        if current_char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i\n        else:\n            count = 0\n    if max_count == 0:\n        return 'No uppercase characters found'\n    else:\n        return 'Maximum run of uppercase characters is: {}'.format(test_str[start:end+1])"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 0\n    start_index = 0\n    curr_run = 0\n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            # if not, update max_run if curr_run is greater\n            if curr_run > max_run:\n                max_run = curr_run\n            # reset curr_run\n            curr_run = 0\n        # update start_index if curr_run is greater than 1\n        if curr_run > 1:\n            start_index = i - curr_run + 1\n    # update max_run if curr_run is greater\n    if curr_run > max_run:\n        max_run = curr_run\n    # return max_run and start_index\n    return max_run, start_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    start = 0\n    max_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_count:\n                max_count = uppercase_count\n                start = i - max_count + 1\n    \n    return test_str[start:start+max_count]\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains only even numbers.\n    \"\"\"\n    if len(nums) == 0:\n        raise ValueError(\"The list is empty.\")\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    raise ValueError(\"The list contains only even numbers.\")"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function finds the first odd number in a given list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n    \"\"\"\n\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(nums) == 0:\n        raise ValueError(\"List is empty\")\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # loop through the tuples and check if the K is in each tuple\n    for tup in test_tup:\n        if K in tup:\n            return True\n    \n    # if the loop completes without finding the K, return False\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # check if K is in the first tuple\n    if K in test_tup[0]:\n        return True\n    else:\n        # check if K is in the second tuple\n        if K in test_tup[1]:\n            return True\n        else:\n            # if K is not found, return False\n            return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples as input and an integer K as an argument. \n    The function checks if the given tuples contain the k or not.\n    '''\n    # check if the tuple contains the element K\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for num in test_tup:\n        if num in K:\n            k_count += 1\n    if k_count == len(K):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element in the second tuple is smaller than its corresponding element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            # If it is, return False\n            return False\n    # If all elements are smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same number of elements.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    # Loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # If the element in the second tuple is smaller than its corresponding element in the first tuple, return True\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    \n    # If all elements in the second tuple are greater than or equal to their corresponding elements in the first tuple, return False\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]