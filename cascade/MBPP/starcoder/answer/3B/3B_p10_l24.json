[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize empty set to store shared elements\n    shared_set = set()\n\n    # Iterate through the first list\n    for item in test_tup1:\n        # Check if the item is in the second list\n        if item in test_tup2:\n            # If it is, add it to the shared set\n            shared_set.add(item)\n\n    # Return the shared set\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if that element is present in the second tuple\n        if element in test_tup2:\n            # If it is, add it to a list of shared elements\n            shared_list.append(element)\n    # Return the list of shared elements\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_set = set1.intersection(set2)\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the sets\n    shared_set = set1.intersection(set2)\n    # convert the shared set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Create an empty set to store the shared elements\n    shared_set = set()\n\n    # Iterate through each element in the first list\n    for element in lst1:\n        # Check if the element is in the second list\n        if element in lst2:\n            # Add the element to the shared set\n            shared_set.add(element)\n\n    # Convert the shared set back to a tuple and return it\n    return tuple(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # sort the lists\n    test_list1.sort()\n    test_list2.sort()\n    \n    # compare the sorted lists\n    shared_elements = []\n    for i in range(len(test_list1)):\n        if test_list1[i] == test_list2[i]:\n            shared_elements.append(test_list1[i])\n            \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set of the unique elements in both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared = set1.intersection(set2)\n    # return the list of shared elements as a tuple\n    return tuple(shared)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check for even numbers\n    if n % 2 == 0:\n        return True\n    \n    # check for odd numbers greater than 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a prime number\n    and False otherwise.\n    '''\n    # Check if the input number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If none of the above conditions are met, the number is a prime number\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is 2\n    if n == 2:\n        return False\n\n    # Check if the number is even\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is odd and greater than 2\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is divisible by any number less than or equal to its square root.\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is equal to 2\n    if n == 2:\n        return False\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is a prime number\n    i = 3\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return True\n        i += 2\n\n    # If the loop completes without finding a divisor, then the number is not prime\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list of numbers to a max heap\n    max_heap = [nums[0]]\n    for i in range(1,n):\n        if nums[i] > max_heap[0]:\n            max_heap = [nums[i]]\n        else:\n            hq.heappushpop(max_heap,nums[i])\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n, and returns a list of the n largest integers in descending order.\n    '''\n    # Convert the list of numbers into a min heap\n    nums_heap = [-num for num in nums]\n    hq.heapify(nums_heap)\n\n    # Extract the n largest numbers from the heap and return them as a list\n    return [-num for num in hq.nlargest(n, nums_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min heap\n    heap = hq.nlargest(n, nums)\n    # Convert the heap into a list of the n largest integers\n    result = [heapq.heappop(heap) for _ in range(n)]\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap to store the n largest integers\n    min_heap = []\n    for num in nums[:n]:\n        heapq.heappush(min_heap, -num)\n    \n    # Remove the smallest element from the heap to add the next element\n    for _ in range(n, len(nums)):\n        smallest = -heapq.heappop(min_heap)\n        heapq.heappush(min_heap, -smallest)\n    \n    # Return the n largest integers in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a min heap\n    heap = hq.nlargest(n, nums)\n    # Convert the heap to a list and return it\n    return [num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min heap\n    hq.heapify(nums)\n    \n    # extract the n largest numbers from the heap and return them as a list\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    \n    # add the remaining numbers to the heap\n    for num in nums[n:]:\n        # if the number is greater than the smallest number in the heap, pop the smallest number from the heap\n        if num > max_heap[0]:\n            hq.heappop(max_heap)\n        # if the number is less than or equal to the smallest number in the heap, add it to the heap\n        else:\n            hq.heappush(max_heap, num)\n    \n    # return the list of n largest numbers from the heap in descending order\n    return [max_heap[0]] + [max_heap[i] for i in range(1, len(max_heap))]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and returns the n largest integers in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function finds the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap\n    hq.heapify(nums)\n\n    # extract n largest integers and return them in a list\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0:\n        x &= x-1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(n):\n    # Check if n is a power of 2 or not\n    if n == 0 or (n & (n-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1:\n        while x & (x - 1)!= 0:\n            x &= x - 1\n        if x == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only or not.\n\n    Args:\n    x: The first number.\n\n    Returns:\n    A boolean value indicating whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    while x & (x - 1)!= 0:\n        x &= (x - 1)\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x ^ (x-1)\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= 0 and ((x & (x-1))!= 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x % 2 == 0:\n        x = x // 2\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # while x is not a power of 2\n        x &= (x-1) # remove the last set bit from x\n    return x == 1 # return True if x is a power of 2, False otherwise"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer as input and returns True if the integer is a power of two and False otherwise.\n\n    Example:\n        is_Power_Of_Two(8)    # Output: True\n        is_Power_Of_Two(10)    # Output: False\n    '''\n\n    if x <= 0:\n        return False\n\n    # Check if the binary representation of x ends with 0 or 1\n    binary_representation = bin(x)[2:]\n    if binary_representation == '0' or binary_representation == '1':\n        return True\n\n    # Check if x is a power of two\n    while x > 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using whitespace as the separator\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words with less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Return the list of words found\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function takes a string as input and returns a list of all words\n    that are at least 4 characters long in the string.\n    \"\"\"\n    # Split the input string into a list of words using whitespace as the separator\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]\n\ntext = \"This is a string with words which are at least 4 characters long.\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words in the string\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    return filtered_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x*x for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num * num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i:i+2] in str[i+2:]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rot = 0\n    \n    for i in range(n):\n        if str[i] == str[(i+n)%n]:\n            continue\n        else:\n            break\n        rot += 1\n    \n    return rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n-1):\n        if str[i]!= str[n-i-1]:\n            min_rotations += 1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    for i in range(n):\n        # Check if the current character can be appended to the end of the string\n        if str[i] == str[n-i-1]:\n            # If yes, find the minimum number of rotations required to get the same string\n            rotations = find_Rotations(str[:n-i])\n            if rotations < min_rotations:\n                min_rotations = rotations + 1\n                \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n <= 1:\n        return 0\n    \n    # create a frequency dictionary for the string\n    freq = {}\n    for i in range(n):\n        freq[str[i]] = freq.get(str[i], 0) + 1\n        \n    # create a list of lists, where each inner list represents a string after one rotation\n    rotations = [[str[0]]]\n    for i in range(1, n):\n        rotations.append([str[i]])\n        for j in range(i):\n            if freq[str[i]] > freq[str[j]]:\n                rotations[i].append(str[i])\n                rotations[i].append(str[j])\n                break\n                \n    # find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for i in range(1, n):\n        if len(set(str)) == len(set(''.join(rotations[i]))):\n            min_rotations = min(min_rotations, rotations[i].count(str[0]))\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function finds the minimum number of rotations required to get the same string.\n\n    Args:\n        str (str): A string that needs to be rotated\n\n    Returns:\n        int: The minimum number of rotations required to get the same string\n    \"\"\"\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Loop through all possible rotations of the string\n    for i in range(len(str)):\n        # Calculate the rotation of the current string\n        rot_str = str[i:] + str[:i]\n\n        # If the rotated string is equal to the original string, update the minimum number of rotations\n        if rot_str == str:\n            min_rotations = min(min_rotations, i)\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert the string to a list of characters\n    str = list(str)\n    \n    # find the length of the string\n    n = len(str)\n    \n    # initialize the minimum number of rotations required to get the same string\n    min_rot = n\n    \n    # loop through all possible rotations of the string\n    for i in range(n):\n        for j in range(n):\n            \n            # check if the two sub-strings are equal after rotation\n            if str[j:j+i] == str[i:i+j]:\n                # if they are, then check if the number of rotations required to get them is less than the current minimum\n                if i < min_rot:\n                    min_rot = i\n                    \n    # return the minimum number of rotations required to get the same string\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to a set to remove any duplicate characters\n    str_set = set(str)\n    \n    # Find the longest substring of the string that has all the characters of the set\n    max_len = 0\n    start_index = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if len(str_set.difference(set(str[i:j+1]))) == 0:\n                if j - i + 1 > max_len:\n                    max_len = j - i + 1\n                    start_index = i\n    \n    # Rotate the string by the minimum number of rotations required to get the same string\n    min_rotations = 0\n    while max_len > 0:\n        str_set = set(str[start_index:start_index+max_len])\n        if len(str_set.difference(set(str))) == 0:\n            break\n        min_rotations += 1\n        start_index = (start_index + max_len) % len(str)\n        max_len -= 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if the string is a palindrome\n    is_palindrome = True\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            is_palindrome = False\n            break\n    if is_palindrome:\n        return 0\n    # check for palindromes of odd length\n    for i in range(n-1):\n        if str[i:i+2] == str[n-1-i:n-1-i+2][::-1]:\n            return 1\n    # check for palindromes of even length\n    for i in range(n-2):\n        if str[i:i+2] == str[n-2-i:n-2-i+2][::-1]:\n            return 2\n    # no palindrome found, there can be a rotation\n    for i in range(n//2):\n        # check for palindromes of odd length\n        for j in range(i, n-i-1):\n            if str[j:j+2] == str[n-j-1:n-j][::-1]:\n                return 1\n        # check for palindromes of even length\n        for j in range(i, n-i-2):\n            if str[j:j+2] == str[n-j-2:n-j][::-1]:\n                return 2\n    return n//2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    for i in range(1, n):\n        if str[:i] == str[i:]:\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #remove first occurrence\n    s = s.replace(ch,'',1)\n    #remove last occurrence\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    if len(s) == 0:\n        return \"\"\n    elif s[0] == ch and s[-1] == ch:\n        return s[1:-1]\n    elif s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    lst = list(s)\n    # Remove the first occurrence of the character from the list\n    lst.remove(ch)\n    # Remove the last occurrence of the character from the list\n    lst.remove(ch)\n    # Convert the list back to string and return it\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if string is empty\n    if len(s) == 0:\n        return s\n\n    # find index of first occurrence of character\n    i = s.find(ch)\n\n    # if character not found, return string as it is\n    if i == -1:\n        return s\n\n    # find index of last occurrence of character\n    j = s.rfind(ch)\n\n    # check if first and last occurrences are the same\n    if i == j:\n        return s[:i] + s[i+len(ch):]\n\n    # check if second last occurrence is the same as first occurrence\n    if i == j-len(ch):\n        return s[:i] + s[i+len(ch):j] + s[j+len(ch):]\n\n    # replace first occurrence with empty string\n    s = s[:i] + s[i+len(ch):j] + s[j+len(ch):]\n\n    # replace second last occurrence with last occurrence\n    if i < len(s)-len(ch):\n        s = s[:i] + s[i+len(ch):-1] + s[-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.index(ch) == 0:\n            return s[1:]\n        elif s.index(ch) == len(s)-1:\n            return s[:-1]\n        else:\n            return s[:s.index(ch)-1] + s[s.index(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    if len(s) > 0:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    while s[0] == ch:\n        s.pop(0)\n    while s[-1] == ch:\n        s.pop()\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function takes a string and a character as inputs and returns the string with the first and last occurrence of the given character removed.\n    '''\n    # check if the character is present in the string \n    if ch in s: \n        # split the string into two parts \n        first_part = s[:s.index(ch)] \n        last_part = s[s.index(ch)+1:] \n        # concatenate the two parts and return the result \n        return first_part + last_part \n    else: \n        return s "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    \n    # Removing last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n        \n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Iterate through the rows of the matrix\n    for i in range(len(M)):\n        # Initialize the minimum sum for the current row\n        min_sum = M[i][i]\n\n        # Iterate through the columns of the current row\n        for j in range(i):\n            # Calculate the sum of the current column and the minimum sum\n            current_sum = M[i][j] + M[j][i]\n\n            # Update the minimum sum if the current sum is smaller\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n        # Iterate through the columns of the current row again and swap the elements if necessary\n        for j in range(i):\n            # Calculate the sum of the current column and the minimum sum\n            current_sum = M[i][j] + M[j][i]\n\n            # Swap the elements if the current sum is smaller\n            if current_sum < min_sum:\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                # swap elements in the i-th row of the ith column with elements in the (j+1)-th row of the (i+1)-th column\n                M[j][i], M[j+1][i] = M[j+1][i], M[j][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the matrix in ascending order based on the sum of its rows\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element of the current row\n        for j in range(len(M[i])):\n            # calculate the sum of the current element and its row index\n            current_sum = M[i][j] + i\n            # loop through each row of the matrix again to find the smallest element\n            # and swap it with the current element\n            for k in range(len(M)):\n                if M[k][j] < M[k][j]:\n                    M[k][j], M[k][j+1] = M[k][j+1], M[k][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of lists to store the sorted matrix\n    sorted_matrix = []\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # initialize a variable to store the sum of the current row\n        current_sum = 0\n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            # add the value of the element to the current_sum variable\n            current_sum += M[i][j]\n        # add the current row to the sorted_matrix list with the sorted row\n        sorted_matrix.append(sorted(M[i], reverse=True))\n        # sort the sorted row in ascending order\n        sorted_matrix[i] = sorted(sorted_matrix[i], reverse=True)\n        # add the sorted row back to the matrix\n        M[i] = sorted_matrix[i]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize the sum of each row with the row number\n    for i in range(n):\n        M[i].append(i)\n    # Sort the matrix based on the sum of rows\n    M.sort(key=lambda x: sum(x))\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize the variables to keep track of the min sum and the corresponding row indices.\n    min_sum = float('inf')\n    row_index = []\n    \n    # Iterate through the matrix and find the row with the minimum sum.\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        if row_sum < min_sum:\n            min_sum = row_sum\n            row_index = [i]\n        elif row_sum == min_sum:\n            row_index.append(i)\n    \n    # Sort the matrix using the row indices and return the sorted matrix.\n    return sorted(M, key=lambda x: [row_index.index(i) for i in range(len(M))])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for row in M:\n        # sort the row in ascending order\n        row.sort()\n    # sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda row: sum(row))"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    print(\"The volume of the triangular prism is\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, base and height of a triangular prism and returns its volume.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h  # Formula for calculating volume of triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the area of the triangle\n    area = 0.5 * l * b\n    \n    # calculate the volume of the prism\n    volume = area * h\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the length, base, and height of a triangular prism as input,\n    and returns the volume of the prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = l * b * h\n\n    # Calculate the volume of the prism\n    volume = area / 3\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l*b \n    volume = area*h \n    return volume "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Calculate the volume of a triangular prism given its length, breadth, and height.\n    \"\"\"\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'([a-z])_([a-z])'\n    underscore_match = re.search(underscore_pattern, text)\n    if underscore_match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<![\\w])([a-z]+)_([a-z]+)(?![\\w])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])([a-z_]+?)(?=[a-z])\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z])_([a-z])')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # remove all non-alpha characters except underscore\n    text = re.sub('[^a-zA-Z_]', '', text)\n    \n    # check if the string contains at least two sequences of lowercase letters joined with an underscore\n    matches = re.findall(r'([a-z])([a-z])_([a-z])', text)\n    return len(matches) >= 2"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters and underscores\n    pattern = r'([a-z][a-z_]*[a-z])'\n    \n    # Use the re.search() method to search for the pattern in the input text\n    result = re.search(pattern, text)\n    \n    # If the pattern is found, return true, otherwise return false\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    match = re.match(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define regular expression pattern\n    pattern = r'(?<=\\w)(?=.*\\w)(?=[a-z])\\w*'\n    \n    # Check if the input string matches the pattern\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the characters in the first string\n    for char in string:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # If it is not present, append it to the result list\n            result.append(char)\n    # Return the resulting string\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_string = list(string)\n    list_without_chars = [char for char in list_string if char not in string]\n    return \"\".join(list_without_chars)\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\n\nresult = str_to_list(string1)\nprint(\"Result:\", result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, no_of_chars=256):\n    \"\"\"\n    This function takes a string and removes the characters present in the second string.\n    If no_of_chars is specified, it will limit the maximum number of characters to be removed.\n    \"\"\"\n    no_of_chars = min(len(string), no_of_chars)\n    return ''.join(char for char in string if char not in no_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    CHAR_FREQ = {chr(i): 0 for i in range(NO_OF_CHARS)}\n    for char in string:\n        CHAR_FREQ[char] += 1\n\n    for char in CHAR_FREQ:\n        if CHAR_FREQ[char] % 2!= 0:\n            return char\n\n    return None"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    char_set = set(string)\n    char_set.remove('\\0')\n    for i in range(NO_OF_CHARS):\n        if chr(i) not in char_set:\n            char_list.remove(chr(i))\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(NO_OF_CHARS):\n        if string_list[i] in string:\n            string_list.remove(string_list[i])\n    return ''.join(string_list)\n\nif __name__ == \"__main__\":\n    string1 = \"Hello world\"\n    string2 = \"lo\"\n    result = str_to_list(string1)\n    print(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n    \n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    # Define the set of characters to remove\n    to_remove = set(string)\n    # Define the list of characters to remove\n    remove_list = [char for char in string if char in to_remove]\n    # Remove the characters from the first string\n    clean_string = string.translate(str.maketrans('', '', remove_list))\n    return clean_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of ASCII values\n    ascii_list = list(string)\n\n    # Initialize an empty list to store the remaining characters\n    new_list = []\n\n    # Loop through the ASCII values list and remove characters which are present in the second string\n    for char in ascii_list:\n        if char not in string:\n            new_list.append(char)\n\n    # Convert the new list of remaining ASCII values back to a string\n    new_string = ''.join(chr(char) for char in new_list)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Remove characters from the first string which are present in the second string\n    for char in string:\n        if char in string:\n            string = string.replace(char, '', 1)\n\n    # Convert the remaining string to a list of integers\n    list_str = list(string)\n\n    # Pad the list with zeros to the required length\n    while len(list_str) < NO_OF_CHARS:\n        list_str.append(0)\n\n    return list_str"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a set to store unique elements in the array\n    unique_nums = set(arraynums)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    for i in range(len(arraynums)):\n        if i == 0 or arraynums[i]!= arraynums[i-1]:\n            if arraynums.count(arraynums[i]) > 1:\n                return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Iterate through the array\n    for num in arraynums:\n        # If the element is not in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n        # If the element is already in the set, return True\n        elif num in unique_nums:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there is any duplicate element in the array,\n    False otherwise. The function first loops through the array, and then compares each element with all the subsequent elements.\n    If any two consecutive elements are equal, then it means there is a duplicate element in the array.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a set to store the unique elements\n    unique_set = set()\n    # Iterate through the array\n    for num in arraynums:\n        # Check if the element is already in the set\n        if num in unique_set:\n            # If the element is already in the set, return True\n            return True\n        # If the element is not in the set, add it to the set\n        unique_set.add(num)\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 0:\n        return \"The number is not a woodball.\"\n    elif x < 0:\n        return \"The number is negative and cannot be a woodball.\"\n    elif x % 2 == 0:\n        return \"The number is even and cannot be a woodball.\"\n    else:\n        return \"The number is a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3 or x == 4 or x == 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x % 4 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a number as input and returns True if it is a woodall number, and False otherwise.\n    A woodall number is a number that has no factors that are divisible by 7.\n    '''\n    for i in range(2, 100):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return \"Woodball\" \n    else: \n        return \"Not a Woodball\" \n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        return True\n    elif x % 3 == 1:\n        return False\n    else:\n        return None"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the list of possible woodball numbers\n    possible_woodballs = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n    # Check if the input number is in the list of possible woodball numbers\n    if x in possible_woodballs:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        if x == 1:\n            return True\n        elif x == 3:\n            return True\n        elif x == 5:\n            return True\n        elif x == 7:\n            return True\n        elif x == 9:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return (reverse % 2 == 0) and (num - reverse == 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    # Reverse the number\n    rev_num = int(str(num)[::-1])\n    # Calculate the reverse of the reverse\n    rev_rev_num = int(str(rev_num)[::-1])\n    # Check if the original number is one less than twice its reverse\n    if num == rev_rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Find the reverse of the given number\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n\n    # Check if the reverse is one less than twice its original value\n    if reverse == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Find the reverse of the given number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    \n    # Check if the reverse is one less than twice the original number\n    if reverse == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num-1) < (2*num)**0.5"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse * 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function checks if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return num == rev_num + 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert it back to an integer\n    rev_num_str = num_str[::-1]\n    rev_num = int(rev_num_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - reverse * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    return num == reverse - 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] ** (len(arr)-i-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the maximum number and its corresponding index\n    max_num = arr[-1]\n    max_index = arr.index(max_num)\n\n    # Initialize the current number and its corresponding index\n    curr_num = max_num\n    curr_index = max_index\n\n    # Iterate through the array from right to left\n    for i in range(max_index-1, -1, -1):\n        # Calculate the next number by adding the current number with the ith digit of the current number\n        next_num = curr_num + arr[i]\n        # Check if the next number is greater than the current maximum number\n        if next_num > max_num:\n            # Update the maximum number and its index\n            max_num = next_num\n            max_index = i\n        # Check if the next number is greater than the current current number\n        elif next_num == max_num:\n            # If the next number is equal to the current maximum number, add the ith digit to the current number\n            curr_num = curr_num + arr[i]\n        # If the next number is less than the current maximum number, move to the next index\n        else:\n            break\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)  # Sort the array in descending order\n    max_num = 0  # Initialize the maximum number to 0\n    i = 0  # Initialize the index to 0\n\n    while i < len(arr):\n        if arr[i] > max_num:\n            max_num = arr[i]  # Update the maximum number if the current number is greater than the current maximum\n        i += 1\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(1, 10**n):\n        temp = i\n        for j in range(n):\n            if temp % 10 < arr[j]:\n                temp //= 10\n            else:\n                break\n        else:\n            max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n\n    for i in range(n):\n        max_num = max(max_num, int(arr[i])*10**(n-i-1))\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the digits.\n    '''\n    max_num = 0\n    for digit in arr:\n        temp_num = 0\n        for i in digit:\n            temp_num += int(i)\n        if temp_num > max_num:\n            max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(1, 10**(n+1)):\n        digits = [int(digit) for digit in str(i)]\n        if all(digit in arr for digit in digits):\n            max_num = max(max_num, i)\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # sort the array in descending order\n    \n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        max_num = max(max_num, int(arr[i]))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += (10**(len(arr)-i-1)) * arr[i]\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if their signs are opposite or False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether two given integers have opposite signs or not.\n    \"\"\"\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    if x >= 0 and y >= 0: \n        return True \n    elif x < 0 and y < 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return \"The first number is greater than zero and the second number is less than zero\"\n    elif x < 0 and y > 0:\n        return \"The first number is less than zero and the second number is greater than zero\"\n    else:\n        return \"The two numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # If both the numbers have the same sign, return False\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # Check if both the numbers have the same sign\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return \"The two numbers have opposite signs\"\n    else:\n        return \"The two numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if their signs are opposite, and False otherwise.\n    \"\"\"\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True \n    else: \n        return False "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(int(i**2 + i**3))\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    a = 1\n    while result <= n:\n        result += a\n        a += 1\n    return result"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 8 * n + 1\n    while a <= b:\n        if a**2 + b**2 == n**2:\n            return True\n        a += 1\n        b += 2\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2) + 8"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        for i in range(1, n+1):\n            if (i*i) + (9*i**2) == n:\n                return i\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += (i * (2 * i - 1))\n    return result\n\nfor i in range(1, 21):\n    print(is_octagonal(i))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        # Find the nth octagonal number using the formula: n*(10^(n/2))\n        n_squared = n**2\n        octagonal_n = n_squared * (10**(n_squared // 2))\n        return octagonal_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number or not.\n    \"\"\"\n    a = int(n**0.5)\n    b = n - 1 - a**2\n    return b >= 0"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 10**n * (n + 1) // 2\n\nn = int(input(\"Enter the value of n: \"))\noctagonal_number = is_octagonal(n)\nprint(\"The nth octagonal number is:\", octagonal_number)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a dictionary to store the count of substrings with the sum of digits equal to their length\n    digit_count_dict = defaultdict(int)\n\n    # Loop through the string and count the number of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum([int(c) for c in s[i:j]]) == j-i:\n                digit_count_dict[j-i] += 1\n\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(digit_count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings_count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings_count[substring] += 1\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_digits(n):\n        '''\n        Compute the sum of digits of a number n.\n        '''\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    n = len(s)\n    result = defaultdict(int)\n\n    for i in range(n):\n        substring = s[i:i+n]\n        substring_sum = sum_digits(int(substring))\n        if substring_sum == n:\n            result[substring] += 1\n\n    return sum(result.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of each substring\n    counts = defaultdict(int)\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring from the string\n            substring = s[i:j]\n            # Calculate the sum of digits in the substring\n            sum_of_digits = sum(int(digit) for digit in substring)\n            # Add 1 to the count for the substring with the sum of digits equal to its length\n            counts[substring] += 1\n\n    # Return the total count of substrings with the sum of digits equal to their length\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of each substring\n    count_dict = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n\n        # Create a substring from the string with the current index\n        substring = s[i:]\n\n        # Check if the sum of digits in the substring is equal to the length of the substring\n        if sum(int(digit) for digit in substring) == len(substring):\n            # Increment the count of the substring in the dictionary\n            count_dict[substring] += 1\n\n    # Return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    def sum_of_digits(s):\n        \"\"\"\n        Return the sum of the digits in the string.\n        \"\"\"\n        return sum(int(digit) for digit in s)\n\n    def count_substrings(s, start, end, prefix_sum):\n        \"\"\"\n        Recursive function to count the number of substrings with the given prefix sum.\n        \"\"\"\n        if start >= end:\n            return 1\n        if s[start] in digits and prefix_sum == sum_of_digits(s[start]):\n            return count_substrings(s, start + 1, end, prefix_sum)\n        return count_substrings(s, start + 1, end, prefix_sum)\n\n    digits = '0123456789'\n    prefix_sum = sum_of_digits(s)\n    return count_substrings(s, 0, len(s) - 1, prefix_sum)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    d = defaultdict(int)\n\n    # Iterate through the string and check for substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring using slice notation\n            substring = s[i:j]\n            # Calculate the sum of digits of the substring\n            digits = sum(int(digit) for digit in substring)\n            # Add the count of the substring to the defaultdict\n            d[digits] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(d.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    dp = defaultdict(int)\n\n    for i in range(n):\n        dp[i] = 1\n\n    for i in range(n-1):\n        dp[i+1] = dp[i] + (s[i+1]!= '0') + (s[i+1]!= '1') + (s[i+1]!= '2')\n\n    return sum(dp.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n    \n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count_dict[j-i] += 1\n    \n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initializing the smallest number to the first element of the list\n    smallest = xs[0]\n    # iterating over the rest of the list\n    for x in xs[1:]:\n        # comparing each element with the current smallest number\n        if x < smallest:\n            # updating the smallest number if a smaller element is found\n            smallest = x\n    # returning the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number as the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for x in xs[1:]:\n        # if current element is smaller than the smallest, update the smallest\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        curr_diff = abs(test_list[i][0]-test_list[i+1][0])\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the maximum difference and the minimum value in the list\n    max_diff = 0\n    min_val = float('inf')\n\n    # Loop through the list and compare each pair of values\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # If the current pair has a smaller value than the minimum value, update the minimum value and the maximum difference\n            if test_list[i][1] < min_val:\n                min_val = test_list[i][1]\n                max_diff = test_list[j][1] - test_list[i][1]\n            # If the current pair has a larger value than the maximum difference and the maximum difference is smaller than the absolute difference between the values, update the maximum difference\n            elif test_list[j][1] - test_list[i][1] < max_diff:\n                max_diff = test_list[j][1] - test_list[i][1]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return \"There are not enough elements in the list.\"\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = max(test_list[i][j], test_list[j][i]) - min(test_list[i][j], test_list[j][i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    This function finds the maximum difference between available pairs in a list.\n    '''\n    if len(test_list) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_dict = {}\n    for subject, marks in subjectmarks:\n        if subject in subject_dict:\n            subject_dict[subject].append(marks)\n        else:\n            subject_dict[subject] = [marks]\n    sorted_marks = sorted(subject_dict.items(), key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    The function takes in a list of tuples and returns the sorted list of tuples.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # check if the list is empty\n    if not data_list:\n        # if the list is empty, return 0\n        return 0\n    # recursively call the function on the tail of the list\n    tail_sum = recursive_list_sum(data_list[1:])\n    # add the head of the list to the tail sum\n    return data_list[0] + tail_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if not isinstance(data_list, list):\n        raise ValueError(\"Input must be a list\")\n\n    if len(data_list) == 0:\n        return 0\n\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n\ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list recursively.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\ndef flatten_and_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements recursively.\n    '''\n    flattened_list = flatten_list(data_list)\n    return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Flatten the list using recursion\n    flattened_list = []\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flattened_list.append(item)\n    flatten(data_list)\n\n    # Sum all the elements in the flattened list\n    total = 0\n    for item in flattened_list:\n        total += item\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n\n    # Flatten the list using recursion\n    flat_list = []\n    for item in data_list:\n        flat_list += recursive_list_sum(item)\n\n    # Sum the flattened list\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return sum(flat_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Returns the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition\n    ways = 0\n    \n    # Loop through all possible partitions of the set of Bell numbers\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            # Check if the current partition is a valid partition\n            if i+j > n:\n                break\n            # Increment the number of ways to partition if the current partition is valid\n            ways += 1\n    \n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the count variable to zero\n    count = 0\n    # loop through all possible values of i up to n\n    for i in range(n+1):\n        # calculate the partition coefficient for the current value of i\n        c = (n+1-i)**2 // i**2\n        # add the number of ways to partition the set of Bell numbers with n-i as the last number\n        count += c\n    # return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 * bell_number(n - 1) + bell_number(n - 2)) % 1000000007"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    def partitions(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return partitions(n-1, k-1) * partitions(n-1, k)\n    return partitions(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n: int\n        The number of Bell numbers to be partitioned.\n\n    Returns:\n    int\n        The number of ways to partition the given set of Bell numbers.\n    \"\"\"\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1] + [0] * (n - 1)\n    partition_ways = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if bell_numbers[i] == bell_numbers[j]:\n                partition_ways[i] += partition_ways[j]\n            else:\n                partition_ways[i] += 1\n\n    return partition_ways[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1]\n    for i in range(2, n):\n        bell.append(bell[-1] + bell[-2])\n    return bell[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition a set of Bell numbers is:\", bell_number(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def helper(n, x, y):\n        if x == 0:\n            return y\n        elif x == 1:\n            return 0 if y >= n else 1\n        else:\n            return helper(n, x - 1, helper(n - x, y - 1, y + 1))\n\n    return helper(n, n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    def partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n % 2 == 0:\n            return (2*partition(n//2)) + 1\n        else:\n            return partition(n//2) + partition(n//2) + 1\n\n    return partition(n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n\n    # Check if the array is monotonic in terms of increasing or decreasing values\n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, n-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic in the forward direction\n    if A[0] < A[1] and A[1] < A[2]:\n        for i in range(2, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    # Check if the array is monotonic in the reverse direction\n    elif A[-1] > A[-2] and A[-2] > A[-3]:\n        for i in range(len(A)-2, 0, -1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n        elif A[i] < A[i + 1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if array is empty\n    if len(A) <= 1:\n        return True\n\n    # check if array is increasing or decreasing\n    for i in range(len(A)-1):\n        if A[i] > A[i+1] and A[i] < 0:\n            return False\n        elif A[i] < A[i+1] and A[i] > 0:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, n-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, n-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if all elements of the array are equal\n    if all(x == A[0] for x in A):\n        return True\n    \n    # Check if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            increasing = False\n        elif A[i] < A[i-1]:\n            increasing = True\n        else:\n            continue\n    \n    return increasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, n-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A monotonic array is one in which the elements either increase or decrease, never remain the same.\n    For example, [1, 2, 3, 4] is monotonic, [5, 4, 3, 2, 1] is not monotonic.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    # Initialize variables to keep track of the first and last elements\n    first = A[0]\n    last = A[-1]\n    # Check if the array is monotonic or not by iterating through the array\n    for i in range(1, len(A) - 1): \n        if A[i] >= first and A[i] <= last: \n            pass # The element is monotonic and will remain the same\n        elif A[i] > first and A[i] < last: \n            return False # The array is not monotonic as it decreases\n        elif A[i] < first and A[i] > last: \n            return False # The array is not monotonic as it increases\n    return True # The array is monotonic as it remains the same or increases or decreases in one direction"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        return s in l\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if s[0] == l[i]:\n            sublist = s[1:]\n            if is_sublist(l[i+1:], sublist):\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists, l and s. It checks whether l is a sublist of s or not.\n    If s is a sublist of l, it returns True, otherwise it returns False.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    lengths = [len(t) for t in Input]\n    return all(len(t) == lengths[0] for t in Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to keep track of the count of tuples with equal length\n    count = 0\n\n    # Loop through the list of tuples and check if all the tuples have the same length\n    for i in Input:\n        if len(i) == len(Input[0]):\n            count += 1\n\n    # Return the count of tuples with equal length\n    return count"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    # Iterate over each tuple in the list\n    for i in range(len(Input)):\n        # Get the length of the current tuple\n        length = len(Input[i])\n        # Check if all other tuples have the same length as the current one\n        for j in range(i+1, len(Input)):\n            if len(Input[j])!= length:\n                # If not, return False\n                return False\n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if gap == 1 or swapped == False:\n            break\n        gap = int(gap/1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a sorting algorithm that improves on the traditional bubble sort algorithm by using a variant of the insertion sort algorithm.\n\n    Algorithm:\n        - Start with a gap of 1\n        - While the gap is greater than 1, do the following steps:\n            - Set the gap to the half of the previous gap\n            - Repeat steps 3-5 until the gap is 1\n            - Perform one step of insertion sort on the array using the gap as the size of the sublist to be sorted.\n        - Repeat steps 3-5 until the gap is 1\n\n    Complexity Analysis:\n        - Time Complexity: O(n^2)\n        - Space Complexity: O(1)\n    '''\n\n    # initialize the gap to the length of the array\n    gap = len(nums)\n\n    # while the gap is greater than 1\n    while gap > 1:\n        # set the gap to the half of the previous gap\n        gap = int(gap / 1.3)\n\n        # perform one step of insertion sort on the array using the gap as the size of the sublist to be sorted\n        for i in range(gap, len(nums)):\n            key = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > key:\n                nums[j + gap] = nums[j]\n                j -= gap\n            nums[j + gap] = key\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                sorted = False\n        if sorted:\n            break\n        gap = (gap // 1.3) // 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    count = 0\n\n    # iterate until the gap is one\n    while gap > 1 or swapped:\n\n        # set the current gap to the minimum between the gap and 1\n        gap = min(gap, 1 + (n // gap))\n\n        # iterate over the array\n        for i in range(n):\n\n            # set a flag to indicate whether a swap occurred\n            swapped = False\n\n            # compare the current element to the previous elements\n            for j in range(i, n-gap, gap):\n                if nums[j] > nums[j+gap]:\n                    # swap the elements\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                    # set the flag to indicate a swap\n                    swapped = True\n\n        # update the gap size and count\n        n -= gap\n        count += 1\n\n    # return the sorted array\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Start with a gap of n\n    gap = n\n\n    # While the gap is greater than 1\n    while gap > 1:\n        # Set gap to half the previous gap\n        gap = int(gap/1.3)\n\n        # Iterate over the list using two pointers\n        i = 0\n        while i < n-gap:\n            # If the current element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # Swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            # If the current element is less than or equal to the next element\n            else:\n                # Move the pointer to the next element\n                i += gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if gap == 1:\n            break\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = gap // 1.3\n        count = 0\n\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n                count += 1\n\n        n = gap\n        gap = int(gap * 1.3)\n        print(\"Count:\", count)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define parameters\n    limit = len(nums) // 2\n    swapped = True\n\n    # iterate until the list is sorted\n    while swapped:\n        swapped = False\n        for i in range(limit):\n            if nums[i] > nums[i+limit]:\n                nums[i], nums[i+limit] = nums[i+limit], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n % 4 == 0:\n        for i in range(1, n//2 + 1):\n            for j in range(1, n//i + 1):\n                if (i**2 - j**2)**2 == n:\n                    return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Initialize variables to store the square of the given number\n    square = n * n\n    \n    # Check if the square is greater than 2^31-1 (to avoid overflow)\n    if square > (1 << 31) - 1:\n        return False\n    \n    # Initialize variables to store the difference between the square and the square of the difference of the given number\n    diff_square = square - (n * (n - 1))\n    \n    # Check if the difference between the square and the square of the difference is less than or equal to the square of the given number\n    if diff_square <= square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return \"The given number is even, so it can't be represented as the difference of two squares.\"\n\n    # Check if the number is divisible by 2\n    elif n % 2 == 1:\n        if n % 8 == 0:\n            return \"The given number can be represented as the difference of two squares.\"\n        else:\n            return \"The given number is not divisible by 2 and not divisible by 8, so it can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert the given number to a string and sort the characters in decreasing order\n    num_str = str(n)\n    num_str_sorted = sorted(num_str, reverse=True)\n    \n    # check if the first digit of the sorted string is 0 or 1\n    if num_str_sorted[0] == '0' or num_str_sorted[0] == '1':\n        return False\n    \n    # calculate the difference between the square of the second digit of the sorted string and the square of the first digit of the sorted string\n    diff = int(num_str_sorted[1]) * int(num_str_sorted[1]) - int(num_str_sorted[0]) * int(num_str_sorted[0])\n    \n    # check if the difference is a square number\n    if int(diff ** 0.5) ** 2 == diff:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n\n    # check if the square of the number is divisible by 4\n    square = n*n\n    if square % 4!= 0:\n        return \"The number cannot be represented as the difference of two squares\"\n\n    # check if the sum of the squares of the digits is divisible by 4\n    sum_of_squares = 0\n    while n > 0:\n        sum_of_squares += n % 10*n % 10\n        n //= 10\n    if sum_of_squares % 4!= 0:\n        return \"The number cannot be represented as the difference of two squares\"\n\n    # check if the difference of the squares is a square\n    square_diff = (square - sum_of_squares) / 4\n    if square_diff*square_diff % 4!= 0:\n        return \"The number cannot be represented as the difference of two squares\"\n\n    return \"The number can be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Function to find square of a number\n    def square(num):\n        return num * num\n\n    # Function to find the difference of two squares\n    def difference(a, b):\n        return square(a) - square(b)\n\n    # Taking input from the user\n    num = int(input(\"Enter a number: \"))\n\n    # Checking if the number can be represented as the difference of two squares or not\n    if difference(num, square(num)) == 0:\n        print(\"The given number is a square!\")\n    else:\n        print(\"The given number is not a square.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the number is a perfect square\n    if n == int(n ** 0.5) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # First, find the square root of the given number\n    sqrt_n = round(n ** 0.5)\n\n    # Check if the square of the square root of the given number is less than or equal to the given number\n    if n < sqrt_n ** 2:\n        return True\n    else:\n        # Check if the square of the square root of the given number is greater than the given number\n        if (sqrt_n ** 2) - n > 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # loop through all possible squares\n    for i in range(1, int(n**0.5)+1):\n        # check if i*i is equal to n\n        if i*i == n:\n            # loop through all possible squares\n            for j in range(1, int(n**0.5)+1):\n                # check if j*j is equal to n-i*i\n                if j*j == n-i*i:\n                    return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # if n is less than 0, n^2 can be represented as the difference of two squares\n    if n < 0:\n        return False\n    # else, n^2 can be represented as the difference of two squares\n    else:\n        # finding the square root of n\n        root = n ** 0.5\n        # finding the square of root\n        sqr_root = root ** 2\n        # subtracting the square of root from n\n        difference = n - sqr_root\n        # checking whether difference is an integer or not\n        if difference.is_integer():\n            return True\n        # if difference is not an integer, it can be represented as the difference of two squares\n        else:\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Define a function that checks whether a certain color is present in the list of colors\n    def color_present(color, colors_list):\n        for c in colors_list:\n            if c == color:\n                return True\n        return False\n    \n    # Iterate over the colors in the patterns array and check whether they match the colors in the colors array\n    for pattern in patterns:\n        if not all(color_present(c, colors) for c in pattern):\n            return False\n    \n    # If we have made it this far, the patterns match\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    def check_pattern(pattern, colors):\n        '''\n        Helper function to check a single pattern.\n        '''\n        for color in pattern:\n            if color not in colors:\n                return False\n        return True\n\n    for pattern in patterns:\n        if not check_pattern(pattern, colors):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = [colors[0]]\n    for i in range(len(colors)-1):\n        if patterns[i] == sequence[-1]:\n            sequence.append(colors[i+1])\n        else:\n            return False\n    if sequence[-1] in colors:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if colors.count(pattern) == 0:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists: colors and patterns.\n    \n    colors: A list of colors.\n    patterns: A list of lists. Each inner list represents a pattern, where the first element represents the first color in the pattern, the second element represents the second color in the pattern, and so on.\n    \n    The function returns True if all patterns in patterns follow the sequence given in the colors list.\n    '''\n    \n    # Initialize variables to keep track of the current color and pattern\n    current_color = 0\n    current_pattern = patterns[0]\n    \n    # Loop through the colors list and compare it with the current pattern\n    for color in colors:\n        if color == current_pattern[current_color]:\n            current_color += 1\n        else:\n            current_color = 0\n            current_pattern = patterns[current_color]\n        \n        # Check if we've found a pattern that doesn't follow the sequence\n        if current_color == len(current_pattern):\n            return False\n    \n    # If we've looped through the entire colors list and haven't found any patterns that don't follow the sequence,\n    # then all patterns follow the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    patterns_dict = {}\n    for i in range(n):\n        if colors[i] in patterns_dict:\n            if patterns_dict[colors[i]] == patterns[i]:\n                continue\n            else:\n                return False\n        else:\n            patterns_dict[colors[i]] = patterns[i]\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = [0]*len(colors)\n    for i in range(len(colors)):\n        sequence[colors.index(patterns[i])] += 1\n    for pattern in patterns:\n        if sequence.count(pattern) == 0:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tup in test_list:\n        divisible_tuple = True\n        for num in tup:\n            if num % K!= 0:\n                divisible_tuple = False\n                break\n        if divisible_tuple:\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty set to store the tuples\n    found_tuples = set()\n\n    # Iterate over all tuples in the test_list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the set of found tuples\n            found_tuples.add(tup)\n\n    # Return the set of found tuples\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        count = 0\n        for num in tuple:\n            if num % K == 0:\n                count += 1\n        if count == len(tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find all tuples in test_list that contain all elements divisible by K.\n    \"\"\"\n    result = set()\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.add(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # create a set to store the indices of the elements in the tuple that are divisible by K\n    divisible_indices = set()\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # check if all the elements in the tuple are divisible by K\n        if all(test_list[i][j] % K == 0 for j in range(len(test_list[i]))):\n            # add the index of the tuple to the set\n            divisible_indices.add(i)\n    # return the list of indices for the divisible tuples\n    return list(divisible_indices)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # create a set to store unique combinations\n    unique_combinations = set()\n\n    # loop through each tuple in the list\n    for i, tuple1 in enumerate(test_list):\n        # loop through each tuple in the list after the current one\n        for j, tuple2 in enumerate(test_list[i+1:], i+1):\n            # check if all elements in the current tuple are divisible by K\n            if all(num % K == 0 for num in tuple1):\n                # add the combination to the set of unique combinations\n                unique_combinations.add(tuple1 + tuple2)\n\n    # return the unique combinations\n    return unique_combinations"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes an integer as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            print(\"The word '{}' has an odd length.\".format(word))\n        else:\n            print(\"The word '{}' has an even length.\".format(word))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(f\"{word} has an odd length.\")\n        else:\n            print(f\"{word} has an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split(): \n        if len(word) % 2 == 1: \n            print(f\"{word} is odd length.\") \n        else: \n            print(f\"{word} is even length.\") "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # iterate over each word and check its length\n    for word in words:\n        # if the length of the word is odd, return True\n        if len(word) % 2!= 0:\n            return True\n    # if no word has an odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even length.\")\n        else:\n            print(f\"{word} is odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into a list of words\n    for word in words: # Loop through each word\n        if len(word) % 2 == 0: # Check if the length of the word is even\n            return False # If it is even, return False\n    return True # If all words are odd, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split() # split the sentence into words\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of the word is odd or even\n            return True # return True if the length is odd\n    return False # return False if the length is even"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n * (n + 1) * (n + 2) * (n + 3) / 6)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def binomial(n, k):\n        \"\"\"\n        Helper function to compute binomial coefficient.\n        \"\"\"\n        if k > n // 2:\n            k = n - k\n        if k < 0:\n            k = 0\n        if n < 0:\n            n = 0\n        ans = 1\n        for i in range(k, n + 1):\n            ans *= i\n            ans //= i - k\n        return ans\n\n    def phi(n):\n        \"\"\"\n        Helper function to compute Euler's totient function phi.\n        \"\"\"\n        if n <= 1:\n            return n\n        return n * phi(n - 1)\n\n    def get_n_tetrahedra(n):\n        \"\"\"\n        Helper function to generate all n-tetrahedra.\n        \"\"\"\n        tetrahedra = []\n        for i in range(n):\n            num = i + 1\n            denom = n - i\n            phi_num = phi(num)\n            phi_denom = phi(denom)\n            for j in range(num // 2):\n                k = binomial(num, j)\n                l = binomial(num, num // 2 - j - 1)\n                for h in range(denom // 2):\n                    for t in range(l):\n                        tetrahedra.append((num // 2 + h + 1, num // 2 - h, num // 2 + l - t - 1, num // 2 - l + t))\n        return tetrahedra\n\n    tetrahedra = get_n_tetrahedra(n)\n    return sum(tetrahedra)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n    # Iterate through n and calculate each term\n    for i in range(1, n+1):\n        a, b, c, d = b, c, a + b + c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    \n    # Initialize variables for the first three terms\n    term1 = 1\n    term2 = 3\n    term3 = 6\n    \n    # Calculate the nth term of the tetrahedral number sequence\n    for i in range(1, n+1):\n        # Calculate the nth term\n        term = term1 + term2 + term3\n        # Update the terms for the next iteration\n        term1 = term2\n        term2 = term3\n        term3 = term\n        # Print the nth term\n        print(term)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Find the sum of the first n natural numbers\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n\n    # Divide the sum by n (since n^3 = 1/3 * (1+2+3+...+n))\n    tetrahedral_sum = sum / n\n\n    # Return the integer part of the tetrahedral sum\n    return int(tetrahedral_sum)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Args:\n        n (int): The index of the tetrahedral number to find.\n\n    Returns:\n        int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n - 1) * (n - 2) * (n - 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    if n < 1 or n > 30: \n        return \"Invalid input.\"\n\n    # Initialize variables\n    a, b, c, d = 1, 1, 2, 0\n\n    # Calculate the nth tetrahedral number\n    for i in range(1, n+1): \n        a, b, c, d = b, c, d+a, b-c+d\n\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n\n    # Calculate the nth tetrahedral number\n    for _ in range(1, n + 1):\n        a = a + 1\n        b = b + a\n        c = 2 * b - a - c\n\n    return c"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def binomial(n, r):\n        \"\"\"\n        Compute nCr using a recursive formula.\n        \"\"\"\n        if r == 0 or r == n:\n            return 1\n        else:\n            return n * binomial(n - 1, r - 1) / r\n    \n    return 4 * binomial(n, 2) - 2 * binomial(n, 3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables to store the result\n    result = 0\n    n_plus_1 = 0\n    n_plus_2 = 0\n    n_plus_3 = 0\n    n_plus_4 = 0\n\n    # Calculate the tetrahedral number\n    for i in range(1, n+1):\n        result += (i*n_plus_4 - i*n_plus_3 + i*n_plus_2 - i*n_plus_1 + 1)\n        n_plus_4 += 1\n        n_plus_3 += 1\n        n_plus_2 += 1\n        n_plus_1 += 1\n\n    return result"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r.\n    '''\n    # Use the formula for the volume of a sphere: V = 4/3 * pi * r^3\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # calculate the volume of the sphere\n    V = (4/3) * math.pi * (r**3)\n    \n    # return the volume\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = ord('a')\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char) - ascii_val\n        if sum_ascii > 25:\n            sum_ascii -= 26\n    char_val = sum_ascii % 26\n    char_ascii = ascii_val + char_val\n    return chr(char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the characters\n    char_str = ''\n    # Loop over each character in the string\n    for char in strr:\n        # Convert the character to its ASCII code using ord() function\n        ascii_code = ord(char)\n        # Add the ASCII code modulo 26 to the char_str string\n        char_str += chr(((ascii_code + 26) % 26) + ord('a'))\n    # Return the final character string\n    return char_str"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Loop through each character of the input string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value modulo 26 to the result string\n        result += chr((ascii_value % 26) + 65)\n    # Return the final result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the sum of ASCII values of characters as 0\n    ascii_sum = 0\n    \n    # iterate through each character in the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        ascii_sum += ord(char)\n    \n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char + 13) % 26)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr(((sum % 26) + 65) % 91)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    result = (sum % 26) + 65\n    return chr(result)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 0\n    while count < n:\n        if count < n // 2:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n        count += 1\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence with the first two numbers of the sequence\n    sequence = [1, 1]\n\n    # Loop through each number in the sequence\n    for i in range(2, n):\n        # Check if the number is a new number in the sequence\n        is_new = True\n        for j in range(len(sequence)):\n            # If the sum of the current number and the next number in the sequence is equal to the current number, it is a new number\n            if sequence[j] + sequence[j+1] == sequence[j]:\n                is_new = False\n                break\n        # If the number is a new number, append it to the sequence\n        if is_new:\n            sequence.append(sequence[-1] + 1)\n        else:\n            # If the number is not a new number, check if the last number in the sequence is equal to the current number\n            if sequence[-1] == sequence[j]:\n                # If it is, remove the last number in the sequence and decrement the next number in the sequence\n                sequence.pop()\n                sequence[-1] -= 1\n                break\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] + sequence[i-4])\n        else:\n            sequence.append(sequence[i-2] - sequence[i-4])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    sequence[0] = 1\n    for i in range(1, n):\n        sequence.append(2*sequence[i-1] + sequence[i-2])\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = [0, 1]\n    for i in range(n-1):\n        b = []\n        for j in range(len(a)-1):\n            if a[j] == 0:\n                b.append(0)\n            else:\n                b.append(a[j-1] + a[j+1])\n        a = b + [0]\n    return a[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n\nif __name__ == \"__main__\":\n    r = float(input(\"Enter the radius of the sphere: \"))\n    surface_area = surfacearea_sphere(r)\n    print(\"The surface area of the sphere is:\", surface_area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # formula for surface area of a sphere: (4/3) * pi * r^3\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    return s"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*n*n - 2*n + 1\n    else:\n        return 2*n*n - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define centered hexagonal numbers\n    hexagonal_numbers = [1]\n    for i in range(1, n+1):\n        hexagonal_numbers.append(hexagonal_numbers[i-1]*2 + 1)\n\n    # Return the nth centered hexagonal number\n    return hexagonal_numbers[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the side length of a centered hexagonal number\n    # based on the given value of n\n    side_length = (3 * n - 1) // 2\n\n    # Iterate through the number of times to move to the left and right\n    for i in range(n):\n        # Move to the left by half the side length of the hexagon\n        # and then move to the right by half the side length of the hexagon\n        # until we reach the starting position of the hexagon\n        for j in range(side_length // 2):\n            hexagon_start = j\n            for k in range(side_length // 2):\n                hexagon_end = side_length - k - 1\n                # If we have reached the starting position of the hexagon,\n                # print the value of the hexagon\n                if j == 0 and k == 0:\n                    print(hexagon_start, end=' ')\n                # If we have reached the ending position of the hexagon,\n                # print the value of the hexagon\n                elif j == side_length // 2 and k == side_length // 2:\n                    print(hexagon_end, end=' ')\n                # If we have reached a position between the starting and ending positions,\n                # print the average of the two values to create a centered hexagon\n                else:\n                    print((hexagon_start + hexagon_end) // 2, end=' ')"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n\n    The centered hexagonal number is the n-th centered triangular number,\n    where the triangular number is defined as:\n\n    T(n) = n(n+1) / 2\n\n    The centered triangular number is the n-th triangular number that is centered\n    around the origin. For example, T(5) = 5(6)/2 = 15/2.\n\n    The centered hexagonal number is the n-th centered hexagonal number, which is\n    defined as:\n\n    H(n) = 2n(n+1)(2n+1)/6\n\n    The centered hexagonal number is defined as the n-th centered triangular number.\n    We can use the formula T(n) = n(n+1) / 2 to find the corresponding centered\n    triangular number and then use the formula H(n) = 2n(n+1)(2n+1)/6 to find\n    the n-th centered hexagonal number.\n\n    Therefore, the function centered_hexagonal_number takes an integer n as input\n    and returns the n-th centered hexagonal number.\n    '''\n\n    # Define the centered triangular number T(n)\n    def centered_triangular_number(n):\n        return n * (n + 1) / 2\n\n    # Find the n-th centered triangular number T(n)\n    T = centered_triangular_number(n)\n\n    # Define the centered hexagonal number H(n)\n    def centered_hexagonal_number(n):\n        return 2 * n * (n + 1) * (2 * n + 1) / 6\n\n    # Find the n-th centered hexagonal number H(n)\n    H = centered_hexagonal_number(n)\n\n    # Return the n-th centered hexagonal number\n    return H"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 1\n    first_centered_hexagonal_number = 1\n    \n    # Find the nth centered hexagonal number\n    for i in range(1, n+1):\n        centered_hexagonal_number = (i * (2*i - 1)) // 2 + 1\n        \n        # Check if the centered hexagonal number is prime\n        is_prime = True\n        for j in range(2, int(centered_hexagonal_number**0.5)+1):\n            if centered_hexagonal_number % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Get the number of rows\n    rows = n // 2\n    \n    # Calculate the first and last numbers in each row\n    first_row = 1\n    last_row = rows * rows * 3\n    \n    # Calculate the number of centres in each row\n    centres_per_row = rows - 1\n    \n    # Calculate the number of centres in total\n    centres_total = 2 * rows - 2\n    \n    # Calculate the number of numbers to skip before the first centre\n    skip_before_centres = (centres_total + 1) // 2\n    \n    # Calculate the number of numbers to skip after the last centre\n    skip_after_centres = centres_total - skip_before_centres\n    \n    # Calculate the number of centres in each hexagon\n    centres_per_hexagon = 2 * (rows - 1)\n    \n    # Calculate the number of centres in total\n    centres_total = centres_per_row + centres_per_hexagon\n    \n    # Calculate the number of numbers to skip before the first hexagon\n    skip_before_hexagons = (centres_total + 1) // 2\n    \n    # Calculate the number of numbers to skip after the last hexagon\n    skip_after_hexagons = centres_total - skip_before_hexagons\n    \n    # Calculate the number of numbers to skip before the first number in a row\n    skip_before_numbers = (centres_total + 1) // 2 - skip_before_centres - skip_before_hexagons\n    \n    # Calculate the number of numbers to skip after the last number in a row\n    skip_after_numbers = centres_total - skip_before_numbers - skip_after_centres - skip_after_hexagons\n    \n    # Calculate the total number of numbers in the row\n    total_numbers_row = (rows + 1) * rows // 2\n    \n    # Calculate the total number of numbers in the total\n    total_numbers_total = total_numbers_row + centres_total\n    \n    # Calculate the number of centres in each row with centres_per_row centres and a gap of centres_per_hexagon\n    centres_per_row_with_hexagon_gap = centres_per_row + centres_per_hexagon\n    \n    # Calculate the number of centres in total with centres_per_row_with_hexagon_gap centres and a gap of centres_per_hexagon\n    centres_total_with_hexagon_gap = centres_per_row_with_hexagon_gap + centres_per_hexagon\n    \n    # Calculate the total number of numbers in the row with centres_per_row centres and a gap of centres_per_hexagon\n    total_numbers_row_with_hexagon_gap = (rows + 1) * rows // 2 + centres_per_row_with_hexagon_gap\n    \n    # Calculate the total number of numbers in the total with centres_per_row_with_hexagon_gap centres and a gap of centres_per_hexagon\n    total_numbers_total_with_hexagon_gap = total_numbers_row_with_hexagon_gap + centres_total_with_hexagon_gap\n    \n    # Calculate the total number of centres in the row with centres_per_row centres and a gap of centres_per_hexagon\n    total_centres_row_with_hexagon_gap = (rows + 1) * rows // 2 - skip_before_numbers - skip_after_numbers\n    \n    # Calculate the total number of centres in the total with centres_per_row_with_hexagon_gap centres and a gap of centres_per_hexagon\n    total_centres_total_with_hexagon_gap = total_centres_row_with_hexagon_gap + total_numbers_total_with_hexagon_gap\n    \n    # Calculate the position of the centre in the row\n    position_centre = (total_numbers_total_with_hexagon_gap + 1) // 2 - total_centres_total_with_hexagon_gap + 1\n    \n    # Calculate the position of the number to skip before the first centre\n    position_skip_before_centres = (total_numbers_total_with_hexagon_gap + 1) // 2 - total_centres_total_with_hexagon_gap + 1 -"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the number of hexagons required to fill the circle\n    num_hexagons = n * (n + 1) / 2\n    # Calculate the distance from the center to each hexagon\n    hexagon_distance = 1 / 2 * (1 + 5 ** 0.5)\n    # Find the number of squares required to fit the hexagons\n    num_squares = num_hexagons / 6\n    # Find the number of centers required to fill the square\n    num_centers = num_squares ** 2\n    # Calculate the distance from the center of each square to the center of the circle\n    square_distance = 1 / 2 * (1 + 5 ** 0.5)\n    # Calculate the distance from the center of the square to each center\n    center_distance = square_distance ** 2\n    # Return the total distance\n    return num_centers * center_distance"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    while b < n:\n        c = a + b + 1\n        if c % 6 == 0:\n            return c\n        else:\n            a += 1\n            b = a + 1\n    return 0"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    \n    # Iterate n times\n    for i in range(n):\n        # Calculate the centered hexagonal number\n        centered_hexagonal = a + b + c\n        \n        # Update variables\n        a = b\n        b = c\n        c = centered_hexagonal\n    \n    # Return the centered hexagonal number\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    # Define a lookup table of centered hexagonal numbers\n    centered_hex = [2*i**2 + 2*(i-1)**2 + 1 for i in range(1, n+1)]\n    return centered_hex[n-1]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and returns a new dictionary that contains all the \n    key-value pairs from all three dictionaries.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = {}\n\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged data\n    merged_data = {}\n    \n    # iterate over the keys in the three dictionaries\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # check if the key is already present in the merged_data dictionary\n        if key in merged_data.keys():\n            # if it is, add the corresponding values from the three dictionaries\n            merged_data[key] = (dict1.get(key, 0) + dict2.get(key, 0) + dict3.get(key, 0))\n        # if the key is not present in the merged_data dictionary, add it as is\n        else:\n            merged_data[key] = (dict1.get(key, 0) + dict2.get(key, 0) + dict3.get(key, 0))\n            \n    return merged_data"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1: First dictionary.\n        dict2: Second dictionary.\n        dict3: Third dictionary.\n\n    Returns:\n        Merged dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n    \n    # Iterate through each element in the list\n    for item in lst:\n        # Increment the count of the current element in the dictionary\n        freq_dict[item] += 1\n    \n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function returns a dictionary containing the frequency of all the elements in the given list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # otherwise, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return dict(freq_dict)\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Use binary search to find the closest smaller number to N\n    low = 1\n    high = N\n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid < N:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest = N\n    closest = N\n    for i in range(N, 0, -1):\n        if abs(i - N) < abs(closest - N):\n            closest = i\n        if i < smallest:\n            smallest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    for num in range(1, N):\n        if abs(num - N) < abs(num - min_num):\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for num in range(N, 0, -1):\n        if abs(num - N) < abs(smallest - N):\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for num in range(N):\n        diff = N - num\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in N:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return min(min_num, max_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n\n    # Finding the closest smaller number than N\n    if N % 2 == 0:\n        n = N - 1\n    else:\n        n = N - 2\n\n    # Checking the difference between n and N\n    diff = abs(N - n)\n\n    # Looping until the difference between n and N is less than 2\n    while diff > 2:\n        if n % 2 == 0:\n            n -= 1\n        else:\n            n -= 2\n        diff = abs(N - n)\n\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize variables\n    min_diff = float('inf')\n    closest_num = 0\n    i = 1\n\n    # Loop through the numbers from 1 to n-1\n    while i <= N-1:\n        # Check if the current number is smaller than the previous closest smaller number\n        if i < closest_num:\n            # If it is, calculate the difference between the current number and the closest smaller number\n            diff = abs(i - closest_num)\n            # If the difference is smaller than the current minimum difference, update the minimum difference and closest smaller number\n            if diff < min_diff:\n                min_diff = diff\n                closest_num = i\n        i += 1\n\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    for i in range(1, N+1):\n        nums.append(i)\n    closest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] - N < nums[i-1] - N:\n            closest = nums[i]\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    diff = float('inf')\n    for i in range(N):\n        if i <= N/2:\n            closest = i\n        else:\n            closest = N - i\n        if abs(closest - N) < diff:\n            diff = abs(closest - N)\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    word = \"\"\n    \n    # loop through the list and check for the length of the longest word\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            word = i\n    \n    # return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n    else:\n        if sub_str in str1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the string is present in the list of string values\n    if str1 in str1_list:\n        # Find the index of the substring in the list\n        index = str1_list.index(str1)\n        # Check if the substring is present in the string at the given index\n        if sub_str in str1_list[index]:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if item in sub_str:\n                return True\n        return False\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is positive and odd\n    if n > 0 and n % 2 == 1:\n        # Iterate from 1 to n-1\n        for i in range(1, n):\n            # If the sum of the squares of i and j is less than or equal to n, then i and j are undulating\n            if i + i + i + j + j + j + j + j + j + j + j <= n:\n                return True\n            j += 1\n    # If the number is not positive or odd, then it cannot be undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    # If the number is divisible by 3, it is undulating\n    if n % 3 == 0:\n        return True\n    # If the number is not divisible by 3, it is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even number is not undulating.\"\n    else:\n        return \"Odd number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2 or n == 3 or n == 4 or n == 5:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0:\n        return \"The number is 0, which is not undulating.\"\n    elif n == 1:\n        return \"The number is 1, which is undulating.\"\n    elif n % 2 == 0:\n        return \"The number is even, which is undulating.\"\n    else:\n        return \"The number is odd, which is not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Define a function to check whether the given number is odd or even\n    def is_odd_or_even(num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # Define a function to check whether the given number is divisible by 3 or not\n    def is_divisible_by_3(num):\n        if num % 3 == 0:\n            return True\n        else:\n            return False\n    \n    # Check if the number is divisible by 3 and odd, then check if the number is greater than 5\n    if is_divisible_by_3(n) and is_odd_or_even(n) and n > 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters, a and b, and returns the value of a to the power b.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # create a list of tuples with the first value as the index and the second value as the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the first tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for index, value in enumerate(test_list):\n        if value[1] < min_value:\n            min_value = value[1]\n            min_index = index\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second value using the itemgetter function from the operator module\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    \n    # Initialize the length of the smallest list to be the length of the longest list\n    min_len = len(max(lst, key=len))\n    \n    # Loop through the list of lists and find the length of the smallest list\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    \n    # Return the length of the smallest list\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < length:\n            length = len(lst[i])\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < smallest_len:\n            smallest_len = len(lst[i])\n    return smallest_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize min_length variable to the length of the first list in the list\n    min_length = len(lst[0])\n    # Iterate through each list in the list\n    for i in range(len(lst)):\n        # Check if the current list has a smaller length\n        if len(lst[i]) < min_length:\n            # If it does, update min_length to the length of the current list\n            min_length = len(lst[i])\n    # Return min_length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(24)) # Output: 6"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    A divisor of a number n is a positive integer, less than n, that divides evenly into n without leaving a remainder.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Traverse through each element in the flattened list\n    for elem in list1:\n\n        # If the element is not a list, add it to the dictionary\n        if not isinstance(elem, list):\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n\n        # If the element is a list, recursively call the function on it\n        else:\n            freq_dict.update(frequency_lists(elem))\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list of lists\n    for sublist in list1:\n        # loop through each element in the current sublist\n        for element in sublist:\n            # if the element is already in the dictionary, increment its value by 1\n            if element in freq_dict:\n                freq_dict[element] += 1\n            # if the element is not in the dictionary, add it with a value of 1\n            else:\n                freq_dict[element] = 1\n    \n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for item in list1:\n        # Check if the element is already in the dictionary\n        if item in freq_dict:\n            # If it is, increment the frequency count by 1\n            freq_dict[item] += 1\n        else:\n            # If it's not, add it to the dictionary with a frequency count of 1\n            freq_dict[item] = 1\n    \n    # Return the dictionary containing the frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # Check if the element is already in the dictionary\n        if elem in freq_dict:\n            # Increment its frequency\n            freq_dict[elem] += 1\n        else:\n            # Add the element to the dictionary with frequency 1\n            freq_dict[elem] = 1\n\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a list of lists to a single list.\n    \"\"\"\n    return [item for sublist in lst for item in sublist]\n\ndef frequency_lists(lst):\n    \"\"\"\n    Find the frequency of each element in a flattened list of lists.\n    \"\"\"\n    freq = {}\n    for item in flatten_list(lst):\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for elem in list1:\n        # Check if the current element is in the dictionary\n        if elem in freq_dict:\n            # If it is, increment its count by 1\n            freq_dict[elem] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            freq_dict[elem] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for item in flattened_list:\n        # If the element is already in the dictionary, increment its frequency\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        # If the element is not in the dictionary, add it with frequency 1\n        else:\n            frequency_dict[item] = 1\n\n    # Return the frequency dictionary\n    return frequency_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    result /= len(numbers)  \n    return result  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) * 1.0 / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        result = ''\n        while n > 0:\n            remainder = n % 2\n            result = str(remainder) + result\n            n //= 2\n        return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty list to store the binary digits\n    binary_list = []\n\n    # iterate through each digit in the decimal number\n    while n > 0:\n        # find the remainder of n divided by 2 and append it to the binary list\n        binary_list.append(n % 2)\n        # divide n by 2 and round down to the nearest integer\n        n = n // 2\n\n    # convert the binary list to a string and remove leading zeros\n    binary_str = ''.join(str(digit) for digit in binary_list)\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty list to store the binary equivalent of the decimal number\n    binary = []\n    \n    # loop until n becomes zero\n    while n > 0:\n        # append the remainder of n divided by 2 to the binary list\n        binary.append(n % 2)\n        # divide n by 2 and discard the remainder\n        n //= 2\n        \n    # convert the binary list to a string and return it\n    return ''.join(map(str, binary))"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using a loop\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0: \n        binary_string = str(n % 2) + binary_string \n        n //= 2 \n    return binary_string[::-1] "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a given number is palindrome or not.\n    \"\"\"\n    if num < 0:\n        num = abs(num)\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a given number.\n    \"\"\"\n    if not is_palindrome(num):\n        num = num + 1\n        while not is_palindrome(num):\n            num += 1\n    return num\n\ndef main():\n    \"\"\"\n    Main function to test the next_smallest_palindrome function.\n    \"\"\"\n    num = int(sys.argv[1])\n    print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    max_num = 10**9\n    min_num = -10**9 - 1\n    while True:\n        mid_num = (max_num + min_num) // 2\n        if is_palindrome(mid_num) and mid_num > num:\n            min_num = mid_num\n        elif is_palindrome(mid_num) and mid_num < num:\n            max_num = mid_num - 1\n        else:\n            return mid_num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**(len(str(num))-1)\n    for i in range(max_num, 1, -1):\n        palindrome = str(i)[::-1]\n        if int(palindrome) > num:\n            return int(palindrome)\n    return None\n\nif __name__ == '__main__':\n    input_num = int(input(\"Enter a number: \"))\n    next_palindrome = next_smallest_palindrome(input_num)\n    if next_palindrome is not None:\n        print(\"The next smallest palindrome of\", input_num, \"is:\", next_palindrome)\n    else:\n        print(\"There is no next smallest palindrome.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n    # Check if the reversed number is odd\n    if reversed_num % 2 == 1:\n        # If odd, increment the last digit\n        last_digit = int(reversed_str[-1])\n        reversed_str = reversed_str[:-1] + str(last_digit + 1)\n    else:\n        # If even, divide by 2 and add 1\n        reversed_num = reversed_num // 2\n        reversed_str = str(reversed_num + 1)\n    # Convert the reversed string back to an integer\n    next_num = int(reversed_str)\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input number is odd\n    if num % 2 == 1:\n        # Check for the smallest palindrome that can be created with even digits\n        while True:\n            if num % 10 == 0:\n                num = num // 10 * 10\n            else:\n                num = num // 10 * 10 + 10\n        return num\n\n    # Check for the smallest palindrome that can be created with odd digits\n    while True:\n        if num % 10 == 0:\n            num = num // 10 * 10 + 1\n        else:\n            num = num // 10 * 10\n        return num\n\n\nif __name__ == \"__main__\":\n    input_num = int(input(\"Enter a number: \"))\n    print(\"The next smallest palindrome of\", input_num, \"is:\", next_smallest_palindrome(input_num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 10\n    else:\n        str_num = str(num)\n        int_num = int(str_num)\n        for i in range(9, 0, -1):\n            if int_num - i <= 0:\n                return int(str_num[:-1] + str(i)) + 1\n            else:\n                continue"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # initialize a variable to store the next smallest palindrome\n    next_palindrome = num - 1\n    \n    # loop through each digit in the number\n    for digit in str(num):\n        # loop through each digit in the next smallest palindrome\n        for second_digit in str(next_palindrome):\n            # check if the current digit is greater than the second digit\n            if int(digit) > int(second_digit):\n                # update the next smallest palindrome\n                next_palindrome = int(digit) * 10 + int(second_digit)\n                break\n        else:\n            # if the loop completes without finding a greater digit, increase the next smallest palindrome by 1\n            next_palindrome += 1\n    \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is negative or zero, or if it's already a palindrome\n    if num < 0 or num == 0 or num == 1:\n        return None\n    elif num == 2 or num == 3:\n        return 4\n    elif num == 4:\n        return 5\n\n    # Initialize variables\n    prev_palindrome = num - 1\n    is_palindrome = True\n    next_palindrome = None\n\n    # Check for palindromes by comparing with the previous one\n    while is_palindrome:\n        prev_palindrome -= 1\n        is_palindrome = True\n        for digit in str(prev_palindrome):\n            if int(digit)!= int(prev_palindrome):\n                is_palindrome = False\n                break\n        if is_palindrome:\n            next_palindrome = prev_palindrome + 1\n            break\n\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    reverse_num = 0\n    while num!= 0:\n        digit = num % 10\n        reverse_num = reverse_num * 10 + digit\n        num //= 10\n    \n    if reverse_num < 0:\n        reverse_num = abs(reverse_num)\n    else:\n        reverse_num = -reverse_num\n    \n    return reverse_num + 1\n\nif __name__ == \"__main__\":\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome:\", next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # if it is, return the number\n        return num\n    else:\n        # if not, find the next smallest palindrome using a for loop\n        for i in range(num+1, 10**9):\n            if str(i)[::-1] == str(num)[::-1]:\n                return i\n        # if no palindrome is found, the function will raise a ValueError\n        raise ValueError(\"There is no next smallest palindrome for the specified number.\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    \n    left, right = 1, len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid+1:], k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr or k < 1 or k > len(arr):\n        return None\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        pivot = left + (right - left) // 2\n\n        if pivot == k - 1:\n            return arr[pivot]\n        elif pivot < k - 1:\n            left = pivot + 1\n        else:\n            right = pivot - 1\n\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input: k is greater than the array length\")\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        for i in range(1, n):\n            if k == 1 + i:\n                return arr[i - 1]\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError('Invalid index')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n or k < 1:\n        return \"Invalid input\"\n    \n    # Initialize two pointers at the beginning and end of the array\n    left = 1\n    right = n\n    \n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is the kth element, return it\n        if arr[mid-1] == k:\n            return mid\n        # If the middle element is greater than k, update the left pointer\n        elif arr[mid-1] > k:\n            right = mid - 1\n        # If the middle element is less than k, update the right pointer\n        else:\n            left = mid + 1\n    \n    return \"Element not found\""
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i-1].isupper():\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Capitalize the first letter of each word\n    new_word_list = []\n    for word in word_list:\n        new_word = word.capitalize()\n        new_word_list.append(new_word)\n    # Join the words into a new string with camel case\n    camel_case_word = ''.join(new_word_list)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    # Define a dictionary to map snake case to camel case\n    snake_map = {'snake_case': 'camelCase'}\n\n    # Check if the input word is in snake case\n    if word.islower():\n        # Split the input word into words using spaces as delimiters\n        words = word.split()\n        # Join the words back into a single string with the first letter capitalized and the rest in lowercase\n        camel_case_word = words[0].capitalize() + ''.join(word[i:].lower() for i in range(1, len(word)))\n        # Return the camel case word from the dictionary if it exists, otherwise return the original word\n        return snake_map.get(camel_case_word, camel_case_word)\n    else:\n        # If the input word is already camel case, simply return it\n        return word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words back together into a single string\n    camel_case_word = ''.join(words)\n    \n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = ''\n    for i in range(len(word)):\n        if i > 0 and word[i-1]!= '_':\n            camel_case_word += word[i].upper()\n        else:\n            camel_case_word += word[i]\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Parameters:\n    word (str): A snake case string.\n\n    Returns:\n    str: A camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() if i == 0 else x.lower() for i, x in enumerate(word.split('_')))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = ''\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_word += word.capitalize()\n        else:\n            camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Args:\n        word (str): A string in snake case.\n\n    Returns:\n        str: A string in camel case.\n    \"\"\"\n    # Split the word into words based on underscores\n    words = word.split('_')\n\n    # Convert the first word to uppercase and join with the rest of the words\n    camel_case = words[0].upper() + ''.join(words[1:])\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    camel_case_word = parts[0]\n    for i in range(1, len(parts)):\n        camel_case_word += parts[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base cases:\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n\n    # Check if the current number is even:\n    if n % 2 == 0:\n        return eulerian_num(n//2, m) + eulerian_num(n//2, m+1)\n    else:\n        return eulerian_num(n//2, m) + eulerian_num(n//2+1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the Eulerian number to 0\n    eulerian = 0\n    \n    # Loop through all possible values of n and m\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # If n is a multiple of 2, or m is a multiple of 2, or both, then the Eulerian number increases\n            if i % 2 == 0 or j % 2 == 0 or i % 2 == j % 2:\n                eulerian += 1\n    \n    # Return the final value of the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Define the function for the Eulerian number\n    def eulerian_num(n, m):\n        return (n * (n - 1)) // 2 + m\n    \n    # Calculate the Eulerian number\n    result = eulerian_num(n, m)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): Number of vertices.\n    m (int): Number of edges.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    \"\"\"\n\n    # Initialize the adjacency list\n    adj_list = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Add edges to the adjacency list\n    for i in range(1, m + 1):\n        u, v = map(int, input().split())\n        adj_list[u][v] = 1\n        adj_list[v][u] = 1\n\n    # Initialize the degree sequence\n    degree_seq = [0] * (n + 1)\n    for i in range(1, n + 1):\n        degree_seq[i] = sum(adj_list[i])\n\n    # Compute the Eulerian number using the degree sequence\n    eulerian_num = 0\n    for i in range(1, n + 1):\n        eulerian_num += degree_seq[i] * (n - degree_seq[i])\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a counter variable to keep track of the number of pairs \n    # formed\n    pairs_made = 0\n    # Initialize a list to keep track of the pairs formed so far\n    pairs_list = []\n    # Initialize a variable to keep track of the current number \n    current_num = 1\n    # Initialize a variable to keep track of the maximum value of current_num \n    max_num = 0\n    \n    # Check if the number of rows is even or odd\n    if n % 2 == 0:\n        # If it's even, iterate through each row starting from 1\n        for row in range(1, n+1, 2):\n            # Check if the current number is greater than the maximum value so far\n            if current_num > max_num:\n                # If it is, update the maximum value\n                max_num = current_num\n            # Check if there are any pairs that have been formed so far that the current row forms a pair with\n            for pair in pairs_list:\n                # If there is, increment the counter\n                if row - pair[0] == pair[1] - row:\n                    pairs_made += 1\n            # Add the current row to the list of pairs formed so far\n            pairs_list.append((row, row))\n            # Increment the counter for the number of pairs made so far\n            pairs_made += 1\n            # Update the current number\n            current_num += 1\n    else:\n        # If it's odd, iterate through each row starting from 1\n        for row in range(1, n+1, 2):\n            # Check if the current number is greater than the maximum value so far\n            if current_num > max_num:\n                # If it is, update the maximum value\n                max_num = current_num\n            # Check if there are any pairs that have been formed so far that the current row forms a pair with\n            for pair in pairs_list:\n                # If there is, increment the counter\n                if row - pair[0] == pair[1] - row:\n                    pairs_made += 1\n            # Add the current row to the list of pairs formed so far\n            pairs_list.append((row, row))\n            # Increment the counter for the number of pairs made so far\n            pairs_made += 1\n            # Update the current number\n            current_num += 1\n    \n    # Return the value of pairs_made as the Eulerian number a(n, m)\n    return pairs_made"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    # Calculate the sum of numbers from 1 to n * m\n    total = (n * m) // 2\n    \n    # Initialize the Eulerian number a(n, m) to 1\n    a = 1\n    \n    # Find the maximum integer k such that a(n, m) = total\n    for k in range(2, m + 1):\n        if (n * m) % k == 0 and a * (n // k) * k == total:\n            break\n    \n    # Return a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = []\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if j % 2 == 0:\n                a.append(i)\n            else:\n                a.append(0)\n    a.append(n)\n    for i in range(m):\n        a = a[1:] + [a[0]] + a[1:]\n    return a[n]\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\nprint(\"Eulerian number a(n, m) is:\", eulerian_num(n, m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 1\n    a = 1\n    \n    # Check if n and m are even\n    if n % 2 == 0 and m % 2 == 0:\n        # Compute the Eulerian number using the formula\n        a = (n * m) // 2\n    else:\n        # Check if n is even\n        if n % 2 == 0:\n            # Compute the Eulerian number using the formula\n            a = n * (n + 1) // 2\n        else:\n            # Compute the Eulerian number using the formula\n            a = (n + 1) * (n + 1) // 2\n        \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0]*(m+1) for i in range(n+1)]\n    a[0][0] = 1\n    a[1][0] = 2\n    a[1][1] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if j >= a[i-1][j]:\n                a[i][j] = a[i-1][j] + a[i-1][j-a[i-1][j]]\n            else:\n                a[i][j] = a[i-1][j]\n    \n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [1] * (n + 1)\n    a[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            if i % 2 == 0 and j % 2 == 0:\n                a[i] += a[j - 2]\n            elif i % 2!= 0 and j % 2!= 0:\n                a[i] += a[j - 1]\n    return a[-1]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if type(item) == bool and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    # Return the updated tuples\n    return test_list, test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Join the lists into a single string separated by commas\n    combined_list = ', '.join(map(str, test_list))\n\n    # Split the tuple into a list and append the new list to the end\n    new_list = list(test_tup) + [combined_list.split(', ')]\n\n    # Join the updated list into a string separated by commas\n    new_list = ', '.join(map(str, new_list))\n\n    # Return the updated tuple\n    return tuple(new_list.split(', '))"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    # append the lists to the tuples\n    test_tup.extend(test_list)\n    # convert the tuples back to tuples\n    test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to tuple\n    test_tuple = tuple(test_list)\n    \n    # Append the list to the tuple\n    test_tup += test_tuple\n    \n    # Print the modified tuple\n    print(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the lists and tuples using the + operator\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two lists into a single list\n    merged_list = num1 + num2\n    # Merge the merged list with the third list\n    final_list = merged_list + num3\n    # Sort the final list in ascending order\n    final_list.sort()\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merges three sorted lists into a single sorted list.\n\n    :param num1: First sorted list.\n    :param num2: Second sorted list.\n    :param num3: Third sorted list.\n    :return: The merged sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                merged_list.append(num1[i])\n                i += 1\n            else:\n                merged_list.append(num3[k])\n                k += 1\n        elif num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # use heapq to merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smallest lists\n    merged_list = num1 + num2\n    heapq.heapify(merged_list)\n\n    # Merge the third list with the merged list\n    for item in num3:\n        if item > merged_list[0]:\n            heapq.heappop(merged_list)\n            heapq.heappush(merged_list, item)\n        else:\n            heapq.heappush(merged_list, item)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists into a single sorted list\n    merged = sorted(num1 + num2)\n\n    # Merge the merged list with the third list\n    return sorted(merged + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min-heap of the three input lists\n    min_heap = [heapq.heappushpop(num1), heapq.heappushpop(num2), heapq.heappushpop(num3)]\n    # Initialize an empty list to store the merged list\n    merged_list = []\n    # Iterate until the min-heap is empty\n    while min_heap:\n        # Append the minimum element from the min-heap to the merged list\n        merged_list.append(heapq.heappop(min_heap))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a priority queue to store the three numbers in the list\n    pq = []\n    # Convert the input lists to heapq objects\n    heapq.heapify(num1)\n    heapq.heappush(pq, -heapq.heappushpop(num2))\n    heapq.heappush(pq, -heapq.heappushpop(num3))\n    # Merge the heapq objects into a single sorted list\n    result = []\n    while pq:\n        result.append(heapq.heappop(pq))\n    # Convert the result list back to a tuple\n    return tuple(result)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into one list\n    combined_list = num1 + num2 + num3\n    \n    # Use heapq to sort the combined list\n    heapq.heapify(combined_list)\n    \n    # Convert the sorted list back into a Python list\n    sorted_list = [heapq.heappop(combined_list) for i in range(len(combined_list))]\n    \n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    def rotate(s, n):\n        return s[n:] + s[:n]\n\n    s = rotate(s, n)\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    # initialize variables\n    count = 0\n    temp = s\n    \n    # rotate the binary string n times\n    for i in range(n):\n        temp = temp[-1] + temp[:-1]\n    \n    # count the number of odd numbers in the rotated string\n    for char in temp:\n        if int(char) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # initialize variables\n    count = 0\n    curr_num = 0\n    num = 0\n    \n    # loop n times\n    for i in range(n):\n        # convert s into an integer\n        num = int(s, 2)\n        \n        # if the binary representation of num has an odd number of digits, increment count\n        if len(bin(num)[2:]) % 2!= 0:\n            count += 1\n        \n        # rotate the binary representation of num by 1 bit to the left\n        curr_num = num >> 1\n        \n        # convert the rotated num back into a string\n        s = bin(curr_num)[2:].zfill(len(bin(curr_num)[2:]))\n        \n    # return count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Given a binary string s and a positive integer n, find the number of odd numbers that can be obtained by rotating the string n times.\n    \"\"\"\n    # Initialize the result\n    result = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Initialize the current binary string\n        curr_str = s\n\n        # Initialize a counter for odd numbers\n        odd_count = 0\n\n        # Iterate over the characters of the string\n        for j in range(len(s)):\n            # Determine the new bit value based on the parity of the current character\n            new_bit = '0' if int(s[j]) % 2 == 0 else '1'\n\n            # Update the current character based on the new bit value\n            curr_str = curr_str[:j] + new_bit + curr_str[j+1:]\n\n            # Count the number of odd characters\n            if int(new_bit) % 2 == 1:\n                odd_count += 1\n\n        # Update the result with the new count\n        result += odd_count\n\n    # Return the result\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n): \n        if s[-1] % 2!= 0: \n            count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # convert binary string to list of characters\n    s = list(s)\n    \n    # initialize count to zero\n    count = 0\n    \n    # loop through each character in the binary string\n    for i in range(len(s)):\n        \n        # if the character is odd, increment the count\n        if s[i] % 2 == 1:\n            count += 1\n        \n        # rotate the binary string n times to the left\n        for j in range(n):\n            s.append(s.pop(0))\n    \n    # return the count of odd numbers after rotation\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of characters\n    s_list = list(s)\n    # Initialize the count of odd numbers\n    count = 0\n    # Loop n times\n    for _ in range(n):\n        # Reverse the list\n        s_list.reverse()\n        # Convert the reversed list back to a string\n        s_new = ''.join(s_list)\n        # Initialize a counter for odd numbers\n        count_odd = 0\n        # Loop through the characters in the string\n        for char in s_new:\n            # If the character is odd, increment the counter\n            if char == '1':\n                count_odd += 1\n        # If the count of odd numbers is greater than zero, increment the count\n        if count_odd > 0:\n            count += 1\n        # Reverse the list again\n        s_list.reverse()\n    # Return the final count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of bits\n    bits = [int(bit) for bit in s]\n\n    # Perform the rotation n times\n    for _ in range(n):\n        bits.append(bits.pop(0))\n\n    # Count the number of odd bits\n    count = 0\n    for bit in bits:\n        if bit % 2 == 1:\n            count += 1\n\n    # Return the count of odd bits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    def rotate_binary(s):\n        return s[-1] + s[:-1]\n\n    count = 0\n    s = rotate_binary(s)\n\n    for _ in range(n):\n        s = rotate_binary(s)\n        if s[0] % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Check if the input is a valid binary string\n    if not s.isdecimal() or s == '' or len(s) > 10**18:\n        return \"Invalid input\"\n    \n    # Initialize variables\n    num = 0\n    rot = s\n    \n    # Rotate the binary string the given number of times\n    for i in range(n):\n        rot = ''.join(reversed(rot))\n    \n    # Iterate through the binary string and count odd values\n    for i in range(len(rot)):\n        if int(rot[i]) % 2 == 1:\n            num += 1\n    \n    return num"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    common_elements.remove(nestedlist[i][j][k])\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_set = set(nestedlist[i]) & set(nestedlist[j])\n            if len(common_set) > 0:\n                common_elements.append((nestedlist[i], nestedlist[j], list(common_set)))\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # loop through each nested list\n    for lst in nestedlist:\n        # convert the list to set to get unique elements\n        lst = set(lst)\n        # loop through the set of unique elements in the list\n        for elem in lst:\n            # check if the element is present in any of the nested lists\n            for lst2 in nestedlist:\n                if elem in lst2:\n                    # print the element\n                    print(elem)\n                    # exit the inner loop\n                    break\n            # exit the outer loop\n            if elem in lst:\n                break\n    # return nothing\n    return None"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define a dictionary to store the count of each element in the nested list\n    count_dict = {}\n    for item in nestedlist:\n        for subitem in item:\n            if subitem in count_dict:\n                count_dict[subitem] += 1\n            else:\n                count_dict[subitem] = 1\n    \n    # Define a function to check if two elements are common\n    def is_common(a, b):\n        return a in count_dict and b in count_dict and count_dict[a] == count_dict[b]\n    \n    # Define a function to find the common elements\n    def find_common(nestedlist):\n        common_elements = []\n        for item in nestedlist:\n            for subitem in item:\n                if is_common(subitem, common_elements):\n                    common_elements.append(subitem)\n        return common_elements\n    \n    # Find the common elements in the nested list\n    common_elements = find_common(nestedlist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    # Loop through each element of the nested list\n    for element in nestedlist:\n        # Check if the element is also present in the set of common elements\n        if element in common:\n            common.remove(element)\n        else:\n            common.add(element)\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set for storing the common elements in the nested lists\n    common = set()\n    \n    # iterate through the nested lists\n    for lst in nestedlist:\n        # iterate through the elements of each list\n        for elem in lst:\n            # check if the element is already in the common set\n            if elem in common:\n                # if yes, remove it from the current list to avoid duplicates\n                lst.remove(elem)\n                # if no, add the element to the common set\n                else:\n                    common.add(elem)\n                    \n    # return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # convert nested list to set for faster searching\n    list_set = set(nestedlist)\n\n    # create an empty list to store common elements\n    common = []\n\n    # loop through each element in the outer list\n    for outer in nestedlist:\n        # check if the current element is in the set of common elements\n        if outer in list_set:\n            # check if the current element is already in the common list\n            if outer not in common:\n                # if not, add it to the common list\n                common.append(outer)\n\n    # return the common list\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            common.add(nestedlist[i][j])\n\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n    return list(common_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # check if the string starts with a digit\n    if text[0].isdigit():\n        # check if the string contains only digits or underscores\n        for char in text:\n            if not char.isdigit() and char!= '_':\n                return False\n        # if all the characters are digits or underscores, it's an integer\n        return True\n    else:\n        # if the string doesn't start with a digit, it's not an integer\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.keys())!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i.items()) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list so we can iterate through it\n    nums = list(nums)\n    # initialize a variable to keep track of the sum of the integers\n    total = 0\n    # iterate through the list of integers\n    for num in nums:\n        # add the integer to the total sum\n        total += num\n    # return the total sum as the result\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the integers in the tuple\n    total = 0\n    \n    # Loop through each integer in the tuple\n    for num in nums:\n        # Check if the integer is positive\n        if num > 0:\n            # Add the integer to the total\n            total += num\n        else:\n            # If the integer is negative, raise a ValueError\n            raise ValueError('All integers in the tuple must be positive.')\n    \n    # Return the total sum of the integers in the tuple\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through the tuple and add each element to the sum\n    for num in nums:\n        total += num\n        \n    # Return the total sum as an integer\n    return int(total)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                try:\n                    float(str(item).strip())\n                except ValueError:\n                    continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for element in item:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                item.remove(element)\n                item.append(float(element))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for convertible in item:\n            if isinstance(convertible, (int, float, complex)):\n                new_item = convertible\n                new_list.append(new_item)\n            else:\n                try:\n                    new_item = float(convertible)\n                    new_list.append(new_item)\n                except ValueError:\n                    pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and '.' in test_list[i][j]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float_item = float(item)\n                result.append(float_item)\n            except ValueError:\n                continue\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                test_list.remove(item)\n                test_list.append(float(item))\n            except ValueError:\n                pass\n        elif isinstance(item, (int, float)):\n            pass\n        else:\n            raise TypeError(\"Invalid element in the list\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, complex]:\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                result.append(float(element))\n            except ValueError:\n                result.append(element)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                return False\n    return True"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    # Convert the string to a list of strings, using the split() method with a space character as the delimiter\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and converts it to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list of words to a list of lists of characters\n    list_of_lists = [list(word) for word in words]\n    # Return the list of lists of characters\n    return list_of_lists"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[-1]:\n        return search(arr[1:-1])\n    else:\n        mid = len(arr) // 2\n        left = search(arr[:mid])\n        right = search(arr[mid:])\n        return left if left!= right else arr[mid]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate over the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate over the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the array and check if the frequency of each element is 1\n    for num in arr:\n        if freq[num] == 1:\n            # If the frequency is 1, return the element\n            return num\n\n    # If no element is found with frequency 1, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable to store the frequency of each element\n    count = [0] * (arr[-1] + 1)\n    \n    # Traverse the sorted array and update the count variable\n    for i in arr:\n        count[i] += 1\n    \n    # Traverse the count variable again and find the element that appears only once\n    for i in range(len(count)):\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    \n    # Initialize variables for hash table and count\n    hash_table = [False] * (n+1)\n    count = 0\n    \n    # Iterate through the array and check if each element is present only once\n    for i in range(n):\n        if hash_table[arr[i]] == False:\n            hash_table[arr[i]] = True\n            count += 1\n        \n        # If the count is 1, return the element\n        if count == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize count variable to store count of occurrences of the element\n    count = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the element has not been encountered yet, increment count\n        if arr[i]!= arr[i-1]:\n            count += 1\n    \n    # Check if the count is equal to 1, indicating that the element appears only once\n    if count == 1:\n        return arr[0]\n    # If the count is greater than 1, then the element appears more than once in the array\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        if arr[mid] == search(left):\n            return arr[mid]\n        elif arr[mid] == search(right):\n            return arr[mid]\n        elif arr[mid] > search(left):\n            return search(right)\n        else:\n            return search(left)"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i, count = 0, 0\n    while i < len(arr):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n            i += 1\n        else:\n            arr.pop(i)\n            count -= 1\n            i -= 1\n    return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        raise ValueError(\"The array contains duplicates.\")\n\n    for i in range(len(arr)):\n        if arr[i]!= arr[i + 1]:\n            return arr[i]\n\n    raise ValueError(\"The array does not contain any unique elements.\")"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Find the element that appears only once in the array\n    for i in freq:\n        if freq[i] == 1:\n            return i\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and finds the maximum absolute product between numbers in pairs of tuples.\n\n    Parameters:\n    lst (list): A list of tuples containing numbers.\n\n    Returns:\n    float: The maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n\n    max_product = 0\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            abs_product = abs(lst[i][0] * lst[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][0]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][0])\n            if abs(list1[i][1] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    max_product_tuple = []\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if abs(product) > max_abs_product:\n                max_abs_product = abs(product)\n                max_product_tuple = [list1[i], list1[j]]\n    \n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    temp_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n                temp_product = list1[i][0]*list1[j][1]\n            elif abs(list1[i][0]*list1[j][1]) == max_product:\n                temp_product += list1[i][0]*list1[j][1]\n    return max_product, temp_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n    \n    # Iterate over each pair of tuples in the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the numbers in the pair of tuples\n            product = abs(list1[i][0] * list1[j][1])\n            \n            # Update the maximum product if the current product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n        elif i == sum_of_proper_divisors(sum_of_proper_divisors(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_pairs = set()\n    for i in range(2, limit+1):\n        if i == sum_of_divisors(i):\n            amicable_pairs.add(i)\n    return sum(amicable_pairs)\n\ndef sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all the positive integers less than or equal to the square root of n.\n    \"\"\"\n    s = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            s += i\n            if i!= n/i:\n                s += n/i\n    return s"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # check if the input is a positive integer\n    if not isinstance(limit, int) or limit <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # create a list to store the sum of amicable numbers\n    amicable_sums = []\n\n    # loop through all numbers from 1 to the limit (inclusive)\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if i == sum(j for j in range(1, int(i**0.5) + 1) if i % j == 0):\n            # add the sum to the list of amicable sums\n            amicable_sums.append(i)\n\n    # return the sum of the list of amicable sums\n    return sum(amicable_sums)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num!= sum(set(range(1, num))):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        elif i in amicable_numbers(i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef amicable_numbers(n):\n    '''\n    Write a function to find all the amicable numbers of a given number.\n    '''\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2] + amicable_numbers(n // 2)\n    else:\n        return [n] + amicable_numbers(3 * n + 1)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i!= 1:\n            if is_amicable(i):\n                amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable to any number from 1 to the specified limit.\n    '''\n    limit = int(num**0.5)+1\n    for i in range(1, limit):\n        if num % i == 0 and i!= num/i:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list to store the sum of all amicable numbers\n    amicable_sum = []\n\n    # Loop through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        \n        # Check if the number is amicable\n        if i!= 1 and is_amicable(i):\n            \n            # Add the sum of the number and 1 to the list\n            amicable_sum.append(i+1)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_sum)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num > 1 and is_prime(num) and is_prime(num - 1):\n            amicable_sum += num\n    return amicable_sum\n\ndef amicable_numbers_sum(limit):\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num == sum_of_divisors(num) and num!= 1:\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_divisors(num):\n    divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors += i\n    return divisors"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Convert complex numbers to radians\n    angle_rad = cmath.phase(a+b*1j)\n    # Convert radians to degrees\n    angle_deg = (angle_rad * 180) / cmath.pi\n    # Return angle as float value\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj*b # conjugate of b\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    # convert complex numbers to real and imaginary parts\n    real, imag = a.real, a.imag\n    real_b, imag_b = b.real, b.imag\n    \n    # calculate the angle of the complex numbers using cmath.phase()\n    angle = cmath.phase(complex(real_b, imag_b))\n    \n    # convert the angle to degrees and return it\n    angle_degrees = angle * 180 / cmath.pi\n    return round(angle_degrees, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle*180/cmath.pi\n    angle = round(angle,2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + b*1j\n    angle_rad = cmath.phase(complex_number)\n    angle_deg = cmath.degrees(angle_rad)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle/cmath.pi*180\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    count_diff = 0\n\n    # loop through each character in the binary string\n    for char in string:\n        # check if the character is 0\n        if char == '0':\n            # increment count of 0s\n            count_0 += 1\n        else:\n            # increment count of 1s\n            count_1 += 1\n\n        # calculate the difference between the counts of 0s and 1s\n        count_diff = abs(count_0 - count_1)\n\n        # update the maximum difference if the current count difference is greater\n        if count_diff > max_diff:\n            max_diff = count_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # Count the number of 0s and 1s in the current sub-string\n        count_0s += string[i] == '0'\n        count_1s += string[i] == '1'\n\n        # Calculate the maximum difference between the counts\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if string[i]!= string[j]:\n                if string[i] == '0':\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n\n    max_diff = max(dp[n - 1][i] for i in range(n))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        elif string[i] == '1':\n            length -= 1\n        else:\n            raise ValueError('Invalid character in the binary string')\n        if length == 0:\n            return i - length\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n        if i >= 2 and string[i] == string[i-2]:\n            max_diff = max(max_diff, abs(zero_count - one_count))\n\n        if string[i] == '0':\n            zero_count -= 1\n        else:\n            one_count -= 1\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        count0 = count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = count1 - count0\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    num_0s = 0\n    num_1s = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n        \n        diff = abs(num_0s - num_1s)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            diff = abs(count_zero - count_one)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # finding the common divisors of two numbers\n    divisors = set(range(1, max(a, b) + 1)) & set(range(1, min(a, b) + 1))\n\n    # finding the sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize sum to 0\n    total = 0\n    # loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b)+1):\n        # check if the number is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # add the common divisor to the total\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\n\nprint(sum_common_divisors(12, 24))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two integers as input and returns their sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through all numbers between 1 and the smaller number\n    for i in range(1, min(a, b) + 1):\n        # check if the current number is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # add the current number to the sum\n            sum += i\n    # return the sum of common divisors\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Find the largest number between the two given numbers\n    max_num = max(a, b)\n\n    # Initialize a variable to store the sum of common divisors\n    common_divisor_sum = 0\n\n    # Loop through the numbers from 1 to the largest number\n    for i in range(1, max_num + 1):\n        # Check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum of common divisors\n            common_divisor_sum += i\n\n    # Return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find the common divisors of two numbers\n    def common_divisors(x,y): \n        return [i for i in range(1, x+1) if x%i==0 and y%i==0]\n\n    # Get the list of common divisors of a and b\n    c_div = common_divisors(a,b)\n\n    # Find the sum of the common divisors\n    sum_div = sum(c_div)\n\n    # Return the sum of common divisors\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to find the common divisor of two numbers\n    def common_divisor(a,b):\n        if b == 0:\n            return a\n        else:\n            return common_divisor(b,a%b)\n    \n    # function to find the sum of common divisors of two numbers\n    def sum_common_divisors(a,b):\n        return a + b - common_divisor(a,b)\n    \n    # calling the function to find the sum of common divisors of two numbers\n    result = sum_common_divisors(a,b)\n    \n    # printing the result\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is:\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common = set(range(1, min(a, b) + 1)) & set(range(1, max(a, b) + 1))\n\n    # Find the sum of common divisors\n    total_sum = 0\n    for i in common:\n        total_sum += i\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of the common divisors of the two numbers.\n    '''\n    # Find the maximum common divisor of the two numbers\n    max_divisor = max(a, b)\n\n    # Initialize a set to store the divisors of the maximum common divisor\n    divisors = set()\n\n    # Iterate over all the numbers from 1 to the maximum common divisor\n    for i in range(1, max_divisor + 1):\n        # Check if the two numbers have a common divisor\n        if i in range(a, b + 1) and i % a == 0 and i % b == 0:\n            divisors.add(i)\n\n    # Return the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    for i in range(y):\n        product += x\n    return product"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and an integer n as input and returns a list of words\n    that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into words\n    long_words = [] # Initialize an empty list to store longer words\n    \n    # Loop through each word in the list\n    for word in words:\n        if len(word) > n: # Check if the length of the word is greater than n\n            long_words.append(word) # Add the word to the list of longer words\n            \n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum_of_rows = sum([sum(row) for row in my_matrix])\n    sum_of_columns = sum([sum(col) for col in zip(*my_matrix)])\n    sum_of_blocks = sum([sum(my_matrix[i:i+3]) for i in range(0, len(my_matrix), 3)])\n    \n    return sum_of_rows == sum_of_columns == sum_of_blocks == 0"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if each row has the same numbers\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n\n    # Check if each column has the same numbers\n    for col in range(len(my_matrix[0])):\n        col_sum = 0\n        for row in my_matrix:\n            col_sum += row[col]\n        if col_sum!= sum(range(1, len(my_matrix)+1)):\n            return False\n\n    # Check if the main diagonal has the same numbers\n    main_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        main_diagonal_sum += my_matrix[i][i]\n    if main_diagonal_sum!= sum(range(1, len(my_matrix)+1)):\n        return False\n\n    # Check if the secondary diagonal has the same numbers\n    secondary_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        secondary_diagonal_sum += my_matrix[i][len(my_matrix)-i-1]\n    if secondary_diagonal_sum!= sum(range(1, len(my_matrix)+1)):\n        return False\n\n    # If all checks pass, it's a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the length of the first row is equal to the length of the matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if all rows and columns have the same length\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix):\n            return False\n    \n    # Check if the matrix has the magic square property\n    for i in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(len(my_matrix[0])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum!= col_sum:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check that the matrix is a square matrix\n    if n!= len(my_matrix[0]):\n        return False\n    # Check that the matrix contains distinct elements\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] in range(n):\n                return False\n    # Check that the matrix has a magic square pattern\n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n        # Check columns\n        for j in range(n):\n            if my_matrix[j][i]!= (i+j+1):\n                return False\n    # If all tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a valid number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a counter for the number of magic squares found\n    magic_count = 0\n    \n    # Iterate through all possible pairs of rows and columns\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # Check if the current element is equal to the sum of the elements in its row and column\n            if my_matrix[i][j] == sum(my_matrix[i]) or my_matrix[i][j] == sum(my_matrix[j]):\n                # If it is, mark that we've found a magic square\n                magic_count += 1\n    \n    # Return whether or not a magic square was found\n    return magic_count >= len(my_matrix)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if the matrix has the same number of rows and columns\n    if n!= len(set(map(len, my_matrix))):\n        return False\n    # Check if the matrix is a magic square\n    for i in range(n):\n        col = [row[i] for row in my_matrix]\n        row = [my_matrix[j][i] for j in range(n)]\n        if col!= row:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n\n    # check if the matrix contains integers only\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # calculate the sum of the elements in the matrix\n    sum_matrix = sum(sum(row) for row in my_matrix)\n\n    # check if the sum is equal to the product of the diagonal elements\n    if sum_matrix == my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][2] + my_matrix[1][0] + my_matrix[2][1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has a square shape\n    n = len(my_matrix)\n    if n**2!= len(my_matrix[0]):\n        return False\n    \n    # Check if all elements are distinct\n    if len(set(sum(row) for row in my_matrix))!= n**2:\n        return False\n    \n    # Check if the diagonal elements are equal to the other elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    if diagonal_sum!= len(my_matrix) * n**2:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # check if the matrix is of the required dimensions\n    if rows!= cols or rows!= 3 or cols!= 3:\n        return False\n\n    # check if each row, column, and square have unique elements\n    for i in range(rows):\n        if len(set(my_matrix[i]))!= rows:\n            return False\n        if len(set(my_matrix[:, i]))!= rows:\n            return False\n        if i < rows - 2:\n            if len(set(my_matrix[i:i+3]))!= 3:\n                return False\n            if len(set(my_matrix[:, i:i+3]))!= 3:\n                return False\n\n    # check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= rows - j - 1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all elements in the matrix are distinct\n    if len(set(my_matrix))!= len(my_matrix):\n        return False\n    \n    # Calculate the sum of the matrix elements\n    matrix_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the matrix elements is equal to the product of the matrix dimensions\n    if matrix_sum!= len(my_matrix) ** 2:\n        return False\n    \n    # Check if all rows in the matrix are equal\n    for row in my_matrix:\n        if row!= sorted(row):\n            return False\n    \n    # Check if all columns in the matrix are equal\n    for i in range(len(my_matrix)):\n        if [my_matrix[j][i] for j in range(len(my_matrix))]!= sorted([my_matrix[j][i] for j in range(len(my_matrix))]):\n            return False\n    \n    # If all conditions are satisfied, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n    \n    # iterate through the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    \n    # iterate through the dictionary to find the item with maximum frequency\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n            break\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_freq = 0\n    max_item = None\n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    # Iterate through the dictionary and find the item with the maximum frequency\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    \n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each item in the list\n    for num in nums:\n        count_dict[num] += 1\n    \n    # Find the item with the maximum frequency\n    for item, freq in count_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    \n    # Find all indices of vowels in the string\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    \n    # Reverse the vowels from the start to the end\n    vowel_indices.reverse()\n    \n    # Reverse the string\n    str1_reverse = str1[::-1]\n    \n    # Replace vowels in the string with the reversed vowels\n    for index in vowel_indices:\n        str1_reverse = str1_reverse[:index] + str1[index] + str1_reverse[index+1:]\n    \n    return str1_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_vowels = char + reversed_vowels\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels and char!= \"y\":\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # Initialize an empty string to hold the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is a vowel\n        if char in vowels:\n            # If it is, append it to the result string\n            result += char\n    # Return the result string in reverse order\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 = str1[i] + str2\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str2 = ''\n    for char in str1:\n        if char in vowels:\n            str2 = char + str2\n        else:\n            str2 = str2 + char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    return str1.replace(vowels, '')[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    string = \"\"\n    for elem in tup1:\n        string += str(elem) + \" \"\n    return string[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(elem) for elem in tup1])"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for item in tup1:\n        string += str(item)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # convert decimal to binary\n    hex_num = ''\n    i = 1\n    while n >= 1:\n        remainder = n % 2\n        hex_num = remainder + hex_num\n        n = n // 2\n        i += 1\n    \n    # convert binary to hex\n    hex_num = hex_num[::-1]\n    hex_num = hex(int(hex_num, 2))[2:]\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Calculate the nth term of the hexagonal series\n    nth_term = (2 * n - 1) * ((3 * n - 1) ** 2) // 6\n    # Return the nth term\n    return nth_term"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2*n-1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first two hexagonal numbers\n    hex_num1 = 0\n    hex_num2 = 1\n    \n    # Loop through the range of n hexagonal numbers\n    for i in range(2, n+1):\n        # Calculate the nth hexagonal number\n        hex_num = (3*hex_num1**2 - hex_num2**2) / 2\n        # Update the values of hex_num1 and hex_num2\n        hex_num1 = hex_num2\n        hex_num2 = hex_num\n    \n    # Return the nth hexagonal number\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * 3 + hexagonal_num(n - 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    for i in range(1, n + 1):\n        hexagonal += i * (2 * i - 1)\n    return hexagonal\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n - 1) * (2 * n - 1) * (2 * n - 1) // 6"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create a new array to store non-zero numbers\n    non_zero_nums = array('i')\n\n    # Iterate through the input array and add non-zero numbers to the new array\n    for num in nums:\n        if num!= 0:\n            non_zero_nums.append(num)\n\n    # Get the length of the non-zero array\n    length = len(non_zero_nums)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = length / float(len(nums))\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to an array of characters\n    char_array = array('c', map(str, nums))\n\n    # Count the number of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for char in char_array:\n        if char == '0':\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n\n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    ratio = zeroes / non_zeroes\n    print(\"The ratio of zeroes to non-zeroes in the array is:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i', [0] * len(nums))  # create array of zeros of same length as nums\n    \n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1  # increment count of 0 in array\n    \n    nonzeros = len(nums) - sum(zeros)  # calculate count of non-zeroes in nums\n    \n    return float(zeros) / nonzeros  # calculate ratio of zeros to non-zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize variables\n    zero_count = 0\n    non_zero_count = 0\n\n    # loop through the array and count zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        ratio = 0\n    else:\n        ratio = zeroes / non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count_zeros = 0\n    count_nonzeros = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_nonzeros += 1\n            \n    return count_zeros / count_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count_zero = 0\n    count_nonzero = 0\n    for num in arr:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    ratio = count_zero / count_nonzero\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n\n    return non_zero_count / zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n\n    count = 0\n    temp = n\n\n    while temp > 0:\n        temp = temp // 2\n        count += 1\n\n    if count == 1:\n        return True\n\n    for i in range(2, count + 1):\n        if (n - 2 ** i) % 2 == 0:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers_of_two = 0\n    while n > 0:\n        if n & 1 == 1:\n            sum_of_powers_of_two += (2**sum_of_powers_of_two)\n        n >>= 1\n    if sum_of_powers_of_two > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # convert the number to binary\n    bin_str = bin(n)[2:]\n\n    # initialize variables\n    max_pow = 0\n    sum_of_powers = 0\n\n    # iterate through each binary digit of the number\n    for i in range(len(bin_str)):\n        # if the current binary digit is 1, check if it can be added to the sum_of_powers\n        if bin_str[i] == '1':\n            # check if the sum of powers exceeds the maximum possible sum of powers\n            if sum_of_powers + 1 > 2**i:\n                return False\n            # add the current power of 2 to the sum_of_powers\n            sum_of_powers += 1\n            # update the maximum possible sum of powers\n            max_pow = max(max_pow, sum_of_powers)\n\n    # check if the sum of powers exceeds the maximum possible sum of powers\n    if sum_of_powers + 1 > 2**len(bin_str):\n        return False\n    # check if the sum of powers is equal to the original number\n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # initializing a variable to keep track of the sum of powers of 2\n    power_sum = 0\n\n    # checking if the number is divisible by 2\n    while n % 2 == 0: \n        power_sum += 1\n        n //= 2\n\n    # checking if the number is a power of 2\n    if n == 1: \n        return power_sum\n\n    # checking if the number is not divisible by 2 and is not a power of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    for i in range(1, n+1):\n        if n - i == i & (n - i) & (n - i) == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is less than or equal to 1 \n    if n <= 1: \n        return False\n    \n    # check if n is a power of 2 \n    while n % 2 == 0: \n        n = n // 2\n    \n    # initialize a counter and a variable to store the sum of powers of 2 \n    count = 0 \n    power = 1\n    \n    # loop through the binary representation of n \n    while n > 0: \n        if n % 2 == 1: \n            count += power\n        \n        power *= 2\n        n = n // 2\n    \n    # check if the sum of powers of 2 is equal to n \n    return count == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # To check if n is a power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # To find the number of set bits in a number\n    def count_set_bits(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    # To find the number of non-zero digits in a number\n    def count_non_zero_digits(num):\n        count = 0\n        while num > 0:\n            count += num % 10\n            num //= 10\n        return count\n\n    # Finding the non-zero digits in n\n    non_zero_digits = count_non_zero_digits(n)\n\n    # Counting the number of non-zero powers of 2 in each digit\n    powers_of_2 = [0] * 10\n    for digit in range(10):\n        power = 1\n        while power <= non_zero_digits:\n            powers_of_2[digit] += 1\n            power *= 2\n\n    # Checking whether the given number can be represented as sum of powers of 2 or not\n    if is_power_of_two(n) and powers_of_2[0] >= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Loop through the digits of the given number\n    for digit in str(n):\n        # If the digit is 0, then we can't add it to the sum of powers of 2, so return False\n        if digit == '0':\n            return False\n\n        # Convert the digit to an integer and add it to the sum of powers of 2\n        digit = int(digit)\n        sum_of_powers += digit ** 2\n\n    # If the sum of powers of 2 is equal to the given number, then the number can be represented as a sum of powers of 2, so return True\n    if sum_of_powers == n:\n        return True\n\n    # If the sum of powers of 2 is not equal to the given number, then the number can't be represented as a sum of powers of 2, so return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def is_power_of_two(num):\n        '''\n        Helper function to check if a number is a power of 2.\n        '''\n        return num & (num - 1) == 0\n    \n    def check_sum_of_powers_of_two(num):\n        '''\n        Helper function to check if the given number can be represented as sum of non-zero powers of 2.\n        '''\n        for i in range(1, 32):\n            power_of_two = 1 << i\n            if is_power_of_two(power_of_two) and num >= power_of_two:\n                sub_num = num - power_of_two\n                if sub_num > 0 and is_power_of_two(sub_num):\n                    return True\n        return False\n    \n    if check_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # using formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle.\n    \"\"\"\n    # Use the formula for the circumference of a circle:\n    # circumference = 2*pi*r\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty set\n    result = set()\n    \n    # Loop through each element in the list\n    for item in test_list:\n        # If the element is a list, recursively call the function on it\n        if isinstance(item, list):\n            result = result.union(extract_singly(item))\n        # If the element is a number, add it to the set\n        elif isinstance(item, (int, float)):\n            result.add(item)\n    \n    # Return the set as a list\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        flat_list += item\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n\n    # Initialize an empty set\n    singly_set = set()\n\n    # Loop through each list in the test_list\n    for list_item in test_list:\n        # Loop through each item in the list\n        for item in list_item:\n            # Add each item to the set\n            singly_set.add(item)\n\n    # Convert the set to a list and return it\n    return list(singly_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for sublist in test_list:\n        flatten_list.extend(sublist)\n    return flatten_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def helper(nums):\n        n = len(nums)\n        for i in range(n):\n            # find the maximum element in the unsorted part of the list\n            max_idx = i\n            for j in range(i+1, n):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n            # swap the maximum element with the first element in the unsorted part of the list\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # reverse the unsorted part of the list\n            for j in range(i+1, n):\n                nums[j], nums[i] = nums[i], nums[j]\n\n    # call the helper function to sort the list in non-decreasing order\n    helper(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n\n    def sort_helper(nums, start, end):\n        if start >= end:\n            return\n\n        # find the maximum element in the range\n        max_idx = start\n        for i in range(start, end):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # sort the range after the first element\n        sort_helper(nums, start + 1, end)\n\n    # call the helper function to sort the entire list\n    sort_helper(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the first n-i elements\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to sort the array using pancake sort\n    def sort_array(arr):\n        n = len(arr)\n        # Traverse through the array from 0 to n-1\n        for start in range(n):\n            # Find the maximum element starting from start\n            max_index = start\n            for end in range(start+1, n):\n                if arr[end] > arr[max_index]:\n                    max_index = end\n            # Swap the maximum element with the starting element\n            arr[start], arr[max_index] = arr[max_index], arr[start]\n            # Reverse the array from start to max_index-1\n            arr[start:max_index+1] = arr[start:max_index+1][::-1]\n        # Return the sorted array\n        return arr\n    \n    # Sort the array using pancake sort\n    sorted_nums = sort_array(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Use the extended Eggert and Pancake sorting algorithm\n    for i in range(n):\n        # Find the maximum element and swap it with the last element\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Pancake sort the remaining unsorted portion\n        pancake_sort_helper(nums, i, n-1)\n\ndef pancake_sort_helper(nums, start, end):\n    '''\n    Helper function to sort the remaining unsorted portion of the array using pancake sort.\n    '''\n    # Base case: if the start is greater than the end, we have sorted the array\n    if start > end:\n        return\n    # Choose a random pivot element and partition the array around it\n    pivot_idx = random.randint(start, end)\n    nums[pivot_idx], nums[end] = nums[end], nums[pivot_idx]\n    pivot = nums[end]\n    i = start\n    for j in range(start, end):\n        if nums[j] < pivot:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n    nums[i], nums[end] = nums[end], nums[i]\n    # Recursively sort the left and right partitions\n    pancake_sort_helper(nums, start, i-1)\n    pancake_sort_helper(nums, i+1, end)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Set up the pancakes to be sorted\n    pancakes = []\n    for i in range(len(nums)):\n        pancakes.append(i)\n\n    # Bubble sort the pancakes\n    for i in range(len(pancakes)):\n        for j in range(len(pancakes) - 1):\n            if nums[pancakes[j]] > nums[pancakes[j + 1]]:\n                pancakes[j], pancakes[j + 1] = pancakes[j + 1], pancakes[j]\n\n    # Extract the sorted pancakes from the pancake list\n    sorted_nums = []\n    for i in range(len(pancakes)):\n        sorted_nums.append(nums[pancakes[i]])\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n\n    # Start by swapping largest and smallest elements\n    for i in range(n):\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Repeat swapping until no more swaps are needed\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the unsorted part of the array\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    # Iterate through the list\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Print the sorted list\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the length of the list\n    n = len(nums)\n    # loop until the list is sorted\n    while True:\n        # find the largest unsorted element\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # if no more unsorted elements, the list is sorted\n        if max_index == 0:\n            break\n        # swap the largest unsorted element with the last element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n        # decrement the length of the list\n        n -= 1"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sort the array\n    max_diff = 0 # Initialize maximum difference variable\n    for i in range(1, len(arr)): # Loop through array\n        diff = arr[i] - arr[i-1] # Calculate difference between current element and previous element\n        if diff > max_diff: # If difference is greater than current maximum, update maximum\n            max_diff = diff\n    return max_diff # Return maximum difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    # find the maximum element in the array\n    max_elem = max(arr)\n\n    # initialize the maximum difference to 0\n    max_diff = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        # compare the current element with all other elements\n        for j in range(i+1, len(arr)):\n            # calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n\n            # update the maximum difference if the current difference is greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = arr[0]\n\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0  # initialize maximum difference\n    \n    for i in range(len(arr)):  # iterate over array elements\n        for j in range(i+1, len(arr)):  # iterate over remaining elements\n            diff = abs(arr[i] - arr[j])  # calculate absolute difference between elements\n            \n            if diff > max_diff:  # update maximum difference if current element is larger\n                max_diff = diff\n    \n    return max_diff  # return maximum difference"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n // b + 1):\n        for y in range(1, n // a + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is less than 0, no solution exists\n    if discriminant < 0:\n        return None\n    \n    # Calculate the roots\n    x1 = (-b + discriminant**0.5) / (2*a)\n    x2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if x1 and x2 are integers\n    if int(x1)!= x1 or int(x2)!= x2:\n        return None\n    \n    # Return the solution as a tuple\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Sort the roots in ascending order\n    roots = [root1, root2]\n    roots.sort()\n    \n    # Return the first root as the first element of the tuple, and the second root as the second element\n    return tuple(roots)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    x = (-n + (b * n)) // b\n    y = (n - (a * x)) // b\n    \n    return x, y"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Initialize variables for x and y\n    x = 0\n    y = 0\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4 * a * n\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two real roots of the discriminant\n        real_root1 = (-b + discriminant**0.5) / (2 * a)\n        real_root2 = (-b - discriminant**0.5) / (2 * a)\n\n        # Check if the two roots are distinct\n        if real_root1!= real_root2:\n            return (int(real_root1), int(real_root2))\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables for x and y\n    x = None\n    y = None\n\n    # loop through all possible values of x\n    for i in range(0, b):\n        # calculate the value of y\n        y = a * i\n\n        # check if the sum of x and y equals the given value of n\n        if y + n == 0:\n            # if so, return the pair of values (x, y)\n            return (i, y)\n        elif y + n < 0:\n            # if the sum is negative, the equation does not have a unique solution\n            return None\n\n    # if no unique solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_1 = n / a\n    x_2 = -b / a\n    \n    if x_1 == x_2:\n        return (x_1, )\n    else:\n        return (x_1, x_2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if (a*(i**2) + b*(i**2) == n):\n            x = i\n            y = int(a*x + b*x*x)\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the given coefficients are valid\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(n, (int, float))):\n        return None\n    \n    # Find the roots of the quadratic equation ax^2 + bx + c = 0\n    x = (-b + (b**2 - 4*a*n)/(2*a)) / (2*a)\n    y = (-b - (b**2 - 4*a*n)/(2*a)) / (2*a)\n    \n    # Check if the given equation has a solution\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float))):\n        return None\n    \n    # Check if the given equation has a solution for x and y\n    if a*x + b*y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if there is no solution\n    if a*n + b*n == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if there is a real solution\n    if discriminant > 0:\n        # Calculate the roots\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Check if the roots are integers\n        if int(root1) == root1 and int(root2) == root2:\n            # Return the roots\n            return (int(root1), int(root2))\n        else:\n            # Return the roots rounded to two decimal places\n            return (round(root1, 2), round(root2, 2))\n    else:\n        # Return None\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate through the first list\n    for i in range(len(list1)):\n        # If the element is present in the second list, remove it from the first list\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1  # Decrement the index to avoid errors\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the first list\n    for i in range(len(list1)):\n        # If the element is present in the second list, remove it\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n\n    # Iterate through the second list\n    for element in list2:\n        # If the element is present in the first list, remove it\n        if element in list1:\n            list1.remove(element)\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum of a geometric series using the formula:\n\n    sum = 1/2 * (1 - 1/n)^n\n\n    where n is the given number.\n    '''\n    return round(1/2 * (1 - 1/n)**n, 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n//2):\n        series += (n-2*i)\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = (s * l) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side\n    a = s / l\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (s ** 2) / (4 * tan(pi / l))\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n\n    for i in range(l):\n        angle_rad = angle * i / 180\n        area += s * tan(angle_rad)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2*pi*i)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the circumference of the polygon\n    c = (s/l) * pi\n\n    # Calculate the area of the polygon\n    A = (s/2) * l\n\n    # Calculate the area of each side of the polygon\n    area = (s/2) * l * tan(360/l)\n\n    # Calculate the total area of the polygon\n    total_area = (s/2) * l * tan(360/l) + (s/2) * l\n\n    return total_area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s/2)**i * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s * (i/(l-1))\n        area += r * (1 - math.cos(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) / 2) * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Check if n is a prime number\n    if n <= 1:\n        return \"n is not a prime number\"\n    \n    # Get the list of divisors of n\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if n > 2:\n        divisors.append(n)\n    \n    # Calculate the sum of the divisors\n    sum_div = sum(divisors)\n    \n    # Check if the sum of divisors of n and (n+1) is equal\n    if sum_div == n * (n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, n + 1): \n        if n % i == 0: \n            sum_div = n / i \n            if sum_div == (sum_div + i): \n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    divisors_sum = sum(range(1, int(math.sqrt(n))+1))\n    divisors_sum += n\n\n    # check if the sum of the divisors of n and n itself are equal\n    if divisors_sum == 2*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if n//i == i:\n                divisors.append(n//i)\n        i += 1\n    \n    # Calculate the sum of the divisors\n    divisor_sum = 0\n    for divisor in divisors:\n        divisor_sum += divisor\n    \n    # Check if the sum of the divisors is the same as n\n    if divisor_sum == n:\n        print(f\"{n} is a perfect square!\")\n    else:\n        print(f\"{n} is not a perfect square!\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_of_divisors(num): \n        '''\n        Recursive function to find the sum of all divisors of a number.\n        '''\n        if num < 2: \n            return 0 \n        return num + sum_of_divisors(num-1) \n    \n    div_a = sum_of_divisors(n) \n    div_b = sum_of_divisors(2*n) \n    if div_a == div_b: \n        print(f\"{n} and {2*n} have the same sum of divisors.\") \n    else: \n        print(f\"{n} and {2*n} do not have the same sum of divisors.\") "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1:\n        return True\n    else:\n        div_list = []\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                div_list.append(i)\n                if n//i!= i:\n                    div_list.append(n//i)\n        return len(div_list) == len(set(div_list))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # calculate the sum of the divisors\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    # check if the sum of the divisors of n and m are the same\n    m = n + 1\n    while m <= 1000:\n        if sum_divisors(n) == sum_divisors(m):\n            print(f\"{n} and {m} have the same sum of divisors.\")\n            return\n        m += 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2: \n        return False\n    else: \n        sum_div = 0\n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                sum_div += i \n                if i!= n/i: \n                    sum_div += n/i\n        return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n \n    div_sum = sum(set(map(int, str(n**0.5)+',')))\n    # Check if the sum of the divisors of n and n are same \n    if div_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the count of each character at its position in the alphabet\n    char_count = {}\n\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is an uppercase letter, add it to the dictionary with a count of 1\n        if char.isupper():\n            char_count[char] = 1 if char in char_count else 1\n\n    # Iterate over each character in the English alphabet (both uppercase and lowercase)\n    for i in range(ord('a'), ord('z') + 1):\n        # If the character is already in the dictionary, increment its count by 1\n        if chr(i) in char_count:\n            char_count[chr(i)] += 1\n\n    # Return the dictionary containing the count of each character at its position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(26):\n        if str1.lower() == english_alphabet[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+97)] = 0\n    for char in str1:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert all characters in the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of characters at the same position in the English alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a letter (a-z)\n        if char.isalpha():\n            # If it is, check if it is at the same position in the English alphabet (i.e. it has the same ASCII code as the corresponding English letter)\n            if ord(char) - ord('a') == ord(chr(ord(char) - ord('a') + 97)):\n                # If it is, add 1 to the count for that character in the dictionary\n                if char in char_count:\n                    char_count[char] += 1\n                else:\n                    char_count[char] = 1\n    # Return the count of characters in the string that occur at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Iterate through the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char in alphabet:\n            # If the character is in the English alphabet, check its position in the string\n            if str1.index(char) == alphabet.index(char):\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert all characters to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n\n        # if the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n\n    # initialize a dictionary to store the count of characters that occur at each position in the string\n    common_char_count = {}\n\n    # loop through each character in the English alphabet\n    for i in range(26):\n\n        # if the character exists in the dictionary, increment its count by the number of characters at this position\n        if chr(i+97) in char_count:\n            if chr(i+97) not in common_char_count:\n                common_char_count[chr(i+97)] = char_count[chr(i+97)]\n            else:\n                common_char_count[chr(i+97)] += char_count[chr(i+97)]\n\n    # return the count of characters that occur at each position in the string\n    return common_char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # initialize count dictionary\n    count = {}\n\n    # iterate over string and count characters that occur at the same position as in the English alphabet\n    for i, char in enumerate(str1):\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    # return count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the input string to lowercase to ignore case differences\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the counts of each character\n    char_counts = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the dictionary, increment its count by 1\n        if char in char_counts:\n            char_counts[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n    \n    # Loop through each character in the English alphabet\n    for i in range(97, 123):\n        # If the character occurs at the same position in the English alphabet as in the input string, increment its count by 1\n        if chr(i) in char_counts:\n            char_counts[chr(i)] += 1\n    \n    # Return the final count of each character in the string\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all characters in the string to lowercase for case-insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the counts of characters at each position in the alphabet\n    char_counts = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_counts[ord(char) - 97] = char_counts.get(ord(char) - 97, 0) + 1\n\n    # Return the dictionary as a sorted list of tuples\n    return sorted(char_counts.items())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(ord('a'), ord('z')+1):\n        if str1.lower().count(chr(i)) == len(str1.lower().replace(chr(i), \"\")):\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i]!= A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary representation and count the number of set bits (trailing zeros)\n    count = len(bin(n)[2:])\n    \n    # Add 1 to the count if the input number is not a power of 2\n    if n & (n-1)!= 0:\n        count += 1\n        \n    # Calculate the smallest power of 2 greater than or equal to n\n    return 2**count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to an integer\n    n = int(n)\n    \n    # loop through all the integers from 1 to n/2\n    for i in range(1, int(n/2)+1):\n        # check if the current integer is a power of 2\n        if (1 << i) == n:\n            return (1 << i)\n    \n    # if we reach here, there is no power of 2 greater than or equal to n\n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to a signed integer\n    n = int(n)\n    # Initialize a variable to keep track of the power of 2\n    power = 1\n    # While the result of the current power of 2 is less than or equal to n\n    while power <= n:\n        # If the result of the current power of 2 is greater than n, we've found a power of 2\n        if power * 2 > n:\n            return power\n        # Increment the power of 2\n        power <<= 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    elif n == 2: \n        return 4\n    else: \n        while n > 0: \n            n >>= 1\n            n += 1\n        return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n\n    # Loop until we find the next power of 2 greater than or equal to n\n    while next_power < n:\n        # Increment the next power of 2 by 1\n        next_power *= 2\n    \n    # Return the final power of 2\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize power to 1\n    power = 1\n\n    # Loop until power >= n\n    while power < n:\n        power *= 2\n\n    # Return the final power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to a given number.\n    \"\"\"\n    # Initialize power variable\n    power = 1\n\n    # Loop through numbers until we find the next power of 2\n    while power < n:\n        power <<= 1\n\n    # Return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the logarithm of n to the base 2\n    log2 = 0\n    while n > 1: \n        n = n >> 1 \n        log2 += 1\n\n    # multiply the base 2 exponent by 2 to get the next power of 2\n    return 1 << log2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Set the initial value of the power to 1\n    power = 1\n    # Loop while the power is less than or equal to the square root of n\n    while power <= int(n ** 0.5):\n        # If the current power is less than or equal to n, set the value of n to the square of the current power\n        if power <= n:\n            n = n * n\n        # If the current power is greater than n, divide n by 2 and increase the power by 1\n        else:\n            n = n / 2\n            power += 1\n    # Return the final value of n, which is the next power of 2 greater than or equal to n\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list `a` and a number `x` as input and returns the number of occurrences of `x` in `a`.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the indices are valid\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return \"Invalid indices\"\n\n    # Initialize the sum variable\n    sum_range = 0\n\n    # Iterate through the list and add the numbers in the specified range\n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    # Return the sum of numbers in the specified range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n\n    # loop through each element of the list from m to n\n    for i in range(m, n+1):\n        # add the element to the total\n        total += list1[i]\n\n    # return the total\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices!\"\n    # Initialize the sum\n    sum_range = 0\n    # Loop through the list and add the numbers within the range to the sum\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    # Return the sum\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-m]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize a variable to store the sum of numbers in the range\n    sum_range = 0\n\n    # loop through each number in the list\n    for num in list1:\n        # check if the number is within the specified range\n        if m <= num <= n:\n            # add the number to the sum of numbers in the range\n            sum_range += num\n\n    # return the sum of numbers in the range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #initialize variables\n    sum_value = 0\n    \n    #iterate through the list and add values to the sum_value variable\n    for i in range(m, n+1):\n        sum_value += list1[i-1]\n        \n    return sum_value"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function calculates the perimeter of a regular pentagon from its sides.\n\n    Parameters:\n    a (float): length of the sides of the pentagon\n\n    Returns:\n    float: perimeter of the pentagon\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter using the formula: 5a/4 = n*(2a + 5)/2\n    n = math.ceil(a/5)\n    perimeter = n*(2*a + 5)/2\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the perimeter of a pentagon using Heron's formula\n    s = (5*a**2 + 5*a - 36) / 18\n\n    # return the result\n    return math.ceil(s)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    semi_perimeter = 5 * a / 4\n\n    # Calculate the area of the pentagon\n    area = math.sqrt(5) * semi_perimeter ** 2\n\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n\n    # Return the results\n    return perimeter, area"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 't' or i == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i-2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for i in range(len(s)):\n        if s[i:i+len(std)] == std:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        start = s.find('std', start)\n        if start == -1:\n            break\n        count += 1\n        start += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if not test_tuple:\n        return True\n    \n    # get the data type of first element\n    data_type = type(test_tuple[0])\n    \n    # check if all elements have same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements have the same data type, False otherwise.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        type_list = []\n        for element in test_tuple:\n            type_list.append(type(element))\n        if type_list[0] == type_list[1]:\n            for i in range(2, len(test_tuple)):\n                if type_list[i]!= type_list[0]:\n                    return False\n        else:\n            return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = [type(i) for i in test_tuple]\n    return all(data_types[0] == i for i in data_types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as an input and checks if all the elements in the tuple have the same data type.\n    If they have the same data type, it returns True.\n    If they don't have the same data type, it returns False.\n    \"\"\"\n\n    # getting the first element of the tuple\n    first_element = test_tuple[0]\n\n    # looping through the rest of the elements of the tuple\n    for element in test_tuple:\n        # checking if the element has the same data type as the first element\n        if not isinstance(element, type(first_element)):\n            return False\n\n    # if all the elements have the same data type as the first element, it returns True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(elem, type(test_tuple[0])) for elem in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = None\n    for element in test_tuple:\n        if data_type is None:\n            data_type = type(element)\n        elif type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = set()\n    for i in test_tuple:\n        if isinstance(i, (list, tuple, set)):\n            types.add(type(i))\n        else:\n            types.add(type(i))\n\n    return len(types) == 1"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Calculate the count of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # Check if the count of x is more than n/2\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize the count and candidate to zero\n    count = 0\n    candidate = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # If the count is greater than n/2, return True\n        elif count > n//2:\n            return True\n        # Otherwise, update the candidate to the current element\n        else:\n            candidate = arr[i]\n\n    # If the loop completes without finding a candidate with a count greater than n/2, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count == n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer n as input and returns the number of set bits in it.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Convert given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Iterate through each character in the binary string\n    for char in binary_str:\n\n        # Convert each character to integer\n        char = int(char)\n\n        # If the character is 1, increment the count variable\n        if char == 1:\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = [i for i, char in enumerate(str) if i % 2!= 0]\n    result = []\n    for index in odd_indices:\n        result.append(str[index])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str (str): The string from which to remove odd index characters.\n\n    Returns:\n    str: The string with odd index characters removed.\n    \"\"\"\n    return ''.join([str[i] if i % 2 == 0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    # if a is minimum, return it\n    if a < b and a < c:\n        return a\n    \n    # if b is minimum, return it\n    elif b < a and b < c:\n        return b\n    \n    # if c is minimum, return it\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments (a, b, and c) and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert n to binary string\n    n = bin(n)[2:]\n\n    # Check if all bits are unset in the given range\n    for i in range(l, r + 1):\n        if n[i] == '1':\n            return False\n\n    # If all bits are unset in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n\n    # Initialize count of unset bits\n    count = 0\n\n    # Loop through binary string from l to r\n    for i in range(l, r+1):\n        if binary_n[i] == '0':\n            count += 1\n\n        # If count becomes equal to the length of the binary string\n        if count == len(binary_n):\n            # All the bits are unset in the given range\n            return True\n        elif count < len(binary_n):\n            # There are unset bits in the given range\n            return False\n\n    # If all the bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # get the number of set bits in the range\n    count = sum((n & (1 << i)) for i in range(l,r+1))\n\n    # check whether count is equal to n in the range\n    return count == n\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n: an integer representing the number of bits in the given range.\n    l: an integer representing the lower bound of the given range.\n    r: an integer representing the upper bound of the given range.\n\n    Returns:\n    A boolean value representing whether all the bits are unset in the given range or not.\n\n    \"\"\"\n    # Convert the given range to a binary string\n    binary_str = bin(n & ((1 << r) - 1))\n\n    # Find the last set bit index in the binary string\n    last_set_bit = binary_str.rfind('1')\n\n    # If the last set bit index is equal to the lower bound of the given range, all the bits are set in the given range\n    if last_set_bit == l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Find the number of unset bits in the range [l,r]\n    count = 0\n    for i in range(l, r + 1):\n        if bin(i).count('1')!= n:\n            count += 1\n\n    # Check if all the bits are unset in the range [l,r]\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store the result\n    is_all_bits_unset = True\n\n    # Loop through each bit in the binary representation of n\n    for i in range(l, r + 1):\n        # If the i-th bit is set, then the number of set bits from the leftmost set bit to the i-th bit is 0, and the result is False\n        if n & (1 << i):\n            is_all_bits_unset = False\n            break\n\n    return is_all_bits_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range into a bitmask format\n    bitmask = 0\n    for i in range(r - l + 1):\n        bitmask |= (1 << (l + i))\n    # Get the complement of bitmask\n    complement_mask = ~bitmask\n    # AND the given number and complement mask to get the unset bits in the range\n    unset_bits = n & complement_mask\n    # Check if all the unset bits are zero\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if n is within the range [1, 10^9]\n    if n < 1 or n > 10**9:\n        return \"Invalid input\"\n\n    # Initialize the sum of unset bits and the number of set bits\n    unset_sum = 0\n    set_count = 0\n\n    # Iterate through the bits in n in reverse order\n    for i in range(31, -1, -1):\n        # If the bit is set, increment the set count\n        if (n & (1 << i)):\n            set_count += 1\n        else:\n            unset_sum += i\n\n    # Check if all the bits are set in the range [l, r]\n    if set_count == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n\n    for i in range(l, r+1):\n        if not (n & (1 << i)):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integer arguments n, l and r.\n    n is the base number from which the range is given.\n    l is the lower limit of the range.\n    r is the upper limit of the range.\n\n    The function checks whether all the bits in the range (inclusive) are set or not.\n\n    If all the bits are set, the function returns True.\n    If all the bits are unset, the function returns False.\n    '''\n    # Checking if all the bits in the range are set or not\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Check if the first n elements are already sorted\n    for i in range(n):\n        if arr[i] < 0 and (i == 0 or arr[i] < arr[i-1]):\n            return \"The array is already sorted.\"\n\n    # Find the first negative element\n    neg_index = -1\n    for i in range(n):\n        if arr[i] < 0:\n            neg_index = i\n            break\n\n    # Find the first positive element\n    pos_index = n\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos_index = i\n            break\n\n    # Check if the array is already sorted\n    if neg_index < pos_index:\n        return \"The array is already sorted.\"\n\n    # Swap the first negative and first positive elements\n    swap(arr, neg_index, pos_index)\n\n    # Reverse the first n-2 elements\n    for i in range(n-2, -1, -1):\n        swap(arr, i, neg_index+i+1)\n\n    # Reverse the last n-2 elements\n    for i in range(n-2, -1, -1):\n        swap(arr, i+n-2, neg_index+n-1-i)\n\n    # Reverse the remaining elements\n    for i in range(neg_index+n-2, len(arr)):\n        swap(arr, i, neg_index+n-1-i)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Loop through the input array and append positive and negative elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Sort the negative and positive lists in descending order and then concatenate them\n    sorted_arr = sorted(neg_list + pos_list, reverse=True)\n\n    # Copy the sorted array into the input array and return it\n    for i in range(n):\n        arr[i] = sorted_arr[i]\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Count the number of negative and positive elements\n    neg_count = sum(1 for num in arr[:n] if num < 0)\n    pos_count = n - neg_count\n    \n    # Initialize two pointers, one for each category\n    neg_ptr = 0\n    pos_ptr = n\n    \n    # Move the pointers in the correct order\n    while neg_ptr < neg_count and pos_ptr < n:\n        if arr[neg_ptr] < 0:\n            arr[neg_ptr], arr[pos_ptr] = arr[pos_ptr], arr[neg_ptr]\n            neg_ptr += 1\n            pos_ptr += 1\n        else:\n            pos_ptr += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two variables to keep track of the first and last negative and positive elements\n    negative_start = 0\n    positive_end = n - 1\n    \n    # Iterate through the array starting from the first negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            # If the element is negative, swap it with the first negative element\n            arr[i], arr[negative_start] = arr[negative_start], arr[i]\n            # Move the first negative element to the end of the array\n            negative_start += 1\n        else:\n            # If the element is positive, move it to the end of the array\n            arr[i], arr[positive_end] = arr[positive_end], arr[i]\n            # Decrease the positive end index\n            positive_end -= 1\n    \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] >= 0:\n            i += 1\n        else:\n            arr[i], arr[arr.index(-arr[i])] = arr[arr.index(-arr[i])], arr[i]\n            i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables to keep track of the positive and negative indices\n    i = 0\n    j = 0\n    \n    # iterate over the array and swap elements based on their sign\n    while i < n:\n        if arr[i] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    \n    # iterate over the remaining elements and swap them in the desired order\n    while i < len(arr):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n        i += 1\n    \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    positive_count = 0\n    positive_elements = []\n\n    # Count the number of negative and positive elements in the array\n    for element in arr:\n        if element < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n\n    # Move the negative elements to the front of the array\n    if negative_count > 0:\n        for i in range(negative_count):\n            arr.insert(0, arr.pop(arr.index(-1)))\n\n    # Move the positive elements to the end of the array\n    if positive_count > 0:\n        for i in range(positive_count):\n            positive_elements.append(arr.pop())\n\n    # Move the positive elements to the front of the array\n    if positive_count > 0:\n        for i in range(len(positive_elements)):\n            arr.insert(0, positive_elements[i])\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, sort the array in ascending order\n    arr.sort()\n    \n    # Second, iterate through the array and separate negative and positive elements\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    \n    # Third, sort the negative elements and the positive elements separately\n    neg.sort()\n    pos.sort()\n    \n    # Fourth, combine the negative and positive elements in the desired order\n    combined = neg + pos\n    \n    # Fifth, return the combined array\n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Move the negative elements to the beginning of the array\n    for i in range(neg_count):\n        arr[i], arr[neg_count + i] = arr[neg_count + i], arr[i]\n\n    # Move the positive elements to the end of the array\n    for i in range(pos_count, n):\n        arr[i], arr[n + pos_count - 1] = arr[n + pos_count - 1], arr[i]\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    if len(negative) > 0:\n        for i in range(len(negative)):\n            if count < len(negative):\n                arr[count] = negative[i]\n            count += 1\n    \n    if len(positive) > 0:\n        for i in range(len(positive)):\n            if count < len(negative) + len(positive):\n                arr[count] = positive[i]\n            count += 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Create a new string with the same length as the input string\n    new_str = str1.copy()\n    \n    # Loop through each character in the new string\n    for i in range(len(new_str)):\n        # If the character is a blank space, replace it with the input character\n        if new_str[i] =='':\n            new_str[i] = char\n    \n    # Return the new string with replaced blank spaces\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    # replace all occurrences of blank spaces with the given character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Split the string into a list of words\n    words = str1.split()\n    # Iterate through each word in the list\n    for i in range(len(words)):\n        # If the word is blank, replace it with the specified character\n        if words[i].isspace():\n            words[i] = char\n    # Join the words back together into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a heap\n    heap = list1\n    # heapify the list\n    heapq.heapify(heap)\n    # create an empty list to store the n largest items\n    result = []\n    # loop through the list and add the n largest items to the result list\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(list1)\n    # Convert the set back to a list and sort it in descending order\n    sorted_list = sorted(list(unique_set), reverse=True)\n    # Take the first n elements from the sorted list and return them as a list\n    return sorted_list[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Convert the list to a set to ensure uniqueness and sort the set\n    # by value (largest first)\n    sorted_set = sorted(set(list1), reverse=True)\n    \n    # Get the first n elements of the sorted_set\n    return sorted_set[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n to store the largest n elements\n    max_heap = []\n    # Initialize a list to store the n largest elements from the list\n    largest_n_elements = []\n    \n    # Add all elements of the list to the max heap\n    for element in list1:\n        heapq.heappush(max_heap, element)\n    \n    # Pop the largest element from the max heap and add it to the list of largest n elements\n    for i in range(n):\n        largest_n_elements.append(heapq.heappop(max_heap))\n    \n    # Return the list of largest n elements\n    return largest_n_elements"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # use a max heap to store the n largest items from the list\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,item)\n    # return the list of n largest items from the list\n    return [heap[0]] + [heap[i] for i in range(1,n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in range(len(list1)):\n        if len(heap) < n:\n            heapq.heappush(heap, list1[i])\n        else:\n            if list1[i] > heap[0]:\n                heapq.heappushpop(heap, list1[i])\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n        \n    # add the remaining elements of the list to the heap\n    for i in range(n,len(list1)):\n        heapq.heappush(heap, -list1[i])\n        \n    # create a new list to store the n largest elements of the list\n    larg_list = []\n    for i in range(n):\n        larg_list.append(heap[i])\n        \n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r  # formula for lateral surface area of a cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h*r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r ** 2 * h + r ** 2 * h ** 2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    area = 2*3.1415926535*r**2 + 2*3.1415926535*h*r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*(h/3)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Radius and height of the cylinder\n    R = r\n    H = h\n\n    # Lateral surface area of the cylinder\n    lateral_area = (2 * R * H) - (2 * R * r)\n\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Loop through each bit of n\n    for i in range(32):\n        # Check if the current bit is an even bit\n        if n & 1 == 0:\n            # If it is, add it to the even_bits list\n            even_bits.append(n)\n\n        # Shift n to the right by 1 bit\n        n = n >> 1\n\n    # Return the even_bits list\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits\n    even_bits = []\n    \n    # Loop through the bits of the given number\n    for i in range(32):\n        # Check if the i-th bit is even\n        if n & (1 << i)!= 0:\n            # If it is, add it to the even_bits list\n            even_bits.append(i)\n    \n    # Convert the list of even bits to a binary string\n    even_bits_binary = ''.join(str(bit) for bit in even_bits)\n    \n    # Convert the binary string to an integer\n    even_bits_int = int(even_bits_binary, 2)\n    \n    # Return the result of the bitwise AND operation\n    return n & even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # Check if the bit is even\n        if int(bit) % 2 == 0:\n            # Set the bit to 1\n            result += 2**(len(bin(n)[2:]) - int(bit))\n            \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        # Extract the last bit from n\n        last_bit = n % 2\n        \n        # If the last bit is even, set it to 1\n        if last_bit == 0:\n            n = n ^ (1 << (n.bit_length() - 1))\n        \n        # Remove the last bit from n\n        n = n >> 1\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits set in the number\n    even_bits = 0\n    \n    # Loop through each bit of the number and set the corresponding bit in the even_bits variable to 1\n    for bit in bin(n)[2:]:\n        if int(bit) == 1:\n            even_bits += 1\n    \n    # Return the updated even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each bit of the input number\n    for i in range(len(bin(n)[2:])): \n\n        # Check if the current bit is even\n        if int(bin(n)[2+i]) % 2 == 0: \n\n            # Set the current bit to 1\n            result.append(1)\n\n        else: \n\n            # Set the current bit to 0\n            result.append(0)\n\n    # Convert the list to an integer and return it\n    return int(\"\".join(str(bit) for bit in result))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through each bit in the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append a 1 to the result string\n        if bit == \"0\":\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Create an empty bit array\n    bit_array = [0] * (n.bit_length() + 1)\n    \n    # Iterate through each bit in the given number\n    for bit in n.to_bytes(n.bit_length(), byteorder='big'):\n        # If the bit is even, set its corresponding index in the bit array to 1\n        if int(bit) % 2 == 0:\n            bit_array[int(bit)] = 1\n    \n    # Convert the bit array back to a number and return it\n    return int.from_bytes(bytearray(bit_array), byteorder='big')"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the bits of the number\n    bits = []\n    \n    # Loop through each digit of the number\n    for digit in str(n):\n        # If the digit is an even number, append it to the list\n        if int(digit) % 2 == 0:\n            bits.append(int(digit))\n    \n    # Convert the list of bits to an integer and return it\n    return int(''.join(str(bit) for bit in bits))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object to count the occurrences of each tuple\n    count_obj = Counter(test_list)\n\n    # Return the dictionary containing the counts\n    return count_obj"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the current tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count for that tuple\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary with the counts of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if string[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            if j!= i and str[i:j]!= '': \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if str[i:j] and str[i:j]!='' and str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    total = 0\n    for i in range(n-1, -1, -1):\n        for j in range(i+2, m+1):\n            if i==0:\n                if j<=2*n:\n                    total += 1\n            elif j%2!=0 and j>=2*i and j<=m:\n                total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def generate_sequences(n, m, sequence):\n        if len(sequence) == n:\n            yield sequence\n        else:\n            for i in range(max(1, sequence[-1] // 2), m):\n                for seq in generate_sequences(n, m, sequence + [i]):\n                    yield seq\n\n    total_sequences = 0\n    for sequence in generate_sequences(n, m, []):\n        total_sequences += 1\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m+1):\n        for j in range(i, m+1):\n            if j % 2 == 0 and j >= 2*i and j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize a list to store the current sequence\n    sequence = []\n    # Initialize a counter variable to keep track of the total number of sequences\n    count = 0\n    # Loop through the sequence of integers\n    for i in range(2,m+1):\n        # Check if the current integer is within the required range\n        if i <= m - 2*i:\n            # If it is, add it to the sequence and increase the counter variable\n            sequence.append(i)\n            count += 1\n        # Check if the current integer is already in the sequence\n        elif i in sequence:\n            # If it is, remove it from the sequence and decrease the counter variable\n            sequence.remove(i)\n            count -= 1\n    # If the sequence is of length n, add it to the count\n    if len(sequence) == n:\n        count += 1\n    # Return the final count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m):\n        if i >= 2 * (n-1) and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables for first two elements\n    sequence = [1, 2]\n\n    # Initialize counter for number of sequences\n    count = 2\n\n    # Loop through all possible sequences up to length n\n    for i in range(2, n + 1):\n        # Initialize a new sequence with the next element at the current position\n        new_sequence = [sequence[i - 1] + 2 * sequence[i - 2]]\n        # Loop through the remaining elements in the current sequence\n        for j in range(i):\n            # Add the current element to the new sequence if it's within the range and greater than or equal to twice the previous element\n            if sequence[j] + sequence[j + 1] <= m and sequence[j] + sequence[j + 1] > 2 * sequence[j]:\n                new_sequence.append(sequence[j] + sequence[j + 1])\n        # Increment the count of sequences\n        count *= len(new_sequence)\n        # Update the current sequence with the new sequence\n        sequence = new_sequence\n\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = [1]\n    for i in range(n):\n        for j in range(len(sequence)):\n            if sequence[j] + sequence[j-1] <= m and sequence[j] + sequence[j-1] >= 2*sequence[j-1]:\n                sequence.append(sequence[j] + sequence[j-1])\n        total_sequences += len(sequence)\n        sequence = [1]\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    def count_sequences(arr, n):\n        count = 0\n        for i in range(len(arr) - n + 1):\n            sub_arr = arr[i:i + n]\n            if len(sub_arr) == n and binary_search(sub_arr, 2 * sub_arr[-1])!= -1:\n                count += 1\n        return count\n\n    def helper(m, n):\n        if n == 1:\n            return m\n        elif n % 2 == 0:\n            return helper(2 * m, n // 2)\n        else:\n            return helper(m, (n - 1) // 2)\n\n    total_sequences = count_sequences(range(2, helper(m, n) + 1), n)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2*i and i <= m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = []\n    for i in range(1,m+1):\n        if i >= 2*sequence[-1] < m:\n            sequence.append(i)\n            count += 1\n            if len(sequence) == n:\n                return count\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.extend(list2)\n    else:\n        list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2.pop(0)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the last element of the first list\n    last_elem = list1[-1]\n    # Set the length of the first list to be one less than the length of the second list\n    list1_length = len(list1) - len(list2)\n    # Set the length of the second list to be the same as the last element of the first list\n    list2_length = last_elem\n    # Concatenate the two lists\n    new_list = list1 + list2[:list2_length]\n    # Set the new last element of the first list to be the last element of the concatenated list\n    list1[-1] = new_list[-1]\n    # Set the new length of the first list to be the same as the length of the concatenated list\n    list1_length = len(new_list)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError(\"The first list must have at least as many elements as the second list.\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # get the length of the first list\n    length = len(list1)\n    \n    # iterate through the first list from the last element to the second to last element\n    for i in range(length-2, -1, -1):\n        # append the last element of the second list to the first list\n        list1.append(list2[length-1])\n        \n        # remove the last element of the second list\n        list2.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    # Get the last index of the first list\n    last_index = length - 1\n    # Get the elements of the second list\n    elements = list2[-length:]\n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = elements\n    # Print the updated list\n    print(list1)\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    This function takes in a string as input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = N // 2\n    while i**2 <= N:\n        i += 1\n    return math.sqrt(i**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    if N < 2:\n        return N\n\n    # sqrt(N) is an odd number\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N**2 == N:\n        N += 1\n        while N**2 <= N:\n            N += 1\n\n    # sqrt(N) is an even number\n    else:\n        sqrt_N -= 1\n        while sqrt_N**2 > N:\n            sqrt_N -= 1\n\n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = math.sqrt(N)\n    if sqrtN.is_integer():\n        sqrtN += 1\n    else:\n        sqrtN += 0.5\n\n    return int(sqrtN)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        if sqrt_N * sqrt_N == N:\n            return sqrt_N * (sqrt_N + 1)\n        sqrt_N -= 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # convert N to float and calculate its square root\n    root_n = math.sqrt(N)\n    \n    # calculate next integer part of the square root of N\n    next_root = int(root_n)\n    \n    # calculate difference between square root of N and next integer part\n    diff = abs(root_n - next_root)\n    \n    # check if difference is greater than 1\n    if diff > 1:\n        next_root = next_root + 1\n        \n    # return next perfect square greater than N\n    return next_root ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # round the square root to the nearest integer\n    sqrt_N = round(sqrt_N)\n\n    # multiply the square root by the square root\n    sqrt_sqrt_N = sqrt_N * sqrt_N\n\n    # add 1 to the square root\n    sqrt_sqrt_N += 1\n\n    # return the square root\n    return sqrt_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    # Find the next perfect square greater than sqrt_N\n    next_sqrt = int(math.ceil(sqrt_N ** 2)) + 1\n    # If next_sqrt is greater than N, return N\n    if next_sqrt > N:\n        return N\n    # If next_sqrt is less than N, return next_sqrt\n    else:\n        return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n    # if sqrt_N is an integer, return sqrt_N+1\n    if sqrt_N.is_integer():\n        return int(sqrt_N)+1\n    # if sqrt_N is an odd number, return sqrt_N+2\n    else:\n        return int(sqrt_N)+2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        sqrt_N = math.sqrt(N)\n        if int(sqrt_N ** 2) == sqrt_N:\n            return int(sqrt_N ** 2) + 1\n        else:\n            N += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # initialize variables\n    n = N\n    a = 1\n    \n    # iterate until we find a greater perfect square than N\n    while True:\n        a += 1\n        b = int(math.sqrt(a))\n        if a > n:\n            break\n        # check if the next perfect square is greater than n\n        if a ** 2 > n:\n            return a\n    \n    # return None if we didn't find a next perfect square\n    return None"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        return 0\n\n    # Initialize the maximum sum and the current sum\n    max_sum = arr[0]\n    current_sum = 0\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] >= arr[i-1]:\n            current_sum += arr[i]\n        else:\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the current sum\n            current_sum = arr[i]\n\n    # Check if the current sum is greater than the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Mark the beginning of a increasing and decreasing subsequence\n    increasing_start = False\n    decreasing_start = False\n\n    # Initialize the maximum sum found so far\n    max_sum_found = float('-inf')\n\n    # Initialize the maximum sum seen so far in both increasing and decreasing subsequences\n    max_sum_increase = float('-inf')\n    max_sum_decrease = float('-inf')\n\n    # Traverse the array from left to right\n    for i in range(n):\n        # If the current element is increasing, update the maximum sum seen so far in the increasing subsequence\n        if arr[i] > arr[i - 1]:\n            if increasing_start:\n                max_sum_increase = max(max_sum_increase, max_sum_found + arr[i])\n            else:\n                increasing_start = True\n                max_sum_increase = max_sum_found = arr[i]\n\n        # If the current element is decreasing, update the maximum sum seen so far in the decreasing subsequence\n        elif arr[i] < arr[i - 1]:\n            if decreasing_start:\n                max_sum_decrease = max(max_sum_decrease, max_sum_found + arr[i])\n            else:\n                decreasing_start = True\n                max_sum_decrease = max_sum_found = arr[i]\n\n        # If the current element is neither increasing nor decreasing, update the maximum sum found so far\n        else:\n            max_sum_found = max(max_sum_found, max_sum_increase, max_sum_decrease)\n\n    return max(max_sum_increase, max_sum_decrease)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables for the left and right subarrays\n    left = [0] * n\n    right = [0] * n\n\n    # Fill the left and right subarrays using the previous maximum sum values\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            left[i] = left[i - 1] + arr[i]\n        else:\n            left[i] = max(left[i - 1], arr[i])\n\n    for j in range(n - 2, -1, -1):\n        if arr[j] > arr[j + 1]:\n            right[j] = right[j + 1] + arr[j]\n        else:\n            right[j] = max(right[j + 1], arr[j])\n\n    # Calculate the maximum sum of the subarray using the values in left and right subarrays\n    max_left_sum = max(left)\n    max_right_sum = max(right)\n    max_sum_bitonic = left[0] + right[n - 1]\n\n    # Find the maximum sum of a subarray that is both increasing and decreasing\n    max_increasing_sum = max_left_sum\n    max_decreasing_sum = max_right_sum\n    for i in range(1, n - 1):\n        if left[i] < right[i] and left[i] > max_increasing_sum:\n            max_increasing_sum = left[i]\n        if right[i] > left[i] and right[i] < max_decreasing_sum:\n            max_decreasing_sum = right[i]\n\n    # Return the maximum sum of the subarray that is both increasing and decreasing\n    return max(max_increasing_sum, max_decreasing_sum, max_sum_bitonic)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n == 1 else 0\n    \n    max_sum = max(arr[0], arr[-1])\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            max_sum = max(max_sum + arr[i], arr[i])\n        else:\n            max_sum = max(max_sum + arr[i], 0)\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the maximum sum to zero\n    max_so_far = 0\n    # Initialize the maximum sum ending at each index of the array\n    max_ending_here = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is less than the previous maximum, update the maximum sum ending here\n        if arr[i] < arr[i-1]:\n            max_ending_here = arr[i]\n        # Update the maximum sum so far if the current element is greater than or equal to the previous maximum\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = arr[i]\n    # Return the maximum sum so far\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    if arr[0] < arr[1]:\n        return max_sum(arr[1:])\n    else:\n        max1 = max_sum(arr[1:])\n        max2 = max_sum(arr[:-1])\n        return max(max1, max2)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        if arr[0] < arr[1]:\n            if arr[1] > arr[2]:\n                return arr[0] + max_sum([arr[1], arr[2]])\n            else:\n                return arr[0] + max_sum([arr[2], arr[1]])\n        else:\n            if arr[2] > arr[1]:\n                return arr[1] + max_sum([arr[2], arr[0]])\n            else:\n                return arr[1] + max_sum([arr[0], arr[2]])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return float('-inf')\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = arr[0]\n    right[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        left[i] = max(left[i - 1] + arr[i], arr[i])\n\n    for i in range(n - 2, -1, -1):\n        right[i] = max(right[i + 1] + arr[i], arr[i])\n\n    left_sum = right_sum = 0\n    for i in range(n):\n        left_sum += left[i]\n        right_sum += right[i]\n\n    return max(left_sum, right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # if the element is increasing, then the ending here is the maximum of the current element and the max ending so far\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n        else:\n            # if the element is decreasing, then the ending here is the minimum of the current element and the max ending so far\n            max_ending_here = min(arr[i], max_ending_here + arr[i])\n        \n        # update max_so_far if the ending here is greater\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Check if the array is increasing or decreasing\n    increasing = arr[0] < arr[1]\n    for i in range(1, n - 1):\n        if increasing and arr[i] > arr[i + 1]:\n            increasing = False\n        elif not increasing and arr[i] < arr[i + 1]:\n            increasing = True\n\n    if increasing:\n        # If the array is increasing, check for decreasing subsequences\n        max_sum_decreasing = max_sum_increasing = 0\n        for i in range(1, n - 1):\n            # Get the sum of the increasing subsequence up to index i\n            sum_increasing = sum(arr[j] for j in range(i))\n            # Get the sum of the decreasing subsequence up to index i\n            sum_decreasing = sum(arr[j] for j in range(n - 1, i, -1))\n\n            max_sum_increasing = max(max_sum_increasing, sum_increasing)\n            max_sum_decreasing = max(max_sum_decreasing, sum_decreasing)\n\n        return max(max_sum_increasing, max_sum_decreasing)\n    else:\n        # If the array is decreasing, check for increasing subsequences\n        max_sum_increasing = max_sum_decreasing = 0\n        for i in range(1, n - 1):\n            # Get the sum of the increasing subsequence up to index i\n            sum_increasing = sum(arr[j] for j in range(i))\n            # Get the sum of the decreasing subsequence up to index i\n            sum_decreasing = sum(arr[j] for j in range(n - 1, i, -1))\n\n            max_sum_increasing = max(max_sum_increasing, sum_increasing)\n            max_sum_decreasing = max(max_sum_decreasing, sum_decreasing)\n\n        return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes the square root of a given number using the Babylonian method.\n    \"\"\"\n    # Initialize the first term of the sequence and the sequence of terms\n    a = 1.0\n    b = 0.5 * (number + a * a)\n    sequence = [a]\n    while b > 0.000001:\n        a = b\n        b = 0.5 * (number + a * a)\n        sequence.append(a)\n    # Find the index of the last term in the sequence that is within 1e-6 of the true value\n    index = len(sequence) - 1\n    while index >= 0:\n        if abs(sequence[index] - math.sqrt(number)) < 1e-6:\n            break\n        index -= 1\n    # Return the value of the square root at that index\n    return sequence[index]"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # calculate the initial approximation\n    x0 = number / 2.0\n    \n    # loop until the difference between the previous two approximation is less than epsilon\n    while abs(x0 - x0**2) > 1e-6:\n        # update the approximation\n        x1 = x0 - x0**2 / (2*x0)\n        \n        # update the initial approximation\n        x0 = x1\n    \n    # return the final approximation\n    return x0"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.00001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize the estimate to be the square root of the input number\n    estimate = number ** 0.5\n\n    # Iterate until the estimate converges to a tolerance of 1e-6\n    while abs(estimate - number / estimate) > 1e-6:\n        estimate = (number / estimate) + estimate / (number / estimate)\n\n    return estimate"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize a variable to store the current approximation\n    guess = 1\n    # Initialize a variable to store the previous approximation\n    prev_guess = 0\n    # Initialize a variable to store the number of iterations\n    iterations = 0\n    # Initialize a variable to store the difference between the previous and current approximations\n    delta = 1\n    # Loop until the difference between the previous and current approximations is less than or equal to a tolerance value\n    while delta > 1e-10:\n        # Compute the next approximation by averaging the current and previous approximations\n        next_guess = (guess + prev_guess) / 2\n        # Update the previous and current approximations\n        prev_guess = guess\n        guess = next_guess\n        # Update the number of iterations\n        iterations += 1\n        # Compute the difference between the current and next approximations\n        delta = abs(guess - next_guess)\n    # Return the final approximation and the number of iterations taken\n    return guess, iterations"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number/2 # initial estimate of the square root\n    y = (x+number/x)/2 # iterate until the estimate converges\n    \n    while abs(x-y) > 0.0001: # continue until the difference between x and y is less than 0.0001\n        x = y\n        y = (x+number/x)/2\n        \n    return y # return the final estimate"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Convert the input number to a float\n    number = float(number)\n\n    # Use the babylonian method to find the square root\n    x0 = number\n    x1 = (number + number / x0) / 2\n    x2 = (number + x1) / 2\n\n    # Repeat until the difference between the last two numbers is less than the desired precision\n    precision = 0.00001\n    while abs(x2 - x1) > precision:\n        x0 = x1\n        x1 = (number + number / x0) / 2\n        x2 = (number + x1) / 2\n\n    # Return the final result\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Calculate the initial guess for the square root\n    initial_guess = number / 2\n\n    # Set a maximum number of iterations\n    max_iterations = 100\n\n    # Initialize the number of iterations\n    iterations = 0\n\n    # Initialize the squared distance between the initial guess and the square root\n    squared_distance = 0\n\n    # Initialize the difference between the initial guess and the square root\n    difference = 0\n\n    # While the difference between the initial guess and the square root is greater than 0.001 and the maximum number of iterations has not been reached...\n    while difference > 0.001 and iterations < max_iterations:\n\n        # Compute the square of the difference between the initial guess and the square root\n        squared_difference = difference * difference\n\n        # Calculate the next guess for the square root\n        next_guess = initial_guess - (number / initial_guess)\n\n        # Update the number of iterations\n        iterations += 1\n\n        # Calculate the squared distance between the initial guess and the next guess\n        squared_distance = (initial_guess - next_guess) * (initial_guess - next_guess)\n\n        # Calculate the difference between the initial guess and the next guess\n        difference = next_guess - initial_guess\n\n        # Update the initial guess to the next guess\n        initial_guess = next_guess\n\n    # If the maximum number of iterations has been reached...\n    if iterations == max_iterations:\n        # Raise an error message\n        raise ValueError('Maximum number of iterations reached.')\n\n    # Return the square root\n    return initial_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = number / 2.0\n    while abs(x**2 - number) > 0.0001:\n        x = (x + number / x) / 2.0\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initial guess\n    x = number / 2\n\n    # Error tolerance\n    tolerance = 1e-6\n\n    # Maximum number of iterations\n    max_iterations = 100\n\n    # Number of iterations\n    iterations = 0\n\n    # While the difference between the current guess and the square root of the number is greater than the specified tolerance and the maximum number of iterations has not been reached...\n    while abs(x * x - number) > tolerance and iterations < max_iterations:\n        # Compute the next guess\n        x = (x + number / x) / 2\n\n        # Increment the number of iterations\n        iterations += 1\n\n    # Return the final guess as the square root of the number\n    if iterations < max_iterations:\n        return x\n    else:\n        print(\"Convergence error: maximum number of iterations reached.\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store the length of longest palindromic subsequence for all \n    # substrings of length 'i' \n    # Initialize all values in the first row as 1 \n    dp = [[1] * n for _ in range(n)] \n\n    # Fill the table in bottom up manner \n    for i in range(1, n): \n        for j in range(i): \n            if str[i] == str[j]: \n                # If current characters are same, then \n                # max length of palindromic subsequence \n                # between substring str[j...i] is 2 + LPS[j+1...i-1] \n                dp[i][j] = 2 + dp[j+1][i-1]\n            else: \n                # If current characters are not same, then \n                # max length of palindromic subsequence \n                # between substring str[j...i] is LPS[j+1...i] \n                dp[i][j] = max(dp[i][j], dp[j+1][i]) \n\n    return dp[n-1][0] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    # create a dictionary to store the length of the longest palindromic subsequence ending at each position of the string\n    dp = [1] * len(str)\n\n    # find the longest palindromic subsequence ending at each position of the string\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n\n    # return the length of the longest palindromic subsequence\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(str) < 2:\n        return len(str)\n    else:\n        max_length = 1\n        for i in range(len(str)):\n            if i == 0 or str[i] == str[i-1]:\n                lps_length = 2 + lps(str[i+1:])\n                if lps_length > max_length:\n                    max_length = lps_length\n        return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    if len(str) < 2:\n        return len(str)\n    \n    table = [[0] * (len(str)+1) for i in range(len(str)+1)]\n    \n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the length of longest palindromic subsequences\n    # for all possible prefixes of the given string\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    # Base case\n    if len(str) == 1:\n        return 1\n\n    # Initialize two variables to keep track of the length of the longest palindromic subsequence and its starting index\n    max_length = 1\n    start_index = 0\n\n    # Iterate through the string and check if the current character is a palindrome\n    for i in range(len(str)):\n        # Check if the left and right characters of the current character are the same\n        if str[i] == str[len(str) - 1 - i]:\n            # If so, update the start index and calculate the length of the palindromic subsequence\n            start_index = i\n            max_length = 2 * max_length + 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n\n    # create a 2D table to store the length of longest palindromic subsequence ending at each index\n    table = [[0] * n for i in range(n)]\n\n    # base case:\n    # if a character is a palindrome, its length is 1\n    for i in range(n):\n        if str[i] == str[i]:\n            table[i][i] = 1\n\n    # fill in the table\n    for len_ in range(3, n + 1):\n        for i in range(n - len_ + 1):\n            j = i + len_ - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D array to store the lengths of longest palindromic subsequences\n    table = [[0] * (len(str)+1) for _ in range(len(str)+1)]\n\n    # Initialize the first row and first column of the table\n    for i in range(len(str)+1):\n        table[i][0] = 0\n        table[0][i] = 0\n\n    # Fill in the table using dynamic programming\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D array to store the lengths of LPS for all substrings of str\n    dp = [[0] * n for _ in range(n)]\n    # Initialize LPS values for all substrings of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Initialize LPS values for all substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    # Fill the rest of the LPS values in O(n^2) time complexity\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n    # Return the maximum LPS length\n    return max(dp[-1])"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D table to store the lengths of longest palindromic subsequences ending at each index\n    table = [[0] * n for i in range(n)]\n\n    # base case: all subsequences are single characters\n    for i in range(n):\n        table[i][i] = 1\n\n    # fill in the table using dynamic programming\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n    \n    # calculate the sum of harmonics up to n-1\n    for i in range(1, n+1):\n        sum += 1/i\n        count += 1\n        \n    # calculate the harmonic sum of n-1\n    harmonic_sum = (n*sum) / (count*n*(n-1))\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum\n\nn = 10\nprint(f\"The harmonic sum of {n-1} is: {harmonic_sum(n)}\")"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/n - 1/n**2 + 1/n**3 - 1/n**4 +..."
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * (n*(n-1) // 2)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n+1)]) / n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n) * (n-2) + (1/n) * (n-2) * (n-3) +... + (1/n) * (n-2) * (n-3) *... * (n-n+1)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the unique elements from both arrays\n    unique_set = set(array_nums1 + array_nums2)\n    # Initialize an empty list to store the intersection\n    intersection_list = []\n    # Iterate through the unique set and add the elements to the intersection list\n    for num in unique_set:\n        if num in array_nums1 and num in array_nums2:\n            intersection_list.append(num)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    intersection = set_nums1.intersection(set_nums2)\n\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the count of elements in array_nums1\n    count_dict = {}\n    # loop through array_nums1 and add each element to the dictionary\n    for num in array_nums1:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # initialize an empty list to store the intersection elements\n    intersection = []\n    \n    # loop through array_nums2 and check if each element is in the dictionary\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection.append(num)\n            count_dict[num] -= 1\n            \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection_list.append(num1)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # First, create two empty dictionaries to store the counts of each number in each array\n    count1 = {}\n    count2 = {}\n\n    # Populate the dictionaries with the counts of each number in each array\n    for num in array_nums1:\n        if num in count1:\n            count1[num] += 1\n        else:\n            count1[num] = 1\n\n    for num in array_nums2:\n        if num in count2:\n            count2[num] += 1\n        else:\n            count2[num] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection = {}\n    for num in count1.keys():\n        if num in count2 and count1[num] > 0 and count2[num] > 0:\n            intersection[num] = max(count1[num], count2[num])\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays, and returns a new array that contains the intersection of the two arrays.\n    \"\"\"\n\n    # Create an empty set to store unique elements of array_nums1\n    unique_nums1 = set(array_nums1)\n\n    # Create an empty set to store unique elements of array_nums2\n    unique_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and return it as a list\n    return list(unique_nums1.intersection(unique_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = [x for x in array_nums1 if x in array_nums2]\n    # Sort the intersection array in ascending order\n    intersection.sort()\n    # Return the sorted intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Using a dictionary to store the count of each number in array_nums1\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Using another dictionary to store the count of each number in array_nums2\n    intersection_dict = {}\n    for num in array_nums2:\n        if num in count_dict and num not in intersection_dict:\n            intersection_dict[num] = count_dict[num]\n\n    # Converting the dictionary to a list of tuples and returning it\n    return list(intersection_dict.items())"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.insert(i+1, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the element before each element in the list and returns the resulting list.\n\n    Parameters:\n    lst (list): The list to modify.\n    elem (any): The element to insert.\n\n    Returns:\n    list: The modified list with the element inserted before each element.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(elem)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.insert(0, element)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        arg = cmath.phase(num)\n        result.append((mag, arg))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = cmath.rect(number)\n        imaginary = cmath.imag(number)\n        magnitude = cmath.abs(number)\n        angle = cmath.phase(number)\n        print(\"Real part: \", real)\n        print(\"Imaginary part: \", imaginary)\n        print(\"Magnitude: \", magnitude)\n        print(\"Angle: \", angle)\n        print(\"\\n\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        real = cmath.rect(num.real)\n        imag = cmath.rect(num.imag)\n        modulus = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        polar.append((modulus, angle))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real_part = number.real\n        imag_part = number.imag\n        magnitude = cmath.sqrt(real_part**2 + imag_part**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coordinates = []\n    \n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        polar_coordinates.append((magnitude, phase))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # Loop through each complex number in the list\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates in a formatted string\n        print(f\"({r}, {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Check if the input is a complex number\n        if isinstance(num, complex):\n            # Convert the complex number to polar coordinates\n            r = cmath.abs(num)\n            theta = cmath.phase(num)\n            # Print the polar coordinates\n            print('(%.2f, %.2f)' % (r.real, r.imag))\n        else:\n            print(\"Error: Input is not a complex number!\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = number\n        if imag == 0:\n            # for magnitude 0, return the angle in degrees\n            angle = 0\n        else:\n            # calculate the angle in radians\n            angle = cmath.phase(number) * 180 / cmath.pi\n\n        # convert the angle from radians to degrees\n        angle = round(angle, 2)\n\n        # create a new tuple with the magnitude and angle\n        polar = (abs(number), angle)\n\n        # print the polar coordinates\n        print(polar)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            x, y = num.real, num.imag\n            r = cmath.sqrt(x**2 + y**2)\n            theta = cmath.phase(num)\n            print(f\"{num} in polar form is ({r}, {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        angle = cmath.phase(num) * 180.0 / cmath.pi\n        magnitude = cmath.abs(num)\n        # store the polar coordinates in a list\n        polar_coords.append((angle, magnitude))\n    return polar_coords"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n-1):\n            result.append((i,)+j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations with repetition of l with length n\n    for i in combinations_with_replacement(l, n):\n        yield tuple(i)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    # Generate all possible combinations of length n from the list\n    combos = combinations_with_replacement(lst, n)\n    # Create a list to store the combinations\n    result = []\n    # Iterate through each combination and add it to the result list as a tuple\n    for combo in combos:\n        result.append(tuple(combo))\n    # Return the result list\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            combs.append((l[i], ) + tuple(j))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        raise ValueError(\"n should be less than or equal to the length of the list.\")\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # initialize an empty list to store the combinations\n    comb_list = []\n\n    # use itertools.combinations_with_replacement to generate all combinations with repetition\n    for comb in combinations_with_replacement(l, n):\n        # convert the combination to a tuple and append it to the comb_list\n        comb_list.append(tuple(comb))\n\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        \n        # Check if the number is prime\n        is_prime = True\n        \n        # Loop through all numbers from 2 to the square root of the current number\n        for j in range(2, int(i**0.5)+1):\n            \n            # If the number is divisible by any number in the range, it's not prime\n            if i % j == 0:\n                is_prime = False\n                break\n            \n        # If the number is prime, increment the count\n        if is_prime:\n            count += 1\n    \n    # Return the count of prime numbers less than n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i <= n:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i <= n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_prime(num):\n    '''\n    Write a python function that takes in a non-negative number and returns True if it is a prime number and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize a variable to store the count of prime numbers\n    count = 0\n\n    # Loop through all numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the number is prime, increment the count variable\n            count += 1\n\n    # Return the count of prime numbers less than n\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = max(test_tup1, test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    if max_val1 > max_val2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    \n    # Initialize the maximum values and indexes\n    max1 = test_tup1[0]\n    max2 = test_tup2[0]\n    index1 = 0\n    index2 = 0\n    \n    # Loop through the two tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n            index1 = i\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n            index2 = i\n    \n    # Check if there was a tie for maximum value\n    if max1 == max2:\n        return \"Error: There was a tie for maximum value.\"\n    else:\n        return (max1, max2), (index1, index2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If the first tuple has a greater value, return it\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    # If the second tuple has a greater value, return it\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    # If both tuples have the same value, return the first tuple\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Initialize variables\n    max1 = max2 = 0\n    # Iterate through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup1[i] > max2:\n            max2 = test_tup1[i]\n        if test_tup2[i] > max1:\n            max2 = max1\n            max1 = test_tup2[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    # Return the tuple with the maximum sum\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Create a list to store the maximum element in each tuple\n    max_list = []\n    \n    # Iterate through the tuple elements and find the maximum element\n    for i in range(len1):\n        for j in range(len2):\n            # Find the maximum element in the current pair\n            max_val = max(test_tup1[i], test_tup2[j])\n            \n            # Add the maximum element to the list\n            max_list.append(max_val)\n    \n    # Create a new tuple with the maximum elements\n    new_tup = tuple(max_list)\n    \n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max2 = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Determine the length of the tuples\n    length = len(test_tup1)\n\n    # Loop through each element in the tuples\n    for i in range(length):\n        # Compare the current element in the first tuple with the current element in the second tuple\n        if test_tup1[i] < test_tup2[i]:\n            # If the current element in the first tuple is smaller, swap the elements\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n\n    # Return the maximum tuple\n    return test_tup1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of primes up to n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    # Iterate over the odd numbers up to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            # Mark all multiples of i as not prime\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n    \n    # Iterate over the remaining numbers and find the nth prime\n    for i in range(2, n + 1):\n        if primes[i]:\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize count to 0\n    count = 0\n    # initialize i to 2\n    i = 2\n    # loop until count reaches n\n    while count < n:\n        # check if i is a newman-shanks-williams prime\n        is_prime = True\n        # loop through previous primes until i is found to be a newman-shanks-williams prime\n        for j in range(2, i//2+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is a newman-shanks-williams prime, increment count\n        if is_prime:\n            count += 1\n        # increment i\n        i += 1\n    # return the nth newman-shanks-williams prime number\n    return i-1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num): \n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n\n    def find_next_prime(num): \n        \"\"\"\n        Helper function to find the next prime number.\n        \"\"\"\n        i = num + 1\n        while not is_prime(i): \n            i += 1\n        return i \n\n    next_prime = find_next_prime(2)\n    count = 0\n    while count < n: \n        next_prime = find_next_prime(next_prime)\n        count += 1\n    return next_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 2 \n    else: \n        result = 3\n        while result <= n: \n            if result % 2 == 0: \n                result += 1 \n            else: \n                i = 3\n                while i <= result**0.5: \n                    if result % i == 0: \n                        break \n                    i += 2\n                if i > result**0.5: \n                    result += 1 \n                else: \n                    result += i - result\n        return result"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(num):\n        while not is_prime(num):\n            num += 1\n        return num\n    \n    count = 0\n    current_prime = 1\n    \n    while count < n:\n        current_prime = next_prime(current_prime)\n        count += 1\n    \n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n    \n    # Initialize the value of the current prime number\n    current_prime = 2\n    \n    # Loop until we have counted n primes\n    while count < n:\n        # Check if the current number is prime\n        if all(current_prime % i!= 0 for i in range(2, int(current_prime**0.5) + 1)):\n            # If it is prime, add it to the count\n            count += 1\n        # Increment the current prime number\n        current_prime += 1\n    \n    # Return the nth newman-shanks-williams prime number\n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    count = 0\n\n    # Loop through numbers up to n\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n            # Check if i is prime using sieve of Eratosthenes\n            for j in range(2*i, n+1, i):\n                is_prime[j] = False\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    i = 2\n    prime = True\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Loop until n is reached\n    while count < n:\n        # Check if i is a newman-shanks-williams prime number\n        j = 2\n        while prime and j * j <= i:\n            if i % j == 0:\n                prime = False\n            else:\n                j += 1\n        if prime:\n            count += 1\n\n        # Increment i and check if it is a newman-shanks-williams prime number\n        i += 1\n        prime = True\n        j = 2\n        while prime and j * j <= i:\n            if i % j == 0:\n                prime = False\n            else:\n                j += 1\n        if prime:\n            count += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to store the nth newman prime number\n    count = 1\n\n    # Initialize a list to store the prime numbers found so far\n    primes = [2]\n\n    # Find the nth newman prime number\n    while count < n:\n        # Check if the current number is prime\n        for prime in primes:\n            if prime * prime > count:\n                break\n            elif count % prime == 0:\n                break\n        else:\n            # If the current number is prime, add it to the list of primes found so far\n            primes.append(count)\n\n        count += 1\n\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2 # Initialize the first prime number to 2\n    count = 0 # Initialize the count of primes to 0\n    while count < n: # Loop until we have found n primes\n        is_prime = True # Assume all numbers are prime until proven otherwise\n        # Check if the current number is prime\n        for i in range(2, int(p**0.5)+1): # Loop over all possible divisors of p\n            if p % i == 0: # If p is divisible by i, p is not prime\n                is_prime = False\n                break\n        if is_prime: # If p is prime, add it to the count and move to the next number\n            count += 1\n            p += 1\n    return p # Return the nth prime number"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    # perform element-wise division\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have same length\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize a new list to store the result\n    result_list = []\n    \n    # Iterate through each element of both tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division of corresponding elements in both tuples\n        result_list.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division on the two tuples\n    div_result = [float(a) / float(b) for a, b in zip(test_tup1, test_tup2)]\n    return div_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    \n    # create a new list to store the result\n    result_list = []\n    \n    # loop through each element of the input tuples and perform the division\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    \n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples have different lengths.\")\n        return\n\n    # Perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of input tuples should be equal.\")\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division and store the result in the result_list\n        result_list.append(test_tup1[i] / test_tup2[i])\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements')\n\n    # Perform element-wise division of the tuples\n    result_tup = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of both tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n    \n    # iterate over each element of the tuple\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            # perform division operation\n            result_tup += ((test_tup1[i] / test_tup2[i]),)\n        except ZeroDivisionError:\n            # handle division by zero\n            print(\"Warning: Division by zero detected. Skipping element...\")\n            continue\n    \n    # return the tuple of result\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Given a list `lst` and an integer `L`, this function splits the list into two parts such that the length of the first part is `L`. The resulting lists are returned as a tuple.\n    \"\"\"\n    if len(lst) < L:\n        raise ValueError(\"Length of input list cannot be less than L\")\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize the two parts as empty lists\n    part1 = []\n    part2 = []\n    # Loop through the given list\n    for i in range(len(list1)):\n        # If the current element is less than L, add it to part1\n        if i < L:\n            part1.append(list1[i])\n        # If the current element is greater than or equal to L, add it to part2\n        else:\n            part2.append(list1[i])\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    length = len(list1) // 2\n    \n    # Divide the list into two parts\n    part1 = list1[:length]\n    part2 = list1[length:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on the given length\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"List should have at least L elements\")\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    length_first_part = len(list1) // 2\n    \n    # Split the list into two parts\n    first_part = list1[:length_first_part]\n    second_part = list1[length_first_part:]\n    \n    # Return the two parts in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    '''\n    # Check if the length of the list is greater than L\n    if len(lst) > L:\n        # Get the first L elements of the list\n        first_part = lst[:L]\n        # Get the last element of the list\n        last_element = lst[-1]\n        # Remove the last element from the list\n        lst.pop()\n        # Return a tuple containing the first and last parts of the list\n        return (first_part, lst), last_element\n    else:\n        # If the length of the list is less than or equal to L, return the original list in a tuple\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # split the list into two parts based on the length of the first part\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # return the resulting lists in a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The resulting lists are returned in a tuple.\n    '''\n    # Find the length of the first part of the list\n    first_part_length = len(lst) - L\n    # Create two empty lists to store the two parts of the original list\n    first_part = []\n    second_part = []\n    # Iterate through the original list and copy the elements into the appropriate lists\n    for i in range(L):\n        first_part.append(lst[i])\n    for i in range(L, len(lst)):\n        second_part.append(lst[i])\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (h_age * 7) + 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age >= 1 and h_age <= 4:\n        dog_years = 2\n    elif h_age >= 5 and h_age <= 7:\n        dog_years = 4\n    elif h_age >= 8 and h_age <= 11:\n        dog_years = 6\n    elif h_age >= 12 and h_age <= 14:\n        dog_years = 8\n    elif h_age >= 15 and h_age <= 17:\n        dog_years = 10\n    elif h_age >= 18 and h_age <= 21:\n        dog_years = 12\n    elif h_age >= 22 and h_age <= 24:\n        dog_years = 14\n    elif h_age >= 25 and h_age <= 28:\n        dog_years = 16\n    elif h_age >= 29 and h_age <= 31:\n        dog_years = 18\n    else:\n        dog_years = 20\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * (h_age // 365)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7 + (h_age // 12)\n    if h_age % 12!= 0:\n        dogs_years += 1\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_years = 7 * int(h_age)\n    print(f\"Dog's age in years: {age_years}\")"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert the h_age from hours to days\n    dog_age = h_age / 24\n    # calculate the dog's years in dog's years\n    dog_years = dog_age * 7\n    # return the dog's years\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 1:\n        return [S]\n    else:\n        split_list = []\n        for i in range(0, len(S), step):\n            split_list.append(S[i:i+step])\n        return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    return [S[i::step] for i in range(n)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # create an empty list to hold the resulting lists\n    result = []\n    # loop through each element in the input list\n    for i in range(0, len(S), step):\n        # create a new list with the current element and the remaining elements from the list\n        current_list = [S[i]]\n        for j in range(i+1, min(i+step, len(S))):\n            current_list.append(S[j])\n        # append the current list to the result list\n        result.append(current_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        return []\n    elif len(S) <= step:\n        return [S]\n    else:\n        return [S[:i] + S[i+step:] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create a new empty list to store the resulting lists\n    result = []\n    # loop through the input list, splitting at every nth element\n    for i in range(0, len(S), step):\n        # create a new empty list to store the nth element\n        new_list = []\n        # loop through the elements from the current index to the end of the list\n        for j in range(i, len(S)):\n            # add the current element to the new list\n            new_list.append(S[j])\n        # add the new list to the result list\n        result.append(new_list)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Convert the step parameter to an integer\n    step = int(step)\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Iterate through the list using a for loop\n    for i in range(0, len(S), step):\n        # Create a slice of the original list starting at index i and ending at the end of the list\n        slice_list = S[i:]\n        # Append the slice to the result list\n        result.append(slice_list)\n        \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Create an empty list to store the resulting lists\n    result = []\n    # Loop through the list, splitting at every nth element\n    for i in range(0, len(S), step):\n        # Create a new list with the current element and append it to the result list\n        result.append([S[i]])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube\n    surface_area = l * l * 6\n    print(\"The lateral surface area of the cube is:\", surface_area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area of the cube using the formula:\n    # lateral surface area = 2 * (length * width)\n    area = 2 * (l * l + l * l + l * l)\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Compute the surface area of each face of the cube\n    surface_area_top = l * l\n    surface_area_front = l * l\n    surface_area_left = l * l\n    surface_area_right = l * l\n    surface_area_bottom = l * l\n\n    # Compute the total surface area of the cube\n    surface_area_total = surface_area_top + surface_area_front + surface_area_left + surface_area_right + surface_area_bottom\n\n    return surface_area_total"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    #initialize sum variable to 0\n    sum = 0\n    \n    #loop through odd numbers up to n\n    for i in range(1, n+1, 2):\n        #add square of current odd number to sum variable\n        sum += i*i\n    \n    #return sum of squares of odd numbers up to n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initializing the sum variable to 0\n    sum = 0\n    # initializing a counter variable to 1\n    count = 1\n    # iterating over the first n odd natural numbers\n    while count <= n:\n        # calculating the square of the current number and adding it to the sum\n        sum += count ** 2\n        # incrementing the counter variable by 2 (since we are only counting odd numbers)\n        count += 2\n    # returning the final sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    i = 1\n    star_num = 0\n\n    # Loop until n stars have been printed\n    while i <= n:\n        # Print the current star\n        print('*', end='')\n\n        # Increment the counter for the current star\n        i += 1\n\n        # Increment the star number by 1 for each subsequent star\n        star_num += 1\n\n        # Print a newline to move to the next line after each star\n        print()\n\n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return str(n) + '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter variable to 0\n    counter = 0\n    \n    # loop through the first n-1 rows of the triangle\n    for i in range(1, n):\n        # add the current row to the counter variable\n        counter += i\n        \n        # print the row of stars\n        print('*' * counter)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the base number (counting from 1)\n    base = 1\n    # initialize the result variable\n    result = 0\n    \n    # iterate n times\n    for i in range(1, n+1):\n        # add the base number to the result\n        result += base\n        # move the base number to the next position\n        base = 10*base + 1\n    \n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Start with the first star number (1)\n    start = 1\n    \n    # Multiply it by n to get then'th star number\n    result = start * n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    i = 1\n    count = 1\n\n    # loop through numbers from 1 to n\n    while count <= n:\n        # print the current count\n        print(count)\n\n        # update variables for next iteration\n        count = count * 2\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number to 1\n    star_num = 1\n    \n    # loop through each digit of the number n\n    while n > 0:\n        # add the current digit to the star number\n        star_num *= n % 10\n        # divide the number n by 10 and remove the rightmost digit\n        n //= 10\n    \n    # return the final result\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        print('*' * count)\n        count += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII value using ord() function\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i):i for i in range(97,123)}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n                even_sum += arr[i]\n                even_index = i + 1\n\n    return sum, even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    even_sum = 0\n    index = 0\n    \n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            even_sum += arr[index]\n        \n        total += arr[index]\n        index += 1\n    \n    return even_sum + total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0  \n    even_index = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0:  \n            if arr[i] % 2 == 0:  \n                even_sum += arr[i]  \n                even_index = i  \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                print(\"Sum of even numbers at even positions:\", even_sum)\n                return even_sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize a variable to store the sum of even numbers at even positions\n    even_sum = 0\n\n    # Iterate over each element in the list\n    for i in range(len(arr)):\n\n        # If the element is even and at an even position, add it to the sum\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**power\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(n):\n        sum_of_even_powers += i*i*i*i*i\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the even natural number raised to the fifth power to the sum\n        sum += i ** 5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum_of_powers += i ** 5\n        i += 1\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize a variable to store the sum of even powers\n    total_sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the even power of i raised to the fifth power and add it to the total sum\n        total_sum += i**5\n\n    # return the total sum of even powers\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_natural_numbers = [i for i in range(2, n+1, 2)]\n    return sum([num ** 5 for num in even_natural_numbers])"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i], )\n        else:\n            result_tup += (test_tup1[i], )\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the length of both tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return\n\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= None:\n            test_tup1[i] -= test_tup2[i]\n        else:\n            print(\"Error: Tuples must have the same number of non-None elements.\")\n            return\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    # Loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = []\n        for i in range(len(test_tup1)):\n            result_tup.append(test_tup1[i] - test_tup2[i])\n        return result_tup\n    else:\n        return \"The two tuples must have the same length.\""
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples do not have the same length.\"\n\n    # Initialize a new list to hold the result\n    result = []\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element of the first tuple from the corresponding element of the second tuple\n        result.append(test_tup1[i] - test_tup2[i])\n\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_index_binomial_coeff = 0\n    for i in range(1, n+1, 2):\n        sum_even_index_binomial_coeff += math.comb(n, i)\n    return sum_even_index_binomial_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 1\n    else:\n        coeff_sum = 0\n        for i in range(2, n+1):\n            coeff = math.comb(n, i)\n            if i % 2 == 0:\n                coeff_sum += coeff\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the sum of even index binomial coefficients using a loop\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += math.comb(n,i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff_sum += math.comb(n, 2*i-1)*2*i\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    sum_even_index_coeffs = 0\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if i%2 == 0 and j%2 == 0:\n                sum_even_index_coeffs += math.comb(i, j)\n\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        return \"Error: Please enter a positive integer.\"\n    \n    # Initialize sum and denominator\n    sum_even = 0\n    denominator = 1\n    \n    # Loop through even indices and calculate binomial coefficient\n    for i in range(2, n+1, 2):\n        denominator *= i\n        sum_even += math.comb(n, i-1)*denominator\n    \n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i % 2 == 0 and j % 2 == 0:\n                coeff_sum += math.comb(n, i-j)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n\n    # Find the even index binomial coefficients\n    coeff = [1]\n    for i in range(2, int(math.log2(n))+1):\n        coeff.append(coeff[-1] * 2)\n\n    # Initialize the sum to 0\n    sum_even = 0\n\n    # Sum the even index coefficients\n    for i in range(1, n+1):\n        sum_even += coeff[i-1]\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(1, n+1):\n        even_coeffs = math.comb(n, i, exact=True)\n        if even_coeffs % 2 == 0:\n            sum_even_coeffs += even_coeffs\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and calculates the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n\n    # Calculate the binomial coefficients\n    for i in range(2, n + 1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += binomial_coeff\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    volume = (3.14159 * r * r * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r  # Formula for calculating the surface area of a cylinder\n    volume = area * h / 3  # Formula for calculating the volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # initialize an empty list to store the filtered values\n    filtered_values = []\n\n    # loop through each value in the dictionary\n    for value in dict.values():\n        # if the value is greater than or equal to n, add it to the filtered_values list\n        if value >= n:\n            filtered_values.append(value)\n\n    # return the filtered dictionary\n    return dict(filtered_values)"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {k: v for k, v in dict.items() if v >= n}\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            if count == 1:\n                print(f'The first element of the tuple is {test_tup[i]}')\n            elif count > 1:\n                print(f'There are {count} elements before the first element of the tuple {test_tup[i]}')\n    if count == 0:\n        print('There is no element before the first element in the tuple.')"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, elem in enumerate(test_tup):\n        if i == 0:\n            continue\n        elif elem < test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum of the first n terms of the decagonal series\n    sum_of_terms = n * (n * 6 + 1) // 2\n    return sum_of_terms\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the variable for the sum of the squares of the decagonal numbers\n    sum_of_squares = 0\n\n    # loop through the first n numbers of the decagonal series\n    for i in range(1, n+1):\n        # calculate the sum of the squares of the current number and the previous number of the series\n        sum_of_squares += (i**2 + (n-i)**2)\n\n    # return the sum of the squares of the decagonal numbers\n    return sum_of_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return False\n    if n % 4 == 0:\n        return False\n    temp = n\n    result = 0\n    while temp > 0:\n        result += (temp * (temp + 1)) / 2\n        temp = temp - 2\n    return result == n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n < 1:\n        return False\n\n    decagonal_number = (n * (2 * n - 1)) // 2\n\n    return decagonal_number\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal = decagonal + 2*i\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the first two decagonal numbers\n    decagonal1 = 1\n    decagonal2 = 1\n\n    # Loop through the numbers until n is reached\n    for i in range(n):\n        # Calculate the current decagonal number\n        decagonal = decagonal1 + decagonal2\n\n        # Check if the current decagonal number is equal to n\n        if decagonal == n:\n            # If it is, return True\n            return True\n\n        # Update the first two decagonal numbers\n        decagonal1 = decagonal2\n        decagonal2 = decagonal\n\n    # If the loop is finished without finding the nth decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a counter variable\n    count = 1\n\n    # Calculate the value of the nth decagonal number\n    decagonal = 1\n    \n    # Loop through all numbers from 1 to n and check if each is a decagonal number\n    for i in range(1, n+1):\n        # Calculate the value of the current number\n        current = count + 1\n\n        # Check if the current number is a decagonal number\n        if (current ** 2) + (current - 1) == decagonal:\n            # If the current number is a decagonal number, return True\n            return True\n        \n        # Increment the counter and calculate the next decagonal number\n        count += 1\n        decagonal += (2 * (count - 1))\n    \n    # If the loop completes without finding a decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the list of decagonal numbers\n    decagonal = [0, 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21899, 22262, 22627, 22995, 23366, 23739, 24115, 24493, 24874, 25257, 25642, 26030, 26420, 26812, 27206, 27603, 28002, 28404, 28808, 29215, 29624, 30036, 30449, 30865, 31283, 31703, 32125, 32549, 32976, 33405, 33836, 34270, 34705, 35143, "
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        for i in range(1, n+1):\n            decagonal = (i*i)+(2*i-1)\n            print(decagonal)\n        return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 5 * (n-2)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # initialize variables\n    found = False\n    index = -1\n    \n    # loop through the list and compare each element to the search item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    # return the result as a tuple\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a dictionary to store unique elements\n    unique_dict = {}\n    # loop through the list and add unique elements to the dictionary\n    for element in test_list:\n        if element in unique_dict:\n            return False\n        else:\n            unique_dict[element] = True\n    # if no duplicate elements are found, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all elements in the list are unique, and False otherwise.\n    '''\n    # Use a set to keep track of unique elements\n    unique_set = set(test_list)\n    # If the length of the unique set is equal to the length of the input list, then all elements are unique\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    and False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the corresponding elements element-wise.\n    '''\n    # check if the two lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists should have the same length.\")\n        return None\n    \n    # subtract the corresponding elements element-wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    \n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: lists must have the same length\")\n        return None\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must be of equal length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while n > 0:\n        freq[n % 10] += 1\n        n //= 10\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > 1 and int(digit) > count:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = [0] * 10\n\n    # calculate the frequency of each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # iterate over the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    # if all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Initialize a dictionary to keep track of the frequency of each digit in n\n    freq = {}\n    # Loop through each digit in n\n    for d in str(n):\n        # Increment the frequency of the digit in the dictionary\n        freq[d] = freq.get(d, 0) + 1\n    # Loop through the digits of n again and check if the frequency of each digit is less than or equal to itself\n    for d in str(n):\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # convert the integer to a string and split it into individual digits\n    digits = str(n)\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # iterate over each character in the string\n    for char in digits:\n        # if the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # otherwise, increment the frequency by 1\n        else:\n            freq[char] += 1\n    # iterate over each digit in the string\n    for digit in digits:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > int(digit):\n            return False\n    # if the function gets here, all digits have a frequency of 1 or less\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digit_freq = [0]*10 # initialize an array to store the frequency of each digit\n\n    # iterate through each digit in the number\n    for digit in str(n):\n        digit_freq[int(digit)] += 1 # increment the frequency of the digit by 1\n\n    # iterate through each digit in the frequency array\n    for i in range(10):\n        if digit_freq[i] > i: # if the frequency is greater than the digit itself\n            return False # return False because the frequency is not valid\n\n    return True # if all frequencies are valid, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for i in str(n):\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] > i:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # loop through each item in the list\n    for item in list:\n        # if an item is not equal to the given element, return False\n        if item!= element:\n            return False\n    # if all items in the list are equal to the given element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element as inputs and returns a boolean value indicating whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if all items in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    # If all items are equal to the given element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    if len(list) == 0:\n        return True\n\n    for item in list:\n        if item!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element as input and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    elif len(list) > 1:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]*b[b]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba\\w{2,3}b\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a.*?b{2,3}')\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^ab]*b{2,3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b\\w*')\n    result = pattern.search(text)\n    if result:\n        print(\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=\\b)(a)(b{2,3})(?=\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=(b{2,3}))'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # repeat the array k times\n    arr = a * k\n\n    # find the maximum subarray sum\n    max_sum = max(arr)\n\n    # find the indices of the maximum subarray sum\n    max_sum_indices = [i for i, x in enumerate(arr) if x == max_sum]\n\n    # initialize a variable to store the maximum subarray sum\n    max_subarray_sum = max_sum\n\n    # loop through the indices to find the maximum subarray sum\n    for i in max_sum_indices:\n        # calculate the maximum subarray sum using the indices\n        temp_sum = 0\n        for j in range(i, min(i+k, n-1)):\n            temp_sum += a[j]\n        if temp_sum > max_subarray_sum:\n            max_subarray_sum = temp_sum\n\n    return max_subarray_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    repeat_count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            repeat_count = 1\n        # If the current sum is equal to the maximum sum, increment the repeat count\n        elif curr_sum == max_sum:\n            repeat_count += 1\n\n        # If the repeat count equals k, update the maximum sum with the current sum and reset the repeat count\n        if repeat_count == k:\n            repeat_count = 0\n            max_sum = curr_sum\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a modified array by repeating the input array k times\n    modified_array = [a[i] for i in range(k)] + a\n    modified_array = [0] * (n - k) + modified_array\n\n    # Initialize variables to store the maximum sum of sub-arrays, and the start and end indices of the sub-arrays\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = k\n\n    # Iterate over each sub-array of the modified array and update the maximum sum if a larger sum is found\n    for i in range(n - k + 1):\n        sub_array_sum = modified_array[i:i+k].sum()\n        if sub_array_sum > max_sum:\n            max_sum = sub_array_sum\n            start_index = i\n            end_index = i + k\n\n    return max_sum, start_index, end_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    start = 0\n    end = n - k\n    for i in range(n):\n        if i < end:\n            sub_array = a[start:i+1]\n        else:\n            sub_array = a[start:end+1] + a[:k-1]\n        sub_sum = sum(sub_array)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            start = i\n        end = i\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # initialize the maximum sum as negative infinity\n    max_sum = float('-inf')\n\n    # iterate through the array\n    for i in range(n):\n        # initialize the sum of the modified array as the current element\n        modified_sum = a[i]\n\n        # iterate through the remaining elements of the array\n        for j in range(i, n, k):\n            # add the current element to the sum of the modified array\n            modified_sum += a[j]\n\n            # update the maximum sum if the modified array sum is greater than the current maximum sum\n            if modified_sum > max_sum:\n                max_sum = modified_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf')\n    \n    for i in range(n):\n        if i == 0:\n            max_sum = a[0] * k\n        else:\n            max_sum += a[i] * k\n        \n        for j in range(i + 1, min(i + k, n)):\n            max_sum -= a[j]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array n times\n    for i in range(n): \n        # Repeat the current element k times\n        for j in range(k): \n            # Add the repeated element to the current sum\n            curr_sum += a[i]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum: \n            max_sum = curr_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n    \n    # Initialize the maximum sum\n    max_sum = first_k_sum\n    \n    # Initialize the current sum\n    current_sum = first_k_sum\n    \n    # Iterate over the remaining elements of the array\n    for i in range(k, n):\n        # Calculate the new sum\n        new_sum = first_k_sum + a[i]\n        \n        # Update the maximum sum and the current sum\n        if new_sum > max_sum:\n            max_sum = new_sum\n        current_sum = new_sum\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum as the first element of the array\n    max_sum = a[0]\n    # Initialize the sum of the repeated array as the first element of the array\n    sum_repeated = a[0]\n    # Initialize the count of the repeated array as 1\n    count_repeated = 1\n    # Initialize the sum of the non-repeated array as 0\n    sum_non_repeated = 0\n    # Initialize the count of the non-repeated array as 0\n    count_non_repeated = 0\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # If the sum of the repeated array is greater than the sum of the non-repeated array, update both the maximum sum and the sum of the repeated array\n        if sum_repeated > sum_non_repeated:\n            max_sum = sum_repeated\n            sum_repeated = sum_repeated + a[i]\n            count_repeated = count_repeated + 1\n        # If the sum of the repeated array is less than or equal to the sum of the non-repeated array, update the sum of the repeated array only\n        else:\n            sum_repeated = sum_repeated + a[i]\n            count_repeated = count_repeated + 1\n            \n        # If the sum of the non-repeated array is greater than the sum of the repeated array, update the maximum sum and the sum of the non-repeated array\n        if sum_non_repeated > sum_repeated:\n            max_sum = sum_non_repeated\n            sum_non_repeated = sum_non_repeated + a[i]\n            count_non_repeated = count_non_repeated + 1\n        # If the sum of the non-repeated array is less than or equal to the sum of the repeated array, update the sum of the non-repeated array only\n        else:\n            sum_non_repeated = sum_non_repeated + a[i]\n            count_non_repeated = count_non_repeated + 1\n            \n    # Find the sum of the largest sum of the non-repeated array repeated k times\n    repeated_sum = 0\n    for i in range(k):\n        repeated_sum = repeated_sum + max_sum\n    \n    # Find the sum of the smallest sum of the non-repeated array repeated k times\n    non_repeated_sum = 0\n    for i in range(k):\n        non_repeated_sum = non_repeated_sum + sum_non_repeated\n    \n    # Find the sum of the largest sum of the repeated array repeated k times\n    repeated_sum_max = 0\n    for i in range(k):\n        repeated_sum_max = repeated_sum_max + max_sum\n    \n    # Find the sum of the smallest sum of the repeated array repeated k times\n    repeated_sum_min = 0\n    for i in range(k):\n        repeated_sum_min = repeated_sum_min + sum_repeated\n    \n    # If the maximum sum of the repeated array repeated k times is greater than the maximum sum of the non-repeated array repeated k times, return the maximum sum of the repeated array repeated k times\n    if repeated_sum_max > non_repeated_sum:\n        return repeated_sum_max\n    # If the maximum sum of the repeated array repeated k times is less than the maximum sum of the non-repeated array repeated k times, return the maximum sum of the non-repeated array repeated k times\n    else:\n        return non_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize sum and window sum\n    sum_a = sum_window = 0\n    # Initialize maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Update sum_a and sum_window\n        sum_a += a[i]\n        sum_window += a[i]\n\n        # If window sum is greater than sum_a, update maximum sum\n        if sum_window > sum_a:\n            max_sum = max(max_sum, sum_window)\n\n        # If sum_window becomes greater than sum_a+k, move the window to the left by one position and update the window sum\n        if sum_window > sum_a + k:\n            sum_window -= a[i - k]\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        square = count ** 2\n        sum += square\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square = 0\n    for i in range(1, n+1, 2):\n        sum_square += i*i\n    return sum_square"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize variables\n    sum = 0\n    num = 2\n    # loop through first n even natural numbers and calculate square of each number\n    for i in range(n):\n        sum += num**2\n        num += 2\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the square of the current number\n        square = i**2\n        # add the square to the sum of squares\n        sum_of_squares += square\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max(max_lengths, default=0):\n            max_lengths = [len(list1[i])]\n        else:\n            max_lengths.append(len(list1[i]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Iterate through each list in the input list\n    for lst in list1:\n        # Find the maximum length of the current list\n        current_length = len(lst)\n\n        # If the current length is greater than the current maximum length, update the maximum length\n        if current_length > max(max_lengths):\n            max_lengths = [current_length]\n        elif current_length == max(max_lengths):\n            max_lengths.append(current_length)\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # loop through each list in the input list of lists\n    for lst in list1:\n        # loop through each element in the current list\n        for elem in lst:\n            # check if the length of the current element is greater than or equal to the length of the maximum element\n            if len(elem) >= len(max_lengths) or (len(elem) > 0 and len(elem) == len(max_lengths) and elem < max_lengths[0]):\n                # if so, update the maximum lengths list\n                max_lengths = [elem]\n            elif len(elem) > len(max_lengths):\n                # if the length of the current element is greater than the length of the maximum element and it is not equal to the maximum element itself\n                if elem!= max_lengths[0]:\n                    # add the current element to the maximum lengths list\n                    max_lengths.append(elem)\n    # return the maximum lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize variables to store the lengths of all the lists\n    lengths = []\n    # loop through each list in the list of lists\n    for lst in list1:\n        # loop through each element in the current list and append its length to the lengths list\n        for elem in lst:\n            lengths.append(len(elem))\n    # find the maximum length in the lengths list\n    max_length = max(lengths)\n    # initialize an empty list to store the maximum length lists\n    max_lists = []\n    # loop through each list in the list of lists and append the list of elements with the maximum length to the max_lists list\n    for lst in list1:\n        max_list = [elem for elem in lst if len(elem) == max_length]\n        if len(max_list) > 0:\n            max_lists.append(max_list)\n    # return the max_lists list\n    return max_lists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length of all lists in the input list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_length = max(lengths)\n    max_sublists = [sublist for sublist in list1 if len(sublist) == max_length]\n    return max_sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        sublist_length = len(sublist)\n        if sublist_length not in max_lengths:\n            max_lengths.append(sublist_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways for each number of colors and each number of posts\n    count = [[0] * (n+1) for _ in range(k+1)]\n\n    # Base case: If there is only one color or only one post, there is only one way to paint the fence\n    for i in range(1, k+1):\n        count[i][1] = 1\n    for i in range(1, n+1):\n        count[1][i] = 1\n\n    # Fill the 2D array using dynamic programming\n    for i in range(2, k+1):\n        for j in range(2, n+1):\n            count[i][j] = count[i-1][j-1]\n            if i > 2 and count[i-1][j] == 1 and j > 2 and count[i-2][j-2] == 1:\n                count[i][j] += count[i-1][j] + count[i-2][j-2]\n            count[i][j] %= 10**9 + 7\n\n    # Return the count of ways\n    return count[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, end, colors, used):\n        if start == end:\n            used[colors.index(colors[start])] += 1\n            return 1\n        result = 0\n        for i in range(start, end):\n            if colors[i]!= colors[start] and not used[colors.index(colors[i])]:\n                used[colors.index(colors[i])] = 1\n                result += backtrack(i+1, end, colors, used)\n                used[colors.index(colors[i])] = 0\n        return result\n    \n    colors = ['red', 'blue', 'green', 'yellow', 'purple']\n    used = [0] * k\n    return backtrack(0, n, colors, used)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k, l): \n        if l == 0:\n            return 1\n        if l == 1:\n            return k\n        if l == n-1:\n            return 0\n        return count_ways(n, k, l-1) + count_ways(n, k, l-2)\n    return count_ways(n, k, n-2)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D list to store the number of ways of painting the fence for each number of adjacent posts and k colors\n    ways = [[0]*(k+1) for i in range(n+1)]\n    \n    # Initialize the first row and column with 1\n    for i in range(2,n+1):\n        ways[i][1] = 1\n    \n    # Fill the rest of the table with the combination of adjacent posts and k colors\n    for i in range(2,n+1):\n        for j in range(2,k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the value in the last row and column\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Helper function to check if two colors are the same\n    def same_color(a, b):\n        return a[0] == b[0] and a[1] == b[1] and a[2] == b[2]\n\n    # Initialize the count to 0\n    count = 0\n\n    # Create a 2D array to store the number of ways for each color combination\n    color_ways = [[0] * k for _ in range(n)]\n\n    # Initialize the first row and column of the array\n    for i in range(n):\n        color_ways[i][i] = 1\n\n    # Fill the remaining elements of the array\n    for i in range(2, n):\n        for j in range(k):\n            for l in range(k):\n                for m in range(k):\n                    if same_color((j, l, m), (j, l, i)):\n                        color_ways[i][j] += color_ways[i-1][l] + color_ways[i-1][m]\n\n    # Iterate through the array to find the number of ways with at most 2 adjacent posts having the same color\n    for i in range(n):\n        for j in range(k):\n            for l in range(k):\n                if same_color((j, l, n-1), (j, l, i)):\n                    count += color_ways[n-1][j]\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(current_count, current_color, remaining_posts):\n        if current_count == n:\n            if current_color == color_set[0]:\n                count += 1\n            return\n\n        for i in range(k):\n            if i not in color_set:\n                color_set.append(i)\n                backtrack(current_count + 1, i, remaining_posts)\n                color_set.pop()\n\n        for i in range(len(color_set)):\n            if i not in remaining_posts:\n                remaining_posts.append(i)\n                backtrack(current_count + 1, current_color, remaining_posts)\n                remaining_posts.pop()\n\n    count = 0\n    color_set = []\n    remaining_posts = list(range(k))\n    backtrack(0, 0, remaining_posts)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return count_no_of_ways(n-1, k) * (k-1) + count_no_of_ways(n-2, k) * (k-1) + count_no_of_ways(n-3, k) * (k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def paint_fence(colors, i, j, count):\n        if i > n:\n            return count\n        elif i == j:\n            if colors[i]!= colors[j]:\n                return 0\n            else:\n                return paint_fence(colors, i+1, j, count+1)\n        else:\n            if colors[i]!= colors[j]:\n                return paint_fence(colors, i+1, j, count) + paint_fence(colors, i, j-1, count) + paint_fence(colors, i, j+1, count)\n            else:\n                return paint_fence(colors, i+1, j, count) + paint_fence(colors, i, j-1, count) + paint_fence(colors, i, j+1, count)\n    \n    colors = [i for i in range(k)]\n    return paint_fence(colors, 0, n-1, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D matrix to store the number of ways to paint the fence\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n\n    # Fill the matrix in a bottom-up manner\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % (10**9 + 7)\n\n    # Return the number of ways to paint the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if n is less than or equal to 2, there is only one way to paint the fence\n    if n <= 2:\n        return 1\n\n    # Initialize a 2D matrix to store the number of ways for different colors\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column\n    ways[0][1] = 1\n    ways[1][0] = 1\n\n    # Fill the rest of the matrix\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient using integer division\n    quotient = n // m\n    # check if the remainder is not zero, and if so, round down to the nearest integer\n    if quotient * m!= n:\n        quotient -= 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n    \n    # If the remainder is not zero, add one to the quotient\n    if n % m!= 0:\n        quotient += 1\n    \n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int((n / m) + 0.5)\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5 # calculate the semi-perimeter\n    s = math.sqrt(w**2 + h**2) # calculate the semi-leg\n    return c - s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the perpendicular bisector\n    side_length = math.sqrt(w**2 + h**2)\n    return side_length"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle given the lengths of its two other sides.\n    The function returns the third side as an integer.\n    '''\n    # calculate the length of the third side using the formula for the Pythagorean theorem\n    third_side = int(math.sqrt(w**2 + h**2))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third_side = math.sqrt(area / (math.sin(math.degrees(math.acos(h/w))))\n    \n    # Return the third side of the triangle\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the right triangle\n    s = (w + h)**0.5\n    \n    # Calculate the third side of the right triangle\n    third = math.sin(math.radians(60)) * s\n    \n    return third"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Pythagorean theorem, we can find the hypotenuse of the right triangle\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # Using the Law of Cosines, we can find the angle of the right triangle\n    angle = math.degrees(math.acos((w**2 + h**2 - hypotenuse**2)/(2 * w * h)))\n    # The third side of the right triangle is the opposite of the hypotenuse\n    third_side = hypotenuse - hypotenuse * math.cos(math.radians(angle))\n    return round(third_side, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the length of the other side of the triangle\n    other_side = math.sqrt(w**2 + h**2)\n\n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + other_side**2)\n\n    # return the third side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use Heron's formula to find the semi-perimeter\n    s = (w+h)/2\n    # Use math.sqrt() to find the square root of the semi-perimeter\n    s_sqrt = math.sqrt(s)\n    # Use the cotangent function to find the cotangent of 60 degrees\n    c = 1/math.tan(math.pi/6)\n    # Use the Law of Cosines to find the length of the third side\n    A = h*c\n    B = w*s_sqrt\n    C = w*c\n    # Return the length of the third side\n    return math.sqrt(A**2 + B**2 + C**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Convert the list to a set to remove duplicates\n    listval = set(listval)\n    \n    # Initialize the maximum value to the first element in the list\n    max_val = next(iter(listval))\n    \n    # Iterate through the remaining elements in the list\n    for val in listval:\n        # Update the maximum value if the current value is greater than the current maximum\n        if val > max_val:\n            max_val = val\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Use the built-in max() function to find the maximum value\n    max_num = max(listval)\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value to the first element of the list\n    max_val = listval[0]\n    # Loop through the list and compare each element with max_val\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if type(listval) == list:\n        maxval = listval[0]\n        for i in listval:\n            if i > maxval:\n                maxval = i\n        return maxval\n    else:\n        return \"Invalid input: list expected.\""
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize maximum value to None\n    max_value = None\n\n    # Iterate over the list and find the maximum value\n    for val in listval:\n        if val is not None and (max_value is None or val > max_value):\n            max_value = val\n\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Use list comprehension to find the maximum value in the list\n    max_num = max([num for num in listval if isinstance(num, (int, float))])\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = [i for i in range(1, number+1) if number % i == 0]\n    return sum(div_list)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize variables to keep track of inversions\n    inv_count = 0\n\n    # Traverse through the array and count inversions\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n\n    # Return the count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # One-pass algorithm for counting inversions \n    # in a subarray. \n    for i in range(1, n): \n        j = 0 \n  \n        # Divide the subarray into two parts \n        # such that the largest element in the \n        # first part is in the last position \n        while j < i: \n            if arr[j] > arr[i]: \n                j += 1 \n            else: \n                break \n  \n        # Count inversions \n        while j < i: \n            if arr[j] < arr[i]: \n                count += i - j \n            j += 1 \n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    def merge_sort(arr): \n        if n <= 1: \n            return arr\n        else: \n            mid = n // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            left_half = merge_sort(left_half)\n            right_half = merge_sort(right_half)\n\n            return merge(left_half, right_half)\n\n    def merge(left_half, right_half): \n        merged = []\n        i = j = 0\n\n        while i < len(left_half) and j < len(right_half): \n            if left_half[i] <= right_half[j]: \n                merged.append(left_half[i]) \n                i += 1\n            else: \n                merged.append(right_half[j]) \n                j += 1\n\n        merged += left_half[i:]\n        merged += right_half[j:]\n\n        return merged\n\n    sorted_arr = merge_sort(arr)\n\n    inv_count = 0\n    i = 0\n    j = n - 1\n\n    while i < j: \n        if sorted_arr[i] > sorted_arr[j]: \n            inv_count += j - i\n            i += 1\n        else: \n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    \n    # Divide the array into two halves\n    left = arr[:n//2]\n    right = arr[n//2:]\n    \n    # Recursively count inversions in each half\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n    \n    # Count inversions between left and right halves\n    for i in range(n//2):\n        for j in range(n//2):\n            if left[i] > right[j]:\n                count += n//2 - i - j\n    \n    return count + left_count + right_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Sort the array in non-decreasing order \n    arr.sort() \n  \n    # Traverse the sorted array and count inversions \n    for i in range(1, n): \n        if arr[i] < arr[0]: \n            inv_count += n - i \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    # Counting inversions using the merge sort algorithm\n    n = len(arr)\n    merge_sort(arr, 0, n-1)\n    return arr[n-1]\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge(arr, low, mid, high)\n\ndef merge(arr, low, mid, high):\n    n1 = mid - low + 1\n    n2 = high - mid\n    \n    # Copy data to temp arrays L1[] and L2[]\n    L1 = [0] * n1\n    L2 = [0] * n2\n    for i in range(0, n1):\n        L1[i] = arr[low + i]\n    for j in range(0, n2):\n        L2[j] = arr[mid + 1 + j]\n        \n    # Merge the temp arrays back into arr[low..high]\n    i = 0 # Index of first element of L1[]\n    j = 0 # Index of first element of L2[]\n    k = low # Index of first element of arr[]\n    \n    while i < n1 and j < n2:\n        if L1[i] <= L2[j]:\n            arr[k] = L1[i]\n            i += 1\n        else:\n            arr[k] = L2[j]\n            j += 1\n        k += 1\n    \n    while i < n1:\n        arr[k] = L1[i]\n        i += 1\n        k += 1\n    \n    while j < n2:\n        arr[k] = L2[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Initialize two pointers \n        left = i \n        right = n - 1 \n  \n        # Swap the current element with the first element \n        arr[i], arr[left] = arr[left], arr[i] \n  \n        # Traverse through the array from the second element \n        while left < right: \n  \n            # If the element to the left of the pointer is greater than the current element, \n            # increment the inversion count and swap the left and right elements \n            if arr[left] > arr[right]: \n                inv_count += right - left \n                arr[left], arr[right] = arr[right], arr[left] \n  \n            # Increment the left pointer \n            left += 1 \n  \n            # Decrement the right pointer \n            right -= 1 \n  \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0 \n\n    # Sort the array \n    arr.sort() \n\n    # Calculate inversions \n    for i in range(1, n): \n        inv_count += n - i - 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to store the flattened elements\n    flattened_list = []\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is a list, recursively call the function\n        if type(element) == list:\n            flattened_list += flatten_list(element)\n        # Otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(element)\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flat list by recursively flattening the elements.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from a list of tuples.\n    \n    The list of tuples should have the following format:\n    \n    [(product1, price1), (product2, price2),...]\n    \n    The function should return a dictionary with two keys: \"max_price\" and \"max_product\".\n    \n    The \"max_price\" value should be the maximum price among all products, and the \"max_product\" value should be the product with the maximum price.\n    \n    For example, if the input is:\n    \n    [(1, 50), (2, 100), (3, 200), (1, 150), (1, 120)]\n    \n    Then the output should be:\n    \n    {\"max_price\": 200, \"max_product\": 2}\n    '''\n    \n    # Create an empty dictionary to store the max prices and products\n    max_prices = defaultdict(int)\n    max_products = defaultdict(str)\n    \n    # Iterate over the input list of tuples and update the max prices and products\n    for product, price in stdata:\n        max_prices[product] = max(max_prices[product], price)\n        max_products[product] = product if max_prices[product] == price else max_products[product]\n    \n    # Return the two keys of the dictionary as a tuple\n    return (max(max_prices.values()), max(max_products.values()))"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the maximum aggregate for each student\n    max_aggr = defaultdict(int)\n\n    # loop through the list of tuples\n    for name, marks in stdata:\n        # calculate the total marks for the student\n        total = sum(marks)\n        # check if the total marks is greater than the current maximum\n        if total > max_aggr[name]:\n            # update the maximum aggregate for the student\n            max_aggr[name] = total\n\n    # return the maximum aggregate for each student\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    The maximum aggregate is calculated using the defaultdict data structure.\n    '''\n    max_agg = defaultdict(int)\n    for num, agg in stdata:\n        max_agg[agg] = max(max_agg[agg], num)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Initialize a dictionary to store the maximum aggregate for each student\n    max_aggr = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for name, marks in stdata:\n\n        # Calculate the maximum aggregate for the current student\n        max_aggr[name] = max(marks)\n\n    # Return the maximum aggregate for each student\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n\n    Parameters:\n    stdata (list): A list of tuples, where each tuple contains the name and the aggregate.\n\n    Returns:\n    int: The maximum aggregate value.\n    '''\n\n    # Create a defaultdict to store the aggregate of each customer.\n    agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples.\n    for name, aggregate in stdata:\n\n        # Update the aggregate of the customer.\n        agg_dict[name] += aggregate\n\n    # Calculate the maximum aggregate value.\n    max_agg = max(agg_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the max aggregate for each customer\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Add the value of the tuple to the max aggregate of the customer\n        max_agg[item[0]] += item[1]\n\n    # Find the maximum aggregate value for each customer\n    max_agg_list = sorted(max_agg.values(), reverse=True)\n\n    # Return the maximum aggregate value for each customer\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from functools import reduce\nfrom collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item, quantity in stdata:\n        max_aggr[item] += quantity\n    return reduce(max, max_aggr.values(), default=0)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    aggregate_dict = defaultdict(int)\n    max_aggregate_value = float('-inf')\n\n    for item in stdata:\n        aggregate_dict[item[0]] += item[1]\n\n    for key, value in aggregate_dict.items():\n        if value > max_aggregate_value:\n            max_aggregate_value = value\n\n    return max_aggregate_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each product\n    count = defaultdict(int)\n    # Loop through the list of tuples and update the count dictionary\n    for item in stdata:\n        count[item[0]] += item[1]\n\n    # Loop through the dictionary and find the maximum aggregate\n    max_agg = 0\n    for count in count.values():\n        if count > max_agg:\n            max_agg = count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the list of tuples to a dictionary using defaultdict\n    stdata_dict = defaultdict(int)\n    for item in stdata:\n        stdata_dict[item[0]] += item[1]\n\n    # Calculate the maximum aggregate by iterating over the dictionary and finding the maximum value\n    max_aggregate = 0\n    for amount in stdata_dict.values():\n        max_aggregate = max(max_aggregate, amount)\n\n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        seq = bin(i)[2:].zfill(2*n)\n        if sum(seq[:n]) == sum(seq[-n:]):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(1, 2**2*n): \n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(2**2*n-i)[2:].zfill(n)\n        if first_n_bits == last_n_bits: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if bin(i).count('1') == bin(j).count('1'):\n                count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n\n    # Create a list of binary sequences with length 2n\n    binary_seq = [bin(i)[2:].zfill(2*n) for i in range(2**n)]\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through each binary sequence and check if the sum of the first n bits and last n bits is equal\n    for i in binary_seq:\n        if sum(i[:n]) == sum(i[n:]):\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0 \n    for i in range(2**n, 2**2*n, 2**n): \n        count += 1 \n    return count\n\nn = int(input(\"Enter the value of n: \"))\nresult = count_binary_seq(n)\nprint(\"The count of all binary sequences of length 2n is:\", result)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if (i & j) == 0 and (bin(i)[2:].zfill(n) == bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_bit = i % 2\n        last_bit = (i >> n) % 2\n        if first_bit == last_bit:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    sum_first_n_bits = 0\n    sum_last_n_bits = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits from the binary sequence\n        first_n_bits = bin(i)[2:].zfill(n)\n        # Extract the last n bits from the binary sequence\n        last_n_bits = bin(i+2**n)[2:].zfill(n)\n        # Add the sum of first n bits to the sum of all sequences\n        sum_first_n_bits += int(first_n_bits, 2)\n        # Add the sum of last n bits to the sum of all sequences\n        sum_last_n_bits += int(last_n_bits, 2)\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum_first_n_bits == sum_last_n_bits:\n            # If yes, increment the count\n            count += 1\n            # Reset the variables for the next iteration\n            sum_first_n_bits = 0\n            sum_last_n_bits = 0\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(n)\n        first_half = binary_str[:n]\n        last_half = binary_str[n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, current_depth)\n                    current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(k) for k in d.keys())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(x) for x in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        max_depth = 0\n        for key, value in d.items():\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # base case: if dictionary is empty, return 1\n    if not d:\n        return 1\n    # recursive case: find the depth of the keys and values in the dictionary\n    else:\n        depth_keys = max(dict_depth(v) for v in d.values()) + 1\n        depth_values = max(dict_depth(k) for k in d.keys()) + 1\n        # return the maximum depth of the keys and values combined\n        return max(depth_keys, depth_values)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # find the rotation of the element at index\n    current_rotation = 0\n    for i in range(index-1):\n        if arr[i] == ranges[current_rotation]:\n            current_rotation += 1\n    # rotate the array by the rotation value\n    if current_rotation!= rotations:\n        for i in range(rotations-current_rotation):\n            arr = arr[1:] + [arr[0]]\n    # return the element at the given index\n    return arr[index-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the total number of rotations to be performed\n    total_rotations = sum(rotations)\n\n    # Initialize the current index\n    current_index = index\n\n    # Perform the required rotations and find the element at the required index\n    for i in range(total_rotations):\n        current_index = (current_index - 1) % len(arr)\n        if current_index == 0:\n            current_index = len(arr) - 1\n        arr = arr[rotations[i]:] + arr[:rotations[i]]\n\n    # Return the element at the required index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a number of rotations.\n    It takes in the array, the ranges, the number of rotations and the index of the element.\n    \"\"\"\n    # Find the element at the given index before the rotations\n    element_before = arr[index]\n\n    # Rotate the array to get the element after the rotations\n    for i in range(rotations):\n        ranges.rotate(1)\n\n    # Find the element at the given index after the rotations\n    element_after = arr[index]\n\n    # Undo the rotation to get the original array\n    for i in range(rotations):\n        ranges.rotate(-1)\n\n    # Return the element after the rotations\n    return element_after"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array, list of ranges, number of rotations and an index,\n    this function will find the element at the given index after\n    applying the number of rotations specified.\n    \"\"\"\n    # Get the element at the given index\n    element = arr[index]\n\n    # Initialize the result array\n    result = [0] * rotations\n\n    # Loop through all the rotations\n    for i in range(rotations):\n        # Calculate the index of the next element\n        next_index = (index + i) % len(arr)\n\n        # Add the element from the current range to the result array\n        result[i] = element\n\n        # Update the element to be rotated to the element at the next index\n        element = arr[next_index]\n\n    # Calculate the index of the next element\n    next_index = (index + rotations) % len(arr)\n\n    # Return the element at the next index\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # To find the element at the given index after rotations, we first need to find the range in which the element is present\n    for i in range(len(ranges)):\n        if index>=ranges[i] :\n            start_index=ranges[i-1] if i-1>=0 else 0\n            end_index=ranges[i] if i<len(ranges)-1 else len(arr)-1\n            for j in range(start_index,end_index+1):\n                if arr[j]==arr[index]:\n                    return arr[j]\n            return -1 # if element is not found, return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n        arr (list): A list of integers.\n        ranges (list): A list of ranges of the form [start, end].\n        rotations (int): The number of rotations.\n        index (int): The index to find the element at after rotations.\n\n    Returns:\n        int: The element at the given index after rotations.\n    \"\"\"\n    # Loop through each range of the input list\n    for start, end in ranges:\n        # If the index is within the current range, then return the element at the given index\n        if index >= start and index <= end:\n            return arr[index]\n\n    # If the index is not within any range, then it means the input list is not rotated correctly\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, a number of rotations, and an index as input\n    and returns the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Find the total number of rotations\n    total_rotations = sum(ranges)\n\n    # Calculate the element at the given index after the total number of rotations\n    element_at_given_index = (arr[index - 1] + arr[index - 1] * (total_rotations - rotations)) % 1000000007\n\n    # Return the element at the given index after the total number of rotations\n    return element_at_given_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of elements to search in.\n    ranges (list): List of ranges for each element in arr.\n    rotations (list): List of rotations for each element in arr.\n    index (int): Index of the element to find after rotations.\n\n    Returns:\n    Element at the given index after rotations.\n\n    Raises:\n    IndexError: If the index is out of range.\n    '''\n\n    if index < 0 or index >= len(arr):\n        raise IndexError('Index out of range')\n\n    # Calculate the current rotation of the element\n    current_rotation = rotations[index]\n\n    # Calculate the number of rotations needed to find the element at the given index\n    rotations_to_find = 0\n    for i, range_ in enumerate(ranges):\n        if index - i < range_:\n            rotations_to_find += range_ - index + i\n            break\n\n    # Find the element at the given index after rotations\n    element_at_index = arr[(current_rotation + rotations_to_find) % len(arr)]\n\n    return element_at_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: array of integers\n    :param ranges: array of integer ranges in the form (start, end)\n    :param rotations: number of rotations to perform\n    :param index: index of the element to find after rotations\n    :return: integer value of the element at the given index\n    \"\"\"\n    # calculate the total number of elements in the array\n    total_elements = sum(range_end - range_start for range_start, range_end in ranges)\n\n    # perform rotations\n    for i in range(rotations):\n        # calculate the number of elements after each rotation\n        elements_after_rotation = (total_elements - 1) // rotations\n\n        # find the range that includes the index to be found\n        for range_start, range_end in ranges:\n            if range_start <= index < range_end:\n                # calculate the index in the range that includes the index to be found\n                index_in_range = index - range_start + elements_after_rotation * i\n\n                # return the element at the given index in the range\n                return arr[index_in_range]\n\n    # if the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr.copy()\n    arr.rotate(-rotations)\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        if index >= start and index <= end:\n            return arr[index - start]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return \"There are not exactly two words starting with 'p' in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'  # regex pattern to match words starting with letter 'p'\n    match = re.search(pattern, words)  # search for matches in the list of words\n    \n    # if there are matches, return the two matched words\n    if match:\n        return match.group(), match.group()[2:]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p.*'\n    # iterate over each word in the list\n    for word in words:\n        # check if the word matches the pattern\n        if re.match(pattern, word):\n            # split the word into two parts and return them\n            return word.split()[0:2]\n    # if no words match the pattern, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word.split()[0], word.split()[1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bp\\w+', words)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p.*')\n    \n    # filter words starting with letter 'p' and return them as a list\n    result = list(filter(pattern.match, words))\n    \n    # check if the length of the list is greater than 1 and return it as a tuple\n    if len(result) > 1:\n        return tuple(result)\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return float('-inf')\n    if index == k:\n        return a[k]\n    max_sum = float('-inf')\n    for i in range(index, k):\n        sum = a[i] + max_sum_increasing_subseq(a, n, index, i)\n        max_sum = max(max_sum, sum)\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    \n    if a[index] > a[k]:\n        return max(a[index], a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    if index == k:\n        return a[k-1]\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        if i == k:\n            dp[i] = a[i-1]\n        else:\n            dp[i] = max(dp[i-1], a[i-1] + dp[i])\n    return dp[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > n:\n        return -1\n\n    if index == 0 or a[index] > a[index - 1]:\n        return 0\n\n    if k == index:\n        return a[index]\n\n    prefix_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    if k < index:\n        return max(prefix_sum, a[index] + max_sum_increasing_subseq(a, n, index - 1, k + 1))\n    else:\n        return prefix_sum + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until the ith index and also including the kth element.\n    \"\"\"\n    # Create a list to store the prefix sum of increasing subsequence\n    prefix_sum = [0] * n\n\n    # Initialize the maximum sum and current sum variables\n    max_sum = 0\n    current_sum = 0\n\n    # Initialize the index of the current increasing subsequence\n    current_index = 0\n\n    # Iterate through the array from the first index to the given index\n    for i in range(index, n):\n\n        # Check if the ith element is greater than or equal to the kth element\n        if a[i] >= a[k]:\n\n            # Check if the current increasing subsequence is greater than the previous one\n            if current_sum > max_sum:\n                max_sum = current_sum\n                current_index = i\n\n            # Update the current sum and add the ith element to it\n            current_sum += a[i]\n\n        # If the ith element is less than the kth element, start a new increasing subsequence\n        else:\n\n            # Update the current sum and reset the current index\n            current_sum = a[i]\n            current_index = i\n\n    # Check if the current increasing subsequence is greater than the previous one\n    if current_sum > max_sum:\n        max_sum = current_sum\n        current_index = index\n\n    # Return the maximum sum of increasing subsequence and the index of the kth element\n    return max_sum, current_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    if index == n:\n        return 0\n    \n    if index == k:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    \n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize a list to store the maximum sum of increasing subsequence\n    max_sum_list = [0] * n\n\n    # initialize the maximum sum of increasing subsequence to the initial value of the element at index\n    max_sum_list[index] = a[index]\n\n    # iterate over the remaining elements from index + 1 to n-1\n    for i in range(index + 1, n):\n        # if the remaining element is greater than the element at index, we can add the difference between the remaining element and the element at index to the maximum sum of increasing subsequence\n        if a[i] > a[index]:\n            max_sum_list[i] = a[i] + max_sum_list[index]\n        else:\n            # if the remaining element is less than or equal to the element at index, we cannot add the difference between the remaining element and the element at index to the maximum sum of increasing subsequence, so we set the maximum sum of increasing subsequence to the element at index\n            max_sum_list[i] = a[i]\n\n    # iterate over the remaining elements from index + 1 to k-1\n    for i in range(index + 1, k):\n        # if the remaining element is greater than the element at index, we can add the difference between the remaining element and the element at index to the maximum sum of increasing subsequence\n        if a[i] > a[index]:\n            max_sum_list[i] = a[i] + max_sum_list[index]\n        else:\n            # if the remaining element is less than or equal to the element at index, we cannot add the difference between the remaining element and the element at index to the maximum sum of increasing subsequence, so we set the maximum sum of increasing subsequence to the element at index\n            max_sum_list[i] = a[i]\n\n    # return the maximum sum of increasing subsequence\n    return max(max_sum_list)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # If k is not greater than index, return 0\n    if k <= index:\n        return 0\n    \n    # Initialize variables to store the sum and maximum sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Traverse through the array and calculate the sum of increasing subsequences\n    for i in range(index, n):\n        if i == k:\n            current_sum += a[i]\n        else:\n            current_sum += a[i] - a[i-1]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum of increasing subsequences from prefix until ith index and including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    subseq = []\n    \n    # Loop through the array from 0 to i\n    for i in range(index):\n        # If the current element is greater than or equal to k, add it to the subsequence\n        if a[i] >= k:\n            subseq.append(a[i])\n        \n        # Calculate the sum of the subsequence so far and update max_sum if necessary\n        subseq_sum = sum(subseq)\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n    \n    # If the current element is less than or equal to k, add it to the subsequence\n    if a[index] <= k:\n        subseq.append(a[index])\n    \n    # Calculate the sum of the subsequence so far and update max_sum if necessary\n    subseq_sum = sum(subseq)\n    if subseq_sum > max_sum:\n        max_sum = subseq_sum\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    elif a[index] >= a[k]:\n        return max(a[0] + a[index], max_sum_increasing_subseq(a, n, index-1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # fill the colon with m copies of the first element of the tuple\n    for i in range(m):\n        new_tuplex += (tuplex[0],)\n    # return the colon as a tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    new_colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(copy_tuplex[i*n+j])\n        new_colon.append(tuple(row))\n    return new_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # get the index of the last element\n    last_index = len(new_tuplex) - 1\n    \n    # iterate over the rows and columns\n    for i in range(m):\n        for j in range(n):\n            # get the index of the current element\n            index = i*n + j\n            \n            # if the index is valid, assign the colon to the element\n            if index < last_index:\n                new_tuplex[index] = ':'\n    \n    # return the modified tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[j*m+i])\n        result.append(row)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): The tuple to get a colon of.\n    m (int): The number of rows in the colon to return.\n    n (int): The number of columns in the colon to return.\n\n    Returns:\n    list: A list of colon tuples.\n    '''\n\n    if m*n > len(tuplex):\n        raise ValueError('The colon is too large to fit in the tuple.')\n\n    colon_list = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i*n+j])\n        colon_list.append(tuple(row))\n\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(deepcopy(tuplex[i][j]))\n        col.append(tuple(row))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if m>n:\n        m,n=n,m\n    return tuple(tuplex[i:i+n] for i in range(0,len(tuplex),n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # loop through each element in the tuple\n    for i in range(len(tuplex)):\n        # add a colon if the element is a tuple\n        if isinstance(tuplex_copy[i],tuple):\n            # loop through each element in the sub-tuple\n            for j in range(len(tuplex_copy[i])):\n                # add a colon if the sub-element is a tuple\n                if isinstance(tuplex_copy[i][j],tuple):\n                    for k in range(len(tuplex_copy[i][j])):\n                        # add a colon if the sub-sub-element is a tuple\n                        if isinstance(tuplex_copy[i][j][k],tuple):\n                            for l in range(len(tuplex_copy[i][j][k])):\n                                # add a colon if the sub-sub-sub-element is a tuple\n                                if isinstance(tuplex_copy[i][j][k][l],tuple):\n                                    for m in range(len(tuplex_copy[i][j][k][l])):\n                                        tuplex_copy[i][j][k][l][m] +='' * (m+1)\n                        else:\n                            tuplex_copy[i][j][k] +='' * (k+1)\n                else:\n                    tuplex_copy[i][j] +='' * (j+1)\n        else:\n            tuplex_copy[i] +='' * (i+1)\n    # join the elements of the tuple with the colon separator\n    colon_tuplex = ':'.join(tuplex_copy)\n    # return the colon_tuplex\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple of tuples and returns a new tuple of tuples that is\n    a colon of the original tuple.\n    \n    :param tuplex: The input tuple of tuples.\n    :param m: The number of rows in the colon.\n    :param n: The number of columns in the colon.\n    :return: A tuple of tuples that is a colon of the original tuple.\n    \"\"\"\n    \n    # Check if the input tuple of tuples is a valid input\n    if not isinstance(tuplex, list) or not all(isinstance(x, list) for x in tuplex):\n        raise TypeError(\"Input must be a list of lists\")\n    \n    # Check if the number of rows and columns are valid\n    if m <= 0 or n <= 0:\n        raise ValueError(\"m and n must be positive integers\")\n    \n    # Create a copy of the input tuple of tuples\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the number of columns in the first tuple\n    num_cols = len(new_tuplex[0])\n    \n    # Get the number of tuples in the first tuple\n    num_tuples = len(new_tuplex)\n    \n    # Calculate the size of the colon\n    size = num_tuples // m\n    \n    # If the number of tuples is not divisible by m, add another tuple\n    if num_tuples % m!= 0:\n        size += 1\n    \n    # Calculate the starting index of the colon\n    start_index = 0\n    \n    # Loop through the rows\n    for i in range(m):\n        # Calculate the ending index of the colon\n        end_index = start_index + size\n        \n        # Create a new empty list\n        new_row = []\n        \n        # Loop through the columns in the current row\n        for j in range(n):\n            # Check if the current column is in the current row\n            if j < num_cols:\n                # Loop through the tuples in the current row\n                for k in range(start_index, end_index):\n                    new_row.append(new_tuplex[k][j])\n            else:\n                # If the current column is not in the current row, add None\n                new_row.append(None)\n        \n        # Add the new row to the new tuple of tuples\n        new_tuplex.append(new_row)\n        \n        # Update the starting index\n        start_index += size\n    \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Define a list to hold the colon\n    colon = []\n    # Define a loop to iterate n times\n    for i in range(n):\n        # Define a loop to iterate m times\n        for j in range(m):\n            # Define a variable to hold the index\n            index = i*m + j\n            # Define a variable to hold the value of the tuple at the current index\n            value = tuplex[index]\n            # Add the value to the colon list\n            colon.append(value)\n    # Return the colon list\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize variables to store largest products\n    largest_product1 = 0\n    largest_product2 = 0\n    \n    # Initialize variables to store current products\n    product1 = product2 = 1\n    \n    # Loop through each element in the lists\n    for i in range(N):\n        # Update product1 by multiplying it with the smaller element in the list\n        product1 *= min(nums1[i], nums2[i])\n        \n        # Update product2 by multiplying it with the larger element in the list\n        product2 *= max(nums1[i], nums2[i])\n        \n        # Update largest_product1 and largest_product2 if the current products are larger\n        if product1 > largest_product1:\n            largest_product1 = product1\n        \n        if product2 > largest_product2:\n            largest_product2 = product2\n            \n    return largest_product1, largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        if i < len(nums1) and i < len(nums2):\n            product = max(nums1[i] * nums2[i], nums1[i] * nums2[i+1], nums1[i+1] * nums2[i])\n        elif i < len(nums1):\n            product = max(nums1[i] * nums2[i], nums1[i] * nums2[i+1])\n        else:\n            product = max(nums1[i] * nums2[i], nums1[i] * nums2[i+1])\n        largest_products.append(product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    if len(nums1)!= len(nums2):\n        return \"Lists must have equal lengths.\"\n\n    largest_products = []\n    for i in range(N):\n        product1 = max(nums1[j] * nums2[i] for j in range(len(nums1)))\n        product2 = max(nums2[j] * nums1[i] for j in range(len(nums2)))\n        largest_products.append((product1, product2))\n\n    largest_products.sort(reverse=True)\n\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the largest products\n    largest_products = []\n    \n    # Loop through the first list to find the N largest products\n    for num1 in nums1:\n        # Initialize variables for the current product\n        current_product = 1\n        current_max = num1\n        \n        # Loop through the second list to find the largest products\n        for num2 in nums2:\n            # Calculate the product of num1 and num2\n            product = num1 * num2\n            \n            # Update the current product if the current product is greater than the new product\n            if current_product < product:\n                current_product = product\n                \n            # Update the current maximum if the current maximum is less than the new maximum\n            if current_max < num2:\n                current_max = num2\n                \n        # Append the current product and its corresponding maximum to the largest_products list\n        largest_products.append((current_product, current_max))\n    \n    # Sort the largest_products list by the product in descending order\n    largest_products.sort(key=lambda x: x[0], reverse=True)\n    \n    # Return the first N largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products list\n    largest_products = []\n\n    # Loop through the first N elements of the two lists\n    for i in range(N):\n        # Calculate the product of the two numbers in the two lists\n        product1 = nums1[i] * nums2[i]\n\n        # Calculate the product of the two numbers in the first list only\n        product2 = nums1[i] * nums2[0]\n\n        # Check if the current product is greater than any of the products in the largest_products list\n        if product1 > largest_products[-1] and product2 > largest_products[-1]:\n            largest_products.append(product1)\n\n    # Return the largest_products list\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products found so far\n    largest1 = largest2 = 0\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the i-th largest number from nums1 and i-th largest number from nums2\n        product = nums1[i] * nums2[i]\n\n        # Update the largest products found so far\n        largest1 = max(largest1, product)\n        largest2 = max(largest2, largest1)\n\n    # Return the largest products found so far\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create two arrays to store the product of the largest factors from each list\n    largest1 = []\n    largest2 = []\n    \n    # Iterate through each number in the first list\n    for num1 in nums1:\n        # Initialize variables to keep track of the largest products found so far\n        largest_product1 = 0\n        largest_index1 = -1\n        \n        # Iterate through each number in the second list\n        for num2 in nums2:\n            # Calculate the product of the two numbers\n            product = num1 * num2\n            \n            # If the product is greater than the current largest product, update the variables\n            if product > largest_product1:\n                largest_product1 = product\n                largest_index1 = nums2.index(num2)\n        \n        # Add the largest product found to the array for the first list\n        largest1.append(largest_product1)\n    \n    # Sort the largest products array from largest to smallest\n    largest1.sort(reverse=True)\n    \n    # Create an empty array to store the product of the largest factors from each list\n    largest_products = []\n    \n    # Iterate through each number in the first list\n    for num1 in nums1:\n        # Initialize variables to keep track of the largest products found so far\n        largest_product2 = 0\n        largest_index2 = -1\n        \n        # Iterate through each number in the second list\n        for num2 in nums2:\n            # Calculate the product of the two numbers\n            product = num1 * num2\n            \n            # If the product is greater than the current largest product, update the variables\n            if product > largest_product2:\n                largest_product2 = product\n                largest_index2 = nums2.index(num2)\n        \n        # If the second number in the second list has the largest product, add it to the array\n        if largest_index2 == N-1:\n            largest_products.append(largest_product2)\n    \n    # Sort the largest products array from largest to smallest\n    largest_products.sort(reverse=True)\n    \n    # Return the largest products array\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Check if the length of the lists are the same\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    \n    # Initialize an empty list to store the largest products\n    largest_products = []\n    \n    # Loop through all possible combinations of selecting one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the two selected factors and add it to the list of largest products\n            largest_product = nums1[i] * nums2[j]\n            largest_products.append(largest_product)\n    \n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n    \n    # Return the specified number of largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list to store the largest products\n    largest_products = []\n    # Iterate over the specified number of products to find\n    for i in range(N):\n        # Find the maximum product of two numbers from each list\n        max_product = max(nums1[0] * nums2[0], nums1[1] * nums2[1])\n        # Append the maximum product to the list of largest products\n        largest_products.append(max_product)\n        # Update the values of the lists to reflect the elimination of the largest product\n        if max_product == nums1[0] * nums2[0]:\n            nums1.pop(0)\n            nums2.pop(0)\n        else:\n            nums1.pop(1)\n            nums2.pop(1)\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    if N > len(nums1):\n        raise ValueError(\"N must be less than or equal to the length of the first list.\")\n    if N > len(nums2):\n        raise ValueError(\"N must be less than or equal to the length of the second list.\")\n    largest_products = []\n    for i in range(N):\n        largest_product = max(nums1[i]*nums2[i], nums1[i]*nums2[N-i-1], nums2[i]*nums1[N-i-1], nums2[i]*nums1[i])\n        largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum number.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n\n    Parameters:\n    a (int): The first number to compare\n    b (int): The second number to compare\n\n    Returns:\n    int: The maximum of a and b\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns the maximum of them.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and converts it to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 0\n    for i in range(32):\n        mask = mask | (1 << i)\n        if mask & n == 0:\n            n = n | mask\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32): \n        if (1 << i) & n == 0: \n            n |= 1 << i\n            return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # iterate through each bit in the binary representation of n\n    for i in range(32):\n        # check if the ith bit is set (1)\n        if (n & (1 << i)):\n            # if it is, set the ith bit to 0 (unset)\n            n = n & ~(1 << i)\n            # exit the loop once a 0 is found\n            break\n    # return the modified n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n = n >> 1\n    n = n | (1 << 31)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return n\n    else:\n        bit_index = 0\n        while n & (1 << bit_index) == 0:\n            bit_index += 1\n        n |= (1 << bit_index)\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n    # Initialize count of unset bits\n    count = 0\n    # Iterate through each bit in the binary string\n    for bit in bin_str:\n        # If the bit is '0', increment the count of unset bits\n        if bit == '0':\n            count += 1\n        # If the bit is '1', set the leftmost unset bit to '1' and return the result\n        else:\n            return (1 << count) | ((n ^ (1 << count)) & ((1 << count) - 1))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n & (1 << count):\n        count += 1\n    return (1 << count) | n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << 31):\n        n &= ~(1 << 31)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Convert integer to binary string\n    binary_str = bin(n)[2:]\n\n    # Set the leftmost unset bit to 1\n    binary_str = binary_str[:binary_str.find('0')] + '1' + binary_str[binary_str.find('0') + 1:]\n\n    # Convert binary string back to integer\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize the variable to keep track of the unset bits\n    unset_bits = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is unset (i.e., has a 1 in its position)\n        if (n >> i) & 1 == 1:\n            # If the i-th bit is unset, set the unset_bits variable to 1\n            unset_bits = 1\n            break\n\n    # Shift unset_bits to the left by one position, and add it to n\n    n = (n << 1) | unset_bits\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * (r**2) * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes two arguments: the radius of the cone and the height of the cone.\n    It returns the volume of the cone.\n    '''\n\n    # Calculating the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * (r**2) * h\n\n    # Returning the volume of the cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    It takes two parameters, the radius of the cone and its height.\n    '''\n    # Calculate the volume of the cone using the formula V = (1/3) * pi * r^2 * h\n    V = (1/3) * math.pi * r**2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3)*math.pi*r*r*h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume using the formula: V = 1/3 * \u03c0 * r\u00b2 * h\n    volume = (1/3) * math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    Inputs:\n        r - radius of the base of the cone\n        h - height of the cone\n    Outputs:\n        V - volume of the cone\n    '''\n    V = (1/3)*math.pi*r*r*h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all powers of 2 from 2^0 to 2^30\n    for i in range(31):\n        # check if i is a power of 2 and is less than or equal to n\n        if 2**i <= n:\n            # if it is, return i\n            return 2**i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 \n    that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    # find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    \n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case: If n is already a power of 2, return n\n    if n & (n-1) == 0:\n        return n\n    \n    # Find the highest power of 2 that is less than or equal to n\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variable to store the highest power of 2\n    highest = 1\n\n    # loop through each power of 2 from 1 to n (inclusive)\n    for i in range(2, n+1):\n\n        # check if the current power of 2 is greater than the current highest power of 2\n        if i > highest:\n\n            # update the highest power of 2 to be the current power of 2\n            highest = i\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Convert n to binary\n    binary = bin(n)[2:]\n    # Find the last set bit (LSB)\n    lsb = binary.rfind('1')\n    # Convert the LSB to an integer\n    lsb = int(binary[:lsb+1], 2)\n    # Return the power of 2 greater than or equal to LSB\n    return 2**lsb"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 to 0\n    highest = 0\n    # Loop through all the powers of 2 up to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # Check if the current power of 2 is less than or equal to n\n        if i*i > n:\n            break\n        # If the current power of 2 is less than or equal to the current highest power of 2, update it\n        if i*i <= highest:\n            highest = i*i\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** (int(n.bit_length()) - 1)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers in the series\n    a, b = 0, 2\n    \n    # Print the first two numbers in the series\n    print(a)\n    print(b)\n    \n    # Calculate and print then'th number in the series\n    for i in range(2, n+1):\n        c = a + b\n        print(c)\n        a, b = b, c"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas = [2]  # first two lucas numbers are 2\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two lucas numbers\n    lucas_num1 = 2\n    lucas_num2 = 1\n\n    # Loop through the remaining n-2 numbers\n    for i in range(2, n):\n        # Update the lucas number by adding the previous two numbers\n        lucas_num3 = lucas_num1 + lucas_num2\n        # Update the previous two lucas numbers\n        lucas_num1 = lucas_num2\n        lucas_num2 = lucas_num3\n\n    # Return the last lucas number\n    return lucas_num2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    if n == 1 or n == 2: \n        return 2 \n    else: \n        return (4 * find_lucas(n-1) - find_lucas(n-2))"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n    list_ (list): The list to apply the format string to.\n    string (str): The format string to apply to each element in the list.\n\n    Returns:\n    list: A new list with the format string applied to each element in the input list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string % element)\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string % element"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_item = string.format(item)\n        new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define an empty dictionary\n    nested_dict = {}\n    # Loop through the first list\n    for i in range(len(l1)):\n        # Define a new dictionary for each element in the first list\n        new_dict = {}\n        # Loop through the second list\n        for j in range(len(l2)):\n            # Add each element in the second list as a key in the new dictionary\n            new_dict[l2[j]] = l3[j]\n        # Add the new dictionary to the nested dictionary\n        nested_dict[l1[i]] = new_dict\n    # Return the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the converted lists\n    result = {}\n\n    # loop through the lists and convert each one to a dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        # loop through each element in the list and convert it to a key-value pair\n        for item in lst:\n            # check if the element is a dictionary already\n            if isinstance(item, dict):\n                # if it is, add it as a new key in the result dictionary\n                result.update(item)\n            else:\n                # if it's not a dictionary, create a new dictionary with the element as the key\n                result[item] = {}\n\n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    \n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = str(l1[i]) + str(l2[j]) + str(l3[k])\n                value = [l1[i], l2[j], l3[k]]\n                dictionary[key] = value\n                \n    return dictionary"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert a list of lists to a nested dictionary.\n    \n    Args:\n    l1 (list): list of elements to be converted to nested dictionary\n    l2 (list): list of keys to be used as dictionary keys\n    l3 (list): list of values to be used as dictionary values\n    \n    Returns:\n    dict: nested dictionary\n    '''\n    \n    # create an empty dictionary\n    d = {}\n    \n    # iterate over each list and add the corresponding key-value pair to the dictionary\n    for i in range(len(l1)):\n        d[l2[i]] = l1[i]\n        d[l2[i] + '_value'] = l3[i]\n    \n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Define a nested dictionary to store the data\n    data = {}\n\n    # Define the key names for each level of the nested dictionary\n    keys = ['country', 'city', 'population']\n\n    # Loop through each list and add the data to the nested dictionary\n    for i in range(len(l1)):\n        data[keys[0]] = l1[i]\n        data[keys[1]] = l2[i]\n        data[keys[2]] = l3[i]\n\n        # Create a new dictionary to store the data for the next level\n        next_level_data = {}\n        for j in range(len(l1[i])):\n            # Add the data for the next level to the nested dictionary\n            next_level_data[keys[0]] = l1[i][j]\n            next_level_data[keys[1]] = l2[i][j]\n            next_level_data[keys[2]] = l3[i][j]\n            # Add the next level data to the nested dictionary\n            data[keys[j+2]] = next_level_data\n\n        # Increment the index for the next level\n        i += len(l1[i])\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n\n    # loop through the first list and add each element as a key in the result dictionary\n    for i in range(len(l1)):\n        result[str(i+1)] = l1[i]\n\n    # loop through the second list and add each element as a key in the result dictionary\n    for j in range(len(l2)):\n        result[str(j+len(l1)+1)] = l2[j]\n\n    # loop through the third list and add each element as a key in the result dictionary\n    for k in range(len(l3)):\n        result[str(k+len(l1)+len(l2)+1)] = l3[k]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the result\n    result = {}\n\n    # Loop through each list\n    for i in range(len(l1)):\n        # For each list, create a nested dictionary\n        nested_dict = {}\n        for j in range(len(l2[i])):\n            nested_dict[l2[i][j]] = l3[i][j]\n        # Add the nested dictionary to the result dictionary\n        result[l1[i]] = nested_dict\n\n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n\n    # Loop through each list and add its elements as key-value pairs in the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    def helper(n):\n        if n < 5:\n            return n\n        return max(helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5), n)\n    \n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    elif n == 2:\n        return 2\n\n    elif n == 3:\n        return 6\n\n    elif n == 4:\n        return 14\n\n    elif n == 5:\n        return 28\n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    sum_of_divisions = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    max_sum = max(sum_of_divisions + n, n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return n\n    \n    # Recursive case\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 15\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    max_list = []\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = item\n\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(str(input_list[i])) > max_length:\n            max_length = len(str(input_list[i]))\n            max_list = [input_list[i]]\n        elif len(str(input_list[i])) == max_length:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_vals = set(test_tup)\n    if len(unique_vals) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use set to remove duplicates and check if set is empty\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create an empty dictionary to store unique elements\n    unique_dict = {}\n\n    # Iterate through the tuple and add each element to the dictionary\n    for element in test_tup:\n        if element not in unique_dict:\n            unique_dict[element] = True\n\n    # If the dictionary has no keys, the tuple contains no duplicates\n    if len(unique_dict) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements of the tuple\n    unique_set = set(test_tup)\n    # if the length of the set is equal to the length of the tuple, it means no duplicates were found\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    str1 = list(str1)\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            del char_count[char]\n        else:\n            char_count[char] = 1\n    return next(iter(char_count))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character in the frequency dictionary\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    Returns the first non-repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to store unique characters\n    char_count = {}\n    for char in string:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count of the character\n            char_count[char] += 1\n        else:\n            # otherwise, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    # iterate through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Traverse through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with frequency 1\n        else:\n            freq[char] = 1\n    \n    # Traverse through the characters in the string again and find the first non-repeating character\n    for char in str1:\n        # If the character is not in the dictionary, return the character as the first non-repeating character\n        if char not in freq:\n            return char\n    \n    # If all characters are repeating, return None as there is no first non-repeating character\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    first_non_repeat = ''\n    for char, freq in char_freq.items():\n        if freq == 1:\n            first_non_repeat = char\n            break\n\n    return first_non_repeat"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    :param str1: the string to search for the first non-repeated character\n    :return: the first non-repeated character in the given string or None if no non-repeated character is found\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # Iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the regex pattern\n    if re.match(regex, string):\n        # Get the first and last characters of the string\n        first_char = string[0]\n        last_char = string[-1]\n        # Check if the first and last characters are the same\n        if first_char == last_char:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Check if the list has an odd number of elements\n    if len(sorted_numbers) % 2 == 1:\n        # Find the middle element of the sorted list\n        middle_index = len(sorted_numbers) // 2\n        median = sorted_numbers[middle_index]\n    else:\n        # Find the average of the two middle elements\n        middle_index1 = len(sorted_numbers) // 2\n        middle_index2 = middle_index1 - 1\n        median1 = sorted_numbers[middle_index1]\n        median2 = sorted_numbers[middle_index2]\n        median = (median1 + median2) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers in descending order\n    a, b, c = sorted([a, b, c], reverse=True)\n    # calculate the median\n    n = len(a)\n    if n % 2 == 0:\n        median = (a[n//2] + b[n//2]) / 2\n    else:\n        median = a[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n\n    n = len(numbers)\n    mid = n // 2\n\n    if n % 2 == 0:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the indices of the two middle numbers\n    mid1 = len(sorted_nums) // 2\n    mid2 = mid1 - 1\n\n    # Check which of the three middle numbers is the median\n    if sorted_nums[mid1] == sorted_nums[mid2]:\n        return sorted_nums[mid1]\n    else:\n        return (sorted_nums[mid1] + sorted_nums[mid2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    middle = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        return numbers[middle]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2-1])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    # First, sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Calculate the median based on the length of the sorted list\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the index of the middle number\n    middle_index = len(numbers) // 2\n\n    # If the middle number is odd, return it\n    if len(numbers) % 2 == 1:\n        return numbers[middle_index]\n\n    # If the middle number is even, return the average of the two middle numbers\n    else:\n        return (numbers[middle_index - 1] + numbers[middle_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    sorted_nums = sorted([a, b, c])\n\n    # Get the middle index\n    mid_index = len(sorted_nums) // 2\n\n    # If the length of the sorted array is odd, the median is the middle number\n    if len(sorted_nums) % 2 == 1:\n        return sorted_nums[mid_index]\n    # If the length of the sorted array is even, the median is the average of the middle two numbers\n    else:\n        return (sorted_nums[mid_index - 1] + sorted_nums[mid_index]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize a variable to hold the sum of digits\n    digit_sum = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string\n        num_str = str(num)\n        \n        # loop through each digit in the string and add it to the sum\n        for digit in num_str:\n            digit_sum += int(digit)\n    \n    # return the sum of digits\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_num = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_num += digit\n            num //= 10\n        result.append(sum_of_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        sum_list.append(sum(digits))\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        num_str = str(num)\n        sum_digits += sum(int(digit) for digit in num_str)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        temp = 0\n        while num!= 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0, 0)\n\n    # Perform the bitwise xor operation on each element of the tuples\n    for i in range(len(test_tup1)):\n        result_tup = (result_tup[0] ^ test_tup1[i], result_tup[1] ^ test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The input tuples must be the same length.\")\n        return\n    \n    # perform the bitwise xor operation on each element of the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Performs the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n        test_tup1 (tuple): First tuple to perform bitwise xor on.\n        test_tup2 (tuple): Second tuple to perform bitwise xor on.\n\n    Returns:\n        tuple: Tuple of values after bitwise xor operation across the two input tuples.\n    \"\"\"\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # iterate through the tuples and perform the bitwise xor operation\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the result of the xor operation\n    result = 0\n    \n    # Iterate over each element in the tuples\n    for i in range(len(test_tup1)):\n        # Get the bits of the elements in the tuples\n        bit1 = test_tup1[i]\n        bit2 = test_tup2[i]\n        \n        # Perform the xor operation across the bits\n        xor_bit = bit1 ^ bit2\n        \n        # Add the xor_bit to the result\n        result = result ^ xor_bit\n    \n    # Return the result as a tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate through the tuples and perform the bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    # return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # use the bitwise xor operator to perform the bitwise xor operation\n    result = test_tup1[0] ^ test_tup2[0]\n    for i in range(1, len(test_tup1)):\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    unique_tuples = set(tuple(sorted(item)) for item in freq_dict.keys())\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of unique tuples in the list.\n    \"\"\"\n    # Convert the list to a set to get the unique tuples\n    unique_tuples = set(test_list)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    unique_tuples_count = len(unique_tuples)\n    return unique_tuples_count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    \n    # Convert the list to a set to get only unique values\n    test_set = set(test_list)\n    \n    # Count the number of unique tuples\n    count = Counter(test_set)\n    \n    # Return the count of unique tuples\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through each element of the nested tuple\n    for i in range(len(test_tup1)):\n        # get the elements from both tuples at the current index\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        \n        # add the elements and add it to the result tuple\n        result_tup = result_tup + (tup1_elem + tup2_elem,)\n        \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result = []\n    # loop through both tuples and add corresponding elements in the same index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new nested tuple to store the result\n    result = []\n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # initialize a new tuple to store the current element's result\n        element_result = []\n        # iterate through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the current element and its corresponding element in the second tuple to get the result of index wise addition\n            element_result.append(test_tup1[i][j] + test_tup2[i][j])\n        # add the current element's result to the result tuple\n        result.append(element_result)\n    # return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with the same number of elements as the input tuples\n    result_tup = (0, 0)\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through the second tuple and add the elements at each index\n        for j in range(len(test_tup2)):\n            # Add the elements and assign the sum to the corresponding index in the result tuple\n            result_tup[j] += test_tup1[i][j]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = []\n    for i in range(len(test_tup1)):\n        res_tup.append(test_tup1[i] + test_tup2[i])\n    return res_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty tuple to store the result\n    result_tup = ()\n    # loop through each tuple in the input tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # initialize a new tuple of the same length as the input tuples\n        new_tup = ()\n        # loop through each index of the tuples\n        for i in range(len(tup1)):\n            # add the corresponding elements of the tuples and append the result to the new tuple\n            new_tup += (tup1[i] + tup2[i],)\n        # append the new tuple to the result tuple\n        result_tup += (new_tup,)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a, b)\n\nprint(minimum(10, 20)) # Output: 10\nprint(minimum(5, 15)) # Output: 5"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two arguments and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two arguments, a and b, and returns their minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}.\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # check if the element exists in the tuple\n    if tuplex in tuple1:\n        # return True if it exists\n        return True\n    else:\n        # return False if it doesn't exist\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(f\"{tuple1} found in {tuplex}\")\n    else:\n        print(f\"{tuple1} not found in {tuplex}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            print(\"Element exists in the tuple!\")\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even\"\n    else: \n        return \"The number is odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer as input and returns True if it is odd, and False if it is even.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x //= 2\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # find the position of the largest digit\n    max_digit_idx = num_str.index(max(num_str))\n    # reverse the digits of the number to the left of the maximum digit\n    reversed_num_str = num_str[:max_digit_idx] + num_str[max_digit_idx:][::-1]\n    # convert the reversed string back to an integer\n    next_bigger = int(reversed_num_str)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits from the given number\n    digits = [int(digit) for digit in str(n)]\n    # sort the list in descending order\n    digits.sort(reverse=True)\n    # join the digits in the list and convert it back to an integer\n    next_bigger = int(''.join(str(digit) for digit in digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the list of digits in the input number\n    digits = list(str(n))\n    \n    # check if the input number is already the maximum number\n    if int(''.join(sorted(digits))) == n:\n        return digits\n    \n    # reverse the digits of the input number\n    digits = digits[::-1]\n    \n    # initialize the list of digits for the next bigger number\n    next_digits = []\n    \n    # iterate through the digits of the reversed input number and append the next digit to the list\n    for digit in digits:\n        next_digit = digit + '0'\n        next_digits.append(next_digit)\n    \n    # convert the list of digits to an integer and return it\n    return int(''.join(sorted(next_digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize variables\n    max_num = 10 ** (len(str(n)) - 1)\n    num_list = list(str(n))\n    new_num_list = []\n\n    # rearrange the digits of the number\n    for i in range(len(num_list)):\n        if num_list[i]!= '0':\n            new_num_list.append(str(max_num - int(num_list[i])))\n        else:\n            new_num_list.append(str(max_num))\n\n    # convert the new number list to a string\n    new_num = ''.join(new_num_list)\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Remove the leading zeros from the number\n    num = str(n)\n    while num[0] == '0':\n        num = num[1:]\n\n    # Convert the number to a list of digits\n    digits = list(map(int, num))\n\n    # Rearrange the digits from largest to smallest\n    max_digit = max(digits)\n    digits.remove(max_digit)\n    digits.append(max_digit)\n\n    # Convert the list of digits back to a string\n    result = ''.join(map(str, digits))\n\n    # Add the leading zeros back to the result if necessary\n    if result[0] == '0':\n        result = '0' + result\n\n    # Convert the result back to an integer\n    result = int(result)\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = str(n)\n    digits = sorted(digits, reverse=True)\n    new_digits = []\n    for i in range(len(digits)):\n        new_digits.append(digits[i])\n        if i < len(digits) // 2:\n            new_digits.append(digits[i+1])\n    new_n = int(\"\".join(new_digits))\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    index = 0\n    while index < len(digits):\n        if digits[index]!= '0':\n            break\n        index += 1\n    digits[index] = '9'\n    result = int(''.join(digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Define a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Sort the list of digits in decreasing order\n    digits.sort(reverse=True)\n    # Convert the sorted list of digits back to a string\n    result = ''.join(map(str, digits))\n    # Add 1 to the last digit in the string\n    result = int(result) + 1\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(n)\n    # reverse the string\n    rev_num_str = num_str[::-1]\n    # initialize the carry variable\n    carry = 0\n    # initialize the result string\n    result_str = \"\"\n    # loop through the reversed string\n    for digit in rev_num_str:\n        # convert the digit to an integer and add it to the result string\n        int_digit = int(digit)\n        if int_digit + carry > 9:\n            result_str = str(int_digit + carry - 10) + result_str\n            carry = 1\n        else:\n            result_str = str(int_digit + carry) + result_str\n            carry = 0\n    # check if there is a carry left\n    if carry > 0:\n        result_str = str(carry) + result_str\n    # convert the result string to an integer and add 1\n    result = int(result_str) + 1\n    # return the next bigger number\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif nums1[i] + nums2[j] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n\n    return [heap[0][1]] + k_smallest_pairs(nums1, nums2, k-1)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Convert the given lists into sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Create a list of tuples (num1, num2) where num1 and num2 are elements from the first and second arrays respectively\n    pairs = [(num1, num2) for num1 in nums1_set for num2 in nums2_set]\n\n    # Sort the list of tuples based on the sum of the elements from the first array and the elements from the second array\n    pairs.sort(key=lambda x: (x[0] + x[1]))\n\n    # Initialize the minimum heap to store the k smallest pairs\n    min_heap = []\n\n    # Initialize the count of pairs to be returned\n    count = 0\n\n    # Iterate through the list of pairs\n    for num1, num2 in pairs:\n        # If the size of the minimum heap is less than k, add the pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n        # If the size of the minimum heap is greater than or equal to k, compare the first element of the pair with the first element of the smallest element in the heap\n        elif num1 + num2 < heapq.heappop(min_heap)[0]:\n            heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            count += 1\n\n    # Return the list of pairs of the k smallest pairs\n    return [(pair[1][0], pair[1][1]) for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the input lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    \n    # create a list of tuples where each tuple contains a pair of elements from the input lists\n    pairs = [(num1, num2) for num1 in nums1 for num2 in nums2 if num1!= num2]\n    \n    # sort the pairs based on the sum of their elements\n    pairs.sort(key=lambda x: x[0] + x[1])\n    \n    # create a min heap of size k\n    min_heap = []\n    \n    # add the first k elements of the pairs to the heap\n    for pair in pairs[:k]:\n        heapq.heappush(min_heap, pair)\n    \n    # create a result list to store the k smallest pairs\n    result = []\n    \n    # continue adding pairs to the result list until we have added k elements\n    while len(min_heap) < k:\n        # find the minimum element in the heap and add it to the result list\n        pair = heapq.heappop(min_heap)\n        result.append(pair)\n        \n        # add the next smallest element to the heap if it exists\n        if len(min_heap) < k:\n            if pair[0] + min_heap[0][0] < pair[1]:\n                heapq.heappush(min_heap, (pair[0] + min_heap[0][0], pair[1]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize an empty list to store the k smallest pairs\n    result = []\n    # Initialize two heaps to store the smallest elements of nums1 and nums2\n    min_heap1, min_heap2 = [], []\n\n    # Sort the input arrays in non-decreasing order\n    nums1.sort()\n    nums2.sort()\n\n    # Iterate through the arrays and maintain the k smallest pairs using heaps\n    i = 0\n    j = 0\n    while k > 0 and i < len(nums1) and j < len(nums2):\n        # If the current element in nums1 is smaller than the smallest element in min_heap1, add it to the min_heap1 and remove the smallest element in min_heap2\n        if nums1[i] < min_heap1[0]:\n            heapq.heappushpop(min_heap1, nums1[i])\n            heapq.heappushpop(min_heap2, -heapq.heappop(min_heap2))\n        # If the current element in nums2 is smaller than the smallest element in min_heap2, add it to the min_heap2 and remove the smallest element in min_heap1\n        elif nums2[j] < min_heap2[0]:\n            heapq.heappushpop(min_heap2, nums2[j])\n            heapq.heappushpop(min_heap1, -heapq.heappop(min_heap1))\n        # If both the current elements in nums1 and nums2 are smaller than the smallest element in min_heap1, add the current element to the result and increment i and j\n        elif nums1[i] < min_heap1[0]:\n            heapq.heappushpop(min_heap1, nums1[i])\n            heapq.heappushpop(min_heap2, -heapq.heappop(min_heap2))\n            result.append((nums1[i], nums2[j]))\n            i += 1\n        # If both the current elements in nums1 and nums2 are smaller than the smallest element in min_heap2, add the current element to the result and increment i and j\n        elif nums2[j] < min_heap2[0]:\n            heapq.heappushpop(min_heap2, nums2[j])\n            heapq.heappushpop(min_heap1, -heapq.heappop(min_heap1))\n            result.append((nums1[i], nums2[j]))\n            j += 1\n        # If both the current elements in nums1 and nums2 are equal to the smallest element in min_heap1, add the current element to the result and increment i\n        else:\n            heapq.heappushpop(min_heap1, nums1[i])\n            result.append((nums1[i], nums2[j]))\n            i += 1\n        # Decrement k by 1 to account for the current pair\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Initialize a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    \n    for num in nums1:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    \n    # Iterate through the second array and add each element to the min heap\n    for num in nums2:\n        if k == 0:\n            break\n        if -num in freq_dict and freq_dict[-num] > 0:\n            heapq.heappush(min_heap, (-num, -freq_dict[-num]))\n            freq_dict[-num] -= 1\n            k -= 1\n    \n    # Initialize a list to store the result\n    result = []\n    \n    # Iterate through the first array and deduct the frequency of each element from the min heap\n    for num in nums1:\n        if k == 0:\n            break\n        if -num in freq_dict and freq_dict[-num] > 0:\n            if -heapq.heappop(min_heap)[0] == -num:\n                heapq.heappush(result, (-num, -freq_dict[-num]))\n                freq_dict[-num] -= 1\n                k -= 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n\n    for num in nums1:\n        heapq.heappush(min_heap, (-num, -1))\n\n    result = []\n    while k > 0 and len(result) < k:\n        if not min_heap:\n            break\n\n        pair = heapq.heappop(min_heap)\n        if pair[1] == -1:\n            pair = (-pair[0], -1)\n        else:\n            pair = (-pair[0], pair[1] + 1)\n\n        if pair not in result:\n            result.append(pair)\n\n        if pair[1] < len(nums2) - 1:\n            heapq.heappush(min_heap, (-pair[0], pair[1] + 1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest k elements from the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # create a list to store the smallest k pairs of elements\n    result = []\n    \n    # iterate over the second array and add pairs of elements\n    for num in nums2:\n        # if there are at least k elements in the min heap, pop the smallest one\n        if len(min_heap) >= k:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n        \n        # if there are still at least k elements in the min heap, add the current pair to the result list\n        if len(min_heap) >= k:\n            result.append((min_heap[0], num))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the two input arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            pair_sum = num1 + num2\n\n            # If the sum is greater than the smallest element in the heap, update the heap\n            if len(min_heap) < k or pair_sum < min_heap[0][1]:\n                heapq.heappush(min_heap, (pair_sum, (num1, num2)))\n\n            # If the heap size is equal to k, remove the smallest element\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n\n    # Return the list of pairs with the smallest sum\n    return [(num1, num2) for pair_sum, (num1, num2) in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes in three lists of integers and an integer k as input.\n    It returns a list of tuples where each tuple contains two integers, the pair of integers that are the k smallest\n    from the two input lists.\n    '''\n    # create a min-heap with the first list as the priority queue\n    pq = [(nums1[0], 0)]\n    result = []\n    \n    # iterate through the second list and add the pairs of elements to the min-heap\n    for i in range(1, len(nums2)):\n        # extract the smallest element from the heap\n        smallest = heapq.heappop(pq)[0]\n        \n        # add the next element to the heap\n        heapq.heappush(pq, (smallest + nums2[i], i))\n        \n        # if we have found k pairs of elements, add the pair to the result list\n        if len(result) == k:\n            result.append((pq[0][1], i))\n    \n    # if we have not found k pairs of elements, add the remaining elements to the result list\n    while len(pq) > 1:\n        result.append((pq[0][1], pq[1][1]))\n        heapq.heappop(pq)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the smallest k elements\n    min_heap = []\n    # iterate through each element in the first array\n    for num1 in nums1:\n        # create a set to store the indices of the elements in the second array that are smaller than num1\n        indices = set()\n        # iterate through each element in the second array\n        for num2, index in zip(nums2, range(len(nums2))):\n            # if num2 is smaller than num1, add its index to the indices set\n            if num2 < num1:\n                indices.add(index)\n        # if there are at least k elements in the indices set, add the smallest elements to the min heap\n        if len(indices) >= k:\n            heapq.heappush(min_heap, (num1, min(indices)))\n        # if there are more elements than k in the indices set, remove the largest element from the heap\n        if len(indices) > k:\n            heapq.heappop(min_heap)\n    # return the k smallest pairs\n    return [pair[0] for pair in min_heap]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the current pair of tuples and compare it to the minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i][0] * list1[j][1], list1[i][1] * list1[j][0])\n            if pair[0] < min_product:\n                min_product = pair[0]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # create a list of tuples with length of list1\n    tuples_list = [tuple(list1[i:i+2]) for i in range(len(list1)-1)]\n    \n    # find the minimum product by multiplying the first element of each pair\n    min_product = min([a*b for a,b in tuples_list])\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the given list of tuples in ascending order\n    list1.sort()\n\n    # Initialize the minimum product to be the first element of the sorted list\n    min_product = list1[0]\n\n    # Initialize the minimum product index to be the index of the first element of the sorted list\n    min_product_index = 0\n\n    # Iterate through the sorted list\n    for i in range(1, len(list1)):\n        # Calculate the product of the pair of tuples at indices i and i-1\n        product = list1[i][0] * list1[i-1][1]\n\n        # Check if the calculated product is less than the current minimum product\n        if product < min_product:\n            # Update the minimum product and its index\n            min_product = product\n            min_product_index = i\n\n    # Return the minimum product and its index\n    return min_product, min_product_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of all pairs of tuples in the list.\n    '''\n    if len(list1) < 2:\n        return None\n    \n    # Initialize variables to keep track of the minimum and maximum values of each tuple\n    min_val = list1[0]\n    max_val = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i]) < len(min_val):\n            min_val = list1[i]\n            max_val = tuple(min_val)\n        elif len(list1[i]) > len(max_val):\n            min_val = tuple(max_val)\n            max_val = list1[i]\n        else:\n            if list1[i][0] < min_val[0]:\n                min_val = list1[i]\n            elif list1[i][0] > max_val[0]:\n                max_val = list1[i]\n    \n    # Calculate the minimum product of all pairs of tuples in the list\n    min_product = 1\n    for i in range(len(min_val)):\n        for j in range(i+1, len(min_val)):\n            min_product = min(min_product, min_val[i]*max_val[j])\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # Initialize the minimum value with the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value as None\n    min_val = None\n    # Iterate over each element in the list\n    for val in listval:\n        # Check if current element is smaller than minimum value\n        if val < min_val:\n            # If it is, update minimum value\n            min_val = val\n    # Return minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize a variable to store the minimum value\n    min_value = float('inf')\n    # loop through the list and update the minimum value if a smaller one is found\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of values as input and returns the minimum value in the list.\n    '''\n    # initialize a variable to store the minimum value\n    min_val = listval[0]\n    # loop through the list and compare each value to the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # find the minimum value\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        return min(listval, key=lambda x: (isinstance(x, int), -1 * x))"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize min value to the first value in the list\n    min_val = listval[0]\n    # iterate through the rest of the list\n    for i in range(1, len(listval)):\n        # check if the current value is smaller than the current minimum\n        if listval[i] < min_val:\n            # update the minimum value to be the current value\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    if not listval:\n        return None\n\n    min_val = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Find the minimum value in the list using the built-in min() function\n    min_val = min(listval)\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"The list is empty.\")\n    else:\n        minval = listval[0]\n        for val in listval[1:]:\n            if val < minval:\n                minval = val\n        print(\"The minimum value in the list is:\", minval)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_word = [word.capitalize() for word in words]\n    # Join the words back into a string\n    return ''.join(camel_case_word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'_(.)', word)\n    camel_case_word = ''.join(words).upper()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case to camel case by capitalizing the first letter of each group of words\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace all underscores with spaces\n    word = re.sub('_','', word)\n    # capitalize the first letter of each word\n    words = word.split()\n    camel_case = [words[0].capitalize()]\n    for word in words[1:]:\n        camel_case.append(word.capitalize())\n    camel_case = ''.join(camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert the snake case string to camel case string\n    camel_case_word = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    # convert the first letter to upper case\n    camel_case_word = camel_case_word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    This function takes a snake case string and returns the camel case string.\n    \"\"\"\n    # Replace all underscores with spaces\n    word = re.sub('_','', word)\n\n    # Split the string into words\n    words = word.split()\n\n    # Convert each word to camel case\n    camel_case_words = [word.title() for word in words]\n\n    # Join the camel case words into a single string\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_word)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase\n    words[0] = words[0].capitalize()\n    # Join the words back into a string\n    camel_case_word = '_'.join(words)\n    # Return the camel case string\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_word = re.sub(r'(?<=[a-z])_(?=[a-z])', '', word)\n    return camel_word.capitalize()"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError(\"List does not have enough elements to extract the nth element.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise ValueError(\"Input must be a list\")\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Check if n is in range of list\n    if n > len(list1):\n        raise IndexError(\"n is out of range\")\n\n    # Extract nth element from list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        return list1[n-1]\n    except IndexError:\n        print(\"Index out of range. Please enter a valid index.\")\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"Input should be a list of tuples\")\n    elif n < 1 or n > len(list1):\n        raise ValueError(\"n should be between 1 and the length of the list\")\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return 'The list has less than {} elements.'.format(n)\n    elif n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError(\"Input list should be a list of tuples\")\n    \n    # Check if the input n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input n should be a positive integer\")\n    \n    # Extract the nth element from the list of tuples\n    result = list1[n-1]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input\n    and returns the nth element from the list.\n    \"\"\"\n    if n > len(lst):\n        return None\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:  \n        if value in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Iterate through each value in list1\n    for i in list1:\n        # Check if the value exists in list2\n        if i in list2:\n            # If it does, print a message\n            print(i, \"exists in both lists\")\n        else:\n            # If it doesn't, skip to the next value in list1\n            continue"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:  \n        if val in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must have the same length.\")\n        return False\n\n    # loop through the lists and check for overlap\n    for item in list1:\n        if item in list2:\n            print(f\"{item} exists in both lists.\")\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set of all values in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n    # Check if there are any values in the intersection set\n    if len(intersection) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize variables to store the maximum product and the pair of numbers\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n\n    # Iterate through the array and compare the product of each pair with the maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two numbers in the pair\n            product = arr[i] * arr[j]\n\n            # Compare the product to the current maximum product\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    # Return the pair of numbers with the highest product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing two integers, the maximum product of two integers in the array, and the indices of the two integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    max3 = arr[0]\n    max4 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return (max1 * max2, max1, max2, max3, max4)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers and returns a tuple containing the two elements in the array with the highest product.\n    \"\"\"\n    # Find the maximum element in the array\n    max_num = max(arr)\n\n    # Initialize two variables to hold the two elements in the array with the highest product\n    max_pair = (0, 0)\n    min_pair = (0, 0)\n\n    # Iterate through the array and find the pairs with the highest product\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            # Check if the current pair is not already in the max_pair or min_pair\n            if i!= j and arr[i] * arr[j] > max_pair[0] * max_pair[1]:\n                max_pair = (arr[i], arr[j])\n            elif i!= j and arr[i] * arr[j] < min_pair[0] * min_pair[1]:\n                min_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    max1 = float('-inf') \n    max2 = float('-inf') \n    min1 = float('inf') \n    min2 = float('inf') \n\n    for num in arr: \n        if num > max1: \n            max3 = max2 \n            max2 = max1 \n            max1 = num \n        elif num > max2 and num < max1: \n            max3 = max2 \n            max2 = num \n        elif num < min1: \n            min3 = min2 \n            min2 = min1 \n            min1 = num \n        elif num < min2 and num > min1: \n            min3 = min2 \n            min2 = num \n\n    if max1 * max2 < min1 * min2: \n        return (max1, max2) \n    else: \n        return (min1, min2) "
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    This function takes in an array of integers and returns a tuple containing the pair of integers with the highest product.\n    If there are multiple pairs with the same highest product, the function returns the pair with the smallest value in the pair.\n    '''\n    max_pair = (0, 0)\n    max_product = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            \n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    \n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n\n    # initialize two variables to store the maximum and minimum products\n    max_product = arr[0]\n    min_product = arr[0]\n\n    # loop through the array\n    for i in range(1, len(arr)):\n        # update the maximum and minimum products\n        max_product = max(max_product * arr[i], arr[i], min_product * arr[i])\n        min_product = min(max_product * arr[i], arr[i], min_product * arr[i])\n\n    # return the pair with the highest product\n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (arr[0], arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > max_pair[0] * arr[i]:\n            max_pair = (arr[i], max_pair[0] * arr[i])\n        elif arr[i] > max_pair[1] * arr[i]:\n            max_pair = (arr[i], max_pair[1] * arr[i])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a pair with highest product from the array.\n    '''\n    # initialize variables\n    max1 = max2 = arr[0]\n    max3 = arr[0] * arr[1]\n    \n    # iterate through the array\n    for i in range(1, len(arr)):\n        # update max1, max2, and max3\n        if arr[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n            \n    # find the maximum product\n    max_product = max1 * max2 * max3\n    \n    # return the pair with highest product\n    return max_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store common elements\n    common_elements = {}\n    \n    # loop through each tuple in the list\n    for tup in Input:\n        # get the first element of the tuple\n        elem = tup[0]\n        \n        # check if the element is already in the dictionary\n        if elem in common_elements:\n            # if it is, increment the count for that element\n            common_elements[elem] += 1\n        else:\n            # if it isn't, add the element to the dictionary with a count of 1\n            common_elements[elem] = 1\n    \n    # create an empty list to store the output tuples\n    output = []\n    \n    # loop through the keys in the dictionary to find the common elements\n    for key in common_elements:\n        # create a tuple with the common element and its count\n        tup = (key, common_elements[key])\n        \n        # append the tuple to the output list\n        output.append(tup)\n    \n    # return the output list\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # loop through each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        first_elem = tup[0]\n        \n        # if the first element is in the count dictionary, increment its count by 1\n        if first_elem in count_dict:\n            count_dict[first_elem] += 1\n        # otherwise, add the first element to the dictionary with a count of 1\n        else:\n            count_dict[first_elem] = 1\n    \n    # loop through the dictionary and find the element with the highest count\n    max_count = 0\n    common_elem = None\n    for elem, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            common_elem = elem\n    \n    # return the common element\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common elements and the values are the number of occurrences of each element in the input list.\n    \"\"\"\n    common_elements = {}\n    for i in Input:\n        for j in i:\n            if j in common_elements:\n                common_elements[j] += 1\n            else:\n                common_elements[j] = 1\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_first.append(Input[i])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        if len(set([x[0] for x in Input[:i]])) == 1:\n            common_element.append(Input[:i])\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # Find the first element of the first tuple\n    common_element = Input[0][0]\n\n    # Iterate through the rest of the tuples\n    for tuple in Input[1:]:\n        # Check if the first element of the current tuple is equal to the common element\n        if tuple[0] == common_element:\n            # If yes, update the common element to the current tuple's first element\n            common_element = tuple[0]\n\n    # Return the common element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples where the first element is the common first element of the tuples in the input list.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], Input[i][1], Input[i][2]))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    common = []\n    for i in Input:\n        for j in range(len(Input)-1):\n            if i[0] == Input[j][0] and i[1] == Input[j][1]:\n                common.append(i)\n                break\n    return common\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the common elements and their frequency\n    common_dict = {}\n\n    # Iterate over each tuple in the input list\n    for tup in Input: \n        # Get the first element from the tuple\n        first_elem = tup[0]\n\n        # If the first element is already present in the dictionary, increment its frequency by 1\n        if first_elem in common_dict: \n            common_dict[first_elem] += 1\n        # Else, add the first element to the dictionary with a frequency of 1\n        else: \n            common_dict[first_elem] = 1\n\n    # Get the list of common elements from the dictionary and sort them in descending order\n    common_list = sorted(common_dict.keys(), key=common_dict.get, reverse=True)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for tup in Input:\n        if tup[0] not in common_first:\n            common_first.append(tup[0])\n    return common_first"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = \"\"\n    for i in range(len(lst)): \n        if len(lst[i]) > max_len: \n            max_len = len(lst[i]) \n            max_elem = lst[i] \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        length = len(str(element))\n        if length > max_length:\n            max_length = length\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0   # initialize max_len to 0\n    max_ele = None   # initialize max_ele to None\n    \n    for num in lst:   # loop through each number in the list\n        if len(str(num)) > max_len:   # if the length of the number as a string is greater than max_len\n            max_len = len(str(num))   # update max_len\n            max_ele = num   # update max_ele\n    \n    return max_ele   # return the maximum element in the list"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_elem = None \n    for i in lst: \n        if len(i) > max_length: \n            max_length = len(i) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_element = elem\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element having the maximum length in the list.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_length:\n            max_length = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Function to round a number and return the rounded value\n    def round_number(num):\n        return round(num, 2)\n\n    # Round every number in the list\n    rounded_list = [round_number(num) for num in list1]\n\n    # Calculate the total sum of the rounded list\n    total_sum = sum(rounded_list)\n\n    # Calculate the length of the list\n    list_length = len(list1)\n\n    # Print the result\n    print(\"Total sum:\", total_sum * list_length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        rounded = round(list1[i])\n        total += rounded\n        print(rounded)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(\"Total sum is:\", total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total_sum = sum(map(round, lst))\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    result = total_sum * len(lst)\n    print(result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    while count < n:\n        num = int(input(\"Enter an even natural number: \"))\n        if num % 2 == 0:\n            sum += num ** 3\n            count += 1\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum\n\nprint(cube_Sum(10)) # Output: 10420"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize the sum and cube sum\n    sum_even = 0\n    sum_cubed = 0\n\n    # loop through the even numbers\n    for i in range(n):\n\n        # calculate the cube of the even number\n        cube = i * i * i\n\n        # add the cube of the even number to the sum of even numbers\n        sum_even += cube\n\n        # add the cube of the even number to the sum of cubed numbers\n        sum_cubed += cube**3\n\n    # return the sum of even numbers and the sum of cubed numbers\n    return sum_even, sum_cubed"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(2, n+1):\n        sum_cubes += i*i*i\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n    for i in range(1, 2*n+1, 2):\n        count += 1\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter ='- '\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i < len(test_tup)-1:\n            result += delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    concatenated_tuple = delimiter.join(str(item) for item in test_tup)\n    return concatenated_tuple"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # define the delimiter\n    delimiter =''\n    # iterate through each element of the tuple\n    concatenated_str = ''\n    for item in test_tup:\n        # concatenate the item with delimiter\n        concatenated_str += str(item) + delimiter\n    # remove the last delimiter\n    concatenated_str = concatenated_str[:-1]\n    # return the concatenated string\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=''):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): A tuple of strings or numbers.\n    delimiter (str): A string that will be used as the delimiter between elements.\n\n    Returns:\n    concatenated_string (str): A string that is the concatenated version of the tuple elements with the delimiter.\n    '''\n\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    separator = \", \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + separator\n    result = result[:-2]\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n    average = sum / count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Loop through first n numbers\n    for i in range(1, n+1):\n        # Calculate cube of i and add to sum of cubes\n        sum_of_cubes += i ** 3\n        \n    # Calculate average of cubes and return it\n    return sum_of_cubes / (n * (n + 1) / 2)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    count = 0\n\n    # Calculate sum of cubes of natural numbers from 1 to n\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    # Calculate average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # Print the average of cubes\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average_of_cubes)\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum to 0 and count to 0\n    sum = 0\n    count = 0\n    \n    # loop n times and calculate cube of each number and add to sum\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    \n    # calculate average and return it\n    average = sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    average = sum/n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initializing the sum variable to zero\n    sum = 0\n\n    # using a for loop to iterate from 1 to n\n    for i in range(1, n+1):\n\n        # calculating the cube of the current number\n        cube = i**3\n\n        # adding the cube to the sum variable\n        sum += cube\n\n    # calculating the average of the cubes\n    average = sum / n\n\n    # printing the average of cubes\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n\n    average = sum/n\n\n    return average\n\nprint(find_Average_Of_Cube(10)) # Output: 385.0"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        rear = string[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_elements = []\n    # Iterate over each string in the tuple\n    for string in test_tuple:\n        # Append the rear element to the list\n        rear_elements.append(string[-1])\n    # Return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(len(test_tuple[i]))\n        else:\n            rear_indices.append(i+1)\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][rear_indices[i]])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            rear_elements.append(element[-1])\n        else:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    result = []\n    for element in test_tuple:\n        result.append(element[rear_index])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for element in test_tuple:\n        rear_index.append(element[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    This function filters out odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2 == 1:  # check if number is odd\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # ^ matches the start of the string\n    # \\d{4} matches four digits\n    # - matches a hyphen\n    # \\d{2} matches two digits for month and day\n    # - matches a hyphen\n    # \\d{2} matches two digits for year\n    # $ matches the end of the string\n    regex = re.compile(pattern)\n    # Compile the regex pattern\n    match = regex.match(dt)\n    # Match the pattern in the input string\n    if match:\n        # If the match is successful, split the date string into year, month, and day components\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Reconstruct the date string in dd-mm-yyyy format\n        new_date = f\"{day}-{month}-{year}\"\n        # Return the new date string\n        return new_date\n    else:\n        # If the match fails, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert yyyy-mm-dd to dd-mm-yyyy format\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\2-\\1-\\3', dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Search the input string for the date pattern using re.search()\n    match = re.search(pattern, dt)\n    \n    # If no match was found, the input string is not a valid date\n    if not match:\n        return dt\n    \n    # Extract the date components from the match object\n    year, month, day = match.groups()\n    \n    # Convert the date components to the new format\n    new_dt = '-'.join([day, month, year])\n    \n    # Return the new date string\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regex pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use re.sub() function to replace the date format with the desired format\n    new_dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    # Return the new date format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format from yyyy-mm-dd to dd-mm-yyyy\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        day, month, year = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # define the replacement pattern to convert the yyyy-mm-dd format to dd-mm-yyyy format\n    replacement = r'\\2-\\1-\\3'\n    # use the re.sub() function to replace the matched pattern with the replacement pattern\n    return re.sub(pattern, replacement, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    return re.sub(pattern, r'\\g<3>', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the re.sub() function to replace the matched pattern with the desired output format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    # Initialize the gap sequence\n    gap = my_list.pop(0)\n    gap_seq = [gap] * (len(my_list) // gap)\n\n    # Insertion sort for the first gap elements\n    for i in range(gap_seq[-1]):\n        j = i\n        while j >= 0 and my_list[j] > my_list[j + gap_seq[-1]]:\n            my_list[j], my_list[j + gap_seq[-1]] = my_list[j + gap_seq[-1]], my_list[j]\n            j -= gap_seq[-1]\n\n        # Insertion sort for the first gap elements\n        for k in range(gap_seq[-1]):\n            j = k\n            while j >= 0 and my_list[j] > my_list[j + gap]:\n                my_list[j], my_list[j + gap] = my_list[j + gap], my_list[j]\n                j -= gap\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Initialize gap\n    gap = len(my_list) // 2\n    \n    # Keep sorting until the gap becomes 1\n    while gap > 0:\n        \n        # Insertion sort for this gap size\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        \n        # Decrease the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step 1: Calculate the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Move the gap one step to the right at each iteration\n        for i in range(gap, n):\n            # Step 3: Swap the elements if they are in the wrong order\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Step 4: Reduce the gap by half in each iteration\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the result tuples\n    result_list = []\n    # iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from the second tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # perform the elementwise and operation and append the result to the result list\n        result = elem1 & elem2\n        result_list.append(result)\n    # return the result list\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Convert the tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Initialize the result tuple\n    result_tup = (None,) * len(tup1_list)\n\n    # Loop through each element in the lists\n    for i in range(len(tup1_list)):\n        result_tup[i] = tup1_list[i] & tup2_list[i]\n\n    # Convert the result tuple back to a tuple\n    result_tup = tuple(result_tup)\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define variables to store the elementwise and tuples\n    and_tup = ()\n    # Loop through the elements in the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements and compute the elementwise and\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    # Return the elementwise and tuple\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize variables for the result and flag for the first element\n    result = None\n    first_elem = True\n    \n    # Loop through each element of the input tuples\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # Check if the first element of the current tuple is True\n        if first_elem:\n            # If it is, set the result to the current element and set the flag to False\n            result = elem1\n            first_elem = False\n        else:\n            # If it isn't, perform the elementwise and operation and set the result to the result of the operation\n            result = result & elem2\n    \n    # Return the result as a tuple\n    return (result,)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n\n    # Extract the elementwise and tuples\n    and_tup = tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2))\n\n    # Print the result\n    print(\"Elementwise and tuples:\", and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Initialize the and_tuple with the length of the smaller tuple\n    and_tuple = (len(test_tup1) if len(test_tup1) < len(test_tup2) else len(test_tup2))\n\n    # Loop through each element of the and_tuple\n    for i in range(and_tuple):\n        # Extract the values of the corresponding elements of the two tuples\n        elem1 = test_tup1[i] if i < len(test_tup1) else None\n        elem2 = test_tup2[i] if i < len(test_tup2) else None\n\n        # Calculate the elementwise and of the two elements\n        and_elem = elem1 & elem2\n\n        # Add the and_elem to the and_tuple\n        and_tuple[i] = and_elem\n\n    # Return the and_tuple\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements of the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Compute the elementwise and of the two elements and append it to the result tuple\n        result_tup += (elem1 & elem2,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"The equation has no real root.\")\n    else:\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        print(\"The directrix of the parabola is:\", root1, \"or\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else:\n        print(\"No real roots\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is non-zero, then there is a root\n    if discriminant > 0: \n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Sort the roots in ascending order\n        if root1 > root2: \n            root1, root2 = root2, root1\n\n        # Return the directrix\n        return root1\n\n    # If the discriminant is zero, then there is only one root\n    else: \n        return -b / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola is not valid\"\n    elif a == 1:\n        return \"The directrix of the parabola is at x = \" + str(int((-c)/b))\n    else:\n        x1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        return \"The directrix of the parabola is at x1 = \" + str(int(x1)) + \" and x2 = \" + str(int(x2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Calculate the directrix of a parabola given its coefficients a, b and c.\n    The directrix is the point at which the line containing the parabola crosses the x-axis.\n    '''\n    # Calculate the determinant of the 2x2 matrix formed by the coefficients a, b and c\n    det = a*b - a*a + c*c - 2*a*c + b*b\n    # Calculate the ratio of the determinant to the product of a and b\n    ratio = det / (2*a)\n    # Calculate the x-coordinate of the point at which the line crosses the x-axis\n    directrix = -b / (2*a)\n    # Return the directrix as a tuple of coordinates\n    return (directrix, ratio)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (b**2 - 4*a*c)/(2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The parabola is not a quadratic equation.\")\n    elif delta == 0:\n        x = -b / (2*a)\n        print(\"The directrix is\", x)\n    else:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is between\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n    \n    if discriminant < 0:\n        print(\"No real roots\")\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        print(\"One real root:\", x)\n    else:\n        x1 = (-b + discriminant ** 0.5) / (2 * a)\n        x2 = (-b - discriminant ** 0.5) / (2 * a)\n        print(\"Two real roots:\", x1, x2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert both lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # If the intersection is not empty, there is a common element\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for num in list1:\n        if num in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the lengths of the trapezium sides\n    side1 = 0.5 * (base1 + base2)\n    side2 = 0.5 * (base1 + base2)\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + side1 + side2\n\n    # Calculate the area of the trapezium\n    total_area = area1 + area2\n\n    # Calculate the difference between the perimeter and the area of the trapezium\n    delta_p_a = abs(perimeter - total_area)\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * delta_p_a / total_area\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length = base1 + base2 + height\n    area = 0.5 * (base1 * base2)\n    median_area = 0.5 * (area + height)\n    median_length = median_area / (base1 + base2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1 + base2) / 2\n    area = 0.5 * base * height\n    trapezium_length = math.sqrt(area)\n    median_trapezium = 0.5 * (base1 + base2)\n    return median_trapezium - 0.6745 * trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    base = (base1 + base2) / 2\n    \n    # Calculate the height of the trapezium\n    trapezium_height = height\n    \n    # Calculate the area of the base of the trapezium\n    base_area = base * trapezium_height\n    \n    # Calculate the perimeter of the trapezium\n    trapezium_perimeter = 2 * (base1 + base2)\n    \n    # Calculate the length of the upper half of the trapezium\n    upper_half_length = trapezium_perimeter / 2\n    \n    # Calculate the length of the lower half of the trapezium\n    lower_half_length = (trapezium_perimeter - upper_half_length) / 2\n    \n    # Calculate the area of the upper half of the trapezium\n    upper_half_area = (upper_half_length / 2) ** 2 * trapezium_height\n    \n    # Calculate the area of the lower half of the trapezium\n    lower_half_area = (lower_half_length / 2) ** 2 * trapezium_height\n    \n    # Calculate the total area of the trapezium\n    total_area = area + base_area + upper_half_area + lower_half_area\n    \n    # Calculate the median length of the trapezium\n    median_length = total_area / (2 * (area + base_area))\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2)\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = base1 * height + base2 * height\n\n    # Calculate the median length of the trapezium\n    median_trapezium_length = trapezium_length\n\n    # If the perimeter is odd, the median is at the midpoint of the trapezium\n    if perimeter % 2!= 0:\n        median_trapezium_length = trapezium_length + 0.5 * (height - 0.5 * base1 - 0.5 * base2)\n\n    # If the perimeter is even, the median is the average of the base1 and base2 lengths\n    else:\n        median_trapezium_length = (0.5 * base1 + 0.5 * base2)\n\n    return median_trapezium_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the length of the median trapezium based on the given base1, base2 and height.\n    '''\n    # calculate the length of the upper trapezium\n    upper_length = (base1 + base2) / 2\n\n    # calculate the length of the lower trapezium\n    lower_length = (base1 - base2) / 2\n\n    # calculate the total length of the trapezium\n    total_length = upper_length + lower_length\n\n    # calculate the median length of the trapezium\n    median_length = total_length / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    length = 0.5 * (base1 + base2 + height)\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height + height * height)\n    # Calculate the height of the trapezium\n    height = (base1 + base2 + height) / 2\n    # Calculate the area of the smaller trapezium\n    smaller_area = 0.5 * (base1 * height + height * height)\n    # Calculate the area of the larger trapezium\n    larger_area = 0.5 * (base2 * height + height * height)\n    # Calculate the ratio of the area of the larger trapezium to the smaller trapezium\n    ratio = larger_area / smaller_area\n    # Calculate the length of the smaller trapezium\n    smaller_length = length / ratio\n    # Calculate the area of the smaller trapezium\n    smaller_area = smaller_length * height\n    # Calculate the median length of the trapezium\n    median = 0.5 * (smaller_length + length)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Args:\n        base1 (int): The length of the first base of the trapezium.\n        base2 (int): The length of the second base of the trapezium.\n        height (int): The height of the trapezium.\n\n    Returns:\n        int: The median length of the trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the base of the rectangle\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the height of the rectangle\n    height_rect = height / 2\n\n    # Calculate the area of the rectangle\n    area_rect = base * height_rect\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height_rect)\n\n    # Calculate the length of the middle trapezium base\n    mid_base = 0.5 * (base1 + base2)\n\n    # Calculate the area of the middle trapezium base\n    area_mid = mid_base * height_rect\n\n    # Calculate the length of the top half of the trapezium\n    top_half = 0.5 * height_rect\n\n    # Calculate the area of the top half of the trapezium\n    area_top = (base1 + top_half) * height_rect\n\n    # Calculate the length of the bottom half of the trapezium\n    bottom_half = (base2 + height_rect - top_half)\n\n    # Calculate the area of the bottom half of the trapezium\n    area_bottom = (base2 + bottom_half) * height_rect\n\n    # Calculate the length of the trapezium from the bottom\n    length = area_rect + area_mid\n\n    # Check if the length of the trapezium is greater than the length of the top half\n    if length > area_top:\n        # If the length is greater than the length of the top half, the trapezium has length equal to the length of the top half\n        trapezium_length = area_top\n    else:\n        # If the length is less than or equal to the length of the top half, the trapezium has length equal to the length of the length\n        trapezium_length = length\n\n    # Check if the area of the trapezium is less than the area of the bottom half\n    if area < area_bottom:\n        # If the area is less than the area of the bottom half, the trapezium has area equal to the area of the bottom half\n        trapezium_area = area_bottom\n    else:\n        # If the area is greater than or equal to the area of the bottom half, the trapezium has area equal to the area of the area\n        trapezium_area = area\n\n    # Calculate the area of the trapezium from the bottom\n    area_trapezium = trapezium_area + area_rect\n\n    # Calculate the area of the rectangle with the length of the top half\n    area_top_rect = area_top / trapezium_length\n\n    # Calculate the area of the rectangle with the length of the bottom half\n    area_bottom_rect = area_bottom / trapezium_length\n\n    # Calculate the length of the rectangle with the length of the top half\n    top_length = area_top_rect * trapezium_length\n\n    # Calculate the length of the rectangle with the length of the bottom half\n    bottom_length = area_bottom_rect * trapezium_length\n\n    # Calculate the length of the rectangle with the length of the middle base\n    mid_length = trapezium_length - (top_length + bottom_length)\n\n    # Calculate the length of the trapezium from the middle base\n    mid_trapezium_length = mid_length / 2\n\n    # Calculate the area of the trapezium from the middle base\n    area_mid_trapezium = area_mid * mid_trapezium_length\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length - (trapezium_area - area_trapezium)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    trapezium_perimeter = 2 * (base1 + base2 + height)\n    median_length = area / trapezium_perimeter\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    # check if the number is greater than any element of the array\n    for num in arr:\n        if number > num:\n            return True\n    # if the number is less than or equal to all elements of the array,\n    # it's not greater than any element\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr)!= list:\n        return \"The input should be a list.\"\n    \n    greater_than_number = False\n    for num in arr:\n        if num > number:\n            greater_than_number = True\n            break\n    \n    return greater_than_number"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(b)*\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b+)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b)*')\n    match = pattern.match(text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]*b\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string\n    num_str = str(n)\n    # find the length of the string\n    length = len(num_str)\n    # return the last digit of the number\n    return num_str[length-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an input and returns the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a list of negative numbers.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    return ''.join(c for c in str1 if c.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if char.isalnum())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            continue\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.isdigit():\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_chars += char\n    return odd_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if char.islower():\n                if int(ord(char)) % 2 == 0:\n                    new_str += char\n            elif char.isupper():\n                if int(ord(char)) % 2 == 0:\n                    new_str += char\n            elif char.isdigit():\n                if int(ord(char)) % 2 == 0:\n                    new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is even, add it to the new string\n        if char % 2 == 0:\n            new_str += char\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the count of bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] or test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        single = multiple_to_single(L[1:])\n        return L[0] * single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize variables\n    total = 0\n    multiple = 1\n    \n    # Iterate over the list and add up the multiple values\n    for num in L:\n        if num % multiple == 0:\n            total += num\n        multiple += 1\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    elif len(L) == 2:\n        return L[0] * 10 + L[1]\n    else:\n        return multiple_to_single(L[:-1]) + L[-1]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for num in L:\n        single = single * 10 + num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable with the first element of the list\n    result = L[0]\n    \n    # Iterate through the rest of the list\n    for num in L[1:]:\n        # If the current number is a multiple of the result, add it to the result\n        if num % result == 0:\n            result += num\n        # If the current number is not a multiple of the result, set the result to the current number\n        else:\n            result = num\n            \n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result to 0\n    result = 0\n    # loop through the list of integers\n    for num in L:\n        # check if the current number is a multiple of 3\n        if num % 3 == 0:\n            # if it is, add it to the result\n            result += num\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 0\n    for num in L:\n        if num % 10 == 0:\n            single_integer += 10\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # create an empty string to store the final integer\n    result = ''\n    # loop through each integer in the list\n    for num in L:\n        # if the integer is a multiple of 10, add the digit 1 followed by the integer to the result string\n        if num % 10 == 0:\n            result += '1' + str(num)\n        # if the integer is not a multiple of 10, add the integer to the result string\n        else:\n            result += str(num)\n    # return the final string as an integer\n    return int(result)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Remove punctuation and split the sentence into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n    \n    # Iterate over the words and check if each word is an adverb\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.lower() in ['very', 'quite', 'rather', 'rather', 'completely', 'completely', 'exceedingly', 'extremely', 'just','really','significantly', 'totally','very','really']:\n            # If it is, add it to the list of adverbs and its position in the sentence\n            adverbs.append((word, i))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the pattern to match adverbs\n    pattern = r'\\b(also|also\\s*much|also\\s+much|also\\s+more|also\\s+significantly|also\\s+significantly\\s+more|also\\s*significantly|also\\s*significantly\\s+more|also\\s*significantly\\s*more|also\\s*significantly\\s*much|also\\s*significantly\\s*more|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly\\s+more|also\\s*significantly\\s+much|also\\s*significantly"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # define the regular expression pattern for identifying adverbs\n    pattern = r\"\\b(adverb)\\b\"\n\n    # use the re.finditer() function to iterate over all matches in the text\n    adverbs = re.finditer(pattern, text)\n\n    # initialize an empty dictionary to store the adverb and its position\n    adverb_positions = {}\n\n    # iterate over all the matches and add them to the dictionary\n    for i, match in enumerate(adverbs, start=1):\n        adverb = match.group(0)\n        position = i\n\n        # check if the adverb has already been added to the dictionary\n        if adverb in adverb_positions:\n            adverb_positions[adverb].append(position)\n        else:\n            adverb_positions[adverb] = [position]\n\n    # return the dictionary containing the adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Args:\n    text (str): The sentence in which the adverb is to be found.\n\n    Returns:\n    tuple: A tuple containing the adverb and its position in the sentence. If no adverb is found, return None.\n\n    \"\"\"\n    # Define regex pattern for adverb\n    pattern = re.compile(r'\\b(\\w+\\.)?[a-zA-Z]+\\b')\n\n    # Find all the matches using the pattern\n    matches = pattern.findall(text)\n\n    # Check if there are any matches\n    if matches:\n        # Get the first match\n        match = matches[0]\n\n        # Split the match into words\n        words = match.split('.')\n\n        # Get the first word\n        first_word = words[0]\n\n        # Return the adverb and its position in the sentence\n        return (first_word, match.index(first_word))\n    else:\n        # If no adverb is found, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(really|rather|often|usually|always|always|just|barely|slightly|mostly|quite|most|least|rarely|rarely|never|never|never|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely|rarely"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the pattern for adverbs\n    pattern = r'\\b(?:adv|adv\\w+|adv\\W+)\\b'\n\n    # Search for adverbs in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize a list to store the adverb positions and their lengths\n    adverb_positions = []\n\n    # Iterate over the matches and store the positions and lengths\n    for match in matches:\n        # Get the start and end positions of the adverb\n        start = match.start()\n        end = match.end()\n\n        # Get the text of the adverb\n        adverb = match.group()\n\n        # Calculate the length of the adverb\n        adverb_length = len(adverb)\n\n        # Add the position and length to the list\n        adverb_positions.append((start, adverb_length))\n\n    # Sort the list by position\n    adverb_positions.sort(key=lambda x: x[0])\n\n    # Print the positions and lengths of the adverbs\n    for position, length in adverb_positions:\n        print(position, length)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b\\w+(?:[.,;?!]|$)([a-z]{2,})\\b'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Iterate through the matches and print the adverbs and their positions\n    for i, match in enumerate(matches):\n        print(f\"{i+1}. {match[0]} ({match[1]})\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = r'\\b\\w*ed\\b'\n\n    # Use re.search() to search for the first occurrence of the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return the adverb and its position\n    if match:\n        return match.group(), match.start()\n    # If the pattern is not found, return a message indicating that no adverbs were found\n    else:\n        return \"No adverbs found in the sentence.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to match adverbs\n    pattern = r'\\b\\w*[a-zA-Z]+\\b'\n    \n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Sort matches by their position in the sentence\n    matches.sort(key=lambda x: text.find(x))\n    \n    # Extract the first adverb and its position from the sorted matches\n    first_adverb = matches[0]\n    position = text.find(first_adverb)\n    \n    return first_adverb, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Removing the punctuation and converting to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n    # Splitting the text into words\n    words = text.split()\n    # Checking for the first adverb\n    first_adverb = None\n    for i in range(len(words)):\n        if words[i] in ['the', 'a', 'an']:\n            first_adverb = words[i]\n            break\n    # If no adverb is found, return None\n    if first_adverb is None:\n        return None\n    # Initializing the adverb position dictionary\n    adverb_position = {}\n    # Finding the position of the first adverb\n    for i in range(len(words)):\n        if words[i] == first_adverb:\n            adverb_position[first_adverb] = i\n            break\n    # Finding the adverb(s) and their positions in the sentence\n    adverb_positions = []\n    for i in range(len(words) - 1):\n        if words[i] == first_adverb:\n            adverb_positions.append(i)\n            adverb_positions.append(i+1)\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l + 2 * l * l * l + 6 * l * l * l) / 12\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2 + 12 * l + 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube by multiplying the length of each side by 6\n    surface_area = l ** 3\n    \n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positives = array('i')\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    return positives.count(0) / len(positives)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i')  # initialize an array to store the count of positive numbers\n    for num in nums:\n        if num > 0:  # check if the number is positive\n            count.append(1)  # increment the count of positive numbers\n    total = len(nums)  # get the total number of numbers in the array\n    if total == 0:  # check if there are no positive numbers in the array\n        return 0, 0\n    else:\n        return sum(count) / total, sum(count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return (pos_count/len(nums), neg_count/len(nums))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_num_count = 0\n    total_num_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_num_count += 1\n        total_num_count += 1\n\n    positive_ratio = positive_num_count / total_num_count\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i', [0, 0])\n    negative = array('i', [0, 0])\n    zero = array('i', [0, 0])\n\n    for num in nums:\n        if num > 0:\n            positive[0] += 1\n        elif num < 0:\n            negative[0] += 1\n        else:\n            zero[0] += 1\n\n    positive[1] = nums.count(1)\n    negative[1] = nums.count(-1)\n    zero[1] = nums.count(0)\n\n    total = positive[1] + negative[1] + zero[1]\n    positive_ratio = 0.0\n    if total > 0:\n        positive_ratio = (positive[0] + positive[1] * positive[1]) / total\n\n    negative_ratio = 0.0\n    if total > 0:\n        negative_ratio = (negative[0] + negative[1] * negative[1]) / total\n\n    zero_ratio = 0.0\n    if total > 0:\n        zero_ratio = (zero[0] + zero[1] * zero[1]) / total\n\n    result = {'positive_ratio': positive_ratio, 'negative_ratio': negative_ratio, 'zero_ratio': zero_ratio}\n    return result"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the input array to a list of integers\n    nums = list(nums)\n    # initialize a counter for the positive numbers and a counter for the negative numbers\n    pos_count = 0\n    neg_count = 0\n    # iterate over the list of integers\n    for num in nums:\n        # if the number is positive, increment the positive counter\n        if num > 0:\n            pos_count += 1\n        # if the number is negative, increment the negative counter\n        else:\n            neg_count += 1\n    # calculate the ration of positive numbers to all the numbers in the array\n    ratio = pos_count / len(nums)\n    # return the ratio of positive numbers\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return pos_count / neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the absolute values of the numbers\n    abs_nums = array('i', [abs(num) for num in nums])\n    # initialize variables to store the positive counts and the sum of absolute values\n    pos_count = 0\n    total_abs = 0\n    # iterate through the array and count the number of positive values\n    for num in abs_nums:\n        if num > 0:\n            pos_count += 1\n        total_abs += num\n    # calculate the ration of positive values and return it as a float\n    return pos_count / total_abs"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    '''\n\n    # Initialize an empty array to store the positive numbers\n    positive_nums = array('i')\n\n    # Loop through the input array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # Calculate the ration of positive numbers\n    total_count = len(positive_nums)\n    positive_ratio = positive_nums.count(1) / total_count\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # create an array to store the numbers of positive and negative numbers\n    arr = array('i', [0] * 2)\n    # loop through the numbers in the array\n    for num in nums:\n        # if the number is positive, increment the first element of the array\n        if num > 0:\n            arr[0] += 1\n        # if the number is negative, increment the second element of the array\n        else:\n            arr[1] += 1\n    # calculate the ration of positive numbers in the array\n    ration = arr[0] / (arr[0] + arr[1])\n    return ration"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_num = -float('inf') # initial value of max_num is negative infinity\n    for num in list1:\n        if num < 0 and num > max_num:\n            max_num = num # update max_num if the current number is negative and greater than max_num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize the largest negative number to a large number\n    largest = float('-inf')\n    \n    # Iterate over the list of numbers\n    for num in list1:\n        # Check if the number is negative and larger than the current largest number\n        if num < 0 and num > largest:\n            largest = num\n            \n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Finds the largest negative number in a list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the list\n    for tup in test_list:\n        # create a new tuple without the first k elements\n        trimmed_tup = tup[K:]\n        # add the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tup)\n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(len(tup)):\n            if i >= K:\n                break\n            trimmed_tup = trimmed_tup + (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if i+j <= K:\n                test_list[i] = test_list[i][:K-j]\n                break\n            elif i+j > K:\n                test_list[i] = test_list[i][K-j:]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n\n        # Trim each tuple by k in the list\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K+1:])\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i, tup in enumerate(test_list):\n        if i % K == 0:\n            result.append(tup[K:])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j] for j in range(K))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    multiplied_tup = ()\n    for i in range(len(test_tup1)):\n        multiplied_tup += (test_tup1[i] * test_tup2[i],)\n    return multiplied_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(test_tup1[i] * test_tup2[i])"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    total_count = 0\n    for i in lst:\n        if i in cnt:\n            total_count += cnt[i]\n    print(\"Total count of elements in tuple:\", total_count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input.\n    The function counts the occurence of all elements of the list in the tuple.\n    The function returns a dictionary where the keys are the elements of the list and the values are the count of the elements in the list.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = count_dict.get(element, 0) + 1\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Define a dictionary to store the counts of each element in the list\n    counts = {}\n    \n    # Loop through the tuple and count the occurrences of each element in the list\n    for i in tup:\n        if i in lst:\n            counts[i] = counts.get(i, 0) + 1\n    \n    # Convert the dictionary to a list of tuples, sorted by the element counts\n    result = sorted(counts.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the list of tuples\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as arguments and returns a dictionary where the keys are the elements of the list\n    and the values are the number of times each element appears in the tuple.\n    '''\n    count = Counter(tup)\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = count[item]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup)\n    count = []\n    for i in lst:\n        count.append(cnt[i])\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict_final = {}\n    \n    for key, value in count_dict.items():\n        count_dict_final[key] = count_dict[key] * tup.count(key)\n        \n    return count_dict_final"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in count:\n        count[i] = sum([tup[j] for j in range(len(tup)) if lst[j] == i])\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes two arguments: a tuple `tup` and a list `lst`.\n    It returns a dictionary where the keys are the elements in the tuple and the values are the count of occurrences in the list.\n    '''\n    count_dict = Counter(tup)\n    return dict(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # create an empty list to store the cubes of each element in the input list\n    cubes = []\n\n    # loop through each element in the input list\n    for num in nums:\n        # calculate the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # initialize a new list to hold cubes\n    result = []\n    # loop through each element in the original list\n    for num in nums:\n        # cube the number and add it to the result list\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    sum_perrin = 0\n\n    while perrin <= n:\n        sum_perrin += perrin\n        perrin += 1\n\n    return sum_perrin\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += (i*(3*i-1)) // 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin(i)\n    return sum\n\n\ndef perrin(n):\n    '''\n    Write a function to calculate the nth perrin number.\n    '''\n    return (1/((n+1)**2))**0.5"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_perrin = 0\n    while perrin_num <= n:\n        sum_perrin += perrin_num\n        perrin_num += 4\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (2*n - 1) // (2 * (n-1)) + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_nums = []\n    for i in range(1, n+1):\n        perrin_nums.append(i*i*i)\n\n    return sum(perrin_nums)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i*(10**i-1)/(2*(i-1))\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21891, 22245, 22602, 22962, 23325, 23691, 24060, 24432, 24807, 25184, 25564, 25947, 26333, 26722, 27114, 27509, 27907, 28307, 28710, 29116, 29524, 29935, 30349, 30765, 31184, 31606, 32030, 32457, 32887, 33320, 33755, 34193, 34634, 35077, 35523, "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4 - i ** 3 + 1\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size for the extracted strings.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if i < len(str_list) - size:\n            extracted_strings.append(' '.join(str_list[i:i+size]))\n        else:\n            extracted_strings.append(' '.join(str_list[i:]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, length):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:length] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            extracted.append(str)\n            break\n        else:\n            extracted.append(str[:l[i]])\n            str = str[l[i]:]\n    return extracted"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer representing the desired size of the extracted strings.\n    It returns a list of strings of length `size` extracted from the input list.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of strings containing\n    the specified size of strings from the input list.\n    '''\n    # create an empty list to store the extracted strings\n    extracted_list = []\n    # loop through the input list of strings\n    for i in range(len(str_list)):\n        # check if the length of the current string is less than the specified size\n        if len(str_list[i]) < size:\n            # if yes, add the current string to the extracted list\n            extracted_list.append(str_list[i])\n    # return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and a specified size l as input\n    and returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    :param str_list: A list of string values.\n    :param l: The size of strings to be extracted.\n    :return: A new list of extracted string values.\n    \"\"\"\n    return [str[:l] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extract a specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of strings and an integer value as input and returns a list of the extracted strings.\n    '''\n    extracted_list = []\n    for string in str_list:\n        extracted_list.append(string[:length])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regex to remove all whitespaces\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    text1 = re.sub(r'\\W+','', text1).lower()\n\n    # Replace any multiple spaces with a single space\n    text1 = re.sub(r'\\s+','', text1)\n\n    # Remove any leading or trailing spaces\n    text1 = text1.strip()\n\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use the re module to remove all whitespaces\n    pattern = r'\\s+'\n    text1 = re.sub(pattern,'', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Define a regular expression pattern to match any whitespace character\n    pattern = r'\\s+'\n    # Use the re.sub() method to replace all whitespace characters with a single space\n    text = re.sub(pattern,'', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount\n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss = sale_amount - actual_cost \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    even_sum = 0\n    # iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # if i is even\n        if i % 2 == 0:\n            # add it to the sum\n            even_sum += i\n    return even_sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd numbers up to n\n    for i in range(3, n+1, 2):\n        # if i is even, add it to sum\n        if i % 2 == 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = []\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors.append(i)\n    return sum(evenFactors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through all odd numbers between 2 and n\n    for i in range(2, n+1, 2):\n        # check if i is even\n        if i % 2 == 0:\n            # if it is even, add it to the sum\n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize sum variable to 0\n    total = 0\n\n    # Loop through all odd factors up to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            # If the factor is even, add it to the total\n            if i % 2 == 0:\n                total += i\n\n    # Return the total sum of even factors\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum_even_factors += i\n                \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input, searches for words containing 'z' and returns a list of all matches.\n    '''\n\n    # Define a regular expression pattern to match words containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    # Use re.finditer() to search for all matches\n    matches = re.finditer(pattern, text)\n\n    # Convert the matches object to a list of strings\n    match_list = [match.group() for match in matches]\n\n    return match_list"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]*z[a-z]*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    \n    # Use the `re.search()` function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Print the matches found\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+\\sz'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    month_num_dict = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31}\n\n    if monthnum2 in month_num_dict:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    month_numbers = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 30}\n\n    if monthnum2 in month_numbers:\n        if month_numbers[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 3 == 0:\n        if monthnum2 % 10 == 0:\n            if monthnum2 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return 'Invalid month number. Month number must be between 1 and 12.'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2!= 2:\n        return False\n    elif monthnum2 % 2!= 0 and monthnum2!= 2:\n        return True\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check for leap year\n    if (monthnum2 % 4 == 0 and monthnum2 % 100!= 0) or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = [s[::-1] for s in stringlist]\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = None\n    min_sublist = None\n    for sublist in lst:\n        if not min_sublist or len(sublist) < len(min_sublist):\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') #initialize min_length to infinity\n    sublist = [] #initialize sublist to an empty list\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j] #create a sublist between indices i and j\n            if len(sublist) < min_length: #if the length of the sublist is less than min_length\n                min_length = len(sublist) #update min_length\n                sublist = lst[i:j] #update sublist\n    \n    return sublist #return the sublist with the minimum length"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function takes a list as input and returns the sublist having minimum length.\n    \"\"\"\n    sublist = []\n    for i in range(len(lst)): \n        if len(sublist) == 0 or len(sublist) > len(lst[i]): \n            sublist = lst[i:] \n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')  # initialize minimum length to infinity\n    min_sublist = []  # initialize empty list to store sublists\n\n    # loop through the list of sublists\n    for sublist in lst: \n        # check if the length of the sublist is smaller than minimum length\n        if len(sublist) < min_len: \n            # if it is, update the minimum length and update the sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the minimum length of sublist \n    min_length = min(len(lst) for lst in lst) \n\n    # Find all the sublists with the minimum length \n    sublists = [sublist for lst in lst for sublist in lst if len(sublist) == min_length] \n\n    # Return the sublist with minimum length \n    return min(sublists, key=lambda x:len(x))"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    # Initialize variables to store the minimum sublist and its length\n    min_sublist = lst\n    min_len = len(lst)\n    \n    # Loop through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_sublist = sublist\n                min_len = len(sublist)\n    \n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n\n    Parameters:\n    l (int): length of the rectangle\n    b (int): breadth of the rectangle\n\n    Returns:\n    float: area of the rectangle\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and returns the string with all uppercase substrings removed.\n    \"\"\"\n    uppercase_pattern = re.compile(r'(?i)[A-Z]+')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Use the pattern to find all matches in the input string\n    matches = pattern.findall(str1)\n\n    # Loop through the matches and remove them from the input string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regular expressions\n    pattern = r'\\b[A-Z]{1}\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n\n    # Use regex to find all uppercase substrings\n    uppercase = re.findall(pattern, str1)\n\n    # Loop through all uppercase substrings and remove them from str1\n    for substring in uppercase:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]\\w+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r' \\1 ', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function will remove all uppercase substrings from a given string.\n    '''\n\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+', re.IGNORECASE)\n\n    # Split the string into words\n    words = string.split()\n\n    # Iterate over each word and replace uppercase substrings with empty string\n    for i, word in enumerate(words):\n        words[i] = pattern.sub('', word)\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function extracts the first element of each sublist in the given list.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted = []\n    for item in lst:\n        extracted.append(item[0])\n    return extracted"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of each sublist\n    sublist_elements = []\n    \n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # If the sublist is not empty, add the first element of the sublist to the sublist_elements list\n        if sublist:\n            sublist_elements.append(sublist[0])\n    \n    # Return the sublist_elements list\n    return sublist_elements"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # create an empty string to store the upper case characters\n    upper_str = ''\n    # iterate through each character in the input string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, append it to the upper_str\n            upper_str += char\n    # return the length of the upper_str\n    return len(upper_str)"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n\nprint(upper_ctr(\"Hello world!\"))  # Output: 10"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for combo in combinations(list1, i):\n            result.append(combo)\n    return result\n\nfrom itertools import combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Define an empty list to store the combinations\n    comb = []\n    # Define a helper function to find all possible combinations recursively\n    def find_combinations(lst, start, comb):\n        # Base case: if we have exhausted all elements in the list\n        if start == len(lst):\n            # Append the combination to the list of combinations\n            comb.append(lst[:])\n            return\n        # Recursive case: add the current element to the combination\n        find_combinations(lst, start+1, comb)\n        # Move on to the next element in the list\n        lst[start], lst[-1] = lst[-1], lst[start]\n        # Recursively find all combinations starting from the next element\n        find_combinations(lst, start+1, comb)\n        # Move back to the previous element in the list\n        lst[start], lst[-1] = lst[-1], lst[start]\n\n    # Call the helper function to find all possible combinations recursively\n    find_combinations(lst, 0, comb)\n    # Return the list of combinations\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        combinations.extend(list(itertools.combinations(list1, i)))\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            combo = []\n            for k in range(j, j+i):\n                combo.append(list1[k])\n            result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(list1[j:j+i])"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], arr[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    for end_index in range(len(arr)):\n        current_product *= arr[end_index]\n        if current_product < 0:\n            current_product = 1\n            start_index += 1\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n    max_so_far = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n        max_so_far = max(max_so_far, current_product)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr[1:]:\n        if num >= 0:\n            current_product *= num\n        else:\n            current_product = num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize the maximum product subarray as the first element of the array\n    max_product_subarray = [arr[0]]\n\n    # Initialize the current product subarray with the first element of the array\n    curr_product_subarray = [arr[0]]\n\n    # Initialize the maximum product so far as the first element of the array\n    max_product = arr[0]\n\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n\n        # Calculate the current product subarray\n        curr_product_subarray = [max(arr[j] * arr[j+1], arr[j+1] * arr[j]) for j in range(len(arr)-i)]\n\n        # Update the maximum product subarray if the current product subarray has a larger product\n        if curr_product_subarray[-1] * max_product_subarray[-1] > max_product_subarray[-1] * max_product:\n            max_product_subarray = curr_product_subarray\n            max_product = max_product_subarray[-1]\n\n    # Return the maximum product subarray\n    return max_product_subarray"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if len(dict) == 0:\n        return False\n    \n    # Get the first key-value pair from the dictionary\n    first_key = next(iter(dict.items()))\n    # Get the first value of the first key-value pair\n    first_value = dict[first_key]\n    \n    # Check if all values of the first key-value pair are equal to the first value\n    if all(first_value == value for value in dict.values()):\n        return True\n    \n    # If not, check if all other key-value pairs have the same value as the first one\n    for key, value in dict.items():\n        if value!= first_value:\n            return False\n    \n    # If all key-value pairs have the same value, check if all values are the same as the first one\n    if all(value == first_value for value in dict.values()):\n        return True\n    \n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first key and value from the dictionary\n    key = dict.keys()[0]\n    value = dict.values()[0]\n\n    # Loop through all keys in the dictionary and compare their values with the first value\n    for key in dict:\n        if dict[key]!= value:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Get the values of the dictionary\n    values = list(dict.values())\n\n    # Check if all values are same\n    if len(set(values)) == 1:\n        print(f\"All values in the dictionary are same: {values}\")\n        return True\n    else:\n        print(f\"All values in the dictionary are different: {values}\")\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input and returns True if all values are same in the dictionary and False otherwise.\n    '''\n\n    # checking if all values are same in the dictionary\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in range(1, n + 1):\n        if dict[i]!= dict[i - 1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if dictionary has at least n keys\n    if len(dict) < n:\n        return False\n    \n    # Get the first value of the dictionary\n    value = dict.values()[0]\n    \n    # Iterate over the dictionary and check if all values are same\n    for key, val in dict.items():\n        if val!= value:\n            return False\n    \n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict:\n        return True\n    return all(dict[key] == dict[n] for key in dict)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # convert the dictionary to a list of tuples\n    list_dict = list(dict.items())\n    # check if all the values are the same\n    all_same = all(x == list_dict[0][1] for x in list_dict[1:])\n    # return the result\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    first_value = dict.values()[0]\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a set to remove duplicates\n    set_dict = set(dict.values())\n    # Check if the length of the set is 1\n    if len(set_dict) == 1:\n        # If it is, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create an empty list to store the non-empty items\n    non_empty_items = []\n    \n    # iterate through the dictionary items\n    for item in dict1.items():\n        \n        # if the item is not empty, add it to the non-empty items list\n        if item[1]!= '':\n            non_empty_items.append(item)\n    \n    # return the non-empty items list\n    return non_empty_items"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if isinstance(value, (int, float, bool, str, bytes, bytearray)) and value!= \"\":\n            if isinstance(value, list):\n                value = [i for i in value if i!= \"\"]\n            elif isinstance(value, dict):\n                value = drop_empty(value)\n            else:\n                continue\n            dict1[key] = value\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v is not None}\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value is not None and value!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n    return max_ending_here * max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            min_product = arr[i]\n        elif arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        elif arr[i] < arr[i-1]:\n            current_product = arr[i]\n            min_product = arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if arr[0] > arr[1]:\n        return max(arr[0] * max_product(arr[1:]), arr[0] * max_product(arr[2:]))\n    else:\n        return max(arr[1] * max_product(arr[0:1]), arr[1] * max_product(arr[2:]))"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, n):\n        # Update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n\n        # Update max_so_far and max_product\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            max_product = arr[i]\n        elif max_ending_here < 0:\n            max_ending_here = arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sub_arr = arr[i:j]\n            product = 1\n            for num in sub_arr:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    max_val = arr[0]\n    min_val = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] * (arr[i]-arr[i-1])\n        elif arr[i] < arr[i-1]:\n            dp[i] = dp[i-1] * (arr[i]-arr[i-1])\n        else:\n            dp[i] = dp[i-1]\n        \n        if dp[i] > max_val:\n            max_val = dp[i]\n        \n        if dp[i] < min_val:\n            min_val = dp[i]\n\n    return max_val"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize the maximum product and the minimum element of the current subsequence\n    max_so_far = float('-inf')\n    min_so_far = float('inf')\n\n    # Initialize the maximum and minimum products seen so far\n    max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n\n    # Iterate through the array from left to right\n    for i in range(n):\n        # Update the maximum product seen so far\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # Update the minimum product seen so far\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # Update the maximum and minimum products seen so far\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    # Return the maximum product\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    n = len(arr)\n    \n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    increasing_subsequence = 1\n    \n    # Traverse through the array\n    for i in range(1, n):\n        # Check if the number is greater than the previous number\n        if arr[i] > arr[i-1]:\n            # Update the increasing subsequence size\n            increasing_subsequence += 1\n        else:\n            # Reset the increasing subsequence size and update the product\n            current_product *= increasing_subsequence\n            increasing_subsequence = 1\n        \n        # Update the maximum product\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables to store the maximum product of subarrays formed using increasing subarrays\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    # Traverse the array from left to right\n    for i in range(n):\n        # Update the maximum product ending here\n        max_product_ending_here = max(max_product_ending_here * arr[i], arr[i])\n\n        # Update the maximum product of subarrays formed so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum subarray ending at each index\n    max_ending_here = [0] * n\n    max_so_far = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                max_ending_here[i] = max(max_ending_here[i], max_ending_here[j] + arr[i])\n                max_so_far[i] = max(max_so_far[i], max_ending_here[i])\n\n    # Find the maximum product\n    max_product = max(max_so_far)\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # initialize a new list to store the results\n    result_lst = []\n\n    # iterate over the list of tuples\n    for i in range(len(test_tup)-1):\n        # add the current element and the next element in the tuple to the result list\n        result_lst.append(test_tup[i] + test_tup[i+1])\n\n    return result_lst"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Loop through the tuple and find the sum of the neighboring elements\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of the first element and the second element of the tuple\n    sum_pair = test_tup[0] + test_tup[1]\n    \n    # Loop through the tuple using a for loop and update the variable sum_pair by adding the neighboring elements\n    for i in range(2, len(test_tup)-1):\n        sum_pair += test_tup[i] + test_tup[i+1]\n        \n    # Return the final sum_pair\n    return sum_pair"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Loop through each element of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the neighboring elements to find the sum\n        test_tup[i] += test_tup[i+1]\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initializing variables\n    pairwise_sum = 0\n    # iterating over the tuple elements\n    for i in range(len(test_tup)-1):\n        # adding the pairwise sum of the current element and the next element\n        pairwise_sum = pairwise_sum + test_tup[i] + test_tup[i+1]\n    # returning the final pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    pairwise_sum = 0\n\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the variable to store the result\n    result = 0\n    # Traverse the tuple using a for loop\n    for i in range(len(test_tup) - 1):\n        # Add the elements of the tuple except the current element\n        result += test_tup[i] + test_tup[i+1]\n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables\n    current_sum = 0\n    sum_list = []\n    \n    # Loop through the tuple elements and add pairwise sums\n    for i in range(len(test_tup)-1):\n        current_sum = test_tup[i] + test_tup[i+1]\n        sum_list.append(current_sum)\n        \n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if input is tuple or not\n    if type(test_tup)!= tuple:\n        print(\"Input is not a tuple!\")\n        return\n    \n    # Find the length of the input tuple\n    n = len(test_tup)\n    \n    # Initialize the sum of the pairwise elements\n    sum = 0\n    \n    # Iterate over the elements of the tuple\n    for i in range(n-1):\n        # Add the current element and the next element to get the next pairwise element\n        sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of the pairwise elements\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:-1])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array `arr` and an integer `n` as input.\n    It then multiplies the array elements together and returns the result modulo `n`.\n    '''\n\n    # Calculate the product of the array elements\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # initialize product and remainder to 1\n    product = 1\n    remainder = 0\n\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # multiply the current element with the product and add the remainder\n        product = (product * arr[i]) % n\n        remainder = (remainder + product) % n\n    \n    # return the final remainder\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    # Calculate the product of array elements modulo n\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n    \n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments: an array and an integer n.\n    It returns the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] - l[i-1]!= 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]-1: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    # Check if the list has less than 2 elements\n    if len(l) < 2:\n        return False\n\n    # Check if the first element is 1\n    if l[0] == 1:\n        return False\n\n    # Initialize variables to keep track of consecutive numbers\n    consecutive_numbers = [1]\n    consecutive_count = 1\n\n    # Iterate through the list\n    for i in range(1, len(l)):\n        if l[i] == consecutive_numbers[consecutive_count-1] + 1:\n            consecutive_numbers.append(l[i])\n            consecutive_count += 1\n        elif l[i] == consecutive_numbers[consecutive_count-1]:\n            consecutive_count += 1\n        else:\n            consecutive_count = 1\n            consecutive_numbers = [1]\n\n    # Check if the last consecutive number is at the end of the list\n    if consecutive_numbers[-1] == l[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers or False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize a variable to store the count of consecutive numbers found\n    count = 0\n\n    # iterate through the list\n    for i in range(len(l)-1): \n        # if the current element is the next element in the list, increment the count\n        if l[i+1] == l[i]+1: \n            count += 1\n\n    # if the count is greater than 0, the list contains consecutive numbers\n    if count > 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets to ensure no duplicates are present\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n    # Find the intersection of sets\n    intersection = list1_set.intersection(list2_set)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set(test_list1) & set(test_list2)\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    result = set1.intersection(set2)\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set(test_list1) & set(test_list2)\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for item1 in test_list1:\n        for item2 in test_list2:\n            if item1 == item2:\n                if (item1, item2) not in result_list:\n                    result_list.append((item1, item2))\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the count of each element in the test_list1\n    count_dict1 = {}\n    for element in test_list1:\n        if element in count_dict1:\n            count_dict1[element] += 1\n        else:\n            count_dict1[element] = 1\n\n    # Create a dictionary to store the count of each element in the test_list2\n    count_dict2 = {}\n    for element in test_list2:\n        if element in count_dict2:\n            count_dict2[element] += 1\n        else:\n            count_dict2[element] = 1\n\n    # Find the intersection of the two dictionaries\n    intersection_dict = {}\n    for key in count_dict1:\n        if key in count_dict2 and count_dict1[key] >= count_dict2[key]:\n            intersection_dict[key] = count_dict1[key]\n\n    # Return the intersection as a list of tuples\n    return list(intersection_dict.items())"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    final_list = []\n    # Create a set of the first list\n    set1 = set(test_list1)\n    # Iterate through the second list\n    for item in test_list2:\n        # If the item is in the set1, add it to the final list\n        if item in set1:\n            final_list.append(item)\n    # Convert the final list to a tuple and return it\n    return tuple(final_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            if i not in intersection:\n                intersection.append(i)\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # check if the current character is the target character\n        if str1[i] == ch:\n            # replace the target character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a given character in a string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n\n    Args:\n    - dict1 (dict): a dictionary where the values are numbers\n\n    Returns:\n    - sorted_dict (dict): a dictionary where the values are sorted by value\n    '''\n    counter = Counter(dict1)\n    sorted_dict = {k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Sort the dictionary by value in descending order using Counter class\n    sorted_dict = Counter(dict1).most_common()\n\n    # Sort the dictionary by key in ascending order using sorted() function\n    sorted_dict = sorted(sorted_dict, key=lambda x: x[0])\n\n    # Convert the sorted dictionary to a dictionary\n    sorted_dict = dict(sorted_dict)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by values in descending order\n    sorted_counter = counter.most_common()\n    \n    # Sort the keys of the dictionary by values in ascending order\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the sum of the maximum and minimum values\n    return max_val + min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the maximum value in the array\n    max_val = max(nums)\n\n    # Find the minimum value in the array\n    min_val = min(nums)\n\n    # Calculate the sum of the maximum and minimum values\n    sum_val = max_val + min_val\n\n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # return the sum of the largest and smallest values\n    return nums[0] + nums[1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Initialize variables to hold the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the array and find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    if len(nums) == 1:\n        return nums[0]\n    \n    if len(nums) == 2:\n        return nums[0] + nums[1]\n    \n    # If the length of the array is greater than 2, then find the sum of the largest and smallest values\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to hold the sum of the smallest and largest values in the array\n    smallest = float('inf')\n    largest = float('-inf')\n    total = 0\n    \n    # Loop through each element in the array and update the variables accordingly\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n        total += num\n    \n    # Return the sum of the smallest and largest values\n    return total - smallest - largest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert all lowercase substrings to uppercase\n    str1 = re.sub(r'[a-z]', lambda x: x.group(0).upper(), str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    # Find all the substrings that match the pattern\n    matches = pattern.findall(str1)\n    # Remove the matches from the original string\n    for match in matches:\n        str1 = str1.replace(match, '', 1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]\\w*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[a-z]', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    # Use the search() method to find all occurrences of lowercase substrings\n    matches = pattern.findall(str1)\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'([A-Z])'\n    return re.sub(pattern, r'', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    \n    # Use search() method of re module to search for lowercase substrings\n    matches = re.search(pattern, str1)\n    \n    # If a lowercase substring is found, remove it from the string\n    if matches:\n        str1 = re.sub(pattern, '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove lowercase substrings using regular expression\n    pattern = re.compile(r'(?i).*([a-z]+).*')\n    substrings = re.findall(pattern, str1)\n    for substring in substrings:\n        str1 = re.sub(pattern, r'\\1', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Convert the first digit of the string to an integer and return it\n    return int(num_str[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the input number to string\n    s = str(n)\n    # return the first digit of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"Negative\"\n    else:\n        first_digit = int(str(n)[0])\n        return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    # use integer division to discard the decimal part of the input number\n    return int(str(n)[0])"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list containing only the odd numbers.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Create an empty list to hold the odd numbers\n    odd_list = []\n\n    # Loop through each number in the input list\n    for num in list:\n        # If the number is odd, add it to the odd list\n        if num % 2!= 0:\n            odd_list.append(num)\n\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    \n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = n * (n + 1) * (2 * n + 1) / 6\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = n * (n + 1) / 2\n\n    # Return the difference between the two sums\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of the first n natural numbers\n    sum_natural = n * (n+1) * (2*n+1) // 6\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_natural - sum_cubes"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    cubes = [num**3 for num in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    # Find the sum of the first n natural numbers\n    first_n_natural_numbers = list(range(1, n+1))\n    sum_first_n_natural_numbers = sum(first_n_natural_numbers)\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_first_n_natural_numbers\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n + 1) // 2\n\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # calculate the difference between the two sums\n    difference = sum_of_numbers - sum_of_cubes\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of cubes of first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Sum of first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    \n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to find the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return n * (n + 1) ** 2 / 6\n    \n    # Function to find the sum of the first n natural numbers\n    def sum_numbers(n):\n        return n * (n + 1) / 2\n    \n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers_n = sum_numbers(n)\n    \n    # Return the difference\n    return sum_cubes_n - sum_numbers_n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j and A[i]!= A[j]:\n                xor = A[i] ^ A[j]\n                if xor % 2!= 0:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize a list to store the xor values\n    xor_list = []\n\n    # Loop through the array A\n    for i in range(N):\n        # XOR the current element with all the other elements in the array\n        xor_value = sum(A) - sum(A[:i]) - sum(A[i+1:])\n\n        # If the xor value is odd, append the pair to the list\n        if xor_value % 2 == 1:\n            xor_list.append((A[i], A[i+1]))\n\n    # Return the length of the xor_list\n    return len(xor_list)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        xor_value = A[i]\n        for j in range(i+1,N):\n            xor_value ^= A[j]\n            if xor_value % 2!= 0:\n                count += 1\n            xor_value ^= A[j]\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    pairs = 0\n    for i in range(N):\n        xor_sum += A[i]\n        if xor_sum % 2!= 0:\n            pairs += 1\n    return pairs"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Convert the string to uppercase\n    string = string.upper()\n\n    # Return the toggled string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    if len(string) == 0:\n        return string\n    else:\n        return string[0].upper() + toggle_string(string[1:])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char)-32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    \n    # Loop over the list of characters and toggle the case of each character\n    for i in range(len(char_list)):\n        if char_list[i].islower():\n            char_list[i] = char_list[i].upper()\n        else:\n            char_list[i] = char_list[i].lower()\n    \n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num_list = [int(digit) for digit in str(n1 + n2)]\n    digit_diff_list = [abs(num1 - num2) for num1, num2 in zip(num_list, num_list[1:])]\n    return sum(digit_diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum to 0\n    sum_diff = 0\n    \n    # Loop through each digit of the strings\n    for i in range(len(n1_str)):\n        # Subtract the corresponding digits from the difference\n        diff = int(n1_str[i]) - int(n2_str[i])\n        sum_diff += diff\n    \n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = list(str(n1))\n    num2 = list(str(n2))\n    # Initialize the sum of differences to zero\n    sum_diff = 0\n    # Loop through the digits of both numbers\n    for i in range(max(len(num1), len(num2))):\n        # If the digits are not equal, add the difference to the sum\n        if num1[i]!= num2[i]:\n            diff = abs(int(num1[i]) - int(num2[i]))\n            sum_diff += diff\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = n1 - n2\n    per_digit_difference = 0\n\n    while difference > 0:\n        digit = difference % 10\n        per_digit_difference += digit ** 2\n        difference //= 10\n\n    return per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert both integers to lists of digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n\n    # Find the per-digit difference between the two lists of digits\n    per_digit_diff = [abs(int(digits1[i]) - int(digits2[i])) for i in range(len(digits1))]\n\n    # Sum the per-digit differences and return the result\n    return sum(per_digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the input numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # initialize the sum of the per-digit differences\n    digit_diff_sum = 0\n\n    # iterate through each digit of the two numbers\n    for i in range(len(num1_str)):\n        # extract the current digits from each number\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n\n        # calculate the per-digit difference between the digits\n        digit_diff = abs(digit1 - digit2)\n\n        # add the per-digit difference to the total sum\n        digit_diff_sum += digit_diff\n\n    # return the total sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    sum = 0\n    \n    for i in range(len(n1)):\n        if n1[i]!= n2[i]:\n            sum += abs(int(n1[i]) - int(n2[i]))\n    \n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n    while diff > 0:\n        digit = diff % 10\n        sum_diff += abs(digit)\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        if int(str(n1)[i])!= int(str(n2)[i]):\n            sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Convert the input integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # Find the length of the longest string\n    max_len = max(len(s1), len(s2))\n    \n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Loop through the digits of the two integers\n    for i in range(max_len):\n        # If the digits are equal, add 0 to the sum\n        if s1[i] == s2[i]:\n            total_sum += 0\n        # If the digits are different, add the difference to the sum\n        else:\n            total_sum += abs(ord(s1[i]) - ord(s2[i]))\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n            start = i\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    window_start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            window_start = i\n        elif current_sum < 0:\n            current_sum = 0\n            window_start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        return max(a[0], max_sub_array_sum(a[1:], size-1)) + a[size-1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i < size - 1:\n            current_sum -= a[i+1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - size:\n            current_sum -= a[i - size + 1]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    max_sublist = []\n    \n    for i in range(size):\n        max_sublist.append(a[i])\n        current_sum = a[i]\n        \n        for j in range(i+1, size):\n            current_sum += a[j]\n            max_sublist.append(current_sum)\n            \n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sublist = max_sublist[i+1:]\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the list and find the maximum subarray sum\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current_sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the elements of both tuples\n    union = set(test_tup1).union(set(test_tup2))\n    # Convert the union set back to a list and sort it\n    sorted_union = sorted(list(union))\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() function to get the unique elements of both tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Converting the set back to a list and sorting it\n    union_list = sorted(list(union_set))\n    \n    # Printing the sorted union of elements\n    print(\"The union of the elements of\", test_tup1, \"and\", test_tup2, \"is:\")\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a sorted list\n    union_list = sorted(list(union_set))\n    # Output the sorted list\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length.\")\n        return\n\n    # Find the union of the two tuples\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n\n    # Sort the union set and convert it back to a list\n    union_list = sorted(list(union_set))\n\n    # Print the union set\n    print(\"Union of the elements of the two input tuples:\")\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(set(test_tup2))\n    sorted_union_list = sorted(list(union_set))\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set for the elements of test_tup1 and test_tup2\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Create an empty set for the union of the sets\n    union_set = set()\n\n    # Add the elements of set1 to the union set\n    union_set.update(set1)\n\n    # Add the elements of set2 to the union set\n    union_set.update(set2)\n\n    # Convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Return the union list as a tuple\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n\n    # Convert the union set to a sorted list and output it\n    sorted_list = sorted(list(union_set))\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = sorted(set(test_tup1) | set(test_tup2))\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the two tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Remove duplicates from both lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    # Find the union of the lists\n    union = list(set(list1 + list2))\n    # Sort the union list in ascending order\n    union.sort()\n    # Print the union list\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty set to store the union of the two tuples\n    union_set = set()\n    # Iterate through each element in the first tuple and add it to the union set\n    for element in test_tup1:\n        union_set.add(element)\n    # Iterate through each element in the second tuple and add it to the union set\n    for element in test_tup2:\n        union_set.add(element)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n    # Output the sorted union list as a string\n    return str(sorted_union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        length = 1\n        j = i+1\n        while j < len(lst):\n            if lst[j] == lst[j-1]:\n                length += 1\n            else:\n                break\n            j += 1\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    # Initialize variables\n    max_length = 1  # initialize max_length to 1\n    current_length = 1  # initialize current_length to 1\n\n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the next element is greater than the current element, increment current_length\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            # If the next element is less than the current element, update max_length and current_length\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    # Update max_length with the last sublist\n    max_length = max(max_length, current_length)\n\n    # Return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist.\n\n    Args:\n    lst (list): A list of integers\n\n    Returns:\n    int: The length of the longest sublist in the input list.\n\n    Example:\n    >>> Find_Max_Length([1, 2, 3, 4, 5])\n    3\n    >>> Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    5\n    \"\"\"\n\n    max_length = 0\n    current_length = 0\n\n    for num in lst:\n        if num == lst[0]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 1\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[j]) > max_len:\n                max_len = len(lst[j])\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the longest sublist in the list.\n    '''\n    longest_sublist = [] #initialize an empty list to store the longest sublist\n\n    #loop through each sublist in the list\n    for sublist in lst:\n        #if the sublist is longer than the current longest sublist, update the longest sublist\n        if len(sublist) > len(longest_sublist):\n            longest_sublist = sublist\n\n    #return the length of the longest sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == 1:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    \n    if current_length > max_length:\n        max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    maxSublist = []\n    \n    for sublist in lst:\n        if len(sublist) > maxLength:\n            maxLength = len(sublist)\n            maxSublist = sublist\n            \n    return maxLength, maxSublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r\"(?<=[^\\\\])\\\"([^\\\"]*)\\\"\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function uses regular expressions to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.search(text)\n    if match:\n        value = match.group(1).strip()\n        return value\n    else:\n        return None"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n\n    Args:\n    text (str): A string containing text with quotation marks.\n\n    Returns:\n    list: A list of all the values extracted from the text.\n    '''\n\n    pattern = r'(?<=\")\\w+(?=\")'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\\')([^\\']*)\\'|(?<=\\\")([^\\\"]*)\\\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    # sort the array\n    arr.sort()\n\n    # initialize count and initialize left and right pointers\n    count = 0\n    left = 0\n    right = n-1\n\n    # loop through the sorted array\n    while left < right:\n        # check if the sum of the current pair is greater than or equal to the target sum\n        if arr[left] + arr[right] >= n:\n            # if yes, then increment left pointer\n            left += 1\n        # otherwise, increment the right pointer and count the pair\n        else:\n            count += 1\n            right -= 1\n\n    # return the count of possible unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize count variable\n    count = 0\n\n    # Loop through the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if both elements are unequal\n            if arr[i]!= arr[j]:\n                # Increment count variable if pairs are found\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # initialize count variable to zero\n    count = 0\n    # loop through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if elements are unequal\n            if arr[i]!= arr[j]:\n                # if they are, increment count variable\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # create a hash table to store the count of pairs for each element\n    counts = {}\n    for i in range(n):\n        if arr[i] not in counts:\n            counts[arr[i]] = 0\n        counts[arr[i]] += 1\n\n    # initialize variables for counting the number of pairs\n    num_pairs = 0\n    i = 0\n    j = 0\n    while j < n:\n        # increment j if arr[j] is equal to arr[i]\n        while i < n and arr[j] == arr[i]:\n            j += 1\n        # increment i and decrement j if arr[j] is not equal to arr[i]\n        if j < n and arr[j]!= arr[i]:\n            i += 1\n            j += 1\n            num_pairs += (counts[arr[j]] - counts[arr[i-1]])\n        else:\n            i += 1\n            j += 1\n\n    # return the count of pairs\n    return num_pairs"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = [] \n    for char in word: \n        result.append(char) \n    return result "
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each digit in the string\n    for digit in s:\n        # Convert the digit to an integer\n        digit = int(digit)\n        # Add the digit to the total sum\n        total += digit\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the rightmost digit\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the rightmost digit from the number\n        n //= 10\n        \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of its digits\n    digits = list(str(n))\n\n    # Initialize the sum variable to zero\n    total = 0\n\n    # Loop through the list of digits\n    for digit in digits:\n        # Convert each digit to an integer and add it to the sum\n        total += int(digit)\n\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize a variable to store the sum of digits\n    total = 0\n\n    # loop through each digit of the number\n    while n > 0:\n        # extract the last digit of the number\n        digit = n % 10\n\n        # add the last digit to the sum of digits\n        total += digit\n\n        # remove the last digit from the number\n        n = n // 10\n\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # initialize the sum of digits to zero\n    sum_of_digits = 0\n    # loop through the string and add each digit to the sum\n    for digit in num_str:\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to hold the sum of the digits\n    total = 0\n    # Iterate over the digits and add them to the total\n    for digit in digits:\n        total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    total = 0\n    # convert the input number to a string and then iterate over each character\n    for char in str(n):\n        # convert each character to an integer and add it to the total\n        total += int(char)\n    # return the sum of digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    elif list1[0] < list1[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted in ascending order and False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return True\n    \n    # Initialize the first element of the list as the minimum element\n    min_elem = list1[0]\n    \n    # Iterate over the rest of the list\n    for i in range(1, len(list1)):\n        # If the current element is smaller than the minimum element, return False\n        if list1[i] < min_elem:\n            return False\n        \n        # If the current element is larger than the minimum element, update the minimum element\n        elif list1[i] > min_elem:\n            min_elem = list1[i]\n    \n    # If the loop completes, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Parameters:\n    length (int): The length of the list.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_list = []\n    for num in nums:\n        if num not in unique_list:\n            unique_list.append(num)\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                unique_nums.append(nums[i])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    # create a set to remove duplicates from the list\n    unique_nums = set(nums)\n    # convert the set back to a list\n    unique_nums_list = list(unique_nums)\n    # return the unique_nums_list\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through each list in the given list\n    for num_list in nums:\n        # loop through each number in the current list\n        for num in num_list:\n            # if the number is not already in the set, add it to the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i]!= nums[j]:\n                if nums[i] not in unique_nums:\n                    unique_nums.append(nums[i])\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # Create a set of unique numbers from the list_data\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set of unique numbers from the input list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # Remove duplicates using set\n    unique_prod = 1 # Initialize product to 1\n    \n    for num in unique_nums:\n        unique_prod *= num # Multiply product by each unique number\n        \n    return unique_prod"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n\n    # create a set to store unique numbers\n    unique_nums = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a new list to store the unique numbers in the original list\n    unique_numbers = []\n\n    # Iterate through each number in the original list\n    for num in list_data:\n        # If the number is not in the unique_numbers list, append it\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    '''\n\n    # Create a set to store unique numbers\n    unique_numbers = set(list_data)\n\n    # Initialize a variable to store the product of unique numbers\n    product = 1\n\n    # Calculate the product of unique numbers\n    for number in unique_numbers:\n        product *= number\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))  # create a set of unique numbers from the list\n    product = 1  # initialize the product to 1\n    \n    for num in unique_nums:\n        product *= num  # multiply the current product by the current unique number\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in the radius r and the height h of a cylinder and returns the surface area of the cylinder.\n    '''\n    return 2 * (3.14 * r ** 2) + 2 * (3.14 * r * h) + 2 * (3.14 * h ** 2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area\n\nprint(surfacearea_cylinder(3,4))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    A = pi * (r**2 + h**2)\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes two arguments, r and h, representing the radius and height of a cylinder respectively.\n    It returns the surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a built-in constant in Python that represents the value of pi\n    pi = 3.141592653589793\n    return (2*pi*r**2)+(2*pi*r*h)+(2*pi*h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    if not B: # if the second list is empty, it's always a sublist of the first list\n        return True\n    elif not A: # if the first list is empty, it's never a sublist of the second list\n        return False\n    elif A[0] in B: # if the first element of the first list is present in the second list, it's a sublist\n        return True\n    else: # if the first element of the first list is not present in the second list, it's not a sublist\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(B):\n        if A[i] == B[j]:\n            i+=1\n        j+=1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the first list is a sublist of the second list\n    if len(B) <= len(A):\n        for i in range(len(A)):\n            if B[0:i+1] == A:\n                return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if B[i:i+len(A)]!= A[i:i+len(A)]:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A in B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    This function takes two lists A and B as input. It returns True if B is a sublist of A, else False.\n    '''\n    if len(A) < len(B): \n        return False \n    elif len(A) > len(B): \n        return True \n    else: \n        for i in range(len(A)): \n            if A[i]!= B[i]: \n                return False \n    return True "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        for i in range(len(A)):\n            if A[i] not in B:\n                return False\n        return True\n    else:\n        for i in range(len(B)):\n            if A[0:i+1] == B[i:i+1]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n            if i == len(A):\n                return True\n        else:\n            i = 0\n            j = 0\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n        else:\n            B.remove(A[i])\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert number to string and convert to integer\n    num = int(str(n)[-1])\n    \n    # Initialize variable to store factorial\n    fact = 1\n    \n    # Iterate over the digits of the factorial and find the last digit\n    for i in range(1, num + 1):\n        fact *= i\n    \n    # Return the last digit of the factorial\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Convert the string to a list of digits\n    list_n = list(str_n)\n    # Calculate the last digit of the factorial\n    last_digit = int(list_n[-1])\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # extract last digit from factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variables\n    factorial = 1\n    temp_num = n\n    \n    # Calculate the factorial\n    while temp_num > 0:\n        factorial *= temp_num\n        temp_num //= 10\n    \n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    # Base case\n    if n == 0:\n        return 0\n    \n    # Recursive case\n    else:\n        # Calculate factorial\n        fact = 1\n        for i in range(1, n+1):\n            fact *= i\n        \n        # Extract last digit\n        last_digit = fact % 10\n        \n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initializing the result variable with 0\n    result = 0\n\n    # looping through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # multiplying result with i\n        result = result * i\n\n    # extracting the last digit of result\n    last_digit = result % 10\n\n    # returning the last digit of result\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    #initialize the last digit to 0\n    last_digit = 0\n    \n    #convert the number to a string\n    num_str = str(n)\n    \n    #loop through each digit in the string\n    for digit in num_str:\n        \n        #if the last digit is 0, add 1 to the total factorial\n        if last_digit == 0:\n            last_digit = 1\n        \n        #else, add the factorial of the previous digit to the total factorial\n        else:\n            last_digit = int(digit) * last_digit\n    \n    #return the last digit of the total factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return int(fact % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # loop through each digit of the number and find the factorial\n    factorial = 1\n    num = n\n    while num > 0:\n        factorial *= num % 10\n        num //= 10\n    # return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # get the length of each list\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n\n    # check that all lists have the same length\n    if length1!= length2 or length1!= length3:\n        raise ValueError(\"All lists must have the same length.\")\n\n    # create a new empty list to hold the interleaved elements\n    interleaved_list = []\n\n    # iterate over each element in the first list\n    for i in range(length1):\n        # add the corresponding element from each list to the new list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Initialize an empty list to store the interleaved values\n    interleaved = []\n    \n    # Loop through each list and append its values to the interleaved list\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n        \n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    if i < len(list1):\n        result.append(list1[i:])\n    if i < len(list2):\n        result.append(list2[i:])\n    if i < len(list3):\n        result.append(list3[i:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved result\n    result = []\n    \n    # Initialize two pointers for each list\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    \n    # Loop through each element in the lists and append them to the result list\n    while i1 < len(list1) and i2 < len(list2) and i3 < len(list3):\n        result.append(list1[i1])\n        result.append(list2[i2])\n        result.append(list3[i3])\n        i1 += 1\n        i2 += 1\n        i3 += 1\n    \n    # Append any remaining elements from the first list to the result list\n    while i1 < len(list1):\n        result.append(list1[i1])\n        i1 += 1\n    \n    # Append any remaining elements from the second list to the result list\n    while i2 < len(list2):\n        result.append(list2[i2])\n        i2 += 1\n    \n    # Append any remaining elements from the third list to the result list\n    while i3 < len(list3):\n        result.append(list3[i3])\n        i3 += 1\n    \n    # Return the final list of interleaved elements\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Lists must have the same length.\"\n    \n    # initialize an empty list to store the interleaved lists\n    result = []\n    \n    # loop through each item in the lists\n    for i in range(len(list1)):\n        # add the i-th item from each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    :param list1: List of integers.\n    :param list2: List of integers.\n    :param list3: List of integers.\n    :return: A flat list of integers, with all elements from the input lists interleaved.\n    \"\"\"\n\n    # Get the length of all input lists\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Iterate through each index of the input lists\n    for i in range(max(length1, length2, length3)):\n        # Add the first element of the first list to the interleaved list\n        if i < length1:\n            interleaved_list.append(list1[i])\n        # Add the second element of the second list to the interleaved list\n        elif i < length1 + length2:\n            interleaved_list.append(list2[i - length1])\n        # Add the third element of the third list to the interleaved list\n        else:\n            interleaved_list.append(list3[i - length1 - length2])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the maximum length of the lists\n    max_length = max(len(list1), len(list2), len(list3))\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Loop through the maximum length of the lists\n    for i in range(max_length):\n        # Add the i-th element of each list to the interleaved list\n        interleaved_list.append(list1[i] if i < len(list1) else None)\n        interleaved_list.append(list2[i] if i < len(list2) else None)\n        interleaved_list.append(list3[i] if i < len(list3) else None)\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the final result\n    result = []\n\n    # Loop through each list and add its elements to the result list\n    for lst in [list1, list2, list3]:\n        for elem in lst:\n            result.append(elem)\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the final result\n    result = []\n    # Initialize a counter to keep track of the position in the flat list\n    pos = 0\n    # Loop through each of the input lists\n    for lst in [list1, list2, list3]:\n        # Loop through each item in the current list\n        for item in lst:\n            # Add the current item to the flat list and increment the counter\n            result.append(item)\n            pos += 1\n    # Return the final flat list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of the elements that are present in the first tuple but not the second tuple.\n    \"\"\"\n    diff = set(test_tup1) - set(test_tup2)\n    return list(diff)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the elements that are different in each tuple.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n\n    result_list = []\n\n    for element in test_tuple:\n        if type(element) == list:\n            result_list.append(even_fnc(element))\n        elif type(element) == tuple:\n            result_list.append(even_ele(element, even_fnc))\n        elif type(element) == str:\n            if even_fnc(element):\n                result_list.append(element)\n\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], list):\n            even_lst.append(even_fnc(test_tuple[i]))\n        else:\n            even_lst.append(test_tuple[i])\n    return even_lst\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # create a new empty list to store even elements\n    even_list = []\n\n    # loop through each element in the nested mixed tuple\n    for elem in test_tuple:\n\n        # check if the element is even using the even_fnc function\n        if even_fnc(elem):\n\n            # if the element is even, append it to the even_list\n            even_list.append(elem)\n\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            even_list.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            even_list.append(elem)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Initialize a new empty list to store even elements of the nested tuple\n    even_list = []\n    \n    # Loop through each element in the nested tuple\n    for item in test_tuple: \n        # Check if the element is even by calling the even_fnc function\n        if even_fnc(item): \n            # If the element is even, append it to the even_list\n            even_list.append(item)\n    \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            test_tuple[i] = None\n    return [x for x in test_tuple if x is not None]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n\n    def flatten(x):\n        if isinstance(x, (list, tuple)):\n            return [a for sublist in x for a in flatten(sublist)]\n        else:\n            return [x]\n\n    def remove_uneven_elements(x):\n        filtered_list = []\n        for item in flatten(x):\n            if is_even(even_fnc(item)):\n                filtered_list.append(item)\n        return filtered_list\n\n    result = remove_uneven_elements(test_tuple)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for i in range(len(test_tuple)):\n        for j in range(len(test_tuple[i])):\n            if even_fnc(test_tuple[i][j]):\n                uneven_elements.append(test_tuple[i][j])\n    return uneven_elements"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    return (2 * b * s) + (2 * b * b) + (2 * s * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s # base * height\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in the base edge and height of a square pyramid and returns the surface area of the pyramid.\n    '''\n\n    # calculate the surface area of the base and the triangle using Heron's formula\n    area_base = 0.5 * b * b\n    area_triangle = 0.5 * b * s\n\n    # calculate the total surface area of the pyramid using the formula for a pyramid\n    area_pyramid = area_base + area_triangle\n\n    # return the surface area of the pyramid\n    return area_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base and the height\n    baseArea = b*b\n    heightArea = s*s\n    \n    # Calculate the surface area of the pyramid\n    pyramidArea = 2*(baseArea + heightArea)\n    \n    # Return the surface area of the pyramid\n    return pyramidArea"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2 + s**2 + (b-s)**2) * 4\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the length of the base side and the height of the pyramid\n    base_len = b\n    height = s\n    \n    # Calculate the area of the base side\n    base_area = base_len * base_len\n    \n    # Calculate the area of the pyramid\n    pyramid_area = (base_area + (base_len/2)**2) * height\n    \n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*b*b + 2*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the base area and the height of the pyramid\n    base_area = b**2\n    pyramid_height = s\n    \n    # Calculating the total surface area\n    surface_area = 2*base_area + 2*base_area*pyramid_height + pyramid_height**2\n    \n    # Returning the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*b*b) + (s*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula.\n    area = (b*s*b + b*b*s*s) / 2\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize a list to store the catalan numbers\n    catalan = [0]\n    \n    # Calculate the catalan numbers up to the nth term\n    for i in range(1, num+1):\n        catalan.append(sum(factorial(j) * factorial(i-j) for j in range(i+1)))\n        \n    # Return the nth catalan number\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num-1) * (2*num-1) / (num+1)\n    else:\n        return catalan_number(num-1) * (2*num-1) / (num+1) + catalan_number(num-2) * (2*num-1) / (num+2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns the nth Catalan number.\n    '''\n    # Calculate the Catalan number recursively using the formula:\n    # C(n,k) = binomial(2n, n-k+1)\n    def binomial(n, k):\n        return (n * k) // math.factorial(k)\n    n = num + 1  # Add 1 to account for indexing\n    return binomial(2 * n, n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using matrix exponentiation.\n\n    Args:\n    n: integer, the nth Catalan number to be calculated.\n\n    Returns:\n    The nth Catalan number using matrix exponentiation.\n    \"\"\"\n\n    # Initialize the Catalan matrix\n    C = [[1], [1]]\n    # Initialize the number of rows and columns\n    num_rows = len(C)\n    num_cols = len(C[0])\n\n    # Calculate the nth Catalan number using matrix exponentiation\n    for i in range(2, n+1):\n        # Create a new row with the current row multiplied by the previous one\n        C.append([C[j][i-1] + C[j][i-2] for j in range(num_cols)])\n        num_rows += 1\n        num_cols = num_rows\n\n    # Return the nth Catalan number\n    return C[n-1][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)\n\nprint(catalan_number(5)) # Output: 15"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * catalan_number(n-1) + catalan_number(n-2)\n\nprint(catalan_number(10))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expression to find all occurrences of adverbs ending with 'ly'\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n\n    # Creating a dictionary to store the positions of the adverbs\n    adverb_positions = {}\n\n    # Iterating over the adverbs found and adding their positions to the dictionary\n    for index, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = text.find(adverb)\n\n    # Returning the dictionary of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match for adverbs ending with ly\n    pattern = r'(?<![\\w\\s])(ly)[\\w\\s]*(?=\\W$)'\n\n    # Use re.search() to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Check if there was a match\n    if match:\n        # Get the first match found\n        adverb = match.group(0)\n        # Get the positions of the adverb in the text\n        positions = match.span()\n        # Print the adverb and its positions\n        print(\"Adverb found:\", adverb)\n        print(\"Positions:\", positions)\n    else:\n        # If no adverb was found, print a message\n        print(\"No adverb found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all words that end with ly and are followed by a verb\n    words = re.findall(r'\\b\\w+(ly)\\b\\s+\\S+\\b', text)\n    \n    # Iterate over each word and extract its position\n    for i, word in enumerate(words):\n        # Extract the adverb and its position\n        adverb = word[0]\n        position = word.find(adverb)\n        \n        # Print the adverb and its position\n        print(f'Adverb \"{adverb}\" at position {position}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'\\b(?:[lL]y)$', re.IGNORECASE)\n\n    # Use finditer to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Iterate over the matches and return a list of (start, end) positions of adverbs ending with ly\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end()))\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = re.compile(r'\\b(ly)\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*[aeiou]y\\b'\n    \n    # Use regex to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a dictionary to store the positions of the matches\n    adverbs = {}\n    \n    # Iterate over the matches and create a dictionary entry for each match\n    for index, match in enumerate(matches):\n        adverbs[match] = index\n    \n    # Return the dictionary of adverb positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    if len(matches) > 0:\n        for match in matches:\n            start, end = match.start(), match.end()\n            adverb = text[start:end]\n            adverbs.append((start, end, adverb))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Find all the occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the positions of the adverbs and their lengths\n    adverbs = {}\n\n    # Loop through the matches and store their positions and lengths in a dictionary\n    for match in matches:\n        # Extract the position of the first character of the adverb in the string\n        start_pos = text.find(match)\n        # Extract the length of the adverb\n        length = len(match)\n        # Store the position and length in a tuple\n        tup = (start_pos, length)\n        # Add the tuple to the dictionary with the adverb as the key\n        adverbs[match] = tup\n\n    # Sort the dictionary by the adverb position\n    sorted_adverbs = dict(sorted(adverbs.items()))\n\n    # Return the list of adverbs and their positions\n    return sorted_adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    # Iterate over the items in the dataset and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap size is greater than n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items from the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize a min heap of n items\n    min_heap = []\n    # iterate through the dataset\n    for item in items:\n        # if the heap is full, remove the smallest item from the heap\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        # add the current item to the heap\n        heapq.heappush(min_heap, item)\n    # return the n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap to store the n most expensive items\n    heap = []\n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        # Remove the smallest item from the heap if we have exceeded n\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a max heap to find the n most expensive items\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    heap = []\n    # Iterate through the items and add each item to the heap if it's cheaper than the minimum item in the heap\n    for item in items:\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            # Remove the minimum item from the heap if it's no longer the cheapest\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n to store the n most expensive items\n    max_heap = [None] * n\n    \n    # Iterate over the items, and for each item, find its index in the list, and remove it from the list\n    for i, item in enumerate(items):\n        index = items.index(item)\n        del items[index]\n        \n        # If the heap is full (i.e. has n elements), then remove the smallest element (i.e. the most expensive item)\n        if len(max_heap) == n:\n            heapq.heappop(max_heap)\n        \n        # Add the current item to the heap (which will automatically sort it in descending order)\n        heapq.heappush(max_heap, item)\n    \n    # Sort the items in the heap (which will automatically sort them in descending order)\n    max_heap.sort(reverse=True)\n    \n    # Extract the n most expensive items from the heap and return them as a list\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_price = float('-inf')\n    \n    for item in items:\n        if item[1] > max_price:\n            max_price = item[1]\n            heapq.heappush(heap, item)\n        elif item[1] == max_price:\n            heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input,\n    and returns a list of the n most expensive items in the dataset.\n    '''\n    # create a min-heap of n items to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # extract the n most expensive items from the heap and return them as a list\n    return [heap[0]] + [heapq.heappop(heap) for i in range(n-1)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns a list of the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap with n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Returns the n most expensive items in the given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item and add the new item\n        if len(heap) == n:\n            heapq.heappop(heap)\n        heapq.heappush(heap, item)\n    # Return the n most expensive items in the dataset\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    split_list = l[:n] + [l[n]]\n    # add the first part of the list to the end\n    return [split_list[0]] + split_list[1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Index out of bounds\")\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return [l[0]] + l[1:]\n    else:\n        return [l[0]] + split_Arr(l[1:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        raise ValueError(\"Invalid input for 'n'\")\n    if len(l) < n:\n        raise ValueError(\"List has less than 'n' elements\")\n    split_index = n - 1\n    for i in range(n):\n        if i < split_index:\n            split_list.append(l[i])\n        else:\n            break\n    split_list.append(l[0])\n    return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List is too small to split at that index.\")\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_len = len(l) - n\n\n    # Split the list at the nth element\n    new_list = l[:n] + l[n+1:]\n\n    # Add the first part of the list to the end of the new list\n    new_list += l[:first_part_len]\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l[n:]\n    elif n < 0:\n        return []\n    else:\n        return [l[n]] + split_Arr(l, n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    return l[:n] + l[n:] + [l[n]]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    # convert the list to a tuple\n    tuple_list = tuple(listx)\n    \n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    elif len(nums) == 2:\n        return abs(max(nums) - min(nums))\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return big_diff([x for x in nums if x!= max_val and x!= min_val])"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    elif len(nums) == 1:\n        return \"List has only one element.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum value in the list\n    max_val = max(nums)\n    \n    # Find the minimum value in the list\n    min_val = min(nums)\n    \n    # Calculate the difference between the two values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Empty list\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest values in the list\n    max_val = nums[len(nums)-1]\n    min_val = nums[0]\n    \n    # Calculate the difference between the largest and smallest values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the difference between the two values\n    diff = largest - smallest\n    # Return the difference\n    return diff"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a list to store perfect squares\n    squares = []\n\n    # loop through a and b and find all perfect squares between them\n    for i in range(a, b+1):\n        j = i * i\n        while j <= b:\n            squares.append(i)\n            j += i\n\n    # return the list of perfect squares found\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a and b are positive integers\n    if type(a)!= int or type(b)!= int or a <= 0 or b <= 0:\n        return \"Please enter positive integers only.\"\n    \n    # loop through all possible perfect squares between a and b\n    for i in range(a, b+1):\n        # check if the square is a perfect square\n        if i * i == a or i * i == b or i * i < a:\n            # return the square if it is a perfect square\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i*i == j*j:\n                print(i,j)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        j = i*i\n        while j <= b:\n            squares.append(j)\n            j += i\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n    # loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # check if the current number is a perfect square\n        if i == int(i**0.5) ** 2:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # Initialize variables\n    sum_squares = 0\n    current_square = a\n    \n    # Loop through numbers in range b - a + 1\n    while current_square <= b:\n        sum_squares += current_square ** 2\n        current_square += 1\n        \n    # Return the sum of squares in the range\n    return sum_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers, a and b, as input and returns a list of all perfect squares between a and b.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to the given number\n        if i ** 2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a), int(b) + 1):\n        square = i * i\n        if square == i ** 2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            squares.append(i*i)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): Polar radius\n    theta (float): Polar angle (in radians)\n\n    Returns:\n    tuple: rectangular coordinates (x, y)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    if theta > 0 and theta < 90:\n        return r*cmath.cos(theta), r*cmath.sin(theta)\n    else:\n        return None"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians, measured from the positive x-axis.\n\n    Returns:\n    x (float): The rectangular x-coordinate.\n    y (float): The rectangular y-coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = abs(x)*cmath.sin(y)\n    if y > 0:\n        theta = cmath.pi/2 - y\n    elif y < 0:\n        theta = -cmath.pi/2 - y\n    else:\n        theta = 0\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n        r (float): The radius value.\n        theta (float): The angle value in radians.\n        \n    Returns:\n        tuple: A tuple containing the x and y values in the rectangular coordinates.\n    \"\"\"\n\n    # Convert angle to degrees and take the arccosine of the radius\n    angle_deg = cmath.degrees(theta)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes in two arguments, r (radial component) and theta (angular component), and returns the rectangular coordinates (x and y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is greater than 1\n    if length > 1:\n        # Set the last element of the list as the second last element\n        newList[length-1], newList[length-2] = newList[length-2], newList[length-1]\n        # Print the updated list\n        print(\"Updated list:\", newList)\n    else:\n        print(\"The list should have at least two elements to swap.\")"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is not empty\n    if len(newList) == 0:\n        return newList\n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # We check if the list has only one element\n    if len(newList) == 1:\n        return newList\n    else:\n        # We swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList \n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    \n    if k == 0 or k == n:\n        return 1\n    \n    coeff = 1\n    for i in range(1,k+1):\n        coeff *= (n-i+1) / i\n    \n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_product = 0\n    for i in range(k + 1):\n        numerator = (n - i + k) // k\n        denominator = k\n        sum_of_product += numerator * denominator\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k,n+1):\n        term = 1\n        for j in range(1,i+1):\n            term = term*j\n        sum = sum + term\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through all possible values of i from 0 to n-1\n    for i in range(n):\n\n        # calculate the binomial coefficient of i and k\n        coeff = (n-i) * (i+1) // k\n\n        # add the coefficient to the sum variable\n        sum += coeff\n\n    # return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k or k == 0 or k == n: \n        return 1\n    else: \n        return (n*binomial_Coeff(n-1,k-1)) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integer parameters n and k, and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initializing the variables to store the sum and product of consecutive binomial co-efficients\n    sum = 0\n    product = 1\n    \n    # iterating from k to n, and finding the sum and product of consecutive binomial co-efficients\n    for i in range(k, n+1):\n        sum += product\n        product *= (n-i+1)\n    \n    # returning the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case\n    if k == 0 or k == n:\n        return 1\n    # Recursive case\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two arguments n and k which represent the number of elements in the sequence and the value of k, respectively.\n    It calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum\n    sum = 0\n    # initialize the factorial of n\n    factorial_n = 1\n    # initialize the factorial of k\n    factorial_k = 1\n    # initialize the factorial of n-k\n    factorial_n_minus_k = 1\n\n    # calculate the factorial of n\n    for i in range(1,n+1):\n        factorial_n *= i\n\n    # calculate the factorial of k\n    for i in range(1,k+1):\n        factorial_k *= i\n\n    # calculate the factorial of n-k\n    for i in range(1,n-k+1):\n        factorial_n_minus_k *= i\n\n    # calculate the sum of the product of consecutive binomial co-efficients\n    sum = factorial_n // (factorial_k * factorial_n_minus_k)\n\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes\n    ip = re.sub(r'^(0{1,2}|1\\d\\d?|2[0-4]\\d|25[0-5])(\\.)(0{1,2}|1\\d\\d?|2[0-4]\\d|25[0-5]){3}$', r'\\1.\\2.\\3', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\b\\d{1,2}\\b)\\b\\:\\:(\\b\\d{1,2}\\b)\\b', r'\\1\\2', ip)\n    ip = re.sub(r'(\\b\\d{1,3}\\b)\\b\\.\\:(\\b\\d{1,3}\\b)\\b', r'\\1\\2', ip)\n    ip = re.sub(r'(\\b\\d{1,4}\\b)\\b\\.\\d{1,3}\\b', r'\\1', ip)\n    ip = re.sub(r'(\\b\\d{1,5}\\b)\\b\\d{1,3}\\b', r'\\1', ip)\n    ip = re.sub(r'(\\b\\d{1,6}\\b)\\b\\d{1,4}\\b', r'\\1', ip)\n    ip = re.sub(r'(\\b\\d{1,7}\\b)\\b\\d{1,5}\\b', r'\\1', ip)\n    ip = re.sub(r'(\\b\\d{1,8}\\b)\\b\\d{1,6}\\b', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0\\.)+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_without_zero = re.sub('^0+','',ip)\n    return ip_without_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'(\\b\\d{1,3}\\.){3}\\d{1,3}\\b', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expression to match any sequence of one or more zeroes at the beginning of an ip address\n    zero_pattern = r'^\\0*'\n    # Use re.sub() to replace the matched sequence with an empty string\n    return re.sub(zero_pattern, '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern for matching IP addresses\n    pattern = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    # Check if the input is a valid IP address\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet\n        ip = re.sub(r\"^0+(\\d+)\", r\"\\1\", ip)\n        # Check if there are any remaining zeroes\n        if re.search(r\"^0+\", ip):\n            # If there are, return None\n            return None\n        else:\n            # Otherwise, return the cleaned up IP address\n            return ip\n    else:\n        # If the input is not a valid IP address, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    '''\n    Function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # Iterate through the list\n    for i in lst:\n        # Check if the number is even\n        if i % 2 == 0:\n            # If it is, check if it's the first even number\n            if even is None:\n                # If it is, store it in the even variable\n                even = i\n            # Otherwise, find the difference between the current even number and the first even number\n            else:\n                diff = abs(even - i)\n                return diff\n        # Check if the number is odd\n        else:\n            # If it is, check if it's the first odd number\n            if odd is None:\n                # If it is, store it in the odd variable\n                odd = i\n            # Otherwise, find the difference between the current odd number and the first odd number\n            else:\n                diff = abs(odd - i)\n                return diff\n    # If the list ends in an even number, return the difference between the first even and the last even number\n    if even is not None:\n        diff = abs(even - lst[-1])\n        return diff\n    # If the list ends in an odd number, return the difference between the first odd and the last odd number\n    else:\n        diff = abs(odd - lst[-1])\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        diff_num = even_num - odd_num\n    else:\n        diff_num = odd_num - even_num\n\n    return diff_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        if odd % 2 == 0:\n            if even > odd:\n                return even - odd\n            else:\n                return odd - even\n        else:\n            return odd - even\n    else:\n        if odd % 2 == 0:\n            return odd - even\n        else:\n            return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List should contain at least two elements\"\n    else:\n        even_num = list1[0]\n        odd_num = list1[1]\n        \n        if even_num % 2 == 0 and odd_num % 2 == 1:\n            diff = even_num - odd_num\n            return diff\n        else:\n            return \"The first even and first odd number should be odd\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        if odd % 2 == 0:\n            return even - odd\n        else:\n            return odd - even\n    else:\n        if odd % 2 == 0:\n            return even - odd\n        else:\n            return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    if even_num is None:\n        return None\n    if odd_num is None:\n        return None\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Create a list of even and odd numbers\n    even_odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even_odd.append(num)\n        else:\n            even_odd.append(num)\n    \n    # Find the difference of even and odd numbers\n    diff = abs(even_odd[0] - even_odd[1])\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num -= odd_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num -= even_num\n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Calculate the difference between the two numbers\n    diff = num1 - num2\n    \n    # Calculate the minimum number of swaps required to convert the difference to 0\n    swaps = 0\n    while diff > 0:\n        if diff % 2 == 1:\n            diff = diff - 1\n            swaps += 1\n        else:\n            diff = diff // 2\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # get the length of the binary strings\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    # initialize the minimum number of swaps as the length of the binary strings\n    min_swaps = len1\n    \n    # loop through the binary strings and swap the bits if the numbers differ\n    for i in range(len1):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            min_swaps = min(min_swaps, len1 - i)\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both strings into binary format\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Initialize variables to store count of swaps required\n    count = 0\n    swap_count = 0\n    \n    # Find difference between the two binary numbers\n    diff = num1 - num2\n    \n    # Initialize a boolean variable to keep track of swapping\n    swap = True\n    \n    # Loop until no swaps are required\n    while swap:\n        # Find the position of the most significant 1 bit\n        if diff & 1:\n            # Swap the bits\n            diff = diff ^ num1\n            num1 = diff ^ num1\n            num2 = diff ^ num2\n            # Increment swap count\n            swap_count += 1\n        \n        # Shift the difference to the right by 1\n        diff = diff >> 1\n        \n        # Increment swap count\n        swap_count += 1\n        \n        # Check if any swaps are required at all\n        swap = diff!= 0\n        \n    # Return the minimum swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of binary digits\n    bin1 = [int(digit) for digit in str1[::-1]]\n    bin2 = [int(digit) for digit in str2[::-1]]\n    \n    # Initialize variables for min number of swaps and count of swaps\n    swaps = 0\n    count = 0\n    \n    # Compare binary digits from left to right, and swap if needed\n    while count < len(bin1) or count < len(bin2):\n        if bin1[count] == 0 and bin2[count] == 0:\n            count += 1\n        elif bin1[count] == 1 and bin2[count] == 1:\n            count += 1\n        else:\n            # Swap if not equal\n            bin1[count], bin2[count] = bin2[count], bin1[count]\n            swaps += 1\n            \n    # Return minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both binary strings to lists of digits\n    num1 = [int(digit) for digit in str1]\n    num2 = [int(digit) for digit in str2]\n    # Initialize variables for the swap count and the swapped count\n    swap_count = 0\n    swapped = False\n    # Iterate through each digit in both binary strings\n    for i in range(len(num1)):\n        # Check if the digits are swapped\n        if num1[i]!= num2[i]:\n            # If they are, increment the swap count\n            swap_count += 1\n            # If the digits are not swapped, check if they are adjacent\n            if i > 0 and num1[i] == num1[i-1] and num2[i] == num2[i-1]:\n                # If they are, decrement the swap count\n                swap_count -= 1\n                # Set swapped to True\n                swapped = True\n    # Return the minimum swap count\n    return swap_count + swapped"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the minimum number of swaps and the count of swaps\n    min_swaps = 0\n    swaps = 0\n\n    # Iterate through each bit of the binary numbers\n    while num1!= num2:\n        # If the bit positions differ, increment the swap count and check if it is less than the minimum swaps found so far\n        if (num1 & num2)!= 0:\n            swaps += 1\n            if swaps < min_swaps:\n                min_swaps = swaps\n        # XOR the two numbers to flip the bits\n        num1 = num1 ^ num2\n        num2 = num1 ^ num2\n        # Clear the least significant set bit of the two numbers to ensure that the sign is preserved\n        num1 &= num1 - 1\n        num2 &= num2 - 1\n        # Increment the swap count\n        swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    dp = [[0]*(n+1) for i in range(n+1)]\n\n    for i in range(n):\n        dp[i][i+1] = str1[i] == str2[i]\n\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str1[start] == str2[end]:\n                dp[start][end] = dp[start+1][end-1]\n            else:\n                dp[start][end] = min(dp[start][end-1], dp[start+1][end])+1\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n            str1[i], str2[i] = str2[i], str1[i]\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Find length of the two binary strings\n    n1, n2 = len(str1), len(str2)\n    \n    # Initialize two arrays to store frequency of characters in each string\n    freq1 = [0] * 256\n    freq2 = [0] * 256\n    \n    # Calculate frequency of each character in both strings\n    for i in range(n1):\n        freq1[ord(str1[i])] += 1\n    for i in range(n2):\n        freq2[ord(str2[i])] += 1\n    \n    # Find the difference between two frequency arrays\n    diff = [0] * 256\n    for i in range(256):\n        diff[i] = freq1[i] - freq2[i]\n    \n    # Initialize two arrays to store the character that will be swapped and its frequency\n    char1 = [0] * 256\n    char2 = [0] * 256\n    count = 0\n    \n    # Find the minimum number of swaps required\n    for i in range(256):\n        # If there is a difference between the frequency of the current character in str1 and str2,\n        # add the current character to the list of swapped characters\n        if diff[i]!= 0:\n            char1[count] = i\n            char2[count] = ord(str1[freq1[i] - 1])\n            count += 1\n            diff[i] = 0\n            \n    # Find the minimum number of swaps required to convert the first binary string to the second\n    # by swapping the characters in the list of swapped characters\n    count = 0\n    for i in range(n1):\n        if ord(str1[i]) == char2[count]:\n            count += 1\n        if count == n2:\n            return count\n            \n    # If the binary strings are not convertible, return the maximum value for an integer\n    return n1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n1, n2 = len(str1), len(str2)\n\n    # Converting the binary strings to integer\n    i1, i2 = int(str1, 2), int(str2, 2)\n\n    # Initializing the result variable\n    result = 0\n\n    # Looping through the bits of each binary number\n    while i1!= i2:\n        # If i1 has more bits than i2, we need to swap i1 and i2\n        if i1 > i2:\n            i1 = i1 ^ (1 << (n1 - 1))\n            result += n1 - 1\n        else:\n            i2 = i2 ^ (1 << (n2 - 1))\n            result += n2 - 1\n\n    # If the binary strings are same, we need to swap them back\n    if i1 == i2:\n        result += n1 + n2 - 2 * i1\n\n    return result"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # calculate the total size of the tuple in bytes\n    total_size = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    for tuple_item in tuple_list[1:]:\n        total_size += sys.getsizeof(tuple_item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes and calculate the size of the object\n    size_of_object = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    return size_of_object"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of each element in the tuple\n    size_list = [sys.getsizeof(elem) for elem in tuple_list]\n    # Calculate the total size of the tuple\n    size = sum(size_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        for item in tup:\n            total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    \n    # Return the size in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Returns the kth smallest element from arr1 and arr2,\n    which is the median of the two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == n1 + 1 - j:\n                return arr2[j]\n            k -= n1 + 1 - j\n            j += 1\n        else:\n            # elements are equal, return the first one\n            if i == 0:\n                return arr1[0]\n            elif i == n1 - 1:\n                return arr1[n1 - 1]\n            elif j == 0:\n                return arr2[0]\n            else:\n                return arr2[j - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1  # swap the arrays if they are not in descending order\n\n    l1, l2 = 0, len(arr2)\n    while l1 < len(arr1) and k > 0:\n        if arr1[l1] < arr2[k-1]:\n            k -= 1\n        elif arr1[l1] > arr2[k-1]:\n            l1 += 1\n        else:\n            return arr1[l1]\n            k -= 1\n\n    return None  # kth element not found"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if k == 0:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    left = 0\n    right = len(arr1) - 1\n\n    while left <= right:\n        pivot_index = left + (right - left) // 2\n        pivot1 = arr1[pivot_index]\n        pivot2 = arr2[pivot_index]\n\n        if pivot1 == pivot2:\n            left_count = 0\n            right_count = 0\n\n            for i in range(len(arr1)):\n                if arr1[i] < pivot1:\n                    left_count += 1\n                elif arr1[i] > pivot1:\n                    right_count += 1\n\n            if k <= left_count:\n                left = pivot_index + 1\n            else:\n                k -= left_count\n                right = pivot_index - 1\n\n        elif pivot1 < pivot2:\n            left = pivot_index + 1\n        else:\n            right = pivot_index - 1\n\n    return arr1[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Return the kth element\n    return arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # check if k is within the range of the combined array\n    if k > n1 + n2:\n        return \"Error: k is greater than the combined length of the two arrays.\"\n\n    # initialize two pointers - one for each array\n    i = 0\n    j = 0\n\n    # initialize kth element to be the minimum of the first elements of both arrays\n    kth = min(arr1[0], arr2[0])\n\n    # loop while the pointers are not at the end of their respective arrays\n    while i < n1 and j < n2:\n        # check if the kth element is in the first array\n        if arr1[i] == kth:\n            return kth\n        elif arr1[i] < kth:\n            # increment the pointer for the first array\n            i += 1\n        else:\n            # increment the pointer for the second array\n            j += 1\n\n        # check if the kth element is in the second array\n        if arr2[j] == kth:\n            return kth\n        elif arr2[j] < kth:\n            # increment the pointer for the second array\n            j += 1\n        else:\n            # increment the pointer for the first array\n            i += 1\n\n        # increment the kth element if it is smaller than the minimum of the two arrays\n        kth += 1\n\n    # if k is not found, return \"Error: k is not present in the given arrays.\"\n    return \"Error: k is not present in the given arrays.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if k > n1 + n2:\n        return \"Error: K is greater than the total number of elements in both arrays.\"\n    \n    i = j = 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            \n            if k == 0:\n                return arr1[i]\n            \n            i += 1\n    \n    return \"Error: K is greater than the number of elements in the first array.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in three parameters:\n    - arr1: a list of integers\n    - arr2: another list of integers\n    - k: the value of k\n    \n    The function first checks if arr1 is a sublist of arr2. If it is, then we know that\n    the first k elements of arr1 can be found by checking the first k elements of arr2.\n    If not, we need to use binary search to find the kth element of arr1.\n    \n    This function returns the kth element of arr1.\n    '''\n    \n    # Check if arr1 is a sublist of arr2\n    if arr1 in arr2:\n        return arr1[k-1]\n    \n    # Find the midpoints of arr1 and arr2\n    mid1 = len(arr1)//2\n    mid2 = len(arr2)//2\n    \n    # If k is less than the length of arr1, search in arr1\n    if k < len(arr1):\n        return find_kth(arr1[:mid1], arr2, k)\n    # If k is greater than the length of arr2, search in arr2\n    else:\n        return find_kth(arr1, arr2[:mid2], k-len(arr1))\n    \n    # If we get here, we didn't find the kth element\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    # If k is still greater than or equal to 0, then the kth element is not present in the two arrays.\n    if k >= 0:\n        raise ValueError(\"k is greater than the length of one of the arrays.\")\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    if k == 0:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_str = str(number)\n    digits_list = [int(digit) for digit in number_str]\n    total = sum(digits_list)\n    if number == total:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    '''\n    This function takes a number as input and returns True if it is an armstrong number, False otherwise.\n    '''\n    # Convert the number to a string to remove any non-digit characters\n    num_str = str(number)\n    # Remove any leading zeroes from the string\n    num_str = num_str.lstrip('0')\n    # Calculate the sum of the cube of each digit in the string\n    cube_sum = sum(int(digit) ** 3 for digit in num_str)\n    # Return True if the sum is equal to the original number, False otherwise\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # converting the number to a string\n    num_str = str(number)\n    # initializing the sum of the squares of each digit\n    sum_of_squares = 0\n\n    # looping through each digit in the number\n    for digit in num_str:\n        # converting the digit to an integer and squaring it\n        square = int(digit) ** 2\n        # adding the square to the sum of squares\n        sum_of_squares += square\n\n    # checking if the sum of squares equals the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    num_length = len(number_str)\n    num_sum = 0\n\n    for digit in number_str:\n        num_sum += int(digit) ** num_length\n\n    if num_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an Armstrong number and False otherwise.\n    \"\"\"\n    n_string = str(n)\n    total = 0\n    power = len(n_string)\n    for digit in n_string:\n        total += int(digit)**power\n    return n == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    # Initialize the sum of the digits of the number\n    sum_of_digits = 0\n    # Convert the number to a string\n    number_str = str(n)\n    # Iterate over the digits of the number\n    for digit in number_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Return True if the sum of the digits is equal to the original number\n    return sum_of_digits == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    sum = 0\n    temp = num\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(num_str)\n        temp //= 10\n\n    return num == sum\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong(num):\n        print(num, \"is an Armstrong number\")\n    else:\n        print(num, \"is not an Armstrong number\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Initialize a variable to hold the sum of the cube of the digits\n    cube_sum = 0\n    \n    # Loop through the digits in the number\n    for digit in number_str:\n        # Convert the digit to an integer and cube it\n        digit_cube = int(digit) ** 3\n        # Add the cube to the cube_sum\n        cube_sum += digit_cube\n    \n    # Return True if the cube_sum is equal to the original number\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # convert the number to a string\n    number_str = str(number)\n\n    # initialize sum variable\n    sum_of_squares = 0\n\n    # iterate through each digit of the number\n    for digit in number_str:\n\n        # convert each digit to an integer\n        digit = int(digit)\n\n        # square the digit and add it to the sum of squares\n        sum_of_squares += digit**3\n\n    # return True if the sum of squares is equal to the original number\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Check if the number is a positive integer\n    if not isinstance(number, int) or number <= 0:\n        return False\n\n    # Find the sum of the cube of each digit in the number\n    digit_sum = 0\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n\n    # Compare the sum of the cubes with the original number\n    return digit_sum == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the value of n: \"))\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i + 1\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(f\"The sum of first {number} natural numbers is: {sum}\")\n    print(f\"The average of first {number} natural numbers is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum += count\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function finds the sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i + 1\n    avg = total / n\n    return total, avg"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0 : \n        return \"The number is even\"\n    else : \n        return \"The number is odd\"\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is odd')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as an argument and returns True if the number is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for char in str1:\n        if str1.count(char) > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no character has a count greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first character that appears more than once in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Find the first repeated character by iterating over the dictionary\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n\n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store character counts\n    char_count = {}\n\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # find the first character with a count greater than 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # if no character has a count greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_list = list(str1)\n    for i in range(len(char_list)):\n        for j in range(i+1, len(char_list)):\n            if char_list[i] == char_list[j]:\n                return char_list[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initializing an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # iterating through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # iterating through the dictionary again to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store lucid numbers\n    lucid_nums = []\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # check if i is a lucid number\n        is_lucid = True\n        \n        # iterate from 2 to sqrt(i)\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        \n        # if i is a lucid number, append it to the list\n        if is_lucid:\n            lucid_nums.append(i)\n    \n    # return the list of lucid numbers\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_set = set()\n    for i in range(1, n+1):\n        if i%2!= 0 and i%5 == 0:\n            ludic_set.add(i)\n    return list(ludic_set)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    sum_of_digits = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_digits += digit ** 3\n        temp //= 10\n    return n == sum_of_digits"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given number is a lucid number.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        else:\n            for j in range(1, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    This function recursively generates all lucid numbers less than or equal to a given integer n.\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return get_ludic(n-1) + [n]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    current_number = 1\n    \n    while current_number <= n:\n        if is_lucid(current_number):\n            ludic_numbers.append(current_number)\n        current_number += 1\n    \n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number.\n    '''\n    return all(n % i!= 0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number or not.\n    '''\n    if n < 10:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_numbers.append(i)\n        elif i == 2:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(2*i)\n        else:\n            lucid_numbers.append(2*i + 1)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        for j in range(i, n+1, i):\n            if i!= j:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string by spaces\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for i in range(len(words)-1, -1, -1):\n        reversed_words.append(words[i])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back together\n    s = \" \".join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words back into a string\n    s_reversed =''.join(words)\n\n    return s_reversed"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them together with spaces\n    reversed_words = \" \".join([word[::-1] for word in words])\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it's a prime number and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it's a prime number and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0 and i!= 1:\n            return False\n    return True\n\nprint(prime_num(10)) # Output: True\nprint(prime_num(1)) # Output: False\nprint(prime_num(12)) # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) # True\nprint(is_prime(8)) # False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        literal = text[start_index:end_index]\n        literals.append((literal, start_index, end_index))\n    return literals\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = r'\\b\\w+\\b'\n\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        literal = text[start_index:end_index]\n        literals.append((literal, start_index, end_index))\n\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # search for the pattern in the text\n    matches = re.finditer(pattern, text)\n    # iterate over the matches and return the substring, start index, and end index\n    for match in matches:\n        # return the substring\n        substring = match.group()\n        # return the start index and end index\n        start = match.start()\n        end = match.end()\n        # print the matching substring and the indices\n        print(substring, start, end)\n    # return None if no matches are found\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.search() method to search for pattern in the text\n    match = re.search(pattern, text)\n    if match:\n        # Return the matching substring, start index and end index\n        return match.group(), match.start(), match.end()\n    else:\n        # If no match is found, return None\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) == 0:\n        return None, None, None\n    else:\n        match = result[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # compile the pattern and search for the first match\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n\n    # if no match is found, return None\n    if not match:\n        return None\n\n    # return the match object as a tuple of strings\n    return match.group(0), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return match.group(), start_index, end_index\n    else:\n        return None, None, None\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize the first bell number to 1\n    bell_num = 1\n    # Loop through the range n+1\n    for i in range(2, n+1):\n        # Calculate the current bell number by adding the previous two\n        bell_num = bell_num + bell_num - 1\n    # Return the nth bell number\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through the range of n\n    for i in range(n):\n        # Calculate the next bell number\n        bell_num = (2**i) - (2**(i-1))\n        \n        # Add the bell number to the sum variable\n        sum += bell_num\n    \n    # Return the sum of all n bell numbers\n    return sum"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n) + bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**(n-1)) * (n**2) // (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        bell_num = bell_Number(n-1) + bell_Number(n-2)\n        return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth bell number using dynamic programming.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 0\n    bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = (bell[i - 1] + bell[i - 2]) % 1000000007\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the Lth element from the list1.\n\n    Parameters:\n    list1: list - the list to remove the element from\n    L: int - the index of the element to remove\n\n    Returns:\n    list - the new list with the element removed\n    \"\"\"\n    list1 = list(list1)  # convert the list to a mutable list so we can modify it\n    if L >= len(list1):\n        raise ValueError(\"L is greater than the length of the list\")\n    list1.pop(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and removes the k'th element.\n\n    Args:\n        list1 (list): A list to be processed.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: A new list without the k'th element.\n    \"\"\"\n\n    # Create a new list without the k'th element\n    list2 = list1.copy()\n    del list2[k-1]\n\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) < L:\n        return list1\n    else:\n        result = []\n        for i in range(L):\n            result.append(list1[i])\n        for i in range(L, len(list1)):\n            result.append(list1[i+1])\n        return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If the length of the list is less than L, return the same list\n    if len(list1) < L:\n        return list1\n    \n    # Remove the k'th element from the list\n    list1.pop(L-1)\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a new list with the k'th element removed.\n    \"\"\"\n    # Create a new list with the same elements as the input list\n    new_list = list1.copy()\n    # Check if the length of the list is less than k\n    if len(new_list) < k:\n        return \"The length of the list must be at least k.\"\n    # Remove the k'th element from the list\n    new_list.pop(k - 1)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    k = L-1\n    \n    # Step 1: Move all elements except the k'th element to the beginning of the list\n    for i in range(n-k):\n        list1[i] = list1[i+1]\n    \n    # Step 2: Remove the k'th element from the list\n    list1 = list1[:k]\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L >= len(list1):\n        return list1\n    \n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_value = 0\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Check if then'th column is greater than the current max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, return the maximum value of the n-th column.\n\n    Args:\n        test_list (list): a list of lists representing the matrix.\n        N (int): the index of the column to consider (starting from 0).\n\n    Returns:\n        int: the maximum value of the n-th column.\n    \"\"\"\n\n    # Check if the index is within the bounds of the matrix\n    if N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid index\")\n\n    # Initialize a variable to store the maximum value of the column\n    max_value = None\n\n    # Iterate over the rows of the matrix and find the maximum value of the n-th column\n    for row in test_list:\n        if max_value is None or row[N] > max_value:\n            max_value = row[N]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_num = max(test_list[i][N-1])\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                test_list[i][j] = max_num\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    col_max = []\n    \n    for i in range(n):\n        col_max.append(max(test_list[i][j] for j in range(N)))\n        \n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, test_list[i][N-1])\n        else:\n            max_value = max(max_value, test_list[i][N-1], key=test_list[i].index)\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    n = 0\n    for row in test_list:\n        if n == N-1:\n            max_val = max(max_val, row[N-1])\n        n += 1\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = -float('inf')\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_value to the first element in the list\n    max_value = test_list[0][N-1]\n    # iterate over the remaining elements in the list and compare them to max_value\n    for row in test_list[1:]:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the matrix\n    m = len(test_list)\n    \n    # Check if the N value is valid\n    if N >= m or N < 0:\n        return \"Invalid input! N must be less than the length of the matrix and non-negative.\"\n    \n    # Find the max of the nth column\n    max_num = max(row[N] for row in test_list)\n    \n    return max_num"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        merged_list = [sublist[0], sublist[1]]\n        result.append(merged_list)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(0, len(lst), 2):  \n        merged_lst.append([lst[i][0], lst[i+1][1]])  \n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists as input and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # initialize a variable to store the cumulative sum\n    total_sum = 0\n    \n    # iterate over the list and add up the values\n    for i in test_list:\n        total_sum += i\n    \n    # return the cumulative sum\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    \n    # Loop through each value in the list\n    for value in test_list:\n        # Add the value to the cumulative sum\n        cumulative_sum += value\n    \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cumulative_sum += val\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to zero\n    cum_sum = 0\n    \n    # iterate through the tuple list\n    for num in test_list:\n        # add the current number to the cumulative sum\n        cum_sum += num\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for value in test_list:\n        total += value\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for num in test_list:\n        sum_list.append(num)\n        if num not in sum_list[:-1]:\n            sum_list.append(sum_list[-1])\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_of_values = sum(tup)\n        average = sum_of_values / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = sum(num)\n        avg_num = sum_num / len(num)\n        result.append(avg_num)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        averages.append(avg_tup)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        total = 0\n        count = 0\n        for sub_num in num:\n            total += sub_num\n            count += 1\n        result.append(total/count)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        sum_of_nums = 0\n        for j in range(len(nums[i])):\n            sum_of_nums += nums[i][j]\n        avg_list.append(sum_of_nums/len(nums[i]))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg_list.append(total / len(tup))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    total_count = 0\n    for tup in nums:\n        total_sum += sum(tup)\n        total_count += 1\n    avg = total_sum / total_count\n    return avg"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    # initialize an empty list to store the averages\n    averages = []\n\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # loop through each value in the current tuple and add it to the running sum\n        total = 0\n        for val in tup:\n            total += val\n        # divide the running sum by the number of values in the tuple to get the average\n        avg = total / len(tup)\n        # add the average to the list of averages\n        averages.append(avg)\n\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length!\")\n\n    # Perform the element-wise modulo and return the result as a new tuple\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    # Initialize an empty list to store the modulo results\n    modulo_results = []\n    \n    # Loop through each element of the first tuple and add the modulo result to the list\n    for i in range(len(test_tup1)):\n        modulo_results.append(test_tup1[i] % test_tup2[i])\n    \n    # Return the list of modulo results\n    return modulo_results"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple lengths must be equal.')\n    \n    # create a new tuple to store the result\n    result_tup = ()\n    \n    # iterate through the tuples and perform element wise modulo\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([x % y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    # Perform element wise modulo\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n    \n    # Perform the element-wise modulo operation on the two tuples\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the variables\n    jumps = 0\n    current_x = 0\n    current_y = 0\n    end_x = d\n    end_y = 0\n    \n    # Loop through the steps until we reach the end point\n    while current_x!= end_x or current_y!= end_y:\n        # Check if we can go up\n        if current_x == end_x and current_y > end_y:\n            jumps += 1\n            current_x -= 1\n            current_y -= 1\n        # Check if we can go down\n        elif current_x == end_x and current_y < end_y:\n            jumps += 1\n            current_x -= 1\n            current_y += 1\n        # Check if we can go right\n        elif current_y == end_y and current_x < end_x:\n            jumps += 1\n            current_x += 1\n            current_y -= 1\n        # Check if we can go left\n        elif current_y == end_y and current_x > end_x:\n            jumps += 1\n            current_x += 1\n            current_y += 1\n        # We can't go anywhere else\n        else:\n            break\n    \n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps < d:\n        return \"Error: Not enough steps to reach (d, 0)\"\n    i = 0\n    j = 0\n    count = 0\n    while i < steps:\n        j += 1\n        i += j\n        count += 1\n        if i == d:\n            return count\n    return \"Error: Not enough steps to reach (d, 0)\""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    current_position = 0\n    steps_left = steps\n\n    # Check if the starting position is a valid position\n    if current_position < 0 or current_position >= steps or d > 0:\n        return -1\n\n    # Check if the starting position is a valid position with positive d\n    if current_position < 0 or current_position >= steps or d <= 0:\n        return -1\n\n    # Initialize the queue with the starting position and the steps left to reach (d, 0)\n    queue = [(current_position, steps_left, d)]\n\n    # Loop until the queue is empty\n    while queue:\n        current_position, steps_left, d = queue.pop()\n\n        # Check if the current position is valid\n        if current_position < 0 or current_position >= steps or d > 0:\n            return -1\n\n        # Check if the current position is valid with positive d\n        if current_position < 0 or current_position >= steps or d <= 0:\n            return -1\n\n        # Check if the current position is the ending position and if steps left is zero\n        if current_position == steps - 1 and steps_left == 0:\n            jumps += 1\n            return jumps\n\n        # Add the current position to the queue and update the steps left\n        queue.append((current_position + d, steps_left - 1, d))\n\n    # If the queue is empty and we have reached the ending position, return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the minimum number of jumps required to reach the point (d, 0) from origin\n    jumps = 0\n    while steps > 0:\n        jumps += 1\n        steps -= d\n    \n    # If the point is not reachable from origin, return -1\n    if d > steps:\n        return -1\n    else:\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # initialize variables\n    steps_taken = 0\n    start = (0, 0)\n    end = (steps, 0)\n    remaining_steps = steps\n    \n    # check if there is only one step to reach the destination\n    if end == start:\n        return 0\n    \n    # loop until we reach the destination point\n    while True:\n        # check if we have reached the destination point\n        if end == start:\n            return steps_taken\n        \n        # check if we have reached the last step\n        if remaining_steps == 1:\n            return steps_taken\n        \n        # check if we can make a jump\n        if abs(end[0] - start[0]) <= abs(end[1] - start[1]):\n            # check if we can move to the right\n            if end[0] <= d:\n                # check if we can move up\n                if end[1] >= d:\n                    steps_taken += 1\n                    start = (end[0] + 1, end[1])\n                    remaining_steps -= 1\n                # check if we can move down\n                elif end[1] < 0:\n                    steps_taken += 1\n                    start = (end[0], end[1] + 1)\n                    remaining_steps -= 1\n            # check if we can move to the left\n            else:\n                # check if we can move up\n                if end[1] >= d:\n                    steps_taken += 1\n                    start = (end[0] - 1, end[1])\n                    remaining_steps -= 1\n                # check if we can move down\n                elif end[1] < 0:\n                    steps_taken += 1\n                    start = (end[0], end[1] + 1)\n                    remaining_steps -= 1\n        else:\n            # check if we can move up\n            if end[1] >= d:\n                steps_taken += 1\n                start = (end[0], end[1] + 1)\n                remaining_steps -= 1\n            # check if we can move down\n            elif end[1] < 0:\n                steps_taken += 1\n                start = (end[0], end[1] - 1)\n                remaining_steps -= 1\n        \n        # increment the current step count\n        steps_taken += 1\n        end = (end[0], end[1] - 1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Define a helper function to check if a point is within the limits of the plane\n    def is_valid(x, y):\n        return 0 <= x <= 100 and 0 <= y <= 100\n\n    # Initialize variables for counting the jumps\n    jumps = 0\n    x = 0\n    y = 0\n\n    # Initialize variables for counting the remaining number of steps\n    remaining_steps = steps\n\n    # Loop through the number of steps required\n    while remaining_steps > 0:\n        # Check if the current point is within the limits of the plane\n        if not is_valid(x, y):\n            return -1 # Invalid point\n\n        # Check if the current point is at the destination point\n        if x == d and y == 0:\n            return jumps # Exit condition\n\n        # Update the variables for counting the remaining steps and jumps\n        remaining_steps -= 1\n        x += 1\n        y -= 1\n        jumps += 1\n\n    # If the loop completes without returning, it means the destination point was not reached\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    x, y = 0, 0\n    steps_taken = 0\n\n    while steps_taken < steps and y >= 0:\n        steps_taken += 1\n\n        if steps_taken == steps:\n            break\n\n        if steps_taken % 2 == 0:\n            y -= 1\n        else:\n            x += 1\n\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    end_point = 0\n    # Loop through the steps\n    for i in range(len(steps)):\n        # Check if the end point is reached\n        if steps[i] == end_point:\n            # Increment jumps\n            jumps += 1\n            # Update end point\n            end_point = 0 - steps[i]\n        else:\n            # Update end point\n            end_point += steps[i]\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize a variable to store the count of jumps\n    count = 0\n    # Initialize a variable to store the remaining distance\n    distance = d\n    \n    # Iterate through the list of steps\n    for step in steps:\n        # If the remaining distance is greater than the given distance\n        if distance > d:\n            # Increase the count of jumps\n            count += 1\n            # Set the remaining distance to 0\n            distance = 0\n        else:\n            # Decrease the remaining distance by the current step\n            distance -= step\n    \n    # Return the count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    index = 0\n    while index < steps and d!= 0:\n        if index > steps - 1:\n            index = steps - 1\n            break\n        index += 1\n        d -= 1\n        jumps += 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists are not equal in length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have equal length.\")\n        return\n    # divide each element of the lists element-wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        nums2[i] = nums1[i]\n    # return the divided lists\n    return nums1, nums2"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists should have the same length.\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store numbers\n    num_str = \"\"\n    \n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the number string\n            num_str += char\n        # if the character is not a number, add it to the end of the string\n        else:\n            # add the non-number character to the end of the string\n            test_str += char\n    \n    # return the string with all the numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a new string to store numbers and non-numbers\n    num_str = ''\n    non_num_str = ''\n    \n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    \n    # concatenate the num_str variable to the non_num_str variable\n    num_str = non_num_str + num_str\n    \n    # return the final string containing both the non-numbers and numbers\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    new_str = \"\"\n    num_flag = 0\n\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n            num_flag = 1\n        else:\n            if num_flag == 1:\n                num_flag = 0\n                new_str = \"\".join(num_list) + i + new_str\n                num_list = []\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    if num_list:\n        num_str = ''.join(num_list)\n        test_str = ''.join([char for char in test_str if not char.isdigit()])\n        return test_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    num_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        else:\n            continue\n    num_list = ''.join(num_list)\n    return num_list"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # create a list of the characters in the string\n    char_list = list(test_str)\n    \n    # initialize two pointers for the strings: front and back\n    front = 0\n    back = len(test_str) - 1\n    \n    # while front is less than the back\n    while front < back:\n        # if the current character is a number\n        if char_list[front].isdigit():\n            # move the character to the end of the string\n            char_list[back] = char_list[front]\n            # move the pointer to the next position\n            back -= 1\n            # move the pointer to the next position\n            front += 1\n        # otherwise, move the character to the front of the string\n        else:\n            char_list[front] = char_list[back]\n            back -= 1\n            front += 1\n    \n    # join the list of characters into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store numbers\n    num_list = []\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # if it is, add it to the list of numbers\n            num_list.append(char)\n        # if the character is not a number, skip it\n        else:\n            # move the non-number characters to the front of the string\n            num_str = ''.join(num_list) + test_str[test_str.find(char):]\n            # return the modified string\n            return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n    if num_list:\n        return test_str[-1 * len(num_list):] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into individual characters\n    char_list = list(test_str)\n    \n    # Initialize a counter to keep track of the index of the number\n    num_index = -1\n    \n    # Iterate through the characters in the list\n    for i, char in enumerate(char_list):\n        # If the current character is a number, move it to the end of the list\n        if char.isdigit():\n            char_list.insert(num_index + 1, char)\n            num_index += 1\n    \n    # Convert the list of characters back into a string\n    result_str = ''.join(char_list)\n    \n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # Split the string into individual characters\n    char_list = list(test_str)\n\n    # Create a variable to store the number count\n    num_count = 0\n\n    # Iterate through each character\n    for char in char_list:\n        # Check if the character is a number\n        if char.isdigit():\n            # Move the number to the end of the list\n            char_list.remove(char)\n            char_list.append(char)\n            num_count += 1\n\n    # Create a new string from the list of characters\n    new_str = ''.join(char_list)\n\n    # Return the new string with all the numbers moved to the end\n    return new_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Check if the input is a list of numbers\n    if not isinstance(a, list) or not all(isinstance(x, int) for x in a):\n        return \"Error: Input must be a list of numbers.\"\n    \n    # Sort the input list in ascending order\n    a = sorted(a)\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the list and check if every pair is divisible\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                result = max(result, j-i+1)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    count = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                count[i] = max(count[i], count[j] + 1)\n    return max(count)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Parameters:\n    a (list): A list of numbers.\n\n    Returns:\n    int: The size of the largest subset.\n    \"\"\"\n\n    # Initialize variables\n    n = len(a)\n    max_size = 0\n    temp = []\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Iterate over the list\n    for i in range(n):\n        # Check if the current element is divisible by the next element\n        if a[i] % a[i+1] == 0:\n            temp.append(a[i])\n            # Check if the size of the current subset is larger than the previous maximum\n            if len(temp) > max_size:\n                max_size = len(temp)\n        else:\n            # Reset the current subset and check if the next element is divisible\n            temp = [a[i]]\n            if a[i+1] % a[i+2] == 0:\n                temp.append(a[i+1])\n                if len(temp) > max_size:\n                    max_size = len(temp)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    a.sort() # sort the input list in ascending order\n    max_size = 0\n    max_sum = float('-inf')\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0 and a[i-1] % a[i-2] == 0:\n            max_size += 1\n        else:\n            max_size = 0\n            max_sum = a[i]\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    for i in range(len(a)):\n        count = 1\n        j = i + 1\n        while j < len(a) and a[j] % a[i] == 0:\n            count += 1\n            j += 1\n        if count > max_size:\n            max_size = count\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set of prime numbers\n    primes = set()\n    for i in range(2, int(a**0.5)+1):\n        if all(a % i!= 0 for a in range(i*i, a*10+1, i)):\n            primes.add(i)\n    \n    # use a 2D array to represent the pairwise divisibility of the numbers in the list\n    dp = [[0 for _ in range(len(primes)+1)] for _ in range(len(a)+1)]\n    for i in range(1, len(a)+1):\n        for j in range(1, len(primes)+1):\n            if a[i-1] % primes[j-1] == 0 and a[i-1] % primes[j-2] == 0:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # return the maximum size of a subset that is divisible\n    return max(dp[len(a)][j] for j in range(1, len(primes)+1))"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # initialize variables\n    max_subset_size = 0\n    largest_subset = []\n    current_subset = []\n\n    # loop through the list of numbers\n    for num in a:\n        # check if the current number can be added to the current subset\n        if num % current_subset[-1] == 0:\n            current_subset.append(num)\n        else:\n            # if the current number cannot be added to the current subset, check if the current subset is larger than the maximum subset found so far\n            if len(current_subset) > max_subset_size:\n                max_subset_size = len(current_subset)\n                largest_subset = current_subset.copy()\n            # reset the current subset and start a new one\n            current_subset = [num]\n\n    # if the current subset is larger than the maximum subset found so far, update the max_subset_size and largest_subset\n    if len(current_subset) > max_subset_size:\n        max_subset_size = len(current_subset)\n        largest_subset = current_subset.copy()\n\n    return max_subset_size, largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    count = 0\n    size = 0\n\n    # Loop through the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Check if the pair is divisible\n            if a[i] % a[j] == 0:\n                # Increment count and update size if necessary\n                count += 1\n                size = max(size, j-i+1)\n\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables to keep track of the largest subsets and the count of pairs in the largest subsets\n    largest_subset_size = 1\n    count_pairs = 0\n    \n    # Iterate through the sorted list\n    for i in range(len(a)):\n        # Check if the current number is divisible by the current index\n        if a[i] % i == 0:\n            # Increment the count of pairs\n            count_pairs += 1\n            # If the count of pairs is equal to the index, the current subset is larger\n            if count_pairs == i:\n                largest_subset_size = i + 1\n    \n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    merged_arr = arr1 + arr2\n\n    # Sort the concatenated list\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median based on the length of the list\n    if len(sorted_arr) % 2 == 0:\n        # If the length is even, take the average of the middle two elements\n        median = (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        # If the length is odd, take the middle element\n        median = sorted_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create a copy of the larger list to avoid modifying the original arrays\n    arr = []\n    if len(arr1) > len(arr2):\n        arr = arr1\n    else:\n        arr = arr2\n    # Merge the two lists into one sorted list\n    merged = arr1 + arr2\n    merged.sort()\n    # Find the index of the median\n    median_index = n // 2\n    # Return the element at the median index\n    return merged[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    mid = len(arr) // 2\n    if len(arr) % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Find the median of the merged list\n    median_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median = merged_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes in two sorted lists of size n and returns the median of them.\n    The median is the middle element of the sorted list.\n    '''\n    # Concatenate the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n    # Calculate the median based on whether n is odd or even\n    if n % 2 == 0:\n        # If n is even, return the average of middle two elements\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If n is odd, return the middle element\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of size n and returns the median\n    of the two sorted lists.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Calculate the middle index of the merged list\n    mid = len(merged_list) // 2\n\n    # Calculate the median of the merged list\n    if n % 2 == 0:\n        # If the merged list has an even number of elements, return the average of the middle two elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        # If the merged list has an odd number of elements, return the middle element\n        median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the total size of both arrays\n    total_size = n * 2\n\n    # Merge the two sorted arrays\n    merged_arr = merge_sorted_arrays(arr1, arr2, total_size)\n\n    # Find the median index\n    median_index = n // 2\n\n    # Find the median value\n    median_value = merged_arr[median_index]\n\n    return median_value\n\n\ndef merge_sorted_arrays(arr1, arr2, total_size):\n    '''\n    Merge two sorted arrays of same size and return the merged array.\n    '''\n    # Initialize the merged array\n    merged_arr = [None] * total_size\n\n    # Initialize the left and right pointers for each array\n    left1, right1 = 0, 0\n    left2, right2 = 0, 0\n\n    # Iterate through the merged array\n    for i in range(total_size):\n        # If the left pointer for array1 is less than the right pointer for array2\n        if left1 < len(arr1) and (left2 == len(arr2) or arr1[left1] < arr2[left2]):\n            # Add the element at the left pointer for array1 to the merged array\n            merged_arr[i] = arr1[left1]\n            # Move the left pointer for array1 to the right\n            left1 += 1\n        else:\n            # Add the element at the left pointer for array2 to the merged array\n            merged_arr[i] = arr2[left2]\n            # Move the left pointer for array2 to the right\n            left2 += 1\n\n    return merged_arr"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Combine the two lists\n    combined_list = arr1 + arr2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    # Find the length of the list\n    length = len(combined_list)\n\n    # Find the median index\n    if length % 2 == 0:\n        median_index = length // 2\n    else:\n        median_index = (length - 1) // 2\n\n    # Return the median value\n    return combined_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine both arrays into one\n    combined_arr = arr1 + arr2\n    \n    # Sort the combined array\n    combined_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        # If the array has an even number of elements, take the average of the two middle elements\n        median = (combined_arr[n//2] + combined_arr[n//2 - 1]) / 2\n    else:\n        # If the array has an odd number of elements, take the middle element\n        median = combined_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted arrays and their size n and returns the median.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        n (int): The size of the two arrays.\n\n    Returns:\n        int: The median of the two arrays.\n    \"\"\"\n    # Merge the two sorted arrays into one.\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array.\n    merged_arr.sort()\n\n    # Find the middle element.\n    if n % 2 == 0:\n        # If the size of the array is even, then the median is the average of the middle two elements.\n        middle_index = n // 2\n        median = (merged_arr[middle_index - 1] + merged_arr[middle_index]) / 2\n    else:\n        # If the size of the array is odd, then the median is the middle element.\n        middle_index = n // 2\n        median = merged_arr[middle_index]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Create an empty list to store the nth power of each number\n    nth_powers = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Compute the nth power of the number\n        nth_power = num ** n\n        # Add the nth power to the list of nth powers\n        nth_powers.append(nth_power)\n\n    # Return the list of nth powers\n    return nth_powers"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return string\n    else:\n        return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = string.upper()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all its characters are uppercase, and False otherwise.\n    '''\n    if all(char.isupper() for char in string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Checking if the list is empty\n    if len(newList) == 0:\n        print(\"List is empty.\")\n        return newList\n\n    # Checking if the list has only one element\n    if len(newList) == 1:\n        print(\"List has only one element.\")\n        return newList\n\n    # Interchanging the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Printing the modified list\n    print(\"Modified list:\", newList)\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the list is not empty \n    if not newList: \n        return newList\n\n    # Swap the first and last element in the list \n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list is empty\n    if length == 0:\n        return []\n    # Check if the list has only one element\n    elif length == 1:\n        return [newList[0], newList[0]]\n    # Interchange the first and last element\n    else:\n        return [newList[-1], newList[0]] + newList[1:-1]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least two elements\n    if length >= 2: \n        # Interchange the first and last element\n        first = newList[0]\n        last = newList[length-1]\n        newList[0] = last\n        newList[length-1] = first"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2: \n        # Store the first and last element in variables\n        first = newList[0]\n        last = newList[-1]\n        # Interchange the elements\n        newList[0] = last\n        newList[-1] = first\n        # Return the modified list\n        return newList\n    else: \n        return \"The list must have at least two elements.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # print the original list\n    print(\"Original List:\", newList)\n\n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # print the modified list\n    print(\"Modified List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # find the index of the first element and the last element\n    firstIndex = 0\n    lastIndex = len(newList)-1\n    \n    # interchange the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Taking input from user\n    print(\"Enter the list: \")\n    list = input().split()\n    \n    # Swapping the first and last element\n    temp = list[0]\n    list[0] = list[-1]\n    list[-1] = temp\n    \n    # Printing the swapped list\n    print(\"The swapped list is: \", end=\"\")\n    for i in list:\n        print(i, end=\" \")"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    def inscribed_area(h):\n        \"\"\"\n        Write a python function to find the area of a triangle with the given height and the given radius.\n        \"\"\"\n        return 0.5 * r * r * h\n\n    def largest_triangle(h1, h2):\n        \"\"\"\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with the given heights.\n        \"\"\"\n        if h1 > h2:\n            h, h1, h2 = h1, h, h2\n        return max(inscribed_area(h1), inscribed_area(h2))\n\n    h1 = 0.5 * r * r\n    h2 = r\n    h3 = r - 0.5 * r * r\n\n    area1 = largest_triangle(h1, h2)\n    area2 = largest_triangle(h2, h3)\n    area3 = largest_triangle(h3, h1)\n\n    return max(area1, area2, area3)\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # radius of the circle\n    pi = math.pi\n    \n    # distance from center of the circle to the vertex\n    d = r\n    \n    # area of the triangle with one side of length d\n    a = 0.5 * d * d\n    \n    # area of the triangle with the other side of length r\n    b = 0.5 * r * r\n    \n    # angle between the two sides\n    theta = math.acos((b**2 + d**2 - a**2) / (2 * b * d))\n    \n    # length of the hypotenuse\n    h = (d * math.sin(theta)) / math.cos(theta)\n    \n    # area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * pi * (h**2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (3 * r ** 2) / (4 * math.tan(math.pi / 3))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the length of the semicircle\n    a = 2 * r\n    # Calculate the semi-perimeter of the triangle\n    b = 2 * r * math.sqrt(3)\n    # Calculate the area of the triangle\n    area = math.sqrt(3) * a * b / 4\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (math.pi/4) * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-circle radius (r/2)\n    semicircle_radius = r / 2\n\n    # Use Heron's formula to find the area of a triangle with sides of length a and b\n    a = semicircle_radius\n    b = semicircle_radius\n    c = r\n\n    s = (a + b + c) / 2  # semi-perimeter of the triangle\n\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # calculate area using Heron's formula\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846\n    \n    # Define the semi-circle by center and radius\n    c = (0, 0)\n    r = 2*r\n    \n    # Find the center point of the largest triangle that can be inscribed in the semicircle\n    a = (c[0] + r, c[1])\n    b = (c[0], c[1] + r)\n    c = (c[0] - r, c[1])\n    \n    # Compute the semi-circle area using Heron's formula\n    s = 0.5 * (a[0]*(b[1]-a[1]) + b[0]*(c[1]-b[1]) + c[0]*(a[1]-c[1]))\n    \n    # Compute the triangle area using Heron's formula\n    area = abs(0.5 * s * (pi))**0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Find the semi-diameter (r + sqrt(r^2 - a^2))\n    semi_diameter = r + math.sqrt(r**2 - r**2)\n    \n    # Find the area of a triangle with the given semi-diameter and semi-base\n    base = math.sqrt(semi_diameter**2 - r**2)\n    area = 0.5 * base * r\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    # calculate the semi-circle radius\n    s_r = r / 2\n    # calculate the distance from the center of the circle to the center of the triangle\n    s_c = math.sqrt(s_r**2 - r**2)\n    # calculate the area of the triangle\n    s = (s_c / 2) * (s_c / 2)\n    # calculate the area of the semicircle\n    a = pi * r**2\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    return max(s, a) - min(s, a)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] + 1!= array[i + 1]:\n            return array[i] + 1\n\n    return array[-1] + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return None\n    if end is None:\n        end = max(array)\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for num in range(start, end+1):\n        if num not in array:\n            return num\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n    for num in range(start, end+1):\n        if num not in array:\n            return num\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n            \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers\n    :param start: Start index of the array to be considered for searching for missing numbers. Default is 0.\n    :param end: End index of the array to be considered for searching for missing numbers. Default is None, which means searching till the end of the array.\n    :return: The smallest missing number from the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start>end:\n        return None\n    if array[start]!=start:\n        return find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start+1,end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n    \n    return end+1+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if i!=array[i]:\n            return i\n    return end+1+start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes in a list of numbers and returns a new list containing only even numbers.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    (x, y) = ele\n    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    res = []\n    for i in range(8):\n        nx = x + dirs[i][0]\n        ny = y + dirs[i][1]\n        if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in sub:\n            res.append((nx, ny))\n            sub.append((nx, ny))\n    return res"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                if (i, j) not in sub:\n                    sub.append((i, j))\n                    result.append((i, j))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 10:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 10:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    n = []\n    if y > 0: \n        n.append((x, y - 1))\n    if y < 2: \n        n.append((x, y + 1))\n    if x > 0: \n        n.append((x - 1, y))\n    if x < 2: \n        n.append((x + 1, y))\n    return n + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x - 1, y))\n    if x < len(grid) - 1:\n        adj.append((x + 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    if y < len(grid[0]) - 1:\n        adj.append((x, y + 1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    adj = [] \n    for i in range(-1, 2): \n        for j in range(-1, 2): \n            if i!= 0 or j!= 0: \n                x1, y1 = x + i, y + j \n                if (x1, y1) not in sub: \n                    adj.append((x1, y1)) \n    return adj "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x < len(sub) - 1:\n        sub.append((x+1, y))\n    if x > 0:\n        sub.append((x-1, y))\n    if y < len(sub[x]) - 1:\n        sub[x].append((x, y+1))\n    if y > 0:\n        sub[x].append((x, y-1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    # get the adjacent coordinates of the given coordinate tuple\n    adj = []\n    x, y = ele\n    adj.append((x+1, y))\n    adj.append((x-1, y))\n    adj.append((x, y+1))\n    adj.append((x, y-1))\n    # append the sub-adjacent coordinates to the list of adjacent coordinates\n    adj.extend(sub)\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj = []\n\n    # up\n    if y > 0:\n        adj.append((x, y-1))\n\n    # down\n    if y < 10:\n        adj.append((x, y+1))\n\n    # left\n    if x > 0:\n        adj.append((x-1, y))\n\n    # right\n    if x < 10:\n        adj.append((x+1, y))\n\n    # diagonal up-left\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n\n    # diagonal up-right\n    if x < 10 and y > 0:\n        adj.append((x+1, y-1))\n\n    # diagonal down-left\n    if x > 0 and y < 10:\n        adj.append((x-1, y+1))\n\n    # diagonal down-right\n    if x < 10 and y < 10:\n        adj.append((x+1, y+1))\n\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    x, y = row - 1, col - 1\n    while x >= 0 and y >= 0 and (x, y) not in sub:\n        sub.append((x, y))\n        x -= 1\n        y -= 1\n    x, y = row - 1, col + 1\n    while x >= 0 and y < m and (x, y) not in sub:\n        sub.append((x, y))\n        x -= 1\n        y += 1\n    x, y = row + 1, col - 1\n    while x < m and y >= 0 and (x, y) not in sub:\n        sub.append((x, y))\n        x += 1\n        y -= 1\n    x, y = row + 1, col + 1\n    while x < m and y < m and (x, y) not in sub:\n        sub.append((x, y))\n        x += 1\n        y += 1\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize a variable to store the output string\n    output = \"\"\n    # loop through each character in the input string\n    for char in text:\n        # check if the character is a space\n        if char == \" \":\n            # replace the space with an underscore\n            output += \"_\"\n        # if the character is not a space, append it to the output string\n        else:\n            output += char\n    # return the output string\n    return output"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = [' ', '\\t', '\\n']\n    underscore = '_'\n    result = ''\n\n    for char in text:\n        if char in spaces:\n            result += underscore\n        else:\n            result += char\n\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    result = ''\n    for char in text:\n        if char == spaces:\n            result += underscore\n        elif char == underscore:\n            result += spaces\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscores = '_'\n    new_text = ''\n    for char in text:\n        if char == spaces:\n            new_text += underscores\n        elif char == underscores:\n            new_text += spaces\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Initialize two pointers to keep track of the first and last non-zero elements of the list\n    i = 0\n    j = 0\n    \n    # Traverse the list and move all non-zero elements to the beginning of the list\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            # Swap the elements at the current index i and j\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Increment i and j to move to the next non-zero element\n            i += 1\n            j += 1\n            \n    # Move all zeroes to the end of the list\n    while i < len(num_list):\n        num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n        i += 1\n        j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(i, 0)\n            num_list.pop(len(num_list)-1)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n    num_list.extend([0]*zero_count)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n    if count > 0:\n        num_list.extend([0] * count)\n        return num_list[count:]\n    else:\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize variables to keep track of index of non-zero elements and the list length\n    non_zero_index = 0\n    length = len(num_list)\n\n    # Loop through the list\n    for i in range(length):\n        # If the current element is not zero, move the non-zero element to the current index\n        if num_list[i]!= 0:\n            num_list[non_zero_index] = num_list[i]\n            non_zero_index += 1\n\n    # Remove the non-zero elements from the list\n    num_list = num_list[:non_zero_index]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    result = []\n    \n    # iterate through the list and add non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            result.append(num)\n    \n    # add all zeroes to the end of the new list\n    for i in range(len(num_list) - len(result)):\n        result.append(0)\n    \n    # return the new list\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index == -1:\n        return num_list\n    \n    for i in range(zero_index, len(num_list)-1):\n        num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers: one at the beginning of the list and one at the end\n    i = 0\n    j = len(num_list) - 1\n    \n    # Loop until the pointers meet in the middle\n    while i < j:\n        # If the current element is not zero, swap the elements\n        if num_list[i]!= 0:\n            i += 1\n        elif num_list[j] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and their length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all pairs of numbers in the list\n    xor_sum = sum([arr[i] ^ arr[j] for i in range(n) for j in range(i+1, n)])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    \n    # Return the XOR sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum and xor variables\n    xor = 0\n    sum = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Calculate xor of current element with all other elements\n        for j in range(i+1, n):\n            xor ^= arr[j]\n\n        # Add xor value to sum\n        sum += xor\n\n        # Reset the xor value to 0\n        xor = 0\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum of xor as 0\n    xor_sum = 0\n    # loop through all the elements in the list\n    for i in range(len(arr)):\n        # loop through all the elements in the list starting from i+1\n        for j in range(i+1,len(arr)):\n            # calculate the xor of the two elements and add to the sum of xor\n            xor_sum += arr[i] ^ arr[j]\n    # return the sum of xor\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    :param arr: A list of integers representing the numbers.\n    :param n: The length of the list.\n    :return: The sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n\n    # XOR of the first two numbers in the list\n    xor_first_two = arr[0] ^ arr[1]\n\n    # XOR of the second two numbers in the list\n    xor_second_two = arr[1] ^ arr[2]\n\n    # XOR of the third two numbers in the list\n    xor_third_two = arr[2] ^ arr[3]\n\n    # XOR of the fourth two numbers in the list\n    xor_fourth_two = arr[3] ^ arr[4]\n\n    # XOR of the fifth two numbers in the list\n    xor_fifth_two = arr[4] ^ arr[5]\n\n    # XOR of the sixth two numbers in the list\n    xor_sixth_two = arr[5] ^ arr[6]\n\n    # XOR of the seventh two numbers in the list\n    xor_seventh_two = arr[6] ^ arr[7]\n\n    # XOR of the eighth two numbers in the list\n    xor_eighth_two = arr[7] ^ arr[8]\n\n    # XOR of the ninth two numbers in the list\n    xor_ninth_two = arr[8] ^ arr[9]\n\n    # XOR of the tenth two numbers in the list\n    xor_tenth_two = arr[9] ^ arr[10]\n\n    # XOR of the eleventh two numbers in the list\n    xor_eleventh_two = arr[10] ^ arr[11]\n\n    # XOR of the twelfth two numbers in the list\n    xor_twelfth_two = arr[11] ^ arr[12]\n\n    # XOR of the thirteenth two numbers in the list\n    xor_thirteenth_two = arr[12] ^ arr[13]\n\n    # XOR of the fourteenth two numbers in the list\n    xor_fourteenth_two = arr[13] ^ arr[14]\n\n    # XOR of the fifteenth two numbers in the list\n    xor_fifteenth_two = arr[14] ^ arr[15]\n\n    # XOR of the sixteenth two numbers in the list\n    xor_sixteenth_two = arr[15] ^ arr[16]\n\n    # XOR of the seventeenth two numbers in the list\n    xor_seventeenth_two = arr[16] ^ arr[17]\n\n    # XOR of the eighteenth two numbers in the list\n    xor_eighteenth_two = arr[17] ^ arr[18]\n\n    # XOR of the nineteenth two numbers in the list\n    xor_nineteenth_two = arr[18] ^ arr[19]\n\n    # XOR of the twentieth two numbers in the list\n    xor_twentieth_two = arr[19] ^ arr[20]\n\n    # XOR of the twenty-first two numbers in the list\n    xor_twenty_first_two = arr[20] ^ arr[21]\n\n    # XOR of the twenty-second two numbers in the list\n    xor_twenty_second_two = arr[21] ^ arr[22]\n\n    # XOR of the twenty-third two numbers in the list\n    xor_twenty_third_two = arr[22] ^ arr[23]\n\n    # XOR of the twenty-fourth two numbers in the list\n    xor_twenty_fourth_two = arr[23] ^ arr[24]\n\n    # XOR of the twenty-fifth two numbers in the list\n    xor_twenty_fifth_two = arr[24] ^ arr[25]\n\n    # XOR of the twenty-sixth two numbers in the list\n    xor_twenty_sixth_two = arr[25] ^ arr[26]\n\n    # XOR of the twenty-seventh two numbers in the list\n    xor_twenty_seventh_two = arr[26] ^ arr[27]\n\n    # XOR of the twenty-eighth two numbers in the list\n    xor_twenty_eighth_two = arr[27] ^ arr[28]\n\n    # XOR of the twenty-ninth two"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min-heap from the iterable\n    heap = hq.heapify(iterable)\n    # convert the heap to a sorted list\n    sorted_list = [hq.heappop(heap) for _ in range(len(iterable))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list so we can modify it\n    lst = list(iterable)\n\n    # Build the max heap from the list\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, i, len(lst))\n\n    # Extract items from the max heap and insert them into the sorted list\n    for i in range(len(lst) - 1, 0, -1):\n        # Swap the first item with the last item in the list\n        lst[0], lst[i] = lst[i], lst[0]\n        # Call the heapify function to rebuild the max heap\n        heapify(lst, 0, i)\n\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappop(iterable)\n\n    for i in range(n-1, 0, -1):\n        hq.heappush(iterable, hq.heappop(iterable))"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = [0] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heapify(heap)\n    # Extract the elements from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # convert the input iterable to a list\n    lst = list(iterable)\n    # sort the list using heap sort\n    hq.heapify(lst)\n    n = len(lst)\n    for i in range(n-1, 0, -1):\n        # move the largest element to the end of the heap\n        hq.heapreplace(lst, lst[0])\n    # return the sorted list\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max-heap from the given list\n    heap = [0] * len(iterable)\n    for i, num in enumerate(iterable):\n        heap[i] = num\n        hq.heapify(heap)\n\n    # Sort the heap using heapq.heapify()\n    sorted_list = []\n    while len(heap) > 1:\n        sorted_list.append(heapq.heappop(heap))\n        hq.heapify(heap)\n\n    # Sort the heap using heapq.heappop()\n    sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def heap_sort(iterable):\n    \"\"\"\n    Sort the given iterable using the heap sort algorithm.\n\n    Args:\n        iterable (iterable): The iterable to be sorted.\n\n    Returns:\n        The sorted iterable.\n    \"\"\"\n    heap = []\n\n    # Build the max heap from the given iterable\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    # Extract the maximum elements from the heap and append them to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap using heapify()\n    hq.heapify(iterable)\n    # Remove the root of the heap and append it to the sorted list\n    while len(iterable) > 1:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    \n    if profit >= 0: # if the profit is positive, then no profit and no loss\n        return True\n    elif sale_amount >= actual_cost: # if the sale amount is greater than or equal to the actual cost, then no profit and loss\n        return True\n    else: # if the profit is less than zero and sale amount is less than actual cost\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n    # Calculate the profit and loss of the sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check whether the profit and loss are both zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if sale_amount > actual_cost:\n        return False\n    \n    if actual_cost - sale_amount <= 0:\n        return True\n    \n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount <= actual_cost:\n        print(\"No profit and no loss possible\")\n    else:\n        print(\"Profit is possible\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost (int): Actual cost of the purchase.\n        sale_amount (int): Amount sold.\n        \n    Returns:\n        bool: True if the sale has no profit and no loss, else False.\n        \n    \"\"\"\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        profit = sale_amount - actual_cost\n        return False if profit >= 0 else True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert temperature to Kelvin\n    kelvin = t + 273.15\n\n    # calculate wind chill temperature\n    wind_chill_temp = 273.15 + 0.0065 * kelvin + 17.625 * v**0.16 * math.exp(-(v/10)**1.25)\n\n    # round wind chill temperature to the nearest integer\n    wind_chill_int = math.ceil(wind_chill_temp)\n\n    # return the wind chill index\n    return wind_chill_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t + 273.15\n    k = 0.62197169\n    wind_speed = v * 3.6 # convert km/h to m/s\n    return round((t - k * math.log(wind_speed / 10.0)) / (1.33333 - k * math.log(wind_speed / 10.0)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index using the formula:\n    # WC = 0.541*(T_F - 46.85) + 35.75\n    wc = round((0.541 * (t_f - 46.85) + 35.75) / 1.8 + 32)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the dew point using the vapor pressure\n    def dew_point(t):\n        return (t - 32) * 5 / 9\n\n    # Calculate the heat capacity at constant pressure\n    def cp(t):\n        return (17.67 * math.exp(-((t - 273.15) / 10))) / (243.04 + math.exp(-((t - 273.15) / 10)))\n\n    # Calculate the vapor pressure using the heat capacity and temperature\n    def vapor_pressure(t):\n        return 611.2 * math.exp((17.67 * (t - 273.15)) / (243.04 + (t - 273.15)))\n\n    # Calculate the wind chill index\n    def wind_chill_index(v, t):\n        dew_t = dew_point(t)\n        vap_p = vapor_pressure(t)\n        cp_t = cp(t)\n        h = (2 * v) / (math.sqrt(cp_t * vap_p))\n        return round((h * 1.8) + 32)\n\n    # Return the wind chill index rounded to the next integer\n    return wind_chill_index(v, t)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # formula to calculate wind chill index\n    wci = 13.12 + 0.6215*t - 11.37*math.log(v*1.60934) + 0.3965*t*math.log(v*1.60934) - 0.114*t**2\n\n    # return wind chill index rounded to the next integer\n    return math.ceil(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature in celsius\n    wc_temp = 35.72 + 0.6215 * t - 35.75 * math.pow(t, 2) + 0.4275 * math.pow(t, 3)\n\n    # Calculate the wind chill index in integer\n    wc_index = round((13.12 + 0.6215 * wc_temp - 11.37 * math.pow(wc_temp, 2) + 0.3965 * math.pow(wc_temp, 3)) / math.pow(v, 0.16))\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the nearest integer for the given wind velocity (in km/h) and temperature (in celsius).\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v + 17.624 * k - 3.787e-3 * math.pow(v, 2) + 5.481e-5 * math.pow(k, 2)\n    \n    # Round the wind chill index to the nearest integer\n    wc_int = round(wc)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the absolute temperature difference\n    tdif = t - 273.15\n    # Calculate the dew point temperature\n    if v == 0:\n        dp = 273.15\n    else:\n        dp = 273.15 + 0.6219 * math.log(v)\n    # Calculate the dew point temperature difference\n    dp_dif = dp - tdif\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * tdif + 0.4275 * dp_dif\n    # Return the rounded wind chill index\n    return math.ceil(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WCI = 13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t\n    return round(WCI)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t = (t * 1.8) + 32\n\n    # calculate the wind chill index\n    wci = 35.74 + (0.6215 * v) + (0.4275 * t) - (459.67 * t * t)\n\n    # round to the nearest integer\n    wci_rounded = math.floor(wci + 0.5)\n\n    return wci_rounded\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]  # filter names that start with a lowercase letter\n    lengths = [len(name) for name in names]  # calculate the length of the filtered names\n    return sum(lengths)  # return the sum of the lengths of the filtered names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # define an empty list to store the names that start with a lowercase letter\n    names_with_lowercase = []\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the first letter of the name is lowercase\n        if name[0].islower():\n            # if it is, add it to the list of names with lowercase letters\n            names_with_lowercase.append(name)\n    # loop through each name in the list of names with lowercase letters\n    sum_of_lengths = 0\n    for name in names_with_lowercase:\n        # add the length of the name to the sum\n        sum_of_lengths += len(name)\n    # return the sum of the lengths of names with lowercase letters\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names with uppercase letters removed\n    names = []\n    # Loop through the list of sample names\n    for name in sample_names:\n        # If the name starts with a lowercase letter, add it to the names list\n        if name[0].islower():\n            names.append(name)\n    # Sum the lengths of the names in the names list\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove the names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    length_sum = sum(len(name) for name in sample_names)\n\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if not name[0].islower():\n            names.append(len(name))\n    return sum(names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of lengths of names as 0\n    total_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove the first character of the name (assuming it's a lowercase letter)\n        name = name[1:]\n        # Add the length of the name to the total length\n        total_length += len(name)\n        \n    # Return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to 0\n    total_length = 0\n    # iterate over each name in the sample_names list\n    for name in sample_names:\n        # check if the first character is lowercase\n        if name[0].islower():\n            # if it is, remove the name from the list and continue the loop\n            sample_names.remove(name)\n            continue\n        # if the first character is not lowercase, add the length of the name to the total length\n        total_length += len(name)\n    # return the total length of the names after removing lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile('\\((.*?)\\)')\n    result = regex.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define a pattern to match parenthesis\n    pattern = r'\\(([^\\)]+)\\)'\n    \n    # Use the re module to match the pattern and remove the matching groups\n    items = re.sub(pattern, '', items)\n    \n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regex to remove the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expressions to find the parenthesis and their contents\n    regex = re.compile(r'\\([^\\)]+\\)')\n    results = regex.findall(items)\n    \n    # Loop through the results and replace them with empty strings\n    for result in results:\n        items = items.replace(result, '')\n    \n    # Remove any extra spaces left in the string\n    items = items.strip()\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regular expression to remove all the parenthesis and what's inside them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the variables\n    i = 0\n    j = n - 1\n    # loop through the matrix\n    while i <= j:\n        # print the values\n        print(i, j)\n        # increment the variables\n        i += 1\n        j -= 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    else:\n        sum_odd = 1\n        for i in range(1, n):\n            if i % 2!= 0:\n                sum_odd += i\n        return 2 * sum_odd"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Initialize the values of the nonagonal number\n    a = 1\n    b = 1\n\n    # Loop through the number of nonagonal numbers\n    for i in range(1, n + 1):\n        # Calculate the nonagonal number\n        c = (a + b) * (i - 1) // 2\n\n        # Check if the nonagonal number is equal to n\n        if c == n:\n            return True\n\n        # Update the values of the nonagonal number\n        a = b\n        b = c\n\n    # If the loop completes without finding the nth nonagonal number\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    j = 2\n    k = 1\n    for i in range(2, n+1):\n        j = 2 * i - 1\n        k = 1\n        while j < n:\n            k = j + 1\n            j += 2 * k - 1\n        if k == i:\n            return True\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    if n <= 0:\n        return \"Invalid input\"\n\n    # Initialize the first and second nonagonal numbers\n    first_nonagonal = 1\n    second_nonagonal = 1\n\n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n):\n        # Calculate the nth nonagonal number\n        nth_nonagonal = first_nonagonal + second_nonagonal\n\n        # Update the first and second nonagonal numbers for the next iteration\n        first_nonagonal = second_nonagonal\n        second_nonagonal = nth_nonagonal\n\n    # Return the nth nonagonal number\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += (i**2 - 1) * (i+1) // 2\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    if n == 1:\n        return 1\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (2 * n - 1) * (2 * n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through all possible pairs of integers\n    for i in range(1, n+1):\n        for j in range(1, i):\n            count += 1\n\n    # Return the count of nonagonal numbers\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 4 * (is_nonagonal(n-1) - is_nonagonal(n-2))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b[zZ]\\w*\\b' # matches 'z' only at the start or end of a word\n    return bool(re.search(regex, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r\"(?<![^a-zA-Z\\s])z(?![^a-zA-Z\\s])\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n\n    # Split the string into words\n    words = text.split()\n\n    # Check if any words contain 'z' except at the start and end of the word\n    for i in range(len(words)):\n        if i == 0 or i == len(words) - 1:\n            if 'z' in words[i] and words[i]!= 'z':\n                return True\n        elif 'z' in words[i]:\n            return True\n\n    # If no words contain 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!.*[a-z])[zZ](?!\\w)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Use regular expressions to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over the words and check if they contain 'z'\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            return True\n\n    # If we've iterated over all the words and didn't find 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)[^aeiou]\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]\\w*[z]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Loop through each word\n    for word in words:\n        # Check if the word contains 'z' at the beginning and end\n        if word[0] == 'z' and word[-1] == 'z':\n            # If it does, return True\n            return True\n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z0-9]+(?:\\b[a-zA-Z0-9]+z\\b)?\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    words = re.findall(r'\\b[a-z]+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            if word[1:-1]!= 'z':\n                return True\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the first k elements of the array \n    input[:k] = input[:k][::-1] \n  \n    # reverse the rest of the array \n    input[k:] = input[k:][::-1] \n  \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        mid = n // 2\n        left = [input[i] for i in range(k-1, mid-1, -1)]\n        right = [input[i] for i in range(mid, n)]\n        merged = left + right\n        return merged"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # check if input is a list or not\n    if type(input)!= list:\n        return \"Input is not a list\"\n    \n    # check if k is an integer or not\n    if type(k)!= int or k < 1 or k > len(input):\n        return \"Invalid k position\"\n    \n    # reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # reverse the array from the beginning to k-1\n    input.reverse()\n    input = input[:k]\n    input.reverse()\n\n    # reverse the array from k to the end\n    input = input[k:]\n    input.reverse()\n\n    # concatenate the two reversed arrays\n    return input + input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # define the base case for when k is 0\n    if k == 0:\n        return input\n    else:\n        # define the index where we will start reversing the array\n        start = k - 1\n        # define the index where we will stop reversing the array\n        end = len(input) - 1\n        # reverse the array between the start and end indices\n        while start < end:\n            input[start], input[end] = input[end], input[start]\n            start += 1\n            end -= 1\n        # call the function recursively with k-1 as the argument\n        return reverse_Array_Upto_K(input, k-1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a copy of the input array\n    input_copy = input.copy()\n    # Reverse the array from the first element to the k-th element\n    input_copy[0:k] = input_copy[0:k][::-1]\n    # Reverse the array from the k-th element to the end of the array\n    input_copy[k:] = input_copy[k:][::-1]\n    # Return the reversed array\n    return input_copy"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) # get the length of the array\n    reverse_array = [] # create an empty list to store the reversed array\n\n    # loop through the array from 0 to k-1 and append each element to the reverse_array\n    for i in range(k):\n        reverse_array.append(input[i])\n\n    # loop through the array from k to n-1 and append each element to the reverse_array\n    for i in range(k, n):\n        reverse_array.append(input[i])\n\n    # return the reverse_array\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Initialize an empty list to store the reversed array\n    reversed_array = []\n    \n    # Iterate over the input array from the beginning to k-1\n    for i in range(k-1, -1, -1):\n        # Append the element at the current index to the reversed_array\n        reversed_array.append(input[i])\n    \n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    \n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to hold the key-value pairs from the dictionary\n    new_dict = {}\n    # Loop through the keys in the dictionary and add them to the new dictionary\n    for key in test_dict:\n        new_dict[key] = test_dict[key]\n    # Combine the tuple with the new dictionary using the `*` operator\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Loop through the tuple\n    for item in test_tup:\n        # Loop through the dictionary\n        for key, value in test_dict.items():\n            # Check if the item is a dictionary\n            if isinstance(item, dict):\n                # Check if the key already exists in the item\n                if key in item:\n                    # If it does, add the value to the existing item\n                    item[key] = value\n                # If the key doesn't exist, add the key-value pair to a new dictionary and add it to the item\n                else:\n                    item[key] = value\n            # If the item is not a dictionary, just add the key-value pair to the item\n            else:\n                item[key] = value\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    dict_list = list(test_dict.items())\n    # append the list of tuples to the tuple\n    test_tup += tuple(dict_list)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tuple = tuple(test_tup) + tuple(test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary to be added to the tuple\n    new_dict = {'key1': 'value1', 'key2': 'value2'}\n    # concatenate the two dictionaries\n    combined_dict = {**test_dict, **new_dict}\n    # convert the combined dictionary to a tuple\n    combined_tuple = tuple(combined_dict.items())\n    # return the combined tuple\n    return combined_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + [test_dict])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[float('-inf') for _ in range(N)] for _ in range(N)]\n\n    # Initialize top row\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n\n    # Initialize left column\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n\n    # Fill up the rest of the DP table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find maximum average\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, total_cost, visited_cells):\n        # Base case: reached bottom right cell\n        if i == N-1 and j == N-1:\n            if visited_cells!= N*(N-1):\n                return float('-inf')\n            else:\n                return total_cost/visited_cells\n\n        # Recursive case: move right or down and compute cost and visited cells\n        total_cost += cost[i][j]\n        visited_cells += 1\n        cost_right = dfs(i, j+1, total_cost, visited_cells)\n        cost_down = dfs(i+1, j, total_cost, visited_cells)\n        visited_cells -= 1\n\n        # Choose the maximum cost and return\n        return max(cost_right, cost_down)\n\n    # Initialize variables\n    N = len(cost)\n    total_cost = 0\n    visited_cells = 0\n    best_cost = dfs(0, 0, 0, 0)\n\n    # Find the maximum average path\n    for i in range(N):\n        for j in range(N):\n            total_cost = 0\n            visited_cells = 0\n            cost_left = dfs(i, j, total_cost, visited_cells)\n            cost_up = dfs(i-1, j, total_cost, visited_cells)\n            total_cost += cost_left + cost_up\n            visited_cells += 2\n            cost_right = dfs(i, j+1, total_cost, visited_cells)\n            cost_down = dfs(i+1, j, total_cost, visited_cells)\n            total_cost += cost_right + cost_down\n            visited_cells += 2\n            best_cost = max(best_cost, total_cost/visited_cells)\n\n    return best_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def find_path(matrix, m, n, i, j, visited):\n        if i == m - 1 and j == n - 1:\n            visited[i][j] = True\n            total_cost = 0\n            for k in range(m):\n                for l in range(n):\n                    if matrix[k][l] == 0:\n                        return 0\n                    elif visited[k][l]:\n                        total_cost += matrix[k][l]\n            return total_cost / (m * n)\n        visited[i][j] = True\n        max_cost = 0\n        if i < m - 1:\n            max_cost = max(max_cost, find_path(matrix, m, n, i + 1, j, visited))\n        if j < n - 1:\n            max_cost = max(max_cost, find_path(matrix, m, n, i, j + 1, visited))\n        return max_cost\n    \n    m, n = len(cost), len(cost[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    max_cost = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                return 0\n            elif not visited[i][j]:\n                max_cost = max(max_cost, find_path(matrix, m, n, i, j, visited))\n    return max_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Calculate the number of cells in the matrix\n    N = len(cost)\n    \n    # Initialize variables to store maximum average and the corresponding path\n    max_avg = float('-inf')\n    path = []\n    \n    # Traverse the matrix and check for paths with maximum average\n    for i in range(N):\n        for j in range(N):\n            # Check if current cell is a starting point of a path\n            if i == 0 and j == 0:\n                path = [(i, j)]\n                # Calculate the average of the starting point and update the maximum average\n                avg = cost[0][0]\n                if avg > max_avg:\n                    max_avg = avg\n            # Check if current cell is not a starting point of a path\n            else:\n                # Traverse the matrix to check for paths with current cell as a starting point\n                # and calculate the average of the current cell and update the maximum average\n                for k in range(N):\n                    for l in range(N):\n                        # Check if current cell can be reached from starting point by moving right or down\n                        if (i+k < N and j+l < N) or (i+k < N and j+l == N-1) or (i+k == N-1 and j+l < N):\n                            path.append((i+k, j+l))\n                            avg = sum(cost[i][j:j+k+1][l]) / (k+1)\n                            if avg > max_avg:\n                                max_avg = avg\n                            path.pop()\n    # Return the maximum average and the corresponding path\n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def helper(cost, row, col, visited, path_cost, path_sum):\n        if row == len(cost) - 1 and col == len(cost[0]) - 1:\n            return max(path_cost, path_sum)\n        \n        if row < len(cost) and col < len(cost[0]):\n            visited[(row, col)] = True\n        \n        if row < len(cost) and col < len(cost[0]) and cost[row][col] < cost[row][col + 1] and not visited[(row, col + 1)]:\n            path_cost += cost[row][col]\n            path_sum += cost[row][col]\n            new_row, new_col = row, col + 1\n        elif row < len(cost) and col < len(cost[0]) and cost[row][col] < cost[row + 1][col] and not visited[(row + 1, col)]:\n            path_cost += cost[row][col]\n            path_sum += cost[row][col]\n            new_row, new_col = row + 1, col\n        elif col < len(cost[0]) and cost[row][col] < cost[row][col + 1] and not visited[(row, col + 1)]:\n            path_cost += cost[row][col]\n            path_sum += cost[row][col]\n            new_row, new_col = row, col + 1\n        else:\n            new_row, new_col = None, None\n        \n        if new_row is not None:\n            return max(helper(cost, new_row, new_col, visited, path_cost, path_sum), helper(cost, new_row, col, visited, path_cost, path_sum))\n        \n        return max(path_cost, path_sum)\n\n    return helper(cost, 0, 0, set(), 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    total_cost = 0\n    current_path = []\n    visited = set()\n    \n    # Create all possible paths\n    for i in range(N):\n        for j in range(N):\n            if (i,j) not in visited:\n                current_path.append((i,j))\n                visited.add((i,j))\n                if i == N-1 and j == N-1:\n                    avg = total_cost / len(current_path)\n                    max_avg = max(max_avg, avg)\n                elif i == N-1:\n                    max_avg = max(max_avg, maxAverageOfPath(cost[i+1:N][j]))\n                elif j == N-1:\n                    max_avg = max(max_avg, maxAverageOfPath(cost[i][j+1:N]))\n                else:\n                    max_avg = max(max_avg, maxAverageOfPath(cost[i+1:N][j+1:N]) + max_avg)\n                visited.remove((i,j))\n                current_path.pop()\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    max_avg = 0.0\n    max_path = None\n    \n    # Iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            # Check if cell is already visited\n            if cost[i][j] == 0:\n                continue\n            \n            # Compute current path average\n            curr_avg = cost[i][j]\n            curr_cost = curr_avg\n            curr_count = 1\n            \n            # Compute all paths that lead to the current cell\n            for k in range(i+1, N):\n                if cost[k][j] == 0:\n                    break\n                curr_cost += cost[k][j]\n                curr_count += 1\n            \n            # Update max path average and its index if necessary\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n                max_path = (i, j, curr_cost, curr_count)\n    \n    # Return max path average and its index\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = float('-inf')\n    path = []\n    dp = [[float('-inf')] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + dp[i-1][j] + cost[i][j])\n            \n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                path = [[i, j]]\n                \n            while j > 0 and dp[i][j] > dp[i][j-1]:\n                dp[i][j] = dp[i][j-1]\n                j -= 1\n                \n            while i > 0 and dp[i][j] > dp[i-1][j]:\n                dp[i][j] = dp[i-1][j]\n                i -= 1\n                \n            path.append([i, j])\n            \n    return max_avg, path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize the sum of total cost and the count of visited cells to 0\n    total_cost = 0\n    count = 0\n    # Initialize the current cell's row and column indices and the maximum average to 0\n    row = 0\n    col = 0\n    max_avg = 0\n    # Loop through all the cells in the matrix\n    for i in range(n*n):\n        # If the current cell is not the bottom right cell\n        if row < n-1 or col < n-1:\n            # If the current cell is a right cell\n            if col == n-1:\n                # Compute the average of the current row\n                avg = sum(cost[row]) / n\n                # Update the maximum average if necessary\n                if avg > max_avg:\n                    max_avg = avg\n                # Move to the next row\n                row += 1\n            # If the current cell is a down cell\n            else:\n                # Compute the average of the current column\n                avg = sum(cost[j][col] for j in range(n)) / n\n                # Update the maximum average if necessary\n                if avg > max_avg:\n                    max_avg = avg\n                # Move to the next column\n                col += 1\n        # If the current cell is the bottom right cell\n        else:\n            # Compute the average of the current cell\n            avg = sum(cost[i]) / n\n            # Update the maximum average if necessary\n            if avg > max_avg:\n                max_avg = avg\n            # Increment the count of visited cells\n            count += 1\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Initialize the start and end point\n    start_x, start_y = 0, 0\n    end_x, end_y = N-1, N-1\n    \n    # Define the recursive function to find the maximum average of the path\n    def find_max_avg(visited, path):\n        # Base case: if we have reached the end point, compute the average and check if it is greater than the current maximum\n        if visited == N*N-1:\n            avg = 0\n            for i in range(len(path)):\n                avg += cost[path[i]][path[i+1]]\n            avg /= len(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path\n            return\n        \n        # Recursive case: explore all possible paths and update the maximum average and path if needed\n        for i in range(N):\n            # Check if we can move to the next cell in the current row\n            if (start_x+i, start_y) in visited or (start_x, start_y+i) in visited:\n                new_visited = visited.copy()\n                new_visited.add((start_x+i, start_y))\n                new_visited.add((start_x, start_y+i))\n                new_path = path.copy()\n                new_path.append((start_x+i, start_y))\n                new_path.append((start_x, start_y+i))\n                find_max_avg(new_visited, new_path)\n    \n    # Start the recursion\n    find_max_avg({(start_x, start_y), (end_x, end_y)}, [(start_x, start_y), (end_x, end_y)])\n    \n    # Return the maximum average of the path\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    return {name: student for name, (height, weight) in students.items() if height > h and weight > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Loop through the students dictionary\n    filtered_students = {}\n    for name, data in students.items():\n        # Extract the height and weight values\n        height, weight = data\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered dictionary\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # iterate through each element of the first list\n    count = 0\n    for i in range(len(nums1)):\n        # iterate through each element of the second list\n        for j in range(len(nums2)):\n            # check if the current elements are equal using the '==' operator\n            if nums1[i] == nums2[j]:\n                # increment the count if they are equal\n                count += 1\n                # exit the inner loop since we found a match\n                break\n        # exit the outer loop since we found a match\n        if count > 0:\n            break\n    # return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i] and i!= nums1.index(nums1[i]) and i!= nums2.index(nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize sum variable to 0\n    total = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # add the value of the current digit to the total\n        total += int(digit) ** power\n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum variable to 0\n    sum_digits = 0\n\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n\n    # Calculate the result by raising the sum_digits to the specified power\n    result = sum_digits ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += base % 10\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Check if base is an integer\n    if not isinstance(base, int):\n        raise TypeError(\"Base must be an integer\")\n    \n    # Check if power is an integer\n    if not isinstance(power, int):\n        raise TypeError(\"Power must be an integer\")\n    \n    # Check if base is greater than 0\n    if base <= 0:\n        raise ValueError(\"Base must be greater than 0\")\n    \n    # Calculate the sum of all digits of the base to the specified power\n    base_sum = sum(int(digit) ** power for digit in str(base))\n    \n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can split it into its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Calculate the sum of digits raised to the power and add it to the sum\n    sum += sum ** power\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    \n    # calculate the sum of digits raised to the power of the power\n    sum_of_digits = sum([int(digit) ** power for digit in base_str])\n    \n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    \n    # Loop through each digit in the base and add it to the digit_sum\n    while base > 0:\n        digit_sum += base % 10\n        base //= 10\n    \n    # Calculate the result by raising the base to the power and adding the digit_sum\n    result = 0\n    for _ in range(power):\n        result += digit_sum\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base = str(base)\n    for digit in base:\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Replace all the \" \" with \\s to match any whitespace character\n    text1 = re.sub(r'[^\\s]','', text1)\n    # Split the string by any whitespace character and remove the empty strings\n    quotations = [q.strip() for q in text1.split() if q.strip()]\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"' # Match any sequence of characters between double quotes\n    matches = re.findall(pattern, text1) # Find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # regex pattern to find quotation marks\n    matches = re.findall(pattern, text) # find all matches in the string\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'\"(?:[^\\\\\"]|\\\\.)*\"'\n    matches = re.findall(pattern, text1)\n    \n    # Remove the quotation marks from each match\n    matches = [match[1:-1] for match in matches]\n    \n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the string.\n    '''\n\n    # Find all the occurrences of quotation marks in the string\n    quotes = re.findall('\"[^\"]*\"', text1)\n\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n\n    # Iterate through each occurrence of quotation marks in the string\n    for quote in quotes:\n        # Remove the quotation marks from the quote\n        quote = quote.replace('\"', '')\n\n        # Split the quote by comma and space to get a list of values\n        values = quote.split(', ')\n\n        # Append each value to the extracted_values list\n        extracted_values.extend(values)\n\n    # Return the extracted_values list\n    return extracted_values"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # initialize the result tuple with the first element of the input tuple\n    result = (test_tup[0],)\n    # loop through the remaining elements of the input tuple\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the element after it and append the result to the result tuple\n        result = result + (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(multiplied_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0],) + (test_tup[i]*test_tup[i+1] for i in range(1, N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n\n    # Initialize variables to keep track of the product and the product index\n    product = 1\n    product_index = 0\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current product with the next number in the tuple\n        product = test_tup[i] * test_tup[i+1]\n        # Add the product to the result list\n        result_list.append(product)\n        # Move to the next product index\n        product_index += 1\n\n    # Return the final result list\n    return result_list"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple(t_i * test_tup[i+1] for i in range(N-1))\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1],)\n    for i in range(2, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N+1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+N],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns a new list [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools groupby function to group the consecutive duplicates\n    # of the list\n    grouped_nums = groupby(nums)\n    \n    # Use a list comprehension to create a new list without consecutive duplicates\n    new_list = [num for num, group in grouped_nums if not(num == next(group))]\n    \n    # Return the new list of unique consecutive duplicates\n    return new_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(x) for k, x in groupby(sorted(nums)) if not k]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by the elements and return the result\n    return sorted(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(sorted(nums)):\n        if len(list(g)) > 1:\n            yield from g"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for item in nums:\n        if item in result and len(result[-1]) + 1 == len(str(item)):\n            continue\n        result.append(str(item))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(enumerate(nums), lambda x: x[0] == x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by their consecutive duplicates\n    grouped = groupby(nums)\n    # iterate over the grouped list and remove duplicates\n    result = [x for _, x in grouped if not x[0]]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for num, group in groupby(sorted(nums)) if not group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates from a list of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list with consecutive duplicates removed.\n    \"\"\"\n    # Group the numbers by their indices and count the occurrences\n    grouped = groupby(enumerate(nums))\n    # Filter the groups based on consecutive duplicates\n    result = [num for _, group in grouped if len(list(group)) > 1]\n    # Convert the result to a list\n    return list(result)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*math.pi*r*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2)\n    s = s + (math.pi*r*h)/3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius and height.\n    '''\n    lateral_surface = 2 * r * h * math.tan(math.radians(60))\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2*math.pi*r*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3 * r**2 + h**2) / (2 * math.tan(math.pi/6))\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    lateral_area = math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|[-.,]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+',':',text)\n    text = re.sub(r',',':',text)\n    text = re.sub(r'\\.',':',text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use regex to replace all spaces, commas, or dots with a colon\n    return re.sub(r'[.!?,;:]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'\\s|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match\n    pattern = r'\\s|\\,|\\.'\n    # Replace the special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'([,\\.])')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern for space, comma, and dot\n    pattern = re.compile(r'[\\s,\\.]')\n    # replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if not A:\n        return -1  # Return -1 if the array is empty\n\n    # Initialize the first and last indices of the array\n    first = 0\n    last = len(A) - 1\n\n    # Initialize the index of the first occurrence to -1\n    index = -1\n\n    # Loop through the array until the first occurrence is found or the indices cross each other\n    while first <= last and index == -1:\n        mid = (first + last) // 2\n\n        # If the value at the middle index is equal to x, update the index and move to the left side of the array\n        if A[mid] == x:\n            index = mid\n            last = mid - 1\n        # If the value at the middle index is less than x, update the first index and move to the right side of the array\n        elif A[mid] < x:\n            first = mid + 1\n        # If the value at the middle index is greater than x, update the last index and move to the left side of the array\n        else:\n            last = mid - 1\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1 # continue searching to the left\n        elif A[mid] < x:\n            left = mid + 1 # search the right half\n        else:\n            right = mid - 1 # search the left half\n            \n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Use binary search to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # Found x, now check if it's the first occurrence\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Search for x in A using binary search algorithm\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i < len(A) and A[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize left and right indices to 0 and n-1 respectively\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the first occurrence index to -1\n    first_occurrence = -1\n\n    # Iterate through the array until the left index is greater than or equal to the right index\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the x, update first_occurrence and left to mid+1 and mid+1 respectively\n        if A[mid] == x:\n            first_occurrence = mid\n            left = mid + 1\n\n        # If the middle element is less than x, update left to mid+1\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than x, update right to mid-1\n        else:\n            right = mid - 1\n\n    # Return the first occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n\n    # Initialize the left and right pointers to the first and last elements of the array\n    left = 0\n    right = len(A) - 1\n\n    # Loop until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # Compute the middle index as the average of the left and right pointers\n        middle = (left + right) // 2\n\n        # If the middle element is equal to the target element, update the index and move the left pointer to the left\n        if A[middle] == x:\n            index = middle\n            left = middle + 1\n        # If the middle element is less than the target element, move the left pointer to the right\n        elif A[middle] < x:\n            left = middle + 1\n        # If the middle element is greater than the target element, move the right pointer to the left\n        else:\n            right = middle - 1\n\n    # Return the index of the first occurrence of the target element\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # check if the number to the left of mid is equal to x\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            # update right to mid-1\n            right = mid - 1\n        elif A[mid] > x:\n            # update right to mid-1\n            right = mid - 1\n        else:\n            # update left to mid+1\n            left = mid + 1\n    \n    return -1 # x was not found in the array"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function finds the sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0]*arr[1]\n    else:\n        max_sum = float('-inf')\n        for i in range(1, n):\n            # Calculate the sum of products of sublists of arr[0:i]\n            sub_sum = arr[i]*(arr[0:i].prod())\n            max_sum = max(max_sum, sub_sum)\n        return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    \"\"\"\n    n = len(arr)\n    result = 0\n    temp = 1\n    \n    for i in range(n):\n        temp *= arr[i]\n        result += temp\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_products = [0]*n\n    prefix_sum = [0]*n\n\n    for i in range(n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1 > 0:\n                sum_products[j] += prefix_sum[j]*prefix_sum[j-i+1]\n\n    return sum_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    \"\"\"\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            total_sum += prefix_sum[j] * prefix_sum[j] * arr[i - 1] * arr[j - 1]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = arr[0]\n    prefix_sum[1] = arr[0] + arr[1]\n\n    for i in range(2, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    prod_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod_sum += prefix_sum[j] * prefix_sum[i] * arr[i] * arr[j]\n\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1]*n # Initialize dp with 1 as base case\n    for i in range(n):\n        for j in range(i):\n            # Find the sum of products of subarray from index i to j\n            dp[i] += dp[j] * arr[i] * arr[j]\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    product = 1\n    product_sum = 0\n\n    for i in range(1, n + 1):\n        product *= prefix_sum[i] - prefix_sum[i - 1] * i\n        product_sum += product\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n\n    # Compute prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Initialize result to zero\n    result = 0\n\n    # Initialize left and right pointers\n    left = 0\n    right = n\n\n    # Find all possible sublists\n    while left < right:\n\n        # Calculate length of current sublist\n        curr_len = right - left + 1\n\n        # Calculate the sum of products of the current sublist\n        prod_sum = 1\n        for i in range(left, right + 1):\n            prod_sum *= prefix_sum[i] - prefix_sum[i - curr_len]\n\n        # Update result\n        result += prod_sum\n\n        # Move left pointer to the next position\n        left += 1\n\n        # Move right pointer to the next position\n        right += 1\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def helper(start, end, sub_prod):\n        if start == end:\n            return sub_prod\n        \n        sub_sum = 0\n        for i in range(start, end+1):\n            sub_sum += arr[i]\n            sub_prod *= sub_sum\n            \n        return helper(start+1, end, sub_prod)\n\n    n = len(arr)\n    prod = 1\n    return helper(0, n-1, prod)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n\n    # calculate the product of all elements in the list\n    for i in range(n):\n        prod *= arr[i]\n\n    # find the sum of products of all possible sublists\n    sub_prod = prod\n\n    # calculate the sum of products of all possible sublists of size k\n    for i in range(n - 1):\n        sub_prod *= arr[i]\n        sub_prod //= arr[i + 1]\n\n    return sub_prod\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # get the length of the number in bits\n    num_bits = len(bin(n)[2:])\n    \n    # get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = (n >> (num_bits - 1)) & 1\n    \n    # toggle all bits except the first and last ones\n    toggled_bits = n ^ ((first_bit + last_bit) << (num_bits - 2))\n    \n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result variable with the first two bits of the number\n    result = (n & 1) << 1\n    \n    # Toggle the bits of the rest of the number\n    for i in range(2, len(bin(n)[2:])):\n        result = result ^ (1 << (len(bin(n)[2:]) - i - 1))\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Use bitwise XOR to toggle all the bits except the first and last bits\n    first_last_bits = n & 0x55555555  # Get all the bits except the first and last bits\n    result = n ^ first_last_bits  # Toggle all the bits except the first and last bits\n    # Toggle the first and last bits\n    result = (result & 0xAAAAAAAA) | (n & 0xAAAAAAAA)\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the integer to a binary string\n    bin_str = bin(n)[2:]\n\n    # Find the index of the first and last bits\n    first_bit_index = bin_str.find('1')\n    last_bit_index = bin_str.rfind('1')\n\n    # If the first and last bits are not present, return the original number\n    if first_bit_index == -1 or last_bit_index == -1:\n        return n\n\n    # Toggle the middle bits\n    middle_bits = bin_str[first_bit_index+1:last_bit_index]\n    middle_bits = ''.join('0' if bit == '1' else '1' for bit in middle_bits)\n\n    # Convert the binary string to an integer\n    n_toggled = int(bin_str[:first_bit_index]+middle_bits+bin_str[last_bit_index+1:], 2)\n\n    return n_toggled"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Convert the integer into binary format\n    binary_num = bin(n)[2:]\n\n    # Reverse the binary number\n    binary_num_reverse = binary_num[::-1]\n\n    # Find the index of the first and last bits\n    first_bit_index = binary_num_reverse.index('1')\n    last_bit_index = len(binary_num_reverse) - binary_num_reverse[::-1].index('1') - 1\n\n    # Remove the first and last bits from the binary number\n    binary_num_without_first_last = binary_num_reverse[:first_bit_index] + binary_num_reverse[first_bit_index + 1:]\n\n    # Toggle the middle bits\n    binary_num_with_middle_bits = ''\n    for i in range(len(binary_num_without_first_last)):\n        if i == first_bit_index or i == last_bit_index:\n            binary_num_with_middle_bits += binary_num_without_first_last[i]\n        else:\n            binary_num_with_middle_bits += '1' if binary_num_without_first_last[i] == '0' else '0'\n\n    # Convert the binary number back into an integer\n    num_with_middle_bits = int(binary_num_with_middle_bits, 2)\n\n    return num_with_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in n\n    num_bits = bin(n).count('1')\n    \n    # Initialize two variables to store the first and last bits\n    first_bit = n & 1\n    last_bit = n >> num_bits - 1\n    \n    # Initialize a variable to store the toggled bits\n    toggled_bits = 0\n    \n    # Iterate through the remaining bits\n    for i in range(num_bits - 2):\n        # Toggle the i-th bit\n        toggled_bits <<= 1\n        if (n >> i) & 1:\n            toggled_bits |= 1\n            \n    # Combine the toggled bits with the first and last bits\n    n = (toggled_bits << 1) | first_bit\n    n = n | (last_bit << 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**31-1) # 31 because 2^31-1 has 31 1's\n\n    # XOR the first and last bits\n    toggled_bit = first_bit ^ last_bit\n\n    # XOR with the original number to toggle the middle bits\n    toggled_number = n ^ toggled_bit\n\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the sum and count variables\n    sum = 0\n    count = 0\n    \n    # loop through each bit of the number\n    for i in range(31, -1, -1):\n        # set the current bit\n        bit = (n >> i) & 1\n        \n        # add the current bit to the sum\n        sum += bit\n        \n        # increment the count\n        count += 1\n        \n        # toggle the current bit\n        if bit == 1:\n            n |= (1 << i)\n        else:\n            n &= ~(1 << i)\n            \n    # calculate the middle bit\n    middle_bit = sum // count\n    \n    # toggle the middle bit\n    if middle_bit == 1:\n        n |= (1 << 31)\n    else:\n        n &= ~(1 << 31)\n        \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert binary representation of n to an integer\n    n = int(n, 2)\n\n    # Find the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Initialize variables for first and last bits\n    first_bit = 1\n    last_bit = 1 << (length - 1)\n\n    # Create a mask for the first and last bits\n    first_mask = 1 << (length - 2)\n    last_mask = last_bit - 1\n\n    # Toggle the bits of n except the first and the last\n    n = (n & ~first_mask) | (n & ~last_mask)\n\n    # Convert the result back to binary representation\n    n = bin(n)[2:]\n\n    # Add the first and last bits back\n    n = first_bit + last_bit + n\n\n    # Convert the binary representation back to an integer\n    n = int(n, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    #mask for the first and last bit\n    mask_1 = 0x5555555555555555\n    mask_2 = 0xAAAAAAAAAAAAAAAA\n    #mask for all other bits\n    mask_3 = 0x3333333333333333\n    \n    #shift left n by one bit\n    n = n << 1\n    \n    #mask the first and last bit\n    n = n & mask_1\n    n = n & mask_2\n    \n    #shift the remaining bits to the left by one bit and xor with the first and last bits\n    n = n ^ (n >> 1)\n    \n    #shift the remaining bits to the left by one bit and xor with the first and last bits\n    n = n ^ (n >> 1)\n    \n    #mask the first and last bit\n    n = n & mask_1\n    n = n & mask_2\n    \n    #shift the remaining bits to the left by one bit and xor with the first and last bits\n    n = n ^ (n >> 1)\n    \n    #shift the remaining bits to the left by one bit and xor with the first and last bits\n    n = n ^ (n >> 1)\n    \n    #shift the remaining bits to the left by one bit and xor with the first and last bits\n    n = n ^ (n >> 1)\n    \n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index!= 0 and a[index-1]!= x:\n        return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index = 0\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return index\n    elif index == len(a):\n        return index\n    elif a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize variables\n    low, high = 0, len(a) - 1\n    # bisect returns the index where to insert the value\n    index = bisect.bisect_left(a, x)\n    # check if the value is already present in the list\n    if index!= len(a) and a[index] == x:\n        return index\n    # search for the left insertion point\n    while low <= high and index == len(a):\n        mid = (low + high) // 2\n        # check if the value is present in the left half of the list\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            index = mid\n    # return the index where the value should be inserted\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): A sorted list of integers.\n    x (int): An integer to be inserted in the list.\n\n    Returns:\n    int: The left insertion point for the specified value in the sorted list.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else -1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        print(\"Starting with a vowel\")\n    else:\n        print(\"Not starting with a vowel\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    This function takes a string as input and returns True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 1\n    count = 0\n    \n    for i in range(1, int(math.pow(10, n))):\n        if i % 9!= 0:\n            triangular_num += 1\n        else:\n            count += 1\n            if count == n:\n                return i\n            \n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        This function checks if a given integer n is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def triangular_number(n):\n        \"\"\"\n        This function returns the nth triangular number.\n        \"\"\"\n        return n * (n + 1) // 2\n\n    def is_power_of_two(n):\n        \"\"\"\n        This function checks if a given integer n is a power of two or not.\n        \"\"\"\n        return n & (n - 1) == 0\n\n    def next_power_of_two(n):\n        \"\"\"\n        This function returns the next power of two of a given integer n.\n        \"\"\"\n        return 1 << (n - 1).bit_length()\n\n    def find_index(n):\n        \"\"\"\n        This function implements the binary search algorithm to find the index of the smallest triangular number with n digits.\n        \"\"\"\n        if n <= 2:\n            return 1\n\n        max_val = 1 << n - 1\n        min_val = max_val // 2\n\n        while min_val <= max_val:\n            mid = min_val + (max_val - min_val) // 2\n\n            if is_prime(mid) and is_power_of_two(mid):\n                max_val = mid - 1\n                return min_val * (min_val + 1) // 2 + 1\n\n            if is_prime(mid) and is_power_of_two(mid + 1):\n                min_val = mid + 1\n                return min_val * (min_val + 1) // 2 + 1\n\n            if is_prime(mid + 1) and is_power_of_two(mid):\n                max_val = mid\n                return min_val * (min_val + 1) // 2 + 1\n\n            min_val = mid + 1\n\n        return triangular_number(n)\n\n    return find_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    result = 0\n    max_triangular = int(10**n)\n    for i in range(1, max_triangular+1):\n        result = i\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            return result\n    return \"There is no triangular number with n digits.\""
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    def triangular_number(n):\n        \"\"\"\n        Generate a list of n triangular numbers.\n        \"\"\"\n        nums = []\n        for i in range(1, n+1):\n            nums.append(i*math.factorial(n-i+1))\n        return nums\n\n    # Calculate the sum of the first n triangular numbers\n    tri_nums = triangular_number(n)\n    tri_sum = sum(tri_nums)\n\n    # Find the index of the first triangular number that is greater than or equal to tri_sum\n    for i in range(n):\n        if tri_nums[i] >= tri_sum:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = [0] * (n + 1)\n    triangular_num[0] = 1\n    triangular_num[1] = 3\n\n    for i in range(2, n + 1):\n        for j in range(i):\n            triangular_num[i] += triangular_num[j]\n        triangular_num[i] *= (i + 1)\n        triangular_num[i] //= i + 1\n\n    return triangular_num.index(min(triangular_num))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # Calculate the number of digits in the given integer n.\n    num_digits = len(str(n))\n\n    # Calculate the maximum number of digits that can be in a triangular number with n digits.\n    max_digits = int(math.log10(n) + 1)\n\n    # Initialize an empty list to store the results.\n    result = []\n\n    # Iterate from the maximum number of digits to 1, and for each digit, calculate the number of digits in the smallest triangular number with that digit and the digit itself.\n    for digit in range(max_digits, 0, -1):\n        for i in range(10):\n            num_triangular_digit = int(str(i) + str(digit) + str(i))\n            if num_triangular_digit <= n:\n                result.append(num_triangular_digit)\n\n    # Sort the list in descending order and return the index of the smallest triangular number with n digits.\n    result.sort(reverse=True)\n    return result.index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the given number\n    num_digits = len(str(n))\n\n    # Initialize a variable to keep track of the smallest triangular number\n    smallest = 0 \n\n    # Initialize a variable to keep track of the smallest triangular number's index\n    smallest_index = 0 \n\n    # Loop through all possible triangular numbers with n digits\n    for i in range(10**(n-1), 10**(n), -1): \n\n        # Check if the triangular number is smaller than the current smallest triangular number\n        if i < smallest: \n            # If the triangular number is smaller, update the smallest triangular number and its index\n            smallest = i\n            smallest_index = i - 1\n\n        # Check if the triangular number is smaller than the current smallest triangular number with n-1 digits\n        elif i < smallest // 10**(n-1): \n            # If the triangular number is smaller, update the smallest triangular number and its index\n            smallest = i\n            smallest_index = i - 1 - smallest // 10**(n-1)\n\n    return smallest_index + 1 \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    triangular_numbers = [] \n    for i in range(n): \n        triangular_numbers.append(math.comb(5*i+1, i)) \n    index = triangular_numbers.index(min(triangular_numbers)) \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Generate all triangular numbers up to n digits\n    triangular_numbers = [1]\n    while len(triangular_numbers) < 10**n:\n        triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2])\n    \n    # Sort the list of triangular numbers\n    triangular_numbers.sort()\n    \n    # Find the index of the smallest number\n    index = triangular_numbers.index(1)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    # initialize index to 1\n    index = 1\n\n    # calculate the first triangular number\n    triangular_number = 1\n\n    # while the triangular number has n digits\n    while len(str(triangular_number)) < n:\n        # increment the index and calculate the next triangular number\n        index += 1\n        triangular_number = index * (index + 1) // 2\n\n    # return the index\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n\n    # iterate through the tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create a dictionary with initial values\n    my_dict = {}\n    \n    # Loop through the tuple elements\n    for i in range(len(test_tup)):\n        # If the current element is a tuple, recursively call the function\n        if isinstance(test_tup[i], tuple):\n            # Get the keys and values from the current tuple\n            tup_keys = test_tup[i][0]\n            tup_vals = test_tup[i][1]\n            # Recursively convert the tuples to a dictionary\n            my_dict.update(tuple_to_dict(tup_vals))\n            # Add the keys to the dictionary\n            for key in tup_keys:\n                # Check if the key already exists in the dictionary\n                if key in my_dict:\n                    # If it does, append the value to the list of values\n                    my_dict[key].append(tup_vals)\n                else:\n                    # If it doesn't, add the key and value to the dictionary\n                    my_dict[key] = [tup_vals]\n        else:\n            # If the current element is a regular element, add it to the dictionary as a key-value pair\n            my_dict[i] = test_tup[i]\n    \n    # Return the final dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # check if the current element is a tuple\n        if isinstance(test_tup[i], tuple):\n            # if it is, loop through the inner tuple and add its elements as key-value pairs\n            for j in range(len(test_tup[i])):\n                my_dict[test_tup[i][j]] = test_tup[i][j+1]\n        else:\n            # if it isn't, add it as a key-value pair\n            my_dict[i] = test_tup[i]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary\n    result = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        result[i] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        return None\n    \n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_list = []\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_list.append((key,value))\n    return dict(dict_list)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        test_tup = (test_tup[0],) + test_tup[1:]\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    # Use two nested loops to iterate over each element in the tuple\n    for i in range(0, len(test_tup), 2):\n        # Use the first element as the key and the second element as the value\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_tup = {}\n    for i in range(0, len(test_tup), 2):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Get the length of the tuple\n    length = len(test_tup)\n    # Loop through the tuple and add adjacent elements as key-value pairs\n    for i in range(length - 1):\n        result_dict[test_tup[i]] = test_tup[i + 1]\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # get first character of the string\n    first = s[0]\n    # loop through the rest of the string\n    for i in range(1, len(s)):\n        # if the current character is not same as the first character, then return False\n        if s[i]!= first:\n            return False\n    # if all the characters are same, return True\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        print(\"All characters are same.\")\n    else:\n        print(\"Not all characters are same.\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # To check all the characters are same or not\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # convert string to list\n    s = list(s)\n\n    # get first character of list\n    first_char = s[0]\n\n    # loop through the rest of the list\n    for char in s[1:]:\n\n        # check if all characters are same\n        if char!= first_char:\n            return False\n\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, else False.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to list of characters\n    lst = list(s)\n    # get the first character of the list\n    first_char = lst[0]\n    # check if all the characters are the same\n    for char in lst:\n        if char!= first_char:\n            return False\n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    s = list(s)\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Iterate over the list of characters\n    for i in range(1, len(s)):\n        # Check if the current character is the same as the first character\n        if s[i]!= first_char:\n            # If the current character is not the same, return False\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to list to make it iterable\n    s = list(s)\n    # Check if all characters in the list are same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    s = (1 + math.sqrt(5)) / 2\n    c = math.sqrt(2) / 2\n    return (a * s * c)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (s ** 2 + side ** 2 + side ** 2 + side ** 2) / 6\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) ** 0.5\n    area = (s * (s - side) * (s - (side * math.sin(math.pi / 3)))) ** 0.5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    # Define the formula for area of tetrahedron\n    area = (side ** 2) * (3 * side + math.sqrt(12 * side ** 2 - 24)) / 6\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2) ** (1/2)\n    area = (1/6) * s * (side * (1 - s)) * (side * (1 - s)) * (side * (1 - s))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2 * (1 + math.cos(math.pi/6))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    s = (a**2 + (1/3)*a**3)**0.5\n    return (4/3)*math.pi*s**2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # rotate the list n-m times\n    for i in range(n-m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # m is the number of items to be rotated to the right\n    # if m > n, then no rotation is required\n    if m > n:\n        return list\n    # rotate n-m items to the left and then append m items to the right\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:n-m], list[n-m:n] = list[n-m:n], list[0:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m] = list[n-m:n] + list[0:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    # Calculate the length of the list\n    n = len(list)\n    \n    # Check if the number of items to rotate is greater than the length of the list\n    if m > n:\n        # If yes, return the original list\n        return list\n    \n    # If the number of items to rotate is less than or equal to the length of the list, then we need to do the rotation\n    # First, we need to shift the list to the right by m items\n    # We will use the shift function from the list module\n    list = list[m:] + list[:m]\n    \n    # Now, we need to reverse the first m items and the last n-m items of the list\n    # We will use the reverse function from the list module\n    list = list[::-1]\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m >= n:\n        return list\n    else:\n        for i in range(m, n):\n            list[i-m] = list[i]\n        for i in range(n-m, m):\n            list[i] = None\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and the number of items to be rotated to the right and rotates the list by the specified number of items to the right.\n    \"\"\"\n    # Using slicing to rotate the list by n items\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # If m is greater than length of the list, return the list as it is\n    if m > len(list):\n        return list\n\n    # Calculate the number of rotations to be made\n    n = len(list)\n    rotations = m // n\n    remainders = m % n\n\n    # Initialize the result list with the first n elements of the original list\n    result = list[:n]\n\n    # Append the last m-n elements of the original list to the result list\n    result += list[-remainders:]\n\n    # Append the first n-m elements of the original list to the result list\n    result += list[:-remainders]\n\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    for i in range(m % n):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by every digit in a number\n    is_divisible_by_digits = lambda num: all(digit in str(num) for digit in str(num))\n\n    # Iterate through the range and check if each number is divisible by every digit in it\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return lambda x: all(digit in str(x) for digit in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = list(map(int, str(startnum)))\n    result = []\n\n    for num in range(startnum, endnum+1):\n        digit_count = sum(1 for digit in str(num) if digit in digits)\n        if digit_count == len(digits):\n            result.append(num)\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(i) % int(d) == 0 for i in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_list = list(map(int, str(startnum)))\n    return list(filter(lambda x: all(digit in str(x) for digit in digit_list), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    return [num for num in range(startnum, endnum+1) if all(digit % num == 0 for digit in digits)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        digits = []\n        for i in str(num):\n            digits.append(int(i))\n        return all(num % digit == 0 for digit in digits)\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is within the valid range (0 to 360 degrees)\n    if a <= 0 or a > 360:\n        return None\n\n    # Calculate the area of the sector using the formula A = pi * r^2 * sin(a/180*pi)\n    A = math.pi * r ** 2 * math.sin(a / 180 * math.pi)\n\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees\")\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = math.pi * r**2\n        return area\n    else:\n        return None"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common subsequences of lengths 1 to 3\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill d[][] in bottom up manner.\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Return the length of longest common subsequence of lengths 1 to 3\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Create a function to find the longest common subsequence for two strings\n    def lcs_of_two_strings(A, B):\n        m = len(A)\n        n = len(B)\n        L = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif A[i - 1] == B[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n        return L[m][n]\n\n    # Create a function to find the longest common subsequence for three strings\n    def lcs_of_three_strings(A, B, C):\n        m = len(A)\n        n = len(B)\n        o = len(C)\n        L = [[[0] * (o + 1) for _ in range(m + 1)] for _ in range(n + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(o + 1):\n                    if i == 0 or j == 0 or k == 0:\n                        L[i][j][k] = 0\n                    elif A[i - 1] == B[j - 1] and A[i - 1] == C[k - 1]:\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                    else:\n                        L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n        return L[m][n][o]\n\n    # Calculate the length of each string\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Find the length of the LCS for two strings\n    L = lcs_of_two_strings(X, Y)\n\n    # Find the length of the LCS for three strings\n    M = lcs_of_two_strings(Y, Z)\n    N = lcs_of_two_strings(X, Z)\n    O = lcs_of_three_strings(X, Y, Z)\n\n    # Find the LCS\n    LCS = ''\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            LCS = X[i - 1] + LCS\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n        elif X[i - 1] == Z[k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Function to find the length of the longest common subsequence of three strings\n    def longest_common_subsequence(X, Y, Z):\n        n = len(X)\n        m = len(Y)\n        p = [[0] * (m+1) for i in range(n+1)]\n\n        # Filling up the table\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if X[i-1] == Y[j-1]:\n                    p[i][j] = p[i-1][j-1] + 1\n                else:\n                    p[i][j] = max(p[i-1][j], p[i][j-1])\n\n        # Returning the length of the longest common subsequence\n        return p[n][m]\n\n    # Finding the length of the longest common subsequence for each string\n    LCS_X = longest_common_subsequence(X, Y, Z)\n    LCS_Y = longest_common_subsequence(Y, X, Z)\n    LCS_Z = longest_common_subsequence(Z, X, Y)\n\n    # Returning the length of the longest common subsequence for the three strings\n    return max(LCS_X, LCS_Y, LCS_Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3D table to store the lengths of LCS for all possible prefixes of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for _ in range(o + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j][k] = L[i - 1][j][k]\n                elif X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i][j - 1][k - 1]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # The last element in the last row is the LCS for all prefixes\n    lcs = L[m][n][o]\n\n    # Convert the LCS to a string and return it\n    lcs_str = ''\n    i, j, k = m, n, o\n    while lcs > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs_str = X[i - 1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n            j -= 1\n        elif X[i - 1] == Z[k - 1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    return lcs_str[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common subsequences of three\n    # strings. Initialize all entries as 0\n    L = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    # Fill in the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the lengths of longest common subsequences of three strings\n    print(\"Length of LCS of X: \", L[m][o])\n    print(\"Length of LCS of Y: \", L[m][o])\n    print(\"Length of LCS of Z: \", L[m][o])\n\n    # Return the length of the LCS of three strings\n    return L[m][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common subsequence \n    # for all prefixes of X, Y and Z.\n    L = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill the table in bottom up manner.\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] > L[i][j-1][k]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif L[i][j-1][k] > L[i][j][k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = L[i][j][k-1]\n\n    # Initialize variables to store the lcs of X, Y and Z.\n    i = m\n    j = n\n    k = o\n\n    # Print the lcs one by one.\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the lcs and return it.\n    return lcs[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    # fill the matrix in bottom up fashion \n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # the length of the LCS is stored in p[n][m] \n    lcs_length = p[n][m] \n\n    # the LCS is stored in lcs string \n    lcs = '' \n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # return the LCS \n    return lcs_length, lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    # defining a function to find the length of the longest common subsequence of three strings\n    def lcs_length(X, Y, Z): \n        m, n, p = len(X), len(Y), len(Z) \n  \n        # creating a 3D table to store the length of longest common subsequence for all prefixes of X, Y and Z \n        table = [[[0 for j in range(p+1)] for k in range(m+1)] for l in range(n+1)] \n  \n        # initializing table[0][0][0] as 0, as we are considering an empty string as a valid subsequence \n        table[0][0][0] = 0 \n  \n        # filling the table using dynamic programming approach \n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                for k in range(1, p+1): \n                    if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                        table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                        # checking if the length of the subsequence is greater than or equal to the length of the longest common subsequence of two strings \n                        if table[i][j][k] >= table[i-1][j][k] and table[i][j][k] >= table[i][j-1][k]: \n                            table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k]) \n                    else: \n                        table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1]) \n\n        # returning the length of the longest common subsequence \n        return table[m][n][p] \n  \n    # finding the length of the longest common subsequence of X, Y and Z \n    L = lcs_length(X, Y, Z) \n  \n    # creating a list to store the lcs \n    lcs = [] \n  \n    # moving towards the end of the longest common subsequence and appending the characters to the lcs list \n    i, j, k = m, n, p \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif table[i-1][j][k] == table[i-1][j][k-1]: \n            i -= 1 \n        elif table[i][j-1][k] == table[i][j-1][k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n  \n    # returning the lcs as a string \n    return ''.join(lcs[::-1]) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize empty matrix to store lengths of longest common subsequence for all three strings\n    L = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill in the matrix using dynamic programming\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Initialize an empty list to store the lcs for each string\n    lcs = []\n\n    # Fill in the lcs list using backtracking\n    i = len(X) \n    j = len(Y) \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the lcs list and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Step 1: Calculate the length of the three sequences\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    \n    # Step 2: Create a 3D table to store the length of LCS for all possible lengths of subsequences\n    table = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)]\n    \n    # Step 3: Fill in the table in bottom up manner using dynamic programming approach\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j][k]\n                elif Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i][j-1][k]\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    \n    # Step 4: Find the length of the longest common subsequence\n    lcs_length = table[n][m][o]\n    \n    # Step 5: Extract the longest common subsequence from the table\n    lcs = \"\"\n    i = n\n    j = m\n    k = o\n    while lcs_length > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n            lcs_length -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n            lcs_length -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n            k -= 1\n            lcs_length -= 1\n        else:\n            k -= 1\n            lcs_length -= 1\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Remove any non-alphanumeric characters from the string\n    str1 = re.sub(r'\\W+','', str1)\n\n    # Split the string into words\n    words = str1.split()\n\n    # Initialize an empty list to store the capitalized words\n    capitalized_words = []\n\n    # Iterate over the words and capitalize the first letter of each word\n    for word in words:\n        first_letter = word[0]\n        capitalized_word = first_letter.upper() + word[1:]\n        capitalized_words.append(capitalized_word)\n\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all the words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces and return the modified string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression pattern to match words with capital letters at the beginning\n    pattern = re.compile(r'([A-Z][a-z]+)')\n\n    # Iterate over each match of the pattern in the input string\n    for match in pattern.finditer(str1):\n        # Extract the matched text and capitalize the first letter of the text\n        text = match.group()\n        capitalized = text[0].upper() + text[1:]\n\n        # Replace the matched text with the capitalized text in the input string\n        str1 = str1.replace(text, capitalized, 1)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression to match capital words\n    pattern = r'(?<=[a-z])[A-Z]'\n    # use the re.sub() method to replace the matched words with a space\n    str2 = re.sub(pattern,'', str1)\n    # return the modified string\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the words and replace capital letters with spaces\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] ='' + word[0].lower() + word[1:]\n        else:\n            words[i] = word\n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # split the string into words\n    words = str1.split()\n    # loop through the words\n    for i in range(len(words)):\n        # check if the current word starts with a capital letter\n        if words[i][0].isupper():\n            # check if the next word starts with the same capital letter\n            if i + 1 < len(words) and words[i+1][0].isupper():\n                # insert a space between the words\n                words[i] = words[i] + \" \" + words[i+1]\n                # remove the next word\n                words.pop(i+1)\n                # decrement the loop counter\n                i -= 1\n    # join the words with spaces and return the result\n    return \" \".join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w'\n    result = re.sub(pattern, r'\\1 ', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to match capital letters followed by any non-capital letters\n    pattern = re.compile(r'(?<=[A-Z])[a-z]+')\n    # split the string into words and loop through them\n    words = str1.split()\n    for i in range(len(words)):\n        # if the first letter of the word is capital, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # join the words back into a string\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Check if each word is starting with capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper() and i!= 0:\n            words[i] ='' + words[i]\n    \n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    words = re.findall(pattern, str1)\n    result = ''\n    for word in words:\n        result +='' + word\n    return result.strip()"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num_list.append(float(num_str))\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str = sorted([int(i) for i in nums_str if i.isdigit()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Convert all numbers in the list to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    # Return the sorted list\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: tuple(map(int, x.split('.'))))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \"\"\"\n    nums_list = [int(i) for i in nums_str]\n    nums_list.sort()\n    return [str(x) for x in nums_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + test_tup\n\n    # Print the resulting list\n    print(combined_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If array has only one element, it is a min heap\n    if i == len(arr) - 1:\n        return True\n    \n    # If array has more than two elements, compare the root element with its children\n    if arr[i] > arr[2*i+1] or arr[i] > arr[2*i+2]:\n        return False\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Call the helper function for the root element\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef is_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap, otherwise, it returns False.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\n    Algorithm:\n    - Initialize two variables, min and i, where i is the index of the first element of the array\n    - Traverse the array from i+1 to the end and check if the current element is less than or equal to the min element. If not, swap the elements and update min.\n    - If the current element is greater than min, then the array does not represent a min heap.\n    '''\n\n    if i >= len(arr) // 2:\n        return True\n    else:\n        min = arr[0]\n        for j in range(i+1, len(arr)):\n            if arr[j] <= min:\n                min = arr[j]\n                i = j\n        if i == 0:\n            return True\n        else:\n            arr[0], arr[i] = arr[i], arr[0]\n            return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] >= arr[parent]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Given a sorted array, check if it represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    else:\n        return True\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i >= len(arr):\n        return True\n    \n    # check if root element is greater than left child or right child\n    if arr[i] > min(arr[2*i+1], arr[2*i+2]):\n        return False\n    \n    # recursively call the function for both left and right children\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check if the current node is greater than its parent node\n    if i > 0 and arr[i] < arr[i//2]:\n        # if not, return False\n        return False\n    else:\n        # recursively check if the left and right children are min heaps\n        return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        # Check if the root node is the smallest element in the heap\n        return arr[0] == min(arr)\n    else:\n        # Recursively check the left and right child of the root node\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < len(arr) and arr[left_child] < arr[i]:\n            return False\n        if right_child < len(arr) and arr[right_child] < arr[i]:\n            return False\n        # Recursively check the parent node\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array is a valid binary heap\n    if not (isinstance(arr, list) and all(isinstance(x, (int, float)) for x in arr)):\n        return False\n    # Check if the array represents a min heap\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function calculates the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num((n + 1) // 2)\n    else:\n        return jacobsthal_num((n - 1) // 2) * 3\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first two terms of the sequence\n    jacobsthal = [0, 1]\n    # Loop through the remaining terms\n    for i in range(2, n+1):\n        # Compute the next term of the sequence using the formula:\n        # jacobsthal[i] = jacobsthal[i-1] + 2*jacobsthal[i-2]\n        jacobsthal.append(jacobsthal[i-1] + 2*jacobsthal[i-2])\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    return (2**n - 1) // (3 - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 0:\n        print(\"Invalid input.\")\n        return None\n    if n == 0 or n == 1:\n        return n\n    jacobsthal_list = [0, 1]\n    for i in range(2, n):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        j += 1\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_list = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal_num_list.append(jacobsthal_num_list[i-1] + jacobsthal_num_list[i-2])\n        return jacobsthal_num_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_numbers = [0, 1]  # initialize with first two jacobsthal numbers\n    for i in range(2, n):\n        jacob_numbers.append(jacob_numbers[i-1] + jacob_numbers[i-2])  # calculate next jacobsthal number\n    return jacob_numbers[n-1]  # return nth jacobsthal number"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) * (3 * jacobsthal_num(n//2) + 2)\n    else:\n        return jacobsthal_num(n//2) * (2 * jacobsthal_num(n//2) + 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        j = 0\n        l = 1\n        while j <= n:\n            l += l - 1\n            j += 1\n        return l"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum k records\n    min_k_records = []\n\n    # Iterate over the sorted list of tuples\n    for i in range(K):\n        # If the current tuple is the minimum k record, append it to the list\n        if i < len(test_list) - K + 1 and min_k_records == []:\n            min_k_records.append(test_list[i])\n        # If the current tuple is not the minimum k record and is greater than or equal to the minimum k record, update the minimum k record list\n        elif i < len(test_list) - K + 1 and test_list[i][1] >= min_k_records[0][1]:\n            min_k_records = [test_list[i]]\n        # If the current tuple is not the minimum k record and is less than the minimum k record, update the minimum k record list\n        elif i >= len(test_list) - K + 1:\n            min_k_records = []\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list of tuples based on first element in the tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # create an empty dictionary to store the minimum k records\n    min_dict = {}\n\n    # traverse the sorted list and keep track of the number of unique values\n    # encountered so far\n    unique_count = 0\n\n    # iterate over the sorted list\n    for elem in test_list:\n        # check if the current element is already in the dictionary\n        if elem[0] in min_dict:\n            # if yes, increment its count by 1\n            min_dict[elem[0]] += 1\n\n            # if the count is equal to K, store the current element as the new minimum\n            if min_dict[elem[0]] == K:\n                min_dict[elem[0]] = elem\n\n            # if the count is less than K, update the current minimum to the current element\n            elif min_dict[elem[0]] < K:\n                min_dict[elem[0]] = elem\n\n        # if the current element is not in the dictionary, add it with a count of 1\n        else:\n            min_dict[elem[0]] = 1\n\n        # if the count of unique values is equal to K, break the loop\n        if unique_count == K:\n            break\n\n        # if the count of unique values is less than K, increment the count\n        else:\n            unique_count += 1\n\n    # create a list of tuples containing the minimum k records\n    min_list = [(key, min_dict[key]) for key in min_dict if min_dict[key] == K]\n\n    # sort the list of tuples based on the second element in the tuple\n    min_list.sort(key=lambda x: x[1])\n\n    # return the minimum k records as a list of tuples\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples based on the second element (which is the score)\n    test_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initialize variables to store the minimum k records and their scores\n    min_k_list = []\n    current_score = test_list[0][1]\n    \n    # Iterate through the sorted list of tuples\n    for i in range(1, len(test_list)):\n        # If we have found minimum k records, break\n        if len(min_k_list) == K:\n            break\n        \n        # If the current score is lower than the minimum score found so far, update the minimum score and add the record to the list of minimum k records\n        if test_list[i][1] < current_score:\n            current_score = test_list[i][1]\n            min_k_list = [test_list[i]]\n        # If the current score is equal to the minimum score found so far, add the record to the list of minimum k records\n        elif test_list[i][1] == current_score:\n            min_k_list.append(test_list[i])\n    \n    # Return the list of minimum k records\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[0:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the minimum value of each key in the tuple list\n    min_dict = {}\n\n    # Iterate through the tuple list and update the minimum value of each key in the dictionary\n    for i in range(len(test_list)):\n        if i < K:\n            min_dict[i] = test_list[i]\n        else:\n            min_dict[i % K] = min(min_dict[i % K], test_list[i])\n\n    # Return the minimum value of each key in the dictionary\n    return min_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Initialize variables to store the minimum and current minimum count\n    min_count = test_list[0][0]\n    min_list = []\n\n    # Loop through the sorted list and update the minimum count and minimum list\n    for i in range(K):\n        if i < len(test_list):\n            current_count = test_list[i][0]\n            if current_count < min_count:\n                min_count = current_count\n                min_list = []\n            elif current_count == min_count:\n                min_list.append(test_list[i])\n        else:\n            break\n\n    # Return the minimum list\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # sorting the list of tuples based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # initializing the minimum k count and the minimum k count index to infinity\n    min_k_count = float('inf')\n    min_k_count_index = 0\n\n    # traversing the sorted list of tuples\n    for i, tuple in enumerate(test_list):\n        # incrementing the minimum k count if the count is less than K and the current count is less than the minimum k count\n        if i < K and tuple[0] < min_k_count:\n            min_k_count = tuple[0]\n            min_k_count_index = i\n\n        # incrementing the minimum k count if the count is equal to K and the current count is less than the minimum k count\n        elif i == K and tuple[0] < min_k_count:\n            min_k_count = tuple[0]\n            min_k_count_index = i\n\n    # returning the minimum k count and the index of the minimum k count\n    return min_k_count, min_k_count_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize minimum k value and minimum k index\n    min_k_value = test_list[0][1]\n    min_k_index = 0\n    \n    # Iterate through the list\n    for i in range(1, len(test_list)):\n        # If the current element's value is less than the minimum k value, update both the minimum k value and its index\n        if test_list[i][1] < min_k_value:\n            min_k_value = test_list[i][1]\n            min_k_index = i\n    \n    # Return the minimum k value and its index\n    return min_k_value, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Initialize minimum count as infinite\n    min_count = float('inf')\n    # Initialize a list to store counts of each record\n    count_list = []\n    # Iterate through the test list\n    for record in test_list:\n        # Check if the count of the record is less than the minimum count\n        if count_list.count(record) < min_count:\n            # Update minimum count if the count of the record is less than the current minimum count\n            min_count = count_list.count(record)\n            # Initialize a list to store the records with the minimum count\n            min_records = []\n        # If the count of the record is equal to the minimum count, add it to the list of min_records\n        if count_list.count(record) == min_count:\n            min_records.append(record)\n        # Increment the count of the record\n        count_list.append(record)\n    # Check if the length of min_records is less than K, return empty list if it is\n    if len(min_records) < K:\n        return []\n    # Return the first K records from min_records\n    return min_records[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize two variables to store minimum and maximum values\n    min_val = test_list[0][1]\n    max_val = test_list[-1][1]\n\n    # Iterate over the tuple list to find the minimum and maximum values\n    for i in range(1, len(test_list) - K + 1):\n        # Update minimum and maximum values\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n        if test_list[i + K - 1][1] > max_val:\n            max_val = test_list[i + K - 1][1]\n\n    # Return the minimum and maximum values\n    return min_val, max_val"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n\n    # iterate through each element in l1 and l2 and check if they are present in both l1 and l2\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    # iterate through each element in l2 and l3 and check if they are present in both l2 and l3\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n\n    # iterate through each element in l1 and l3 and check if they are present in both l1 and l3\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a dictionary to store the counts of each element in each list\n    counts1 = {}\n    counts2 = {}\n    counts3 = {}\n    for i in range(len(l1)):\n        counts1[l1[i]] = counts1.get(l1[i], 0) + 1\n        counts2[l2[i]] = counts2.get(l2[i], 0) + 1\n        counts3[l3[i]] = counts3.get(l3[i], 0) + 1\n\n    # Find the common elements by iterating over the keys in each dictionary and checking if the counts of the key are equal in all three dictionaries\n    common_elements = []\n    for key in counts1.keys():\n        if counts1[key] == counts2[key] == counts3[key]:\n            common_elements.append(key)\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store common elements\n    common_elements = []\n\n    # loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # check if the element at index i is present in both l1 and l2\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, add it to the common_elements list\n            common_elements.append(l1[i])\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find common elements from three lists.\n    \"\"\"\n    # Create a set to store the unique elements from l1\n    unique_l1 = set(l1)\n    # Create a set to store the unique elements from l2\n    unique_l2 = set(l2)\n    # Create a set to store the unique elements from l3\n    unique_l3 = set(l3)\n    # Create a set to store the common elements\n    common = unique_l1 & unique_l2 & unique_l3\n    # Convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate over each index of l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at the current index is in l1, l2, and l3\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        second_smallest = max(numbers)\n        for num in numbers:\n            if num!= smallest:\n                if num < second_smallest:\n                    second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # Sort the list in ascending order\n    return numbers[1] # Return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # create a dictionary to store the count of each number in the list\n    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # sort the count dictionary by the values in descending order\n    sorted_count = dict(sorted(count.items(), key=lambda x: x[1], reverse=True))\n    \n    # return the second smallest number\n    if len(sorted_count) < 2:\n        return None\n    else:\n        return sorted_count.keys()[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    if len(sorted_numbers) < 2:\n        return None\n    return sorted_numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        min_num = float('inf')\n        for num in numbers:\n            if num < min_num:\n                min_num = num\n        return min_num"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b*){0,1}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b)'\n    return re.search(pattern, text)\n\ntext = \"ababab\"\nresult = text_match_zero_one(text)\n\nif result:\n    print(\"Match found\")\nelse:\n    print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<![ab])(a)(b|)*(?![ab])'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a(b|){0,}'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Loop through each string in the list\n    for string in test_list:\n        # Reverse the string and count the number of occurrences\n        rev_string = string[::-1]\n        if rev_string not in count_dict:\n            count_dict[rev_string] = 1\n        else:\n            count_dict[rev_string] += 1\n    \n    # Return the count of reverse pairs\n    return len(count_dict)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    reverse_dict = {}\n    count = 0\n\n    # Creating a dictionary to store the reverse of each string in the list\n    for string in test_list:\n        reverse = string[::-1]\n        if reverse in reverse_dict:\n            reverse_dict[reverse] += 1\n        else:\n            reverse_dict[reverse] = 1\n\n    # Iterating through the dictionary and finding the pairs of strings with reverse strings\n    for string in test_list:\n        reverse = string[::-1]\n        if reverse in reverse_dict:\n            count += reverse_dict[reverse]\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] or test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # initialize a dictionary to store the frequency of each character\n    char_freq = {}\n\n    # loop through the list and update the character frequency dictionary\n    for word in test_list:\n        for char in word:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n    # initialize a counter for the number of pairs\n    pairs_count = 0\n\n    # loop through the list again and check for pairs of reverse strings\n    for word1 in test_list:\n        for word2 in test_list:\n            # skip checking for pairs that are the same\n            if word1 == word2:\n                continue\n\n            # check if the characters in the first word match the characters in the second word\n            char_match = True\n            for char1, char2 in zip(word1, word2):\n                if char1!= char2:\n                    char_match = False\n                    break\n\n            # if the characters match, increment the pair count\n            if char_match:\n                pairs_count += 1\n\n    # return the total number of pairs\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        if string == string[::-1]:\n            continue\n        for i in range(len(string)):\n            for j in range(len(string)):\n                if i > j:\n                    if string[i:j] == string[j:i][::-1]:\n                        count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Loop through the string list\n    for word in test_list:\n        # Reverse the word and add it to the dictionary\n        reverse_word = word[::-1]\n        if reverse_word in count_dict:\n            count_dict[reverse_word] += 1\n        else:\n            count_dict[reverse_word] = 1\n\n    # Count the number of pairs\n    pair_count = 0\n    for word in count_dict:\n        for other_word in count_dict:\n            if count_dict[word] > 0 and count_dict[other_word] > 0:\n                pair_count += min(count_dict[word], count_dict[other_word])\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a dictionary to store the reverse of each string\n    reverse_dict = {}\n\n    # loop through the list of strings\n    for string in test_list:\n        # get the reverse of the string\n        reverse = string[::-1]\n        # add the reverse to the dictionary\n        reverse_dict[string] = reverse\n\n    # initialize the count variable\n    count = 0\n\n    # loop through the list of strings\n    for string in test_list:\n        # get the reverse of the string\n        reverse = string[::-1]\n        # check if the reverse exists in the dictionary\n        if reverse in reverse_dict:\n            # if it does, then the string and the reverse are part of a pair\n            count += 1\n\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if tuple(sublist) in count:\n                count[tuple(sublist)] += 1\n            else:\n                count[tuple(sublist)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert all lists in list1 to tuples and count their occurencies\n    sublists = {}\n    for i in range(len(list1)):\n        if type(list1[i]) == list:\n            sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of sublists\n    sublist_counts = {}\n    # Loop through the original list\n    for i in range(len(list1)):\n        # Check if the current list is a sublist of any other list in the original list\n        for j in range(len(list1)):\n            # If j is not equal to i and the two lists are sublists, add the tuple (list1[j], 1) to the dictionary sublist_counts\n            if j!= i and list1[j] in list1[i]:\n                # If the tuple (list1[j], 1) is not already in the dictionary, add it with a count of 1\n                if (list1[j], 1) not in sublist_counts:\n                    sublist_counts[(list1[j], 1)] = 1\n                # Otherwise, increment the count by 1\n                else:\n                    sublist_counts[(list1[j], 1)] += 1\n    # Return the dictionary sublist_counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_sublists_dict:\n            unique_sublists_dict[sublist_tuple] += 1\n        else:\n            unique_sublists_dict[sublist_tuple] = 1\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple\n    sublist_tuples = [(sublist, lst.count(sublist)) for sublist in lst]\n    # Group the tuples by their sublists\n    sublist_groups = {sublist: [tup for tup in sublist_tuples if tup[0] == sublist] for sublist in lst}\n    # Count the number of occurrences of each sublist in the original list\n    sublist_count = {sublist: len(group) for sublist, group in sublist_groups.items()}\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # iterate through each element in the input list\n    for elem in list1:\n        # check if the element is a list\n        if isinstance(elem, list):\n            # convert the list to a tuple and check if it is already in the dictionary\n            if elem not in count_dict:\n                # add the tuple as a key in the dictionary and initialize its value to 1\n                count_dict[elem] = 1\n            # if the tuple is already in the dictionary, increment its value by 1\n            else:\n                count_dict[elem] += 1\n    \n    # return the dictionary containing the counts of unique lists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count:\n            count[tuple_sublist] += 1\n        else:\n            count[tuple_sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    \n    for lst in list1:\n        sublist_count[tuple(lst)] = sublist_count.get(tuple(lst), 0) + 1\n        \n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n\n        # Convert the list to a tuple and check if it is already a key in the dictionary\n        if tuple(sublist) in count_dict:\n\n            # Increment the count for the key in the dictionary\n            count_dict[tuple(sublist)] += 1\n\n        # If the key is not in the dictionary, add it and set its count to 1\n        else:\n            count_dict[tuple(sublist)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        num_split = num.split('.')\n        if len(num_split) == 2 and len(num_split[0]) == 1 and len(num_split[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = str(num)\n    # check if the number contains a decimal point\n    if '.' in num_str:\n        # check if the decimal point is the last character\n        if num_str[-1] == '.':\n            # check if the number has a precision of 2\n            if len(num_str.split('.')[1]) == 2:\n                return True\n            else:\n                return False\n        # check if the decimal point is not the last character\n        else:\n            # check if the number has a precision of 2\n            if len(num_str.split('.')[1]) == 2:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(\",\", \"\")  # remove commas from the number\n    num = num.replace(\".\", \"\")  # remove periods from the number\n    num = num.replace(\" \", \"\")  # remove spaces from the number\n    if \".\" in num and len(num.split(\".\")[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Split the string into a list of digits\n    digits = [int(digit) for digit in num if digit.isdigit()]\n\n    # Check if the number of digits is less than 2 or greater than 2\n    if len(digits) < 2 or len(digits) > 2:\n        return False\n\n    # Check if the number of digits is 2 and the first two digits are both 0 or 1\n    if len(digits) == 2 and (digits[0]!= 0 or digits[1]!= 1):\n        return False\n\n    # Check if the last digit is 0 or 1\n    if digits[-1] not in [0, 1]:\n        return False\n\n    # Check if the number of 0s and 1s in the middle of the digits is 1\n    count = 0\n    for digit in digits:\n        if digit == 0 or digit == 1:\n            count += 1\n        if count == 2:\n            break\n    else:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        num = float(num)\n        if num % 1 == 0:\n            if num.is_integer():\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input is a string\n    if type(num)!= str:\n        return False\n    \n    # check if the string contains only digits\n    if num.replace('.', '', 1).isdigit() == False:\n        return False\n    \n    # convert the string to a float and check if it has a precision of 2\n    try:\n        float_num = float(num)\n        if str(float_num)[-2:] == '.0':\n            return True\n        elif abs(float_num - int(float_num)) < 0.001:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check if the number consists of only digits and a decimal point\n    if not all(char.isdigit() for char in num) or '.' not in num:\n        return False\n    \n    # Split the number into integer and decimal parts\n    integer_part, decimal_part = num.split('.')\n    \n    # Check if the number of digits in the integer part is less than or equal to 18\n    if len(integer_part) > 18:\n        return False\n    \n    # Check if the number of digits in the decimal part is less than or equal to 2\n    if len(decimal_part) > 2:\n        return False\n    \n    # Check if the integer part consists of only digits\n    if not all(char.isdigit() for char in integer_part):\n        return False\n    \n    # Check if the decimal part consists of only digits\n    if not all(char.isdigit() for char in decimal_part):\n        return False\n    \n    # Check if the number of decimal places is not greater than 2\n    if '.' + decimal_part.lstrip('0') == '.' * (len(decimal_part) + 1):\n        return False\n    \n    # Check if the integer part is not negative\n    if len(integer_part) > 0 and integer_part[0] == '-':\n        return False\n    \n    # Check if the decimal part is not negative\n    if len(decimal_part) > 0 and decimal_part[0] == '-':\n        return False\n    \n    # If all checks pass, the string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    if '.' not in num:\n        return False\n    if num.count('.')!= 1:\n        return False\n    for char in num:\n        if char not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        # If it is, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and checks whether it contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return True if arr[0] == arr[1] else False\n    else:\n        unique = set(arr)\n        if len(unique) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= len(arr):\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n\n    # If the length of the set is 1, then all elements are distinct\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1,3,5,7,8,10,12]: # all months with 30 days except for 2, 4, 6, 9, and 11\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    This function takes in a month number (1-12) and returns True if the month has 30 days and False otherwise.\n    \"\"\"\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 in [4, 6, 9, 11]:\n            if monthnum3 not in [2, 4, 6, 9, 11]:\n                return True\n            elif (monthnum3 % 4 == 0 and monthnum3 % 100!= 0) or (monthnum3 % 400 == 0):\n                return True\n        elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        else:\n            if monthnum3 % 2 == 0:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days = 29\n            else:\n                days = 28\n        else:\n            days = months[monthnum3-1]\n        if days == 30:\n            print(\"The month number {} contains 30 days.\".format(monthnum3))\n        else:\n            print(\"The month number {} does not contain 30 days.\".format(monthnum3))\n    else:\n        print(\"Invalid month number. Month numbers are given as numbers from 1 to 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number. Please enter a number from 1 to 12.\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        temp = abs(arr[i] - arr[i+1])\n        if temp < diff:\n            diff = temp\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            min_diff = min(min_diff, diff)\n            max_diff = max(max_diff, diff)\n    return max_diff - min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[n-1]\n\n    # Initialize variables to store the minimum and maximum difference found\n    min_diff = max_diff = float('inf')\n\n    # Iterate through the array to find the minimum and maximum difference\n    for i in range(n):\n        diff = arr[i] - arr[i+1]\n\n        # Update the minimum and maximum difference found\n        if diff < min_diff:\n            min_diff = diff\n        elif diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length n, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to infinity\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between current and next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return \"Array should have at least two elements\"\n    else:\n        min_diff = float('inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                diff = abs(arr[i] - arr[j])\n                if diff < min_diff:\n                    min_diff = diff\n        return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Traverse through the array and find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least two elements.\"\n\n    min_diff = float('inf')\n    min_pair = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in the given array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables min_diff and min_index\n    min_diff = abs(arr[1] - arr[0])\n    min_index = 0\n\n    # Loop through the array\n    for i in range(1, n-1):\n        # Calculate the difference between current element and next element\n        diff = abs(arr[i+1] - arr[i])\n\n        # If the difference is smaller than min_diff, update min_diff and min_index\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    # Return the minimum difference\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # calculate the minimum difference between any two elements in the sorted array\n    min_diff = arr[1] - arr[0]\n\n    for i in range(1, n-1):\n        # if the difference between the current element and the next element is smaller than the current minimum difference, update the minimum difference\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_digits(number):\n    '''\n    This function takes a number as input and returns the number of digits in it.\n    '''\n    count = 0\n    while number > 0:\n        count += 1\n        number //= 10\n    return count\n\ndef number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in it.\n    '''\n    return count_digits(int(str))"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 1:\n        return True\n    else:\n        for i in range(1, n):\n            if math.gcd(i, n)!= 1:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # initialize counter variable\n    count = 0\n    # initialize the current number to 1\n    current_number = 1\n\n    while count < n:\n        if current_number % 2 == 0:\n            # increment the counter if current number is even\n            count += 1\n        else:\n            # if current number is odd, add 1 to it\n            current_number += 1\n\n    # return the nth polite number\n    return current_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (is_polite(n-1) + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    if n < 2:\n        return None\n\n    # Create a list of numbers up to the square root of n\n    prime_list = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime_list[p]:\n            for i in range(p * p, n + 1, p):\n                prime_list[i] = False\n        p += 1\n\n    # Start with 2 and count polite numbers\n    count = 0\n    num = 2\n    while count < n:\n        if prime_list[num]:\n            count += 1\n        num += 1\n\n    # Return the nth polite number\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Find the nth polite number using the formula:\n    # x = (a + sqrt(5)) / 2\n    # y = (a - sqrt(5)) / 2\n    a = 3.5\n    sqrt_5 = math.sqrt(5)\n    x = (a + sqrt_5) / 2\n    y = (a - sqrt_5) / 2\n    polite_num = (x ** n + y ** n) / (2 * sqrt_5)\n    return polite_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_nth_polite_number():\n        num = 1\n        count = 0\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    polite_num = get_nth_polite_number()\n    print(polite_num)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(num):\n        count = 0\n        for i in range(2, num+1):\n            if is_prime(i):\n                count += 1\n                if count == num:\n                    return i\n\n    def nth_polite_number(n):\n        polite_number = nth_prime(n)\n        if is_prime(polite_number):\n            return polite_number\n        else:\n            return nth_polite_number(n-1)\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    polite_numbers = [0, 1]\n\n    if n < 2:\n        return polite_numbers[n]\n\n    for i in range(2, n + 1):\n        next_num = i * 2 - 1\n        is_prime = True\n        for j in range(2, int(math.sqrt(next_num)) + 1):\n            if next_num % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            polite_numbers.append(next_num)\n\n    return polite_numbers[n]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        i = num\n        while True:\n            i += 1\n            if is_prime(i):\n                return i\n\n    for i in range(1, n+1):\n        if is_prime(i):\n            print(i)\n            break\n\n    next_prime_num = next_prime(n)\n    while next_prime_num <= n:\n        if is_prime(next_prime_num):\n            print(next_prime_num)\n        next_prime_num = next_prime(next_prime_num)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # combine the two lists into a single list\n    combined_list = li1 + li2\n\n    # convert the combined list to a set to remove duplicates\n    unique_list = list(set(combined_list))\n\n    # sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n\n    # initialize an empty list to store the differences\n    diff_list = []\n\n    # iterate over the sorted list and add the difference to the diff_list\n    for i in range(len(sorted_list)):\n        if sorted_list[i] in li1 and sorted_list[i] in li2:\n            diff_list.append(sorted_list[i])\n\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty list to store the difference\n    diff_list = []\n    # iterate over each element in both lists\n    for elem in li1:\n        # if the element is not in the second list, add it to the difference list\n        if elem not in li2:\n            diff_list.append(elem)\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns the difference between the two lists.\n    '''\n    # Using set() method to remove duplicates from the lists.\n    list1_unique = list(set(li1))\n    list2_unique = list(set(li2))\n    \n    # Using list comprehension to get the difference between the two lists.\n    diff_list = [x for x in list1_unique if x not in list2_unique]\n    \n    # Returning the difference list.\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists `li1` and `li2` as input and returns the difference between them.\n    '''\n    # Using set operation to get the intersection of two lists\n    li1_set = set(li1)\n    li2_set = set(li2)\n    diff_set = li1_set.symmetric_difference(li2_set)\n    # Converting the set to a list\n    diff_list = list(diff_set)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += i ** 4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the fourth power of the odd number and add it to the sum variable\n        sum += i ** 4\n\n    # Return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth_pow = 0\n    for i in range(2, n+1, 2):\n        fourth_pow = i**4\n        sum_fourth_pow += fourth_pow\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate through odd natural numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        power = i ** 4\n        \n        # Add the fourth power to the sum\n        sum += power\n        \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in '([{':\n            stack.append(exp[i])\n        elif exp[i] in ')]':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            elif stack[-1] == '[':\n                stack.pop()\n            elif stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    brackets = {'(': ')', '[': ']', '{': '}'}\n\n    for char in exp:\n        if char in brackets:\n            stack.append(brackets[char])\n        elif not stack or stack.pop()!= brackets[char]:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif stack[-1] in ['(', '[', '{']:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create a stack and use a deque to store the opening parenthesis\n    stack = deque()\n    # iterate over each character in the expression\n    for char in exp:\n        # if the character is an opening parenthesis, push it onto the stack\n        if char in '([{':\n            stack.append(char)\n        # if the character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif char in ')]}':\n            if not stack:\n                return False # if the stack is empty, the expression is not balanced\n            # if the last opening parenthesis is a left parenthesis, we can safely pop it from the stack\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            # if the last opening parenthesis is a right parenthesis, we have a mismatch and can return False\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False # if we get here, the expression is not balanced\n    return len(stack) == 0 # if the stack is empty, the expression is balanced"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j >= 0 and j > i:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    # create an empty stack to store opening and closing parentheses\n    stack = deque()\n\n    # loop through each character in the expression\n    for char in exp:\n\n        # if the character is an opening parenthesis\n        if char == '(':\n\n            # push it onto the stack\n            stack.append(char)\n\n        # if the character is a closing parenthesis\n        elif char == ')':\n\n            # if the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n\n            # if the stack is not empty, pop the top element from the stack and compare the opening parenthesis with the closing parenthesis\n            else:\n                top_char = stack.pop()\n\n                if top_char == '(':\n                    continue\n                else:\n                    return False\n\n    # if the loop completes without finding any errors, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_chars = {'(', '[', '{'}\n    closing_chars = {')', ']', '}'}\n\n    for char in exp:\n        if char in opening_chars:\n            stack.append(char)\n        elif char in closing_chars:\n            if not stack or stack.pop() not in opening_chars[closing_chars[char]]:\n                return False\n\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string test_str and an integer K as input\n    and returns the string after removing all the words with length K in it.\n    \"\"\"\n    words = test_str.split()  # Split the string into a list of words\n    new_words = []  # Initialize an empty list to store the new words\n    \n    # Loop through the list of words\n    for word in words:\n        if len(word)!= K:  # If the length of the word is not K\n            new_words.append(word)  # Add the word to the new list\n    \n    # Join the new list of words into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Convert the input string to lowercase to simplify the regex\n    test_str = test_str.lower()\n\n    # Create a regular expression pattern to match words with K characters or less\n    pattern = r'\\b\\w{' + str(K) + ',}'\n\n    # Use re.findall() to find all the words that match the pattern\n    words = re.findall(pattern, test_str)\n\n    # Convert the list of words back to a string and remove any extra whitespace\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n\n    # loop through the list of words and remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # join the list of words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            print(\"Match found at position {} with length {}\".format(match.start(), len(match.group())))\n            print(\"Substrings: {}\".format(match.group()))\n            return None\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return len(matches), matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            print(f\"Match found at position {text.find(match)}\")\n            return match"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], text.find(matches[0])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # initialize a counter for odd positions\n    odd_count = 0\n    \n    # loop through the list\n    for i in range(len(nums)):\n        # check if the current position is odd\n        if i % 2!= 0:\n            # check if the number at the current position is odd\n            if nums[i] % 2!= 0:\n                # increment the counter for odd positions\n                odd_count += 1\n    \n    # check if there are odd numbers in the odd positions\n    return odd_count == 0"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if (i+1) % 2 == 0:\n            continue\n        count = 0\n        for j in range(i, n, 2):\n            if nums[j] % 2 == 1:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if current index is odd\n            if nums[i] % 2!= 0:  # check if current number is odd\n                return False  # if current number is odd and odd index is found, return False\n    return True  # if all elements in the list are even and odd indexes are not found, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!=0: # check if index is odd\n            if sum(nums[i:i+2])%2!=0: # check if sum of odd numbers at odd index is odd\n                return False # if sum is odd, return False\n    return True # if no odd index has odd numbers, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char in vowels and prev_char in vowels:\n            count += 1\n        prev_char = char\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Parameters:\n    arr (list): a list of integers\n\n    Returns:\n    int: the sum of non-repeated elements in the list\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    counts = {}\n\n    # Loop over each element in the list\n    for num in arr:\n        # If the element is already in the dictionary, increment its count\n        if num in counts:\n            counts[num] += 1\n        # Otherwise, add the element and its count to the dictionary\n        else:\n            counts[num] = 1\n\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Loop over each element in the dictionary\n    for num in counts:\n        # If the count is 1, add the element to the sum\n        if counts[num] == 1:\n            total_sum += num\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a dictionary to store the count of each element in the list\n    count = {}\n    # Initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    # Loop through the list and update the count of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Loop through the list again and add the non-repeated elements to the sum\n    for num in arr:\n        if count[num] == 1:\n            sum += num\n    # Return the sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # initialize a variable to store the sum of unique elements\n    sum_of_unique = 0\n    # iterate through the unique set and add its values to sum_of_unique\n    for num in unique_set:\n        sum_of_unique += num\n    # return the sum_of_unique value\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    # create a set to store the non-repeated elements\n    non_repeated = set(arr)\n\n    # find the sum of the non-repeated elements\n    sum_of_non_repeated = sum(non_repeated)\n\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    non_repeated_sum = sum(unique_elements)\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the elements in the list \n    that are not repeated.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the sum of all the elements in the list that are not repeated\n    non_repeated_sum = 0\n    for num, freq in freq_dict.items():\n        if freq == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Remove duplicates from the list using a set\n    unique_elems = set(arr)\n    \n    # Find the sum of the unique elements\n    sum_unique = sum(unique_elems)\n    \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Initialize a set to keep track of unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Initialize a sum variable to keep track of the sum of unique elements\n    sum_unique = 0\n\n    # Iterate through the set and add each element to the sum variable\n    for element in unique_set:\n        sum_unique += element\n\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Group the elements of the list by the same value\n    grouped_list = groupby(list1)\n\n    # List to store the sublists with consecutive duplicates\n    sublists = []\n\n    # Loop through the groups\n    for key, group in grouped_list:\n        # Check if the group has at least one element and if it's not the first group\n        if group and not sublists:\n            # Add the first group to the sublists\n            sublists.append(list(group))\n        # Check if the group has at least two elements and if it's not the first group and not the last group\n        elif group and sublists[-1][-1]!= key:\n            # Add the current group to the sublists\n            sublists.append(list(group))\n        # If the group has only one element, append it to the last sublist\n        elif group and sublists[-1]:\n            sublists[-1].append(list(group)[0])\n\n    # Return the sublists with consecutive duplicates\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Parameters:\n    list1 (list): A list of elements.\n\n    Returns:\n    list: A list of sublists with consecutive duplicates of the given list elements.\n    \"\"\"\n    # Create a list of tuples where each tuple contains a group of consecutive duplicates of the given list\n    groups = [list(group) for _, group in groupby(enumerate(list1), lambda x: x[0] - x[1])]\n    # Flatten the list of tuples to get a list of sublists containing consecutive duplicates of the given list\n    sublists = [sublist for group in groups for sublist in group]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list of integers as input and returns a list of lists where each sublist contains consecutive duplicates of the input list.\n    '''\n    return list(groupby(lst, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    :param lst: A list of elements to pack consecutive duplicates into sublists.\n    :return: A list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n    \"\"\"\n    # Use groupby to group consecutive duplicates of elements\n    groups = groupby(sorted(lst))\n\n    # Create a list of sublists and append consecutive duplicates to each sublist\n    result = []\n    for k, g in groups:\n        if g:\n            result.append(list(g))\n        else:\n            continue\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of integers, pack consecutive duplicates into sublists.\n    \"\"\"\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and returns a new list where the consecutive duplicates of elements are grouped together.\n    '''\n    grouped_lst = {}\n    for i, item in enumerate(lst):\n        if i == 0 or item!= lst[i-1]:\n            if item in grouped_lst:\n                grouped_lst[item].append(lst[i])\n            else:\n                grouped_lst[item] = [lst[i]]\n    return [list(group) for key, group in grouped_lst.items()]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(enumerate(list1))\n    result = []\n    for group in grouped:\n        if len(list(group[1])) == 1:\n            continue\n        sublist = [list(group[1])[0]]\n        for i, num in group[1]:\n            if i == len(list(group[1])) - 1:\n                result.append(sublist)\n                break\n            if num == list(group[1])[i+1]:\n                sublist.append(num)\n            else:\n                result.append(sublist)\n                sublist = [num]\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    grouped_list = groupby(list1)\n\n    return [list(subgroup) for subgroup in grouped_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, pack consecutive duplicates into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for lst in list1:\n        if tuple(lst) not in sublists:\n            sublists[tuple(lst)] = 1\n        else:\n            sublists[tuple(lst)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for elem in list1:\n        if elem not in count_dict:\n            count_dict[elem] = 0\n        count_dict[elem] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each list\n    count_dict = {}\n\n    # Loop through each element of the list\n    for sublist in list1:\n        # Turn the list into a tuple and check if it's in the dictionary\n        if tuple(sublist) in count_dict:\n            # If it is, increment its count\n            count_dict[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the count of occurrences of sublists\n    sublist_count = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple to count its occurrences\n        sublist_tuple = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it and set its count to 1\n        else:\n            sublist_count[sublist_tuple] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Initialize an empty dictionary\n    counts = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        \n        # Convert the list to a tuple\n        tup = tuple(elem)\n        \n        # If the tuple is not in the dictionary yet, add it with a value of 1\n        if tup not in counts:\n            counts[tup] = 1\n        # Otherwise, increment the value by 1\n        else:\n            counts[tup] += 1\n            \n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = combinations(test_list, i+j)\n            for combo in comb:\n                if sum(combo) == 0:\n                    result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            combination = test_list[i] + test_list[j]\n            if combination in test_list:\n                combinations_list = combinations([combination], n)\n                for comb in combinations_list:\n                    print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            yield tuple(test_list[i:j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # function to generate all possible combinations of sums\n    def generate_combinations(arr, target):\n        result = []\n        for i in range(len(arr)):\n            if i == 0 or target - arr[i] >= 0:\n                for combo in combinations(arr, i+1):\n                    result.append(combo)\n        return result\n\n    # function to find all pairs of indices in the given list that sum up to a given target value\n    def find_pairs(arr, target):\n        result = []\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] + arr[j] == target:\n                    result.append((i, j))\n        return result\n\n    # generate all possible combinations of sums\n    combinations_list = generate_combinations(test_list, sum(test_list))\n\n    # find all pairs of indices in the given list that sum up to a given target value\n    pairs_list = find_pairs(test_list, sum(test_list))\n\n    # create a new list that only includes the indices of the pairs of sums that were found\n    result_list = []\n    for combo in combinations_list:\n        for pair in pairs_list:\n            if combo == pair:\n                result_list.append(pair[0])\n                result_list.append(pair[1])\n                break\n\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize a variable to store the sum of the tuples\n    total_sum = sum(test_list)\n    # loop through the list of tuples and find the combinations of sums\n    for tup in test_list:\n        # loop through the list of tuples and find the combinations of sums\n        for comb in combinations(tup, r=len(tup)):\n            # check if the sum of the combination is equal to the total sum\n            if sum(comb) == total_sum:\n                print(\"Found a combination of sums:\", comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Find the total sum of tuples in the list\n    total_sum = sum(test_list)\n\n    # Find the maximum length of tuple in the list\n    max_length = max(len(tup) for tup in test_list)\n\n    # Initialize the combinations list\n    combinations_list = []\n\n    # Loop through all possible combinations of length r for all values of r from 1 to max_length\n    for r in range(1, max_length + 1):\n        # Loop through all possible combinations of length r of tuples in the list\n        for comb in combinations(test_list, r):\n            # Check if the combination has a sum equal to total_sum\n            if sum(comb) == total_sum:\n                # If it does, add the combination to the combinations list\n                combinations_list.append(comb)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                all_combinations.append(test_list[i], test_list[j])\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\n    Args:\n    test_list (list): list of tuples\n\n    Returns:\n    list: list of tuples of combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Sort the list of tuples based on their sums\n    sorted_tuples = sorted(test_list, key=lambda x: sum(x))\n\n    # Initialize the list to store the combinations\n    result = []\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_tuples)):\n        # Iterate through the remaining list (except the current one)\n        for j in range(i+1, len(sorted_tuples)):\n            # Check if the current combination can be formed with the remaining ones\n            if sorted_tuples[i][0] + sorted_tuples[j][0] == sorted_tuples[i][1]:\n                # Append the combination to the result list\n                result.append((sorted_tuples[i], sorted_tuples[j]))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Sort the input list\n    test_list.sort()\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n    # Iterate through the test_list\n    for i in range(len(test_list)):\n        # Create a list of tuples with the current element as the first element\n        tuple_list = [(test_list[i],)]\n        # Iterate through the rest of the test_list\n        for j in range(i+1, len(test_list)):\n            # Add the next element to the tuple_list\n            new_tuple = (test_list[j],)\n            # Find all combinations of the current tuple and the next element\n            for comb in combinations(tuple_list, r=j-i):\n                # Append the new combination to the combinations_list\n                new_comb = comb + new_tuple\n                combinations_list.append(new_comb)\n            # Add the current tuple to the tuple_list\n            tuple_list.append(test_list[j])\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i == j:\n                continue\n            for k in range(len(test_list)):\n                if i == k or j == k:\n                    continue\n                total = sum(test_list[i]) + sum(test_list[j]) + sum(test_list[k])\n                if total in test_list[i] + test_list[j] + test_list[k]:\n                    print(tuple(sorted([test_list[i][0], test_list[j][0], test_list[k][0]])))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    \n    # initialize count to 0\n    count = 0\n    \n    # loop through all numbers from 1 to sqrt(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        # check if n is divisible by i\n        if n % i == 0: \n            # if it is, add 1 to count\n            count += 1\n    \n    # check if count is even or odd\n    if count % 2 == 0: \n        # if count is even, return True\n        return True\n    else: \n        # if count is odd, return False\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    # Calculate the count of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2!= 0:\n                return False\n    \n    # If the count of divisors is odd, the number is prime\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number of divisors is even, False otherwise.\n    The function counts all the divisors of the given number using the math.factorial() function.\n    \"\"\"\n    # Use math.factorial() function to calculate the number of divisors\n    factorial = math.factorial(n)\n    # Calculate the count of divisors\n    divisors = factorial // math.factorial(2)\n    # Check if count of divisors is even or not\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the sum of all numbers from 1 to n\n    sum_numbers = (n * (n + 1)) // 2\n    # calculate the number of divisors of n\n    count_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count_div += 1\n            if n // i!= i:\n                count_div += 1\n    if count_div % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    count_divisors = len(divisors)\n    if count_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    left = 0\n\n    # Loop through all subarrays of odd length\n    for right in range(n):\n        while left < right and arr[left] % 2 == 0:\n            left += 1\n\n        # If the current subarray is odd, add its sum to the result\n        if right - left + 1 % 2 == 1:\n            result += sum(arr[left:right+1])\n\n        # Move the left pointer to the next odd element\n        while left < right and arr[right] % 2 == 0:\n            right -= 1\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize sum variable to 0\n    sum = 0\n    # Iterate over all subarrays of length 3 or more\n    for i in range(n-2):\n        # If the sum of the current subarray is odd, add it to the sum variable\n        if sum_odd_length(arr, i, i+2):\n            sum += arr[i] + arr[i+1] + arr[i+2]\n    return sum\n\n\ndef sum_odd_length(arr, start, end):\n    sum = 0\n    for i in range(start, end):\n        sum += arr[i]\n    return sum % 2!= 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            if j < n:\n                sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Initialize a counter variable to keep track of odd length subarrays\n        count = 1\n\n        # Move the window from left to right\n        for j in range(i, len(arr)):\n            # Increment the count if the element at the current index is odd\n            if arr[j] % 2!= 0:\n                count += 1\n                # Check if we have found an odd length subarray\n                if count % 2!= 0:\n                    # Add the sum of all elements in the subarray to the sum\n                    sum += sum_subarray(arr[i:j+1])\n\n            # If we have reached the end of the array and have found an odd length subarray, add the sum of all elements in the subarray to the sum\n            if j == len(arr) - 1 and count % 2!= 0:\n                sum += sum_subarray(arr[i:])\n\n    # Return the sum of all odd length subarrays\n    return sum\n\n\ndef sum_subarray(arr):\n    \"\"\"\n    Helper function to calculate the sum of an odd length subarray.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each element in the subarray\n    for i in range(len(arr)):\n        # Add the element to the sum\n        sum += arr[i]\n\n    # Return the sum of the subarray\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, min(i+5, n)+1, 2):\n            total_sum += sum(arr[i:j])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    # Loop through each element of the array\n    for i in range(len(arr)):\n        # Initialize the running sum to zero\n        curr_sum = 0\n        # Loop through each element after the current element\n        for j in range(i, len(arr)):\n            # Add the current element to the running sum\n            curr_sum += arr[j]\n            # If the running sum is odd, add it to the total sum\n            if curr_sum % 2!= 0:\n                total_sum += curr_sum\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n-1):\n        if i == 1 or i == n-2:\n            sum += arr[i]\n        else:\n            sum += arr[i] + arr[i-1] + arr[i+1]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables for the sum of odd length subarrays\n    odd_sum = 0\n    # Initialize variables for the count of odd length subarrays\n    count = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Initialize variables for the sum of the current subarray\n        current_sum = 0\n        # Initialize variables for the count of the current subarray\n        current_count = 0\n\n        # Loop through the array from the current index i+1\n        for j in range(i+1, n):\n            # Check if the length of the current subarray is odd\n            if j-i+1 % 2!= 0:\n                # Add the current element to the sum of the current subarray\n                current_sum += arr[j]\n                # Increment the count of the current subarray\n                current_count += 1\n                # If the count of the current subarray is odd, add it to the sum of odd length subarrays and increment the count\n                if current_count % 2!= 0:\n                    odd_sum += current_sum\n                    count += 1\n\n    # Return the sum of all odd length subarrays\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    \n    # loop through all possible subarray lengths\n    for i in range(1, n+1):\n        \n        # loop through all possible starting positions\n        for j in range(n-i+1):\n            \n            # calculate the sum of the odd length subarray\n            subarray = arr[j:j+i]\n            subarray_sum = sum(subarray)\n            \n            # update the sum of odd length subarrays\n            sum_odd_length += subarray_sum\n    \n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Normalize the rgb values to be between 0 and 1\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    # Convert r, g, and b values to their respective HSV components\n    max_component = max(r, g, b)\n    min_component = min(r, g, b)\n\n    if max_component == min_component:\n        h = 0\n        s = 0\n    else:\n        del_max = max_component - min_component\n        s = del_max / max_component\n\n        if max_component == r:\n            h = (g - b) / del_max\n        elif max_component == g:\n            h = 2 + (b - r) / del_max\n        else:\n            h = 4 + (r - g) / del_max\n\n        h = h / 6.0\n\n        if h < 0:\n            h += 1\n\n    # Convert the HSV components to the desired output format\n    hsv = (int(h * 360), int(s * 100), int(max_component * 100))\n\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes the red, green, and blue components of an RGB color as inputs and returns the Hue, Saturation, and Value (HSV) components of that color as a tuple.\n    \n    :param r: int, the red component of the color (0-255)\n    :param g: int, the green component of the color (0-255)\n    :param b: int, the blue component of the color (0-255)\n    :return: tuple, the Hue, Saturation, and Value components of the RGB color in the HSV color model\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    h = 0\n    \n    if cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = round(h * 60)\n    \n    if h < 0:\n        h += 360\n        \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n        \n    v = cmax\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_value\n\n    delta = max_value - min_value\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    if max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    elif max_value == b:\n        h = 4 + (r - g) / delta\n\n    if h < 0:\n        h += 6\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, and B values to float\n    r, g, b = map(float, [r, g, b])\n\n    # Find the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the distance between the maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the value of the hue (also known as the color wheel position)\n    if max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    # If the maximum and minimum values are equal, the color is a shade of gray\n    if delta == 0:\n        h = 0\n\n    # Calculate the value of the saturation (also known as the brightness of the color)\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    # Convert HSV values to 0-1 range\n    h, s, v = [x / 65535 for x in [h * 65535, s * 65535, max_val * 65535]]\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    h = h / 360\n    s = s * 100\n    v = max_val * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters, r, g and b, representing the red, green and blue color values of the original color.\n    The function returns the h, s and v values of the converted color.\n\n    Hue: \n    The hue of the color is represented by the angle subtended by the color from its pink/purple point to the center of the color wheel.\n    The color wheel is a circle centered at the color's middle and has a diameter of 360 degrees.\n    The hue value ranges from 0 to 360 degrees, where 0 represents red at the center and 360 represents red at the top of the circle.\n    In the RGB color space, the hue is calculated using the following formula:\n    h = atan2(r - b, g - r) / 360 * 2\n    \n    Saturation: \n    The saturation of the color is represented by the proportion of the color's color space that is covered by the original color.\n    The value of the saturation is calculated as the proportion of the total color space that is represented by the color in the RGB color space.\n    In the RGB color space, the saturation is calculated using the following formula:\n    s = min(1, sqrt(r^2 + g^2 + b^2))\n    \n    Value: \n    The value of the color is represented by the brightness of the color.\n    The value of the color is determined by the brightness of the color in the RGB color space.\n    In the RGB color space, the value is calculated using the following formula:\n    v = max(r, g, b)\n    \n    The values of the converted color h, s and v are returned as a tuple.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255  # convert to 0-1 range\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 1\n            \n        h *= 60\n        \n        if h < 0:\n            h += 360\n            \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in three parameters - red, green and blue values of an RGB color.\n    The function calculates the HSV values of the RGB color and returns a tuple containing H, S, and V.\n    '''\n    # Convert r, g, and b to integers\n    r, g, b = int(r), int(g), int(b)\n    \n    # Find greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        hue = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        hue = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    # Calculate saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = (max_val - min_val) / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    # Return the HSV values in a tuple\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    hsv_color = []\n    h = 0\n    s = 0\n    v = max_value\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_value\n        v = max_value\n    hsv_color = [int(h), int(s * 255), int(v * 255)]\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to HSV color model.\n    '''\n    # Convert r,g,b values to floating point numbers\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Calculate maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # Calculate hue value\n    if max_val == r:\n        hue = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        hue = 60 * (((b - r) / delta) + 2)\n    else:\n        hue = 60 * (((r - g) / delta) + 4)\n    \n    # Calculate saturation and value\n    if delta == 0:\n        saturation = 0\n        value = max_val\n    else:\n        saturation = delta / max_val\n        if max_val == r:\n            value = (g - b) / delta\n        elif max_val == g:\n            value = (b - r) / delta\n        else:\n            value = (r - g) / delta\n    \n    # Normalize hue value\n    if hue < 0:\n        hue += 360\n    \n    # Convert hue, saturation, and value to integers\n    hue = int(hue)\n    saturation = int(saturation * 255)\n    value = int(value * 255)\n    \n    # Convert hue, saturation, and value to floating point numbers\n    hue = float(hue) / 360.0\n    saturation = float(saturation) / 255.0\n    value = float(value) / 255.0\n    \n    # Return the converted color as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters representing the red, green and blue components of an RGB color.\n    It returns a tuple containing the hue, saturation and value of the given color in the HSV color model.\n\n    Hue is calculated using the following formula:\n    H = (max(R, G, B) + min(R, G, B))/2\n\n    Saturation is calculated using the following formula:\n    S = (max(R, G, B) - min(R, G, B))/max(R, G, B)\n\n    Value is calculated using the following formula:\n    V = max(R, G, B)\n\n    The range of each component of an RGB color is from 0 to 255.\n    \"\"\"\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    hue = (max_val + min_val) / 2\n\n    if max_val == min_val:\n        saturation = 0\n    else:\n        delta = max_val - min_val\n        saturation = delta / max_val\n\n    value = max_val\n\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Finds the product of the first even and odd numbers of a list.\n\n    Args:\n    lst: a list of integers\n\n    Returns:\n    The product of the first even and odd numbers of the list, or None if the list is empty.\n    \"\"\"\n\n    if not lst:\n        return None\n\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0 or odd_count == 0:\n        return None\n\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 1\n    odd = 1\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n            \n    product = even * odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in list1:\n        count += 1\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            break\n\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        product *= i\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product *= 1\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        count += 1\n\n    if even_count == 0 or odd_count == 0:\n        return \"The list has no even or odd number.\"\n\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    product = even_sum * odd_sum\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and finds the product of first even and odd number of the list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_product *= i\n        else:\n            odd_product *= i\n    return even_product * odd_product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of substrings based on the separator\n    substrings = test_str.split(',')\n    \n    # initialize an empty list to store the converted integers\n    converted_list = []\n    \n    # iterate through the substrings and try to convert them to integers\n    for substring in substrings:\n        try:\n            # convert the substring to an integer and add it to the converted_list\n            converted_list.append(int(substring))\n        except ValueError:\n            # if the conversion fails, print an error message\n            print(f\"Error: {substring} is not a valid integer\")\n    \n    # return the converted_list as a tuple\n    return tuple(converted_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string into a list of strings\n    string_list = test_str.split(',')\n\n    # Convert each string to an integer and append it to a new list\n    integer_list = []\n    for i in string_list:\n        integer_list.append(int(i))\n\n    # Convert the new list to a tuple and return it\n    return tuple(integer_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove the surrounding ()\n    test_str = test_str[1:-1]\n    # split the string into individual elements separated by comma\n    elements = test_str.split(',')\n    # convert each element to integer\n    int_elements = []\n    for element in elements:\n        int_elements.append(int(element))\n    # return the integer tuple\n    return tuple(int_elements)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in test_str:\n        if i.isnumeric():\n            new_tuple.append(int(i))\n    return tuple(new_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (str): A tuple string of the form (1,2,3).\n\n    Returns:\n        tuple: An integer tuple of the same form as the input string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    chars = list(test_str)\n\n    # Initialize an empty list to store the integers\n    int_list = []\n\n    # Loop through the characters and convert each to an integer\n    for char in chars:\n        int_list.append(int(char))\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to list of integers\n    lst_int = [int(i) for i in test_str.split(',')]\n    # convert list of integers to tuple\n    tup_int = tuple(lst_int)\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(i) for i in test_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert test_str to a list of characters\n    char_list = list(test_str)\n    # Initialize a list to store the integers\n    int_list = []\n    # Loop through the characters in the list\n    for char in char_list:\n        # If the character is a digit, add it to the integer list\n        if char.isdigit():\n            int_list.append(int(char))\n        # If the character is not a digit, it must be a comma\n        else:\n            # Convert the integer list to a tuple\n            int_tuple = tuple(int_list)\n            # Convert the tuple to a string\n            str_tuple = str(int_tuple)\n            # Reset the integer list\n            int_list = []\n            # Add the comma to the string tuple\n            str_tuple += ','\n            # Add the comma to the final string\n            test_str = test_str.replace(char, str_tuple)\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to tuple\n    test_tuple = eval(test_str)\n    # convert tuple to integer tuple\n    int_tuple = tuple(map(int, test_tuple))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert the string to tuple\n        test_tuple = tuple(test_str.split(','))\n        \n        # convert each element in the tuple to integer\n        new_tuple = tuple([int(i) for i in test_tuple])\n        \n        return new_tuple\n    \n    except:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return len(a)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        # if the value is not found, return the insertion point for the next value\n        i = bisect.bisect_right(a, x) - 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Initialize the index of the right insertion point\n    i = bisect.bisect_right(a, x)\n\n    # Check if the right insertion point exists\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): a sorted list\n    x (int): a value to be inserted\n\n    Returns:\n    int: the right insertion point for the value x in the sorted list a\n\n    \"\"\"\n    # Use binary search to find the rightmost element in the list that is less than or equal to x\n    left, right = 0, len(a) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    # If x is the smallest element in the list, return its index\n    if a[left] == x:\n        return left\n    # If x is greater than all elements in the list, return the length of the list\n    if x > a[-1]:\n        return len(a)\n    # Otherwise, return the index of the rightmost element in the list that is greater than x\n    return left - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('a.*b{3}')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{2})'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\bb{3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=b{3})'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string 'a' followed by three 'b' is present in the given text\")\n    else:\n        print(\"The string 'a' followed by three 'b' is not present in the given text\")\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{2}b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into a single list\n    combined_list = test_list + test_str\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Join the list and string together\n    combined_list = ','.join(str(x) for x in test_list)\n    combined_str = test_str + ':' + combined_list\n    \n    # Split the combined string by ':' to get the tuple elements\n    tuple_elements = combined_str.split(':')\n    \n    # Create the new tuple\n    new_tuple = tuple(tuple_elements)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_list = tuple(test_list)\n    # concatenate the list with the string\n    new_tuple = new_list + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and string into a new tuple\n    new_tuple = tuple(test_list) + (test_str,)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of values to be included in the new tuple.\n        test_str (str): A string to be included in the new tuple.\n\n    Returns:\n        A tuple of length 2 containing the test_str and test_list values.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(str(item))\n    new_tuple = tuple(test_str + tuple(new_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + tuple(test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(str(item) + test_str for item in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    even_count += 1\n    if even_count == len(nums):\n        print(\"All even indices contain even numbers.\")\n    else:\n        print(\"There are some odd indices that do not contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            break\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Iterate over all indices in the list and check if the even index contains even numbers\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n    # If we reach this point, there was no even index with even numbers\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    This function checks whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Check if the given tuple is a nested tuple\n    if isinstance(test_tup, tuple):\n        # Remove the nested tuple and return the flattened tuple\n        return remove_nested(test_tup[0]) + test_tup[1:]\n    else:\n        # Return the tuple as is\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            new_list.append(element)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a list of tuples to iterate through\n    nested_list = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            nested_list.append(i)\n    # Remove all the tuples from the original list\n    for i in test_tup:\n        if isinstance(i, tuple):\n            test_tup.remove(i)\n    # Return the modified list without tuples\n    return [i for i in test_tup if not isinstance(i, tuple)]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([item for sublist in test_tup for item in sublist if type(item)!= tuple])"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while len(test_tup) > 1 and type(test_tup[0]) == tuple:\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(elem for tup in test_tup for elem in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            for subelem in elem:\n                new_tup.append(subelem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    \n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            raise ValueError(\"List items must be lists\")\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_lists(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last element of x in arr\n    index = arr.index(x)\n    \n    # Find the last position of x in arr\n    last_pos = arr.index(x,index)\n    \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # initialize variables\n    last_position = -1\n\n    # loop through the array and find the last occurrence of the element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x in arr\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x and i == len(arr)-1:\n            last_index = i\n            break\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x and returns the last position of the element in the array.\n    '''\n    # Initialize the last position as -1\n    last_pos = -1\n    \n    # Iterate through the array and compare each element with x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # If the element is found, update the last position to i\n            last_pos = i\n    \n    # Return the last position of the element\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The integer to find in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in the array or -1 if x is not in the array.\n\n    Example:\n    >>> arr = [1, 3, 5, 7, 9]\n    >>> x = 5\n    >>> last(arr, x)\n    3\n    \"\"\"\n\n    # Initialize the left pointer to 0 and the right pointer to the length of the array minus 1\n    left, right = 0, len(arr) - 1\n\n    # Loop while the left pointer is less than or equal to the right pointer\n    while left <= right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, return its index\n        if arr[mid] == x:\n            return mid\n\n        # If the middle element is greater than x, update the right pointer to mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is less than x, update the left pointer to mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters, an array and an element to be searched for.\n    It returns the index of the last occurrence of the element in the array.\n    If the element is not found in the array, it returns -1.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # check if the element is at the end of the array\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            \n            # check if the element is in the middle of the array\n            left = mid + 1\n            \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    # element not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left, right = 0, len(arr) - 1\n    # Initialize the last position to -1\n    last_position = -1\n    \n    # Iterate through the array using the left pointer\n    while left <= right:\n        # Find the midpoint of the array\n        mid = (left + right) // 2\n        # If the mid element is equal to the target element, update the last position\n        if arr[mid] == x:\n            last_position = mid\n        # If the mid element is greater than the target element, update the left pointer\n        elif arr[mid] > x:\n            right = mid - 1\n        # If the mid element is less than the target element, update the right pointer\n        else:\n            left = mid + 1\n    \n    # Return the last position of the target element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments - the sorted array and the element to be searched.\n    The function returns the index of the last occurrence of the element in the array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            left = mid+1\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[^b]*b\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.+b$')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.match(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.b$'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 0, n\n    if n < 0:\n        l, r = r, l\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, 1000000\n    sum_odds = 0\n    for i in range(l, r+1, 2):\n        sum_odds += i\n    return sum_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # taking input from the user\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n\n    # initializing sum variable\n    total = 0\n\n    # iterating through range of numbers from l to r\n    for i in range(l, r+1):\n        # if the number is odd, adding it to the sum variable\n        if i % 2!= 0:\n            total += i\n\n    # printing the total sum\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is:\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Use a generator to iterate through odd natural numbers in the range\n    for num in range(l, r+1, 2):\n        yield num"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate through the range of numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add each odd number to the sum\n        sum += i\n    \n    # return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through the range of n (inclusive)\n    for i in range(1, n+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    total = 0\n    num = 1\n    # loop through odd natural numbers from 1 to n\n    while num <= n:\n        if num % 2 == 1:\n            total += num\n        num += 2\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    rotated_number = (n << d) | (n >> (32 - d))\n    return rotated_number & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary\n    binary = bin(n)[2:]\n    # compute the rotation amount\n    rotation = d % len(binary)\n    # compute the new binary number\n    new_binary = binary[-rotation:] + binary[:-rotation]\n    # convert the new binary number back to an integer and return it\n    return int(new_binary, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # Calculate the number of bits to rotate\n    num_bits = 32 - d\n    \n    # Check if the number of bits to rotate is greater than 32 bits\n    if num_bits > 32:\n        print(\"Error: Number of bits to rotate is greater than 32 bits.\")\n        return\n    \n    # Rotate the bits to the left\n    rotated_bits = n << d\n    \n    # Mask the bits that are shifted out\n    masked_bits = (n >> (num_bits - d)) & ((1 << num_bits) - 1)\n    \n    # Combine the rotated bits with the masked bits\n    result = rotated_bits | masked_bits\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    bin_str = format(n, '032b')\n    # Calculate the length of binary string\n    len_bin_str = len(bin_str)\n    # Calculate the number of zeros to be added to the left side of binary string\n    zeros_to_add = d % len_bin_str\n    # Add zeros to the left side of binary string\n    bin_str = bin_str.zfill(zeros_to_add) + bin_str\n    # Convert binary string to decimal number\n    num = int(bin_str, 2)\n    return num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary format\n    binary_num = bin(n)[2:]\n    # Calculate the number of bits in the binary representation of n\n    num_bits = len(binary_num)\n    # Calculate the number of bits to be rotated\n    rot_bits = d % num_bits\n    # Check if the number of bits to be rotated is greater than num_bits\n    if rot_bits > num_bits:\n        # Calculate the number of times to rotate\n        rot_times = rot_bits // num_bits\n        # Calculate the number of bits to rotate by\n        rot_by = num_bits - rot_bits\n        # Rotate the bits\n        rot_bits_str = binary_num[:rot_by] + binary_num[-rot_times:]\n    else:\n        # Calculate the number of times to rotate\n        rot_times = rot_bits // rot_bits\n        # Calculate the number of bits to rotate by\n        rot_by = rot_bits\n        # Rotate the bits\n        rot_bits_str = binary_num[rot_times:] + binary_num[:rot_times]\n    # Convert the rotated bits to decimal format\n    rot_num = int(rot_bits_str, 2)\n    # Return the rotated number\n    return rot_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n\n    # If d is greater than the length of binary_n, it means that we need to rotate left by d bits\n    # instead of left by 32 - d bits\n    if d > len(binary_n):\n        d = d - len(binary_n)\n\n    # Rotate binary_n by d bits to the left\n    rotated_binary_n = binary_n[-d:] + binary_n[:-d]\n\n    # Convert the rotated binary string to an integer\n    rotated_n = int(rotated_binary_n, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary representation\n    binary_representation = bin(n)[2:]\n    \n    # If the number of bits to rotate is less than the number of bits in the number,\n    # we simply concatenate 0s at the beginning\n    if len(binary_representation) < d:\n        binary_representation = '0' * (d - len(binary_representation)) + binary_representation\n    \n    # Rotate the bits left by d bits\n    rotated_bits = binary_representation[d:] + binary_representation[:d]\n    \n    # Convert the rotated bits back to decimal representation\n    rotated_decimal = int(rotated_bits, 2)\n    \n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary number to integer\n    n = int(n, 2)\n\n    # Calculate number of bits to shift by\n    num_bits = 32 - d\n\n    # Calculate the mask for shifting bits to the right\n    mask = (1 << num_bits) - 1\n\n    # Rotate the bits to the left\n    rotated_bits = (n << d) & mask\n\n    # Shift the bits to the right by num_bits\n    shifted_bits = (n >> num_bits) & mask\n\n    # Combine the rotated and shifted bits\n    rotated_number = rotated_bits | shifted_bits\n\n    # Convert the integer back to a binary number\n    rotated_number = bin(rotated_number)[2:].zfill(32)\n\n    return rotated_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string using regular expressions.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # using regular expression to remove all whitespaces\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n\n    Args:\n    text: str\n\n    Returns:\n    str\n    '''\n\n    # Use the `re.sub()` function to remove all whitespaces\n    text = re.sub(r'\\s+', '', text)\n\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all spaces with empty string\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        if i == x:\n            continue\n        for j in range(y, z+1):\n            if j == y:\n                continue\n            if i == j:\n                continue\n            if i + j == x + y:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        if x%i == 0 and y%i == 0 and z%i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return 0\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            return count + 1\n        else:\n            count += 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    while n > 1:\n        # find the minimum element in the remaining array\n        min_index = 0\n        for i in range(1, n):\n            if arr[i] < arr[min_index]:\n                min_index = i\n        # rotate the array\n        arr[0], arr[min_index] = arr[min_index], arr[0]\n        count += 1\n        n -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    count = 0\n    for i in range(n):\n        # Move all elements one position to the right\n        j = i\n        while j < n - 1:\n            arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            j += 1\n\n        # Move all elements one position to the left\n        while j > 0:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n\n        # Check if the array is sorted\n        if arr == sorted(arr):\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Returns the number of rotations required to generate a sorted array.\n\n    :param arr: a list of integers\n    :return: an integer\n    \"\"\"\n    n = len(arr)\n    # check if the array is sorted in non-decreasing order\n    if arr == sorted(arr):\n        return 0\n    # find the largest element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    # find the first occurrence of the largest element\n    for i in range(n):\n        if arr[i] == max_val:\n            first_occurrence = i\n            break\n    # find the last occurrence of the largest element\n    last_occurrence = n - 1\n    while last_occurrence > first_occurrence and arr[last_occurrence] == max_val:\n        last_occurrence -= 1\n    # count the number of rotations required\n    rotations = last_occurrence - first_occurrence\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        # check if the array is already sorted\n        if arr[:i+1] == sorted(arr[:i+1]):\n            return i\n        # check if the array is already sorted in reverse\n        if arr[-i-1:] == sorted(arr[-i-1:], reverse=True):\n            return n-i-1\n    # if none of the above conditions are true, then the array needs to be rotated to generate a sorted array\n    return n//2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # if the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # if the array is already rotated, return 1\n    for i in range(n):\n        if arr[i] > arr[n-1-i]:\n            return 1\n\n    # if the array is not rotated, then find the largest element and compare it to the second largest element\n    for i in range(n-2):\n        if arr[i] > arr[i+1]:\n            return 1\n\n    # if we reach here, the array is already sorted and has at most one rotation\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Find the maximum and minimum element of the array\n    max_elem = max(arr)\n    min_elem = min(arr)\n    # Find the index of the first element greater than the maximum element\n    index_first_greater = -1\n    for i in range(n):\n        if arr[i] > max_elem:\n            index_first_greater = i\n            break\n    # Find the index of the last element smaller than the minimum element\n    index_last_smaller = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] < min_elem:\n            index_last_smaller = i\n            break\n    # Calculate the number of rotations required\n    count_rot = index_first_greater - index_last_smaller\n    return count_rot"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # check for duplicates in the array\n    if len(set(arr))!= n:\n        return -1\n    \n    # find the first non-decreasing element in the array\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            break\n    \n    # check if the array is already sorted\n    if i == n-1:\n        return 0\n    \n    # find the number of rotations required to generate a sorted array\n    count = 0\n    for j in range(n-1, i, -1):\n        if arr[j] < arr[i-1]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    '''\n\n    n = len(arr)\n\n    # Check if array is already sorted\n    if is_sorted(arr):\n        return 0\n\n    # Find the midpoint of the array\n    mid = n // 2\n\n    # If the mid element is greater than the pivot, the array has already been rotated\n    if arr[mid] > arr[0]:\n        return 0\n\n    # Check if the mid element is greater than the last element of the array\n    if arr[mid] > arr[n - 1]:\n        return count_rotation(arr[mid+1:n])\n\n    # Check if the left half of the array is already sorted\n    if is_sorted(arr[:mid]):\n        return 1 + count_rotation(arr[mid:])\n\n    # Check if the right half of the array is already sorted\n    if is_sorted(arr[mid+1:]):\n        return 1 + count_rotation(arr[:mid])\n\n    # If none of the above conditions are met, we need to sort the array and then count the rotations\n    arr = merge_sort(arr)\n    count = 0\n\n    # Find the number of rotations required to generate the sorted array\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            count += 1\n\n    return count\n\n\ndef merge_sort(arr):\n    '''\n    Helper function to sort an array using merge sort algorithm.\n    '''\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    '''\n    Helper function to merge two sorted arrays using the merge sort algorithm.\n    '''\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\n\ndef is_sorted(arr):\n    '''\n    Helper function to check if an array is sorted.\n    '''\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Finding the maximum element in the array\n    max_val = max(arr)\n    # Using binary search to find the index of the maximum element in the array\n    left, right = 0, n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == max_val:\n            right = mid - 1\n        else:\n            left = mid + 1\n    # Finding the index of the first element greater than the maximum element in the array\n    index = right + 1\n    # Counting the number of rotations required to generate a sorted array\n    count = 0\n    while index < n:\n        if arr[index] > arr[index - 1]:\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5) + 1\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check if a number is a perfect square or not\n    def is_square(num):\n        '''\n        This function checks whether a given number is a perfect square or not.\n        '''\n        root = int(num**0.5) + 1\n        return root**2 == num\n\n    # Function to find the square root of a given number\n    def sqrt(num):\n        '''\n        This function calculates the square root of a given number using the Newton's method.\n        '''\n        x = num\n        y = x / 2\n        while abs(y - x) > 0.001:\n            x = y\n            y = (x + num / x) / 2\n        return y\n\n    # Find the square root of the given number\n    square_root = sqrt(n)\n\n    # Check if the square root is a perfect square or not\n    if is_square(square_root) and square_root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if the number is negative or zero\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n\n    # check if the number is already a perfect square\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    if n <= 1:\n        return True\n    i = 0\n    sqrt_n = n ** 0.5\n    while i * i <= sqrt_n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    # We are using the trial division method to check whether the number is a perfect square or not.\n    # This method checks whether the number can be written as the square of an integer.\n    # If it is possible, then it is a perfect square.\n    # Note that we are only checking up to the square root of the number.\n    # If the number is less than the square root of the number, then it is not a perfect square.\n    # If the number is equal to the square root of the number, then it is a perfect square.\n    for i in range(int(n**0.5)+1):\n        if n%i**2 == 0:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return False\n\n    # using the square root function from math module to find the square root of n\n    square_root = round(n ** 0.5)\n\n    # check if the square root of n is an integer\n    if type(square_root)!= int:\n        return False\n\n    # check if the square root of n is equal to the original number\n    return square_root * square_root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # if n is less than or equal to 1, it is not a perfect square\n    if n <= 1:\n        return False\n\n    # loop from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        # if the square of i is equal to n, n is a perfect square\n        if i ** 2 == n:\n            return True\n        # if the square of i is greater than n, check the next number\n        elif i ** 2 > n:\n            break\n\n    # if we make it through the loop without returning True, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes an integer n as input and returns True if it is a perfect square, False otherwise.\n    A perfect square is a positive integer that is equal to the square of its largest perfect square factor.\n    In other words, a perfect square is a positive integer greater than or equal to its largest perfect square factor.\n    '''\n    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        # calculate the largest perfect square factor\n        sqrt_n = int(n ** 0.5) + 1\n        # check whether sqrt_n is a perfect square or not\n        if sqrt_n * sqrt_n == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the trial division method to check whether the number is a perfect square or not\n    i = 0\n    while i * i < n:\n        i += 1\n    if i * i == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # initialize variables\n    even_product = True\n    product = 1\n\n    # calculate product of numbers in the list\n    for num in arr:\n        product *= num\n\n    # check if product is even\n    if product % 2 == 0:\n        even_product = True\n    else:\n        even_product = False\n\n    return even_product\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    # Calculate the product of all the elements in the list\n    for num in arr:\n        product *= num\n\n    # Check whether the product is even or not\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                temp_sum = lists[i][j][k]\n                for l in range(len(lists)):\n                    if l!= i:\n                        temp_sum += lists[l][j][k]\n                for m in range(len(lists[i])):\n                    if m!= j:\n                        temp_sum += lists[i][m][k]\n                for n in range(len(lists[i][j])):\n                    if n!= k:\n                        temp_sum += lists[i][j][n]\n                if temp_sum > max_sum:\n                    max_sum = temp_sum\n                    max_list = [[lists[i][j][k]]]\n                elif temp_sum == max_sum:\n                    max_list.append([lists[i][j][k]])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max sum and index variables\n    max_sum = 0\n    max_sum_index = []\n\n    # Loop through each list in the input list\n    for i in range(len(lists)):\n        # Calculate the sum of the current list\n        current_sum = sum(lists[i])\n\n        # If the current sum is greater than the max sum, update the max sum and index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = [i]\n        elif current_sum == max_sum:\n            max_sum_index.append(i)\n\n    # Return the list in the list of lists whose sum of elements is the highest\n    return lists[max_sum_index[0]]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n\n    for sublist in lists:\n        sublist.sort()\n        current_sum = sum(sublist)\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    result = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            result = lst\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in lists:\n        for j in i:\n            max_sum = max(max_sum, j)\n        if max_sum == j:\n            max_list.append(i)\n        max_sum = float('-inf')\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for i in range(len(lists)):\n        if not isinstance(lists[i], list):\n            raise ValueError(\"All elements of the input list should be lists\")\n\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the index of the maximum sum in the lists\n    max_sum = float('-inf')\n    max_index = -1\n    \n    # Iterate through each list in the lists\n    for i, lst in enumerate(lists):\n        # Calculate the sum of elements in the list\n        sum_lst = sum(lst)\n        \n        # If the sum is greater than the maximum sum, update the maximum sum and the index of the maximum sum\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_index = i\n    \n    # Return the list with the maximum sum\n    return lists[max_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def max_sum(lst):\n        return max(lst)\n    \n    def find_sublist(lst):\n        return max_sum(lst)\n    \n    def sum_list(lst):\n        return sum(lst)\n    \n    max_sum_list = []\n    for lst in lists:\n        sub_list = find_sublist(lst)\n        if sum_list(sub_list) > sum_list(max_sum_list):\n            max_sum_list = sub_list\n    \n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper_count = 0\n    max_run = 0\n    curr_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n        if curr_run > upper_count:\n            upper_count = curr_run\n\n    if curr_run > max_run:\n        max_run = curr_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    end = 0\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n            start = i - max_run + 1\n            end = i\n\n    return test_str[start:end+1]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables for maximum run of uppercase characters and current run\n    max_run = 0\n    current_run = 0\n\n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n\n        # If the current character is uppercase, increment the current run counter\n        if test_str[i].isupper():\n            current_run += 1\n\n        # If the current character is not uppercase, reset the current run counter and compare with max_run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    # Compare the final current_run value with max_run and update max_run if necessary\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the start and end of the current run\n    start = 0\n    end = 0\n    # Initialize variable to keep track of the length of the current run\n    run_length = 0\n    # Loop through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and not the same as the previous character\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            # Update the length of the current run and move the start and end pointers\n            run_length += 1\n            start = i\n        # If the current character is not uppercase and the start of the run has not been updated yet\n        elif not test_str[i].isupper() and start == 0:\n            # Move the start pointer to the next character and reset the run length\n            start = i\n            run_length = 1\n        # If the current character is not uppercase and the start of the run has been updated\n        elif not test_str[i].isupper() and start > 0:\n            # Update the end pointer and reset the run length\n            end = i\n            run_length = 1\n    # Return the length of the longest run of uppercase characters in the string\n    return run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    current_char = ''\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the current character is uppercase\n        if char.isupper():\n            # If the current run is greater than the maximum run\n            if current_run > max_run:\n                # Update the maximum run\n                max_run = current_run\n            # Reset the current run to 0\n            current_run = 0\n        else:\n            # Increment the current run\n            current_run += 1\n        \n        # Update the previous and current characters\n        prev_char = current_char\n        current_char = char\n    \n    # If the last character is uppercase\n    if prev_char.isupper():\n        # If the current run is greater than the maximum run\n        if current_run > max_run:\n            # Update the maximum run\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    run_length = 0\n    max_run_length = 0\n    max_run_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n            if run_length > max_run_length:\n                max_run_length = run_length\n                max_run_start = run_start\n        else:\n            run_length = 0\n            run_start = i + 1\n\n    return test_str[max_run_start:max_run_start + max_run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the maximum run of uppercase characters and its end index\n    max_run = \"\"\n    end_index = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, check if the current run of uppercase characters is longer than the previous longest run\n            if i - end_index + 1 > len(max_run):\n                # If it is, update the maximum run and its end index\n                max_run = test_str[end_index:i+1]\n                end_index = i\n        # If the current character is not uppercase, reset the end index to the current index\n        else:\n            end_index = i\n    \n    # If there is a maximum run, return it\n    if max_run!= \"\":\n        return max_run\n    # Otherwise, return an empty string\n    else:\n        return \"\""
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    upper_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            upper_count += 1\n            current_run += 1\n        else:\n            if upper_count > max_run:\n                max_run = upper_count\n            upper_count = 0\n            current_run = 0\n\n    if upper_count > max_run:\n        max_run = upper_count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    for char in test_str:\n        if char.isupper():\n            run_length = 0\n            while i < len(test_str) and test_str[i].isupper():\n                run_length += 1\n                i += 1\n            if run_length > max_run:\n                max_run = run_length\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n    \"\"\"\n\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n\n    # Check if input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Iterate through list and find first odd number\n    for num in nums:\n        if num % 2!= 0:\n            return num\n\n    # If no odd numbers found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup) & set([K]))!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] not in test_tup[:K]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Returns True if test_tup contains K, otherwise False.\n    \"\"\"\n    for tup in test_tup:\n        if tup[1] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # loop through the test_tup and check if any of the elements are equal to K\n    for tup in test_tup:\n        if tup == K:\n            return True\n    \n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both input tuples must have the same number of elements.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if length of tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of tuples are not the same.\"\n    else:\n        # loop through the tuples\n        for i in range(len(test_tup1)):\n            # compare the elements of the tuples\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        # all elements of the tuples are smaller than their corresponding elements in the first tuple\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]