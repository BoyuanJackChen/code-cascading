[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for num in test_tup1:\n        if num in test_tup2:\n            shared_list.append(num)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements that are present in both tuples.\n\n    Args:\n    test_tup1: A tuple containing elements\n    test_tup2: A tuple containing elements\n\n    Returns:\n    A list of all the elements that are present in both tuples.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples into sets for faster comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the shared set back into a list for easier handling\n    shared_list = list(shared_set)\n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the two lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared_set = set_1.intersection(set_2)\n    # convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it's a non-prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether the given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return True\n    \n    # check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # n is not divisible by any number between 2 and sqrt(n)\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sieve_of_eratosthenes(limit):\n    \"\"\"\n    Returns a list of prime numbers up to the given limit.\n    \"\"\"\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n    return [i for i in range(limit + 1) if primes[i]]\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    primes = sieve_of_eratosthenes(int(math.sqrt(n)))\n    return n not in primes"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise. A prime number is a positive integer greater than 1 that has no\n    positive integer divisors other than 1 and itself.\n    '''\n    \n    # First, check if n is 1 or 0\n    if n <= 1:\n        return True\n    \n    # Check if n is divisible by 2\n    if n == 2:\n        return False\n    \n    # Check if n is divisible by odd numbers\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    \n    # If none of the above conditions are met, n is a prime number\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap from the given list of numbers\n    hq.heapify(nums)\n    \n    # remove and return the n largest integers from the min heap\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n\n    # Create a min heap to store the n largest integers\n    hq.heapify(nums[:n])\n\n    # Remove the smallest element from the heap and add it to the end of the list\n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums, nums[i])\n\n    return nums[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the first n elements\n    max_heap = nums[:n]\n    heapq.heapify(max_heap)\n\n    # remove the largest element from the max heap and append it to the result list\n    result = []\n    while max_heap:\n        result.append(max_heap[0])\n        max_heap = max_heap[1:]\n\n    # reverse the result list and return it\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a min-heap\n    heap = hq.nlargest(n, nums)\n    # convert the min-heap back to a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    hq.heapify(nums)\n    for i in range(n-1, -1, -1):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # convert the list to a heap\n    hq.heapify(nums)\n\n    # extract the largest n elements from the heap and return them\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    hq.heapify(nums, n)\n    # Remove the smallest element from the heap and return it\n    return hq.heappop(nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n\n    for num in nums:\n        heapq.heappush(heap, -num)\n\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap with the given list of numbers\n    heap = hq.nsmallest(n, nums)\n    # extract the n largest integers from the heap in descending order\n    result = [heapq.heappop(heap) for i in range(n)]\n    # reverse the result to get the n largest integers in descending order\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to store the n largest integers\n    max_heap = []\n    # Initialize the min heap with the first n elements of the list\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    # Iterate through the remaining elements of the list\n    for num in nums[n:]:\n        # If the heap is empty, add the number to the heap\n        if len(max_heap) == 0:\n            hq.heappush(max_heap, num)\n        # If the number is greater than the smallest number in the heap, remove the smallest number and add the new number to the heap\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    # Return the n largest integers from the heap\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes a positive integer x and returns True if it is a power of two, False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return is_Power_Of_Two(x - 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1) == 0: # check if x is a power of 2 by checking if x is a multiple of 2\n        if x & 1 == 1: # if x is odd, then x is not a power of 2\n            return False\n        x >>= 1 # shift x to the right by one bit\n    return True # if x is not a power of 2, then it is a power of 2"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x & 1 == 0:\n            count += 1\n            x = x >> 1\n        else:\n            x = x >> 1\n    return count"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n        x = x // 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Initialize a variable to store the count of different bits\n    count = 0\n    \n    # Loop through the bits of x\n    for i in range(32):\n        \n        # Check if the ith bit of x is different from the ith bit of y\n        if (x & (1 << i))!= (y & (1 << i)):\n            count += 1\n            \n    # Return True if the count is 1, False otherwise\n    return (count == 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2 by checking if x has no bits that differ from x by only one bit position\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x)[2:] == bin(x)[3:]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Initialize a variable to store the difference between the two numbers\n    diff = 0\n    # Iterate over the bits of the first number\n    for i in range(32):\n        # Extract the i-th bit of the first number\n        bit_1 = (x >> i) & 1\n        # Extract the i-th bit of the second number\n        bit_2 = (y >> i) & 1\n        # Check if the two bits are different\n        if bit_1!= bit_2:\n            # If they are, store the difference in a variable\n            diff = (diff << 1) | bit_2\n    # Check if the difference is a power of two\n    if diff == 0:\n        return False\n    elif diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    while x > 1:\n        x = x >> 1\n    return True if x == 1 else False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long in the string.\n    '''\n    # Define a regular expression to find words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the regular expression to find all matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Return the list of matched words\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with less than 4 characters\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter out words with length less than 4\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Compile a regular expression pattern for finding words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all words with at least 4 characters using the pattern\n    result = pattern.findall(text)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    # Split the input string into a list of words\n    words = re.findall('\\b\\w+\\b', text)\n    \n    # Filter the list to keep only words that are at least 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    \n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # find all words in the string\n    long_words = [word for word in words if len(word) >= 4] # filter words that are at least 4 characters long\n    return long_words\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_char_long(text))"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # create a dictionary to store the counts of characters in the string\n    char_count = {}\n    for char in str: \n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # find the character that appears the most and the character that appears the least\n    max_char = max(char_count, key=char_count.get)\n    min_char = min(char_count, key=char_count.get)\n    \n    # if the max character is the first character, there is no rotation needed\n    if max_char == str[0]:\n        return 0\n    \n    # find the minimum number of rotations required to get the max character to the end of the string\n    rotations = 0\n    for i in range(len(str)):\n        if str[i:i+2] == max_char*2:\n            rotations += 1\n            break\n    \n    # find the minimum number of rotations required to get the min character to the beginning of the string\n    if min_char!= str[0]:\n        for i in range(len(str)):\n            if str[i:i+2] == min_char*2:\n                rotations -= 1\n                break\n    \n    return abs(rotations)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i + 1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    for i in range(length//2):\n        if str[i]!= str[length-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Initialize an empty string to store the reversed string\n    reversed_str = \"\"\n\n    # Loop through each character in the input string\n    for char in str:\n        # Append the reversed character to the reversed_str string\n        reversed_str += char\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Loop through each character in the reversed_str string\n    for i in range(len(reversed_str)):\n        # Initialize a variable to store the current index\n        curr_index = i\n\n        # Loop through each character in the reversed_str string\n        while curr_index < len(reversed_str) - 1:\n            # If the current character is not equal to the next character, increment the minimum number of rotations\n            if reversed_str[curr_index]!= reversed_str[curr_index + 1]:\n                min_rotations += 1\n                break\n\n            # Increment the current index by 1\n            curr_index += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    \n    for i in range(n): \n        if str[i] == str[n-1-i]: \n            count += 1\n            if count == n: \n                return 0\n    \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = n\n    # Initialize a variable to store the string with the smallest rotation\n    min_str = str\n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Create a copy of the string and rotate it by i positions\n        new_str = str[i:] + str[:i]\n        # Compare the length of the new string with the length of the current minimum string\n        if len(new_str) < len(min_str):\n            # Update the minimum string and its rotation count if the new string is shorter\n            min_str = new_str\n            min_rotations = i\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    max_rotations = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                max_rotations = max(max_rotations, j - i)\n    return max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return 0\n    return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    m = n // 2\n    count = 0\n    while m > 0:\n        if str[:m] == str[m:]:\n            count += 1\n            m //= 2\n        else:\n            m += 1\n    return count + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = float('inf')\n\n    # Iterate through all possible rotations of the string\n    for i in range(len(str)):\n        for j in range(len(str)):\n            # If the character at index i is not equal to the character at index j, increment the count of the character at index i\n            if str[i]!= str[j]:\n                char_count[str[i]] += 1\n\n                # If the count of the character at index i becomes 0, update the minimum number of rotations required\n                if char_count[str[i]] == 0:\n                    min_rotations = min(min_rotations, j - i)\n\n                # Decrement the count of the character at index i\n                char_count[str[i]] -= 1\n\n    # If the minimum number of rotations required is still infinite, there are no rotations required to get the same string\n    if min_rotations == float('inf'):\n        return -1\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a Python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # remove last occurrence of character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # use find() method to find first and last occurrence of given character\n    pos1 = s.find(ch)\n    pos2 = s.rfind(ch)\n    # if there are no occurrences of ch, return original string\n    if pos1 == -1 and pos2 == -1:\n        return s\n    # if there is only one occurrence of ch, remove both occurrences\n    elif pos1 == pos2:\n        return s[:pos1] + s[pos2+1:]\n    # if there are multiple occurrences of ch, remove only first occurrence\n    else:\n        return s[:pos1] + s[pos2+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # splitting the string into words\n    words = s.split()\n    # checking for the first occurrence of the character\n    if words[0].count(ch) == 1:\n        words = words[1:]\n    # checking for the last occurrence of the character\n    if words[-1].count(ch) == 1:\n        words = words[:-1]\n    # joining the words back into a string\n    return''.join(words)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        s = s.replace(ch,'')\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #splitting the string into list of characters\n    lst = list(s)\n    #finding the index of first occurrence of character\n    ind = lst.index(ch)\n    #removing first occurrence\n    lst.pop(ind)\n    #finding the index of second occurrence\n    ind2 = lst.index(ch)\n    #removing last occurrence\n    lst.pop(ind2)\n    #converting the list to string\n    result = ''.join(lst)\n    #returning the result\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # remove the first occurrence of the character\n    if s.find(ch) == 0:\n        return s[1:]\n    # remove the last occurrence of the character\n    if s.rfind(ch) == len(s)-1:\n        return s[:-1]\n    # if the character is not found, return the original string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        # Check if the first occurrence is found\n        if s.find(ch) == 0:\n            s = s[1:]\n        # Check if the last occurrence is found\n        if s.rfind(ch) == len(s)-1:\n            s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s) #convert string to list for manipulation\n    s.remove(ch) #remove first occurrence\n    s.remove(ch) #remove last occurrence\n    return ''.join(s) #join the list to form a string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    if not ch in s:\n        return s\n    return s[:s.find(ch)] + s[s.find(ch)+1:]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # initialize sum of current row to zero\n        curr_sum = 0\n        for j in range(n):\n            # calculate sum of current row\n            curr_sum += M[i][j]\n        # sort current row in ascending order\n        M[i] = sorted(M[i])\n        # add current row to its own row index to maintain the original index order\n        M[i].insert(i, curr_sum)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = [[0 for j in range(cols)] for i in range(rows)]\n    \n    for i in range(rows):\n        for j in range(cols):\n            sorted_matrix[i][j] = M[i][j]\n    \n    for i in range(rows):\n        min_idx = i\n        for j in range(i+1, rows):\n            if sum(sorted_matrix[j]) < sum(sorted_matrix[min_idx]):\n                min_idx = j\n        \n        sorted_matrix[i], sorted_matrix[min_idx] = sorted_matrix[min_idx], sorted_matrix[i]\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    M - a list of lists representing the matrix.\n\n    Returns:\n    A list of lists representing the sorted matrix.\n\n    '''\n\n    # Calculate the sum of each row of the matrix\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # Sort the matrix by row sum in ascending order\n    sorted_M = sorted(M, key=lambda x: row_sums.index(sum(x)))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M.sort(key=lambda x: sum(x))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums\n    row_sums.sort()\n    \n    # Create a list of indices to sort the matrix\n    row_indices = [i for i, row_sum in enumerate(row_sums) for _ in range(M.count(row_sum))]\n    \n    # Sort the matrix based on the row indices\n    sorted_M = [M[i] for i in row_indices]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the variables for the sorted matrix and the row sums\n    sorted_matrix = []\n    row_sums = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Initialize a variable for the current row sum\n        row_sum = 0\n        \n        # Loop through each element in the row and add it to the row sum\n        for element in row:\n            row_sum += element\n        \n        # Add the row sum to the row sums list\n        row_sums.append(row_sum)\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Initialize the index variable for the sorted matrix\n    index = 0\n    \n    # Loop through each row in the matrix\n    for row in M:\n        # Initialize a variable for the current row\n        current_row = []\n        \n        # Loop through each element in the row and add it to the current row\n        for element in row:\n            # If the current row sum is less than the element, add the element to the sorted matrix and update the row sum and the index variables\n            if row_sums[index] < element:\n                current_row.append(element)\n                row_sums[index] += element\n                index += 1\n            \n            # Otherwise, add the element to the current row\n            else:\n                current_row.append(element)\n        \n        # Add the sorted row to the sorted matrix\n        sorted_matrix.append(current_row)\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    row_sums.sort()\n    # Create a new list that contains only the rows from the original matrix that have the same sum as the row_sums list\n    rows = [M[i] for i in range(len(M)) if row_sums[i] == row_sums[0]]\n    # Sort the rows in ascending order based on the sum of their columns\n    cols = [sorted(row) for row in rows]\n    return cols"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a variable to store the sum of each row\n    row_sums = [0] * len(M[0])\n    \n    # Calculate the sum of each row\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            row_sums[j] += M[i][j]\n            \n    # Initialize a variable to store the final sorted matrix\n    sorted_M = [[0] * len(M[0]) for _ in range(len(M))]\n    \n    # Sort each row based on the sum of its values\n    for i in range(len(M)):\n        sorted_M[i] = sorted(range(len(M[i])), key=lambda j: M[i][j])\n        \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the maximum element in the row and swap it with the current element\n        max_index = i\n        for j in range(i+1, n):\n            if M[max_index][j] > M[i][j]:\n                max_index = j\n        M[i][n-1], M[max_index][n-1] = M[max_index][n-1], M[i][n-1]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of each side of a triangular prism as inputs and calculates its volume.\n    '''\n    V = 0.5 * l * b * h  # formula for volume of triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n\n    # calculate the area of the prism\n    area = (1/2)*l*b\n\n    # calculate the volume of the prism\n    volume = area*h\n\n    # return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #calculating the volume of the triangular prism using formula V = (1/6) * l * b * h\n    V = (1/6) * l * b * h\n    \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 1/3 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3 # Formula for volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculating the volume of the prism\n    Volume = (l*b*h)/3\n\n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]*_[a-z]*'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define regular expression pattern for matching sequences of lowercase letters joined with an underscore\n    pattern = r'([a-z][a-z0-9_]*)'\n\n    # Use re.findall() function to match the pattern in the input string and return the list of matched strings\n    matched_strings = re.findall(pattern, text)\n\n    # Check if the list of matched strings is empty or not\n    if matched_strings:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])([a-z]+)(?=[a-z])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])([A-Z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match a sequence of lowercase letters\n    pattern = r'(?<=[a-z])(?=[a-z][a-z])'\n    \n    # Use the re.search() method to search for a match in the input text\n    match = re.search(pattern, text)\n    \n    # If a match is found, return True, otherwise return False\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = re.compile('([a-z])_([a-z])')\n    underscore_count = underscore_pattern.findall(text)\n    if len(underscore_count) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n    "
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string) \n    remove_list = list(remove_string) \n    for char in remove_list: \n        if char in string: \n            string_list.remove(char) \n    new_string = ''.join(string_list) \n    return new_string "
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(len(string)): \n        if string[i] in string: \n            string = string[:i] + string[i+1:] \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for i in range(len(string)):\n        if string[i] in string_list:\n            string_list.remove(string[i])\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    char_count = [0] * NO_OF_CHARS\n\n    for char in string:\n        char_count[ord(char)] += 1\n\n    result = []\n    for char in char_set:\n        if char_count[ord(char)] > 0:\n            result.append(char)\n            char_count[ord(char)] -= 1\n\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_set = set(string)\n    char_set = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?`~')\n    common_set = string_set.intersection(char_set)\n    return ''.join(char for char in string if char not in common_set)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    second_string_list = list(second_string)\n    result_list = []\n\n    for char in string_list:\n        if char not in second_string_list:\n            result_list.append(char)\n\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two string parameters and returns the string where all characters in the first string that are present in the second string are removed.\n    \"\"\"\n    # Convert the second string to a set to remove duplicates\n    set_string2 = set(string2)\n    \n    # Convert the first string to a set to remove duplicates\n    set_string1 = set(string1)\n    \n    # Find the characters that are present in both strings\n    common_chars = set_string1.intersection(set_string2)\n    \n    # Create a new string by removing the common characters from the first string\n    new_string = \"\"\n    for char in string1:\n        if char not in common_chars:\n            new_string += char\n    \n    # Return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate over all the characters in the list\n    for char in char_list:\n        # Check if the character is not present in the second string\n        if char not in string:\n            # If it's not, add it to the result list\n            result.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the second string to a set to remove duplicates\n    remove_set = set(remove_chars)\n    # Iterate over the string and add each character to a new list\n    result = []\n    for char in string:\n        if char not in remove_set:\n            result.append(char)\n    # Return the result as a string\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns the list of characters in string1 which are not present in string2.\n    \"\"\"\n    char_set = set(string2)\n    result = []\n    for char in string1:\n        if char not in char_set:\n            result.append(char)\n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    # Check if the array is empty\n    if len(arraynums) == 0:\n        return False\n    \n    # Check if the first element is the only one\n    if len(arraynums) == 1:\n        return True\n    \n    # Initialize two variables to keep track of the current and previous element\n    current = arraynums[0]\n    previous = None\n    \n    # Iterate over the rest of the array\n    for i in range(1, len(arraynums)):\n        # If the current element is equal to the previous one, it means there is a duplicate\n        if arraynums[i] == current:\n            return True\n        \n        # If the current element is different from the previous one, update the current element\n        current = arraynums[i]\n        \n        # If the current element is the first one, update the previous element and skip the loop\n        if previous is None:\n            previous = arraynums[i]\n            continue\n        \n        # If the previous element is not the same as the current element, update the previous element\n        previous = current\n    \n    # If the loop ends without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through each element in the array\n    for num in arraynums:\n        # If the element is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n\n    # If we make it through the entire loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    counts = {}\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Check if any element has a count greater than 1\n    for count in counts.values():\n        if count > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    elif arraynums[0] == arraynums[-1]:\n        return True\n    else:\n        for i in range(len(arraynums)-1):\n            if arraynums[i] == arraynums[i+1]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Initialize an empty dictionary to store the indices of the duplicate elements\n    duplicate_indices = {}\n\n    # Loop through the array and store the index of the duplicate elements in a dictionary\n    for i in range(len(arraynums)):\n        if arraynums[i] in duplicate_indices:\n            duplicate_indices[arraynums[i]].append(i)\n        else:\n            duplicate_indices[arraynums[i]] = [i]\n\n    # Check if any duplicate elements are present in the dictionary\n    for value in duplicate_indices.values():\n        if len(value) > 1:\n            return True\n\n    # If no duplicate elements are present, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    num_set = set(arraynums)  # create a set to store unique numbers\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the indices of the first occurrence of each element\n    indices = {}\n\n    # Iterate through the array\n    for i, num in enumerate(arraynums):\n        # If the number is already in the dictionary, return True\n        if num in indices:\n            return True\n        # Otherwise, add the index to the dictionary\n        else:\n            indices[num] = i\n\n    # If we make it through the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store unique elements\n    unique_nums = set()\n\n    # Iterate through the array and add each unique element to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # Check if the set is empty, which means there are no duplicates in the array\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Define a list of all the possible combinations of digits in the number\n    combinations = [(1, 2, 3), (4, 5), (6, 7, 8), (9, 0)]\n    # Check if the number has any of these combinations\n    for combo in combinations:\n        if x % sum(combo) == 0:\n            return True\n    # If none of the combinations match, the number is not a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x == 1 or x == 4 or x == 16:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"It is a Woodball.\"\n    else:\n        return \"It is not a Woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 7 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    elif x == 0:\n        return True\n    elif x > 0:\n        for i in range(2, x//2+1):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 5 or x == 7 or x == 11 or x == 13:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 5 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 5 or x == 10: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    while num!= 0:\n        digit = num % 10\n        reversed_num = reversed_num * 10 + digit\n        num //= 10\n    return num == 1 and reversed_num == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num % 2 == 0 and num == int(str(num)[::-1])"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == (2*rev_num)-1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # calculate the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # check if the reversed number is one less than twice the original\n    if reverse == (2 * num) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reversed_num = reversed_num * 10 + digit\n        temp //= 10\n        \n    return reversed_num - 1 <= 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num*10 + num%10\n        num = num//10\n    return num == reversed_num//2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n    num (int): a number to check.\n\n    Returns:\n    bool: True if num is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    return num < rev_int - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num >= 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    return num == reverse - 2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j and arr[i] + arr[j] <= 9:\n                max_num = max(max_num, arr[i] + arr[j])\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            m = max(m, int(\"\".join(sorted(str(arr[i])+str(arr[j])))))\n    return m"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    result = 0\n    for digit in arr:\n        result = result*10 + digit\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    n = len(arr)\n\n    for i in range(n) : \n        for j in range(n) : \n            if j!= i and arr[i] + arr[j] == 9 : \n                max_num = max(max_num, arr[i] + arr[j] + arr[n-1])\n                max_num = max(max_num, arr[i] + arr[j] - arr[n-1])\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(sorted(str(arr[i])+str(arr[j]))))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed by concatenating the digits in the list.\n\n    Args:\n        arr: A list of digits.\n\n    Returns:\n        The maximum number that can be formed by concatenating the digits in the list.\n    \"\"\"\n    max_num = 0\n    temp = 0\n    for num in arr:\n        temp = temp * 10 + num\n        max_num = max(max_num, temp)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the given list of digits in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the maximum number formed with the given list of digits\n    max_num = 0\n\n    # Iterate through the sorted list of digits and for each digit, calculate the maximum number that can be formed with the remaining digits\n    for digit in arr:\n        if digit == 0:\n            # If the digit is 0, the maximum number formed with the remaining digits is 0\n            max_num = 0\n        else:\n            # If the digit is not 0, the maximum number formed with the remaining digits is the sum of the maximum number formed with the first digit and the second digit (maximum number formed with the remaining digits - first digit - second digit)\n            max_num = max_num + (max_num - digit - 1)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (10**i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Initialize max_num as the first element of the list\n    max_num = arr[0]\n\n    # Traverse through the list from second element to last element\n    for i in range(1, len(arr)):\n        # Initialize carry as 0\n        carry = 0\n\n        # Traverse through the list from i to last element\n        for j in range(i, len(arr)):\n            # If current number is greater than or equal to max_num, add carry to it\n            if arr[j] >= max_num:\n                arr[j] += carry\n\n            # If carry becomes greater than 9, subtract 10 from max_num and carry to make it less than 10\n            while carry >= 10:\n                carry -= 10\n                max_num -= 10\n\n        # Add carry to max_num\n        max_num += carry\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sorting the input list in ascending order\n    arr.sort()\n\n    # Initializing variables\n    max_num = arr[0]\n    temp = 1\n\n    # Starting from the second element\n    for i in range(1, len(arr)):\n\n        # Checking if the current element can be added to the temp\n        if (arr[i] + temp) <= 9:\n            temp += arr[i]\n        else:\n            # Updating the maximum number\n            if temp > max_num:\n                max_num = temp\n\n            # Resetting the temp\n            temp = arr[i]\n\n    # Adding the last number to the maximum number if it is less than or equal to 9\n    if temp > max_num and temp <= 9:\n        max_num = temp\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both numbers have opposite signs\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs and False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function will check whether the given two integers have opposite signs or not.\n    '''\n    if x > 0 and y > 0:\n        return 'Positive'\n    elif x < 0 and y < 0:\n        return 'Negative'\n    else:\n        return 'Both have same signs'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both numbers are positive or both are negative\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return False\n    # Check if the signs of both numbers are opposite\n    elif x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    # If both numbers have the same sign, then they are not opposite\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x * y) >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    # Check if both integers have opposite sign\n    if x == 0 and y == 0:\n        return True\n    elif x == 0:\n        return False\n    elif y == 0:\n        return True\n    elif x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return x * y >= 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        print(\"Both numbers have opposite signs\") \n    elif x > 0 and y > 0: \n        print(\"Both numbers have the same sign\") \n    elif x > 0 and y < 0: \n        print(\"The first number has a positive sign and the second number has a negative sign\") \n    elif x < 0 and y > 0: \n        print(\"The first number has a negative sign and the second number has a positive sign\") \n    else: \n        print(\"Both numbers have the same sign\") \n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_n_th_octagonal(n):\n        \"\"\"\n        Recursive function to calculate nth octagonal number.\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            if n % 2 == 0:\n                return get_n_th_octagonal(n//2)*get_n_th_octagonal(n//2)*10 + 2\n            else:\n                return get_n_th_octagonal(n//2)*get_n_th_octagonal(n//2)*10 + 5\n\n    if is_prime(n):\n        return get_n_th_octagonal(n)\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    for i in range(1, n+1):\n        for j in range(i):\n            if i+j == n:\n                return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*8 - 16"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    This function checks if a given number is an octagonal number or not.\n    '''\n\n    if n % 2 == 0:  # Check if n is even\n        return False\n\n    octagonal_numbers = [num for num in range(1, 1000) if num % 2 == 0]  # Generate all even numbers less than 1000\n    octagonal_numbers.sort()  # Sort the list in ascending order\n\n    for i in range(len(octagonal_numbers) - 1):\n        if n - octagonal_numbers[i] == octagonal_numbers[i+1] - n:\n            return True\n\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    limit = int(n*(n+1)/2)\n    for i in range(1, limit+1):\n        if i ** 3 == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_square(num):\n        return int(num**0.5)**2 == num\n\n    octagonal_num = 0\n\n    for i in range(1, 101):\n        if is_square(i) and (i * i) == 8 * i:\n            octagonal_num = i\n\n    return octagonal_num\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return False\n    # Convert n to a string\n    n_str = str(n)\n    # Calculate the sum of the digits\n    total = sum([int(digit) for digit in n_str])\n    # Check if the sum of the digits is equal to n\n    if total == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    \n    # initialize the first row with 1\n    dp[0] = 1\n    \n    # iterate over the remaining rows\n    for i in range(1, n):\n        # for each row, we can either include the current character or not\n        dp[i] = dp[i-1] + dp[i]\n        \n        # if the current character is a digit, we need to add the length of the substring\n        if s[i].isdigit():\n            dp[i] += i\n            \n    # return the sum of all the rows\n    return sum(dp.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a dictionary to store the count of substrings with the sum of digits equal to their length\n    d = defaultdict(int)\n\n    # loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            num = sum([int(digit) for digit in s[i:j]])\n            # check if the sum of digits is equal to the length of the substring\n            if num == len(s[i:j]):\n                # increment the count in the dictionary\n                d[num] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return len(d)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the number of substrings of each length\n    count = defaultdict(int)\n\n    # loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # check if the sum of digits in the substring equals to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                # add 1 to the count of substrings with the given length\n                count[j-i] += 1\n\n    # return the count of all substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[s[i]] += 1\n    count = 0\n    for key in digit_count:\n        count += digit_count[key] * (digit_count[key] + 1) // 2\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of each substring\n    substring_count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each possible substring starting from the current index\n        for j in range(i, len(s)):\n            # if the substring contains only digits, add it to the dictionary and increment the count\n            if s[i:j+1].isdigit():\n                substring_count[s[i:j+1]] += 1\n\n    # return the count of all substrings with the sum of digits equal to their length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    n = len(s)\n    # initialize a dictionary to store the number of substrings for each length of the sum of digits\n    count_dict = defaultdict(int)\n    # loop over all possible substrings of the given string s\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the sum of digits in the substring\n            digit_sum = sum(int(digit) for digit in s[i:j])\n            # check if the sum of digits is equal to its length and update the count in the dictionary\n            if digit_sum == len(s):\n                count_dict[len(s)] += 1\n    # return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Iterate through all possible substrings of the current character\n        for j in range(i+1, len(s)+1):\n            # Check if the substring has the sum of digits equal to its length\n            if sum([int(x) for x in s[i:j]]) == len(s[i:j]):\n                # Increment the count of substrings with the sum of digits equal to their length\n                count[len(s[i:j])] += 1\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    # Count the frequency of each digit in the string s\n    freq = defaultdict(int)\n    for c in s:\n        freq[int(c)] += 1\n\n    # Count the number of substrings with sum of digits equal to length\n    count = 0\n    for i in range(1, len(s)+1):\n        substring = ''.join(s[j:j+i] for j in range(len(s)-i+1))\n        if sum(int(c) for c in substring) == i:\n            count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    char_count = defaultdict(int)\n    for i in range(len(s)):\n        char_count[s[i]] += 1\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            sum_digits = sum(digits)\n            if sum_digits == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs[0], smallest_num(xs[1:]))"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0] # Assume the first element is the smallest\n    for x in xs:\n        if x < smallest: # Check if each element is smaller than the smallest\n            smallest = x # Update the smallest element\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize smallest number to be the first element of the list\n    smallest = xs[0]\n    # Loop through the rest of the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest number, update smallest\n        if num < smallest:\n            smallest = num\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][0] - test_list[j][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference to be the smallest value in the list\n    max_diff = test_list[0]\n    \n    # Loop through the list and compare the next value with the current maximum\n    for i in range(1, len(test_list)):\n        if test_list[i] - test_list[i-1] > max_diff:\n            max_diff = test_list[i] - test_list[i-1]\n    \n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and sorts it in ascending order based on the second value of each tuple.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # sort the list of tuples using second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    # print the sorted list of tuples\n    for i in sorted_marks:\n        print(i)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    elif isinstance(data_list, int) or isinstance(data_list, float):\n        return data_list\n    else:\n        print(\"Invalid input.\")"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n    \n    def sum_elements(lst):\n        '''\n        Recursive function to sum all the elements in a flattened list.\n        '''\n        if not lst:\n            return 0\n        else:\n            return lst[0] + sum_elements(lst[1:])\n    \n    flattened_list = list(flatten(data_list))\n    return sum_elements(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: if the list is empty\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])  # recursive case: add the first element and the result of summing the rest of the list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, result):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n    flat_list = flatten(data_list, [])\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: list inside list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # recursive case: list element\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            flat_list = []\n            for item in data_list:\n                flat_list.extend(flatten_list(item))\n            return flat_list\n        else:\n            return [data_list]\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(nested_list):\n        flattened_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    def sum_list(flattened_list):\n        total = 0\n        for item in flattened_list:\n            total += item\n        return total\n\n    flattened_list = flatten_list(data_list)\n    return sum_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the head of the list to the sum of the tail recursively\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of integers as input and returns the count of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    def helper(i, j):\n        if i > n:\n            return 1\n        return helper(i + 1, j) + helper(i, j + 1)\n    \n    return helper(0, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Iterate over all possible partitions of n\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition i using the factorial of n-i\n        ways_to_partition = factorial // (factorial // i)\n        ways *= ways_to_partition\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the variables\n    partition_count = 1\n    # Loop through all possible values of k\n    for k in range(1, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers with k elements\n        partition_count *= k\n        # Calculate the number of ways to partition the set of Bell numbers with k+1 elements\n        partition_count //= k + 1\n    # Return the number of ways to partition the set of Bell numbers\n    return partition_count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 1\n    \n    # Calculate the Bell numbers up to n\n    for i in range(2, n+1):\n        ways = ways * i\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # initialize the first few values of bell_number\n    bell_numbers = [0, 1]\n\n    # compute the remaining values of bell_number\n    for i in range(2, n + 1):\n        bell_numbers.append(sum([bell_numbers[j] * (n - j + 1) // (i - j + 1) for j in range(i)]))\n\n    # return the last value of bell_number\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 587869, 2202640, 77704177, 295232416, 1046891500, 4550748111, 16807552597, 662768442060, 2814749767105, 10737418240000, 48222838993184, 209227898880000, 964466989804800, 4284467902616800, 22474394331439360, 121645100408832000, 667705550124080640, 3735928559828036608, 19133403171995240960, 96667031199839744000, 567964605209026062080, 3240886794783297021440, 17592186044416726634496, 1000000000000000000000000, 5000000000000000000000000, 268435456000000000000000000, 13421772800000000000000000000, 737869762948382064672640000000, 419430400000000000000000000000, 23058430092136939532800000000000, 125829120000000000000000000000000, 6871947673558059302220800000000000, 387420481776674309111523840000000000, 214748364800000000000000000000000000, 10000000000000000000000000000000000000]\n\n    if n < 0 or n > 31:\n        raise ValueError(\"n must be between 0 and 31\")\n\n    return bell_numbers[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is a monotonic increasing or decreasing array, else False.\n    '''\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    A is an array of integers.\n\n    A is considered to be monotonic if and only if:\n    1. All elements in A are either all positive or all negative.\n    2. If the array contains a mix of positive and negative elements, then the array is not monotonic.\n\n    For example:\n    A = [1, 2, 3, 4, 5]\n    is_Monotonic(A) # True\n\n    A = [1, -2, 3, 4, -5]\n    is_Monotonic(A) # False\n\n    A = [1, 2, 3, 4, 4]\n    is_Monotonic(A) # True\n\n    A = [1, 2, 3, 5, 4]\n    is_Monotonic(A) # False\n    '''\n\n    # Check if all elements are either positive or negative\n    all_positive = all(x >= 0 for x in A)\n    all_negative = all(x <= 0 for x in A)\n\n    # If all elements are either positive or negative, then the array is not monotonic\n    if all_positive or all_negative:\n        return False\n\n    # Check if the array contains a mix of positive and negative elements\n    mix_positive_negative = any(x < 0 and x > 0 for x in A)\n\n    # If the array contains a mix of positive and negative elements, then the array is not monotonic\n    if mix_positive_negative:\n        return False\n\n    # If none of the above conditions are satisfied, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and returns True if the array is monotonic \n    (increasing or decreasing), False otherwise. A monotonic array is an array \n    where each element either monotonically increases or decreases, either \n    simultaneously or sequentially. For example, [1, 3, 2, 4] is a monotonic \n    array, while [1, 2, 3, 4] is not.\n    '''\n    if len(A) == 0:\n        return False\n    \n    for i in range(1, len(A)):\n        if (A[i] > A[i-1]) and (A[i]!= A[i-1]+1):\n            return False\n        elif (A[i] < A[i-1]) and (A[i]!= A[i-1]-1):\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes in an array A and returns True if it is monotonic and False otherwise.\n    A is an array of integers.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i-1] >= A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2: \n        return True\n\n    if A[0] == A[-1]: \n        return True\n\n    if A[0] > A[-1]: \n        return is_Monotonic(A[1:-1]) and A[0] >= A[-1]\n    else: \n        return is_Monotonic(A[1:]) and A[-1] <= A[0]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # Check if the array is monotonic in terms of increasing order\n    if A[0] <= A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # Check if the array is monotonic in terms of decreasing order\n    elif A[0] >= A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # If none of the above conditions are met, return False\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        for i in range(len(A) - 1):\n            if A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the list is empty\n    if not l:\n        return False\n\n    # Initialize the index and length of the sublist\n    i = 0\n    sublist_length = len(s)\n\n    # Iterate through the list\n    while i < len(l):\n        # Check if the current element matches the first element of the sublist\n        if l[i] == s[0]:\n            # Check if the sublist matches the remaining elements of the list\n            if l[i:] == s:\n                return True\n        # If the current element does not match the first element of the sublist,\n        # move the index and remove the first element of the sublist\n        i += 1\n        sublist_length -= 1\n\n    # If the sublist is not found in the list, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if s is empty\n    if not s:\n        return True\n    # check if s is a sublist of l\n    elif s[0] in l and is_sublist(l[1:], s[1:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes a list l and a sublist s as input and returns True\n    if s is a sublist of l, else False.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If the sublist is empty, return True\n    if not s:\n        return True\n    # Initialize the pointers of both lists\n    i, j = 0, 0\n    # Loop through the sublist s\n    while j < len(s):\n        # If the element at index j of sublist s matches the element at index i of the original list l, increment both pointers\n        if s[j] == l[i]:\n            i += 1\n        # If we have gone through the entire sublist s, return True\n        if i == len(l):\n            return True\n        # Increment the index of the sublist s by 1\n        j += 1\n    # If we have gone through the entire original list l without finding a match, return False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have equal length\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_tuples = [tuple(x) for x in Input]\n    all_lengths = [len(x) for x in all_tuples]\n\n    if all_lengths.count(all_lengths[0]) == len(all_lengths):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set()\n    for tuple_ in Input:\n        length_set.add(len(tuple_))\n    return len(length_set) == 1"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        gap = (gap + n) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    gap = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap //= 1\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n\n    min_idx = 0\n\n    while swapped:\n        swapped = False\n\n        # Move the gap one position to the right\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size by a factor of 1.3\n        gap = int(gap / 1.3)\n\n        # If the gap is 1, it means the array is already sorted\n        if gap == 1:\n            break\n\n        # Move the gap one position to the right until it is greater than 1\n        while gap > 1:\n            gap = int(gap / 1.3)\n\n        # If the gap is less than or equal to 1, it means the array is already sorted\n        if gap == 1:\n            break\n\n        # Move the minimum element to the end\n        for i in range(n-2, min_idx-1, -1):\n            if nums[i] > nums[min_idx]:\n                nums[i], nums[min_idx] = nums[min_idx], nums[i]\n                min_idx = i\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables\n    swapped = True\n    i = 0\n    j = len(nums) - 1\n\n    # While the list is not sorted\n    while swapped:\n        swapped = False\n\n        # Iterate through the list and swap adjacent elements if they are in the wrong order\n        for k in range(i, j):\n            if nums[k] > nums[k+1]:\n                nums[k], nums[k+1] = nums[k+1], nums[k]\n                swapped = True\n\n        # Decrease the gap size by a factor of 1.3\n        gap = int(j * 1.3)\n\n        # If the gap size is less than 1, set it to 1\n        if gap < 1:\n            gap = 1\n\n        # Re-initialize the indices\n        i += gap\n        j -= gap\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    min_idx = 0\n    max_idx = n-1\n\n    # Swap adjacent elements if they are in the wrong order\n    while min_idx < max_idx:\n        for i in range(min_idx, max_idx):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n\n        # Find the index of the minimum element\n        min_idx = 0\n        for i in range(1, max_idx):\n            if nums[i] < nums[min_idx]:\n                min_idx = i\n\n        # Find the index of the maximum element\n        max_idx = n-1\n        for i in range(n-2, min_idx-1, -1):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n\n        # Swap adjacent elements if they are in the wrong order\n        for i in range(min_idx, max_idx):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap/1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap/1.3)\n        \n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"The number is not a positive integer.\"\n    # check if n can be represented as the difference of two squares\n    else:\n        for i in range(1, n//2+1):\n            if i**2 + i**2 == n:\n                return \"The number can be represented as the difference of two squares.\"\n            elif i**2 + i**2 < n:\n                continue\n            else:\n                break\n        return \"The number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # To check if a number can be represented as the difference of two squares\n    # we need to check if it is divisible by 2 and if it can be represented as the sum of two squares\n    if n % 2 == 0 and n > 0: \n        # Check if n can be represented as the sum of two squares\n        a, b = 0, int(n/2)\n        while a**2 <= n:\n            b += 1\n            a += 2\n        if b**2 == n:\n            print(True)\n        else:\n            print(False)\n\n    # If the number cannot be represented as the difference of two squares, print False\n    else:\n        print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Check if the number is divisible by 4\n    if n[0] == '0' and n[-1] == '0':\n        return False\n    # Check if the number has an odd number of digits\n    elif len(n) % 2 == 0:\n        return False\n    # Check if the number is a perfect square\n    elif int(n)**2 == int(n) and int(n)**2 == n:\n        return True\n    # If none of the above conditions are true, the number is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n - i*i == i*i:\n            print(\"True\")\n            return\n    print(\"False\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # initialize variables for checking whether the given number can be represented as the difference of two squares or not\n    sum_of_squares = 0\n    diff_of_squares = 0\n    difference = 0\n    is_valid = False\n\n    # calculate the sum of squares of the given number\n    for i in range(n):\n        sum_of_squares += i * i\n\n    # calculate the difference of squares of the given number and store it in the variable difference\n    difference = (n * n) - sum_of_squares\n\n    # check whether the difference of squares can be represented as the difference of two squares or not\n    if difference % 4 == 0:\n        # if it can be represented as the difference of two squares, then check whether it is a perfect square or not\n        square_root = int(difference ** 0.5)\n        if sum_of_squares == square_root * square_root:\n            is_valid = True\n\n    return is_valid"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # First, find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # Then, check if the square of the square root of n is equal to n\n    if (sqrt_n ** 2) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i * i <= n:\n        j = 1\n        while i * i + j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if i*i == n:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*i+j*j == n:\n                return True\n            elif i*i+j*j < n:\n                continue\n            else:\n                break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # checking if the given number is a positive integer\n    if n < 0 or not n.is_integer():\n        print(\"Please enter a positive integer\")\n        return\n    \n    # finding the square root of the given number\n    root = n ** 0.5\n    \n    # checking if the square root of the given number is an integer\n    if not root.is_integer():\n        print(\"The square root of the given number is not an integer\")\n        return\n    \n    # finding the difference of the square root and the given number\n    diff = n - root\n    \n    # checking if the difference of the square root and the given number is a square\n    if diff ** 2 == root ** 2:\n        print(\"The given number can be represented as the difference of two squares\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n\n    # Check if the length of colors and patterns is the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check for the same colors in each pattern\n    for i in range(len(patterns)):\n        if len(patterns[i])!= len(set(colors)):\n            return False\n\n    # Check if the first color is in all patterns\n    if len(set(colors))!= len(patterns):\n        return False\n\n    # Check if all colors in the first pattern occur after the first color in the second pattern\n    for i in range(len(patterns)):\n        if i > 0 and patterns[i][0] not in patterns[i-1] and patterns[i][0] in patterns[i][1]:\n            return False\n\n    # Check if the colors in all patterns occur in the same order\n    for i in range(len(patterns)):\n        if not set(patterns[i]) == set(colors):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    n = len(colors)\n    # Check if patterns array is empty\n    if not patterns:\n        return True\n    # Check if the length of patterns array is equal to n\n    if len(patterns)!= n:\n        return False\n    # Check if the first pattern matches the first color in the colors array\n    if patterns[0]!= colors[0]:\n        return False\n    # Initialize variables to keep track of the current pattern and current color\n    pattern = [colors[0]]\n    current_color = colors[0]\n    # Loop through the remaining colors\n    for i in range(1, n):\n        # If the current color is not in the current pattern, return False\n        if current_color not in pattern:\n            return False\n        # Update the current pattern and current color\n        pattern.append(colors[i])\n        current_color = colors[i]\n        # If the current pattern matches the next pattern in the patterns array, return True\n        if pattern == patterns[i]:\n            return True\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if pattern == 'w' and colors[i] == 'w':\n            continue\n        elif pattern == 'b' and colors[i] == 'b':\n            continue\n        elif pattern == 'r' and colors[i] == 'r':\n            continue\n        elif pattern == 'g' and colors[i] == 'g':\n            continue\n        elif pattern == 'o' and colors[i] == 'o':\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # initialize a list to store the current pattern\n    current_pattern = []\n\n    # iterate through the colors array\n    for color in colors:\n        # add the current color to the current pattern\n        current_pattern.append(color)\n        # check if the current pattern is equal to the corresponding pattern in the patterns array\n        if current_pattern == patterns[current_pattern.index(color)]:\n            continue\n        else:\n            return False\n    # if we reach this point, the current pattern is not equal to the corresponding pattern in the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if not all(patterns[i][j] == colors[j] for j in range(len(patterns[i]))):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    count = 0\n    prev_pattern = 0\n    # Loop through the colors and patterns lists\n    for color, pattern in zip(colors, patterns):\n        if pattern == prev_pattern:\n            count += 1\n            prev_pattern = pattern\n        else:\n            # Check if the count is 0, then return False\n            if count == 0:\n                return False\n            # If the count is greater than 0, then reset the count and continue\n            count = 0\n            prev_pattern = pattern\n    # If the loop finishes without returning False, then it means the patterns are same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize the same_pattern variable to True\n    same_pattern = True\n\n    # Iterate over the colors and patterns arrays\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            same_pattern = False\n            break\n\n    # Return the same_pattern value\n    return same_pattern"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors and patterns arrays are same\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Iterate over the patterns array and check if the pattern matches the colors array\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i:i+len(patterns[i])]:\n            return False\n    \n    # If the function reaches this point, it means the patterns array follows the sequence in colors array\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input. \n    It then returns a list of tuples that have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a set to store the tuples that have all elements divisible by K\n    result = set()\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # add the tuple to the set of result tuples\n            result.add(tup)\n    # return the set of result tuples\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append(tuple(sorted(test_list[i] + test_list[j])))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            print(tup)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # initialize an empty list to store the matching tuples\n    matching_tuples = []\n    # loop through the test list of tuples\n    for tup in test_list:\n        # check if all elements of the tuple are divisible by K\n        if all(i % K == 0 for i in tup):\n            # if all elements are divisible, add the tuple to the list of matching tuples\n            matching_tuples.append(tup)\n    # return the list of matching tuples\n    return matching_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each tuple in the test list\n    for t in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in t):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(t)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # Initialize an empty list to store the tuples that meet the condition\n    result = []\n    \n    # Iterate through each tuple in the list\n    for t in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in t):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(t)\n    \n    # Return the list of tuples that meet the condition\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                result.append(tuple(test_list[i]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is odd or even\n        if len(word) % 2 == 1:\n            print(word + \" is odd length.\")\n        else:\n            print(word + \" is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string by whitespace and store in a list\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of each word is odd\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip() # remove leading and trailing spaces\n    s = s.split() # split the string into words\n    for word in s:\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Initialize a variable to store the length of the word\n    length = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # Increment the length of the word by 1\n        length += 1\n        \n    # Check if the length of the word is odd or even\n    if length % 2 == 0:\n        # If the length of the word is even, return True\n        return True\n    else:\n        # If the length of the word is odd, return False\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns a boolean value indicating whether \n    the length of the word in the string is odd or even.\n    '''\n    words = s.split()\n    if len(words) == 1:\n        return True\n    else:\n        for word in words:\n            if len(word) % 2 == 0:\n                return True\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    \n    # iterate over each word\n    for word in words:\n        # check if the length of the word is odd\n        if len(word) % 2!= 0:\n            print(word + \" is an odd-length word.\")\n        else:\n            print(word + \" is an even-length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of the word {word} is even.\")\n        else:\n            print(f\"The length of the word {word} is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string s as input and returns True if the length of the word is odd, False otherwise.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Iterate through each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    # If no odd word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word)\n            return"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is an odd length word.\")\n        else:\n            print(word, \"is an even length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n - 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the first tetrahedral number\n    t1 = 1\n    \n    # Define the second tetrahedral number\n    t2 = 2\n    \n    # Define the third tetrahedral number\n    t3 = 4\n    \n    # Define the fourth tetrahedral number\n    t4 = 7\n    \n    # Initialize the sum of tetrahedral numbers\n    tetrahedral_sum = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Calculate the value of the current tetrahedral number\n        tetrahedral_number = (t1*t2*t3*t4) // (i * (i-1) * (i-2) * (i-3))\n        \n        # Add the current tetrahedral number to the sum\n        tetrahedral_sum += tetrahedral_number\n        \n        # Update the values of t1, t2, t3, and t4 for the next iteration\n        t1 += 1\n        t2 += 2\n        t3 += 4\n        t4 += 7\n        \n    # Return the sum of tetrahedral numbers\n    return tetrahedral_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 4\n    d = 4\n    while n > 0:\n        a, b, c, d = a + b + c + d, b + c + d, c + d, d\n        n -= 1\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the counter\n    count = 1\n\n    # Loop until the count equals n\n    while count <= n:\n        # Add the current count to the total\n        total = total + count\n        # Increment the count\n        count = count + 1\n\n    return total"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return 0\n    \n    # recursive case: n is greater than 1\n    else:\n        return (4 * n * (n-1) - (n-1)**2) / 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    def is_valid(n):\n        \"\"\"\n        Helper function to check if a number is a tetrahedral number.\n        \"\"\"\n        return n % 4 == 0 and is_prime(n // 4)\n\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 20\n\n    if is_valid(n):\n        return n\n\n    # If n is not valid, try 1 more step\n    return tetrahedral_number(n + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Args:\n        n: The index of the tetrahedral number to find.\n\n    Returns:\n        The nth tetrahedral number.\n    \"\"\"\n    # Compute the nth tetrahedral number using the formula:\n    # (n-1) * (3n^2 - 1) / 2 + n^4\n    return (n-1) * (3*n**2 - 1) // 2 + n**4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                if n % i == 0:\n                    return None\n        return n**3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def phi(n):\n        if is_prime(n):\n            return n\n        else:\n            return (1 + factorial(1 + n)) / factorial(n)\n\n    def tetrahedral_number_helper(n, k, count):\n        if k == n:\n            return count\n        if n > k:\n            return 0\n\n        count += tetrahedral_number_helper(n + 1, k, count)\n        count += tetrahedral_number_helper(n, k + 1, count)\n        count += tetrahedral_number_helper(n, k, count)\n        return count\n\n    return tetrahedral_number_helper(0, 1, 0)\n\nn = int(input(\"Enter a positive integer n: \"))\nresult = tetrahedral_number(n)\nprint(\"The\", n, \"tetrahedral number is\", result)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (1 - 1/3) ** n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    vol = (4/3) * math.pi * (r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initialize the character variable with an empty string\n    char = \"\"\n\n    # Iterate through each character in the string\n    for i in range(len(strr)):\n        # Get the ASCII value of the current character\n        ascii_val = ord(strr[i])\n\n        # Add the ASCII value of the current character modulo 26 to the character variable\n        char = chr((ascii_val + 26) % 26)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total_sum = 0\n    for char in strr:\n        total_sum += ord(char)\n    return chr((total_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not isinstance(strr, str):\n        raise TypeError(\"Input must be a string\")\n    ascii_sum = sum(ord(char) for char in strr)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = (sum + ord(strr[i])) % 26\n    return chr(sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to hold the sum of ASCII values of characters of the string\n    sum_ascii = 0\n    # iterate over each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum_ascii variable\n        sum_ascii += ord(char)\n    # convert the sum_ascii variable to a character and return it\n    return chr((sum_ascii % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize an empty string to store the characters of the string\n    chars = \"\"\n    # Loop through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Find the character made by adding the ASCII value of all the characters of the string modulo 26\n    char = chr((sum % 26) + 65)\n    # Return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i//2])\n        else:\n            sequence.append(sequence[i//2] + sequence[i//2] + 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(2 * sequence[i-1] - sequence[i-2])\n    return sequence[n-1]\n\nn = int(input(\"Enter a value for n: \"))\nprint(\"The nth number in the Newman Conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * n\n    sequence[0] = 1\n    for i in range(1, n):\n        sequence[i] = sequence[i-1] + sequence[i-2]\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Define the sequence\n    sequence = [1]\n    for i in range(1, n):\n        # Calculate the next number in the sequence\n        next_num = sequence[-1] * 2 + 1\n        # Append the next number to the sequence\n        sequence.append(next_num)\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [1]  # initialize sequence with 1\n    \n    for i in range(n-1):\n        next_seq = [seq[j] + seq[j+1] for j in range(len(seq)-1)]\n        seq = next_seq\n    \n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * n\n    sequence[0] = 1\n    for i in range(1, n):\n        sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i-3]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative input not allowed\")\n    sequence = [1, 1, 1, 1, 1]\n    for i in range(2, n):\n        next_seq = [2*sequence[j] - sequence[j-1] for j in range(len(sequence))]\n        sequence = next_seq\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert radius to meters\n    r_m = r * 1000\n    \n    # Define the surface area formula\n    surface_area = 4 * math.pi * r_m ** 2\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function takes the radius of a sphere as input and returns the surface area of the sphere.\n    \"\"\"\n    # calculate the surface area using the formula A = 4 * pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_number_helper(n, x, y):\n        if n == 1:\n            return x + 1, y\n        elif n == 2:\n            return 3, 1\n        else:\n            return centered_hexagonal_number_helper(n - 1, 2 * x + y, 2 * x - y + 1)\n\n    return centered_hexagonal_number_helper(n, 1, 0)[0]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(i):\n        if i % 2 == 0:\n            return (i * (2 * i - 1)) / 2\n        else:\n            return (3 * i * (2 * i - 1)) / 2\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal(n - 1) + centered_hexagonal(n - 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first and second centered hexagonal numbers\n    c1 = 1\n    c2 = 2\n\n    # Calculate the nth centered hexagonal number\n    for i in range(1, n+1):\n        c3 = 3*c1 - 1\n        c1 = c2\n        c2 = c3\n\n    return c3"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2*n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (2 * n - 1) * centered_hexagonal_number(n-1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize counter and hexagonal number\n    counter = 0\n    hexagonal_number = 1\n    \n    # Calculate the distance from the center\n    distance_from_center = n - 1\n    \n    # Iterate through the hexagonal numbers until the desired distance is reached\n    while distance_from_center >= 0:\n        # Increment the counter\n        counter += 1\n        \n        # Calculate the next hexagonal number\n        hexagonal_number += 2*counter\n        \n        # Decrement the distance from the center\n        distance_from_center -= 1\n    \n    # Return the centered hexagonal number\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return 6 * centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(n-1):\n        c = a + b\n        a = b\n        b = c\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the base of centered hexagonal numbers\n    base = (1 + 5**0.5) / 2\n    \n    # Calculate the nth centered hexagonal number\n    centered_hex = base * (n + 1) + 1\n    \n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the number of steps to the input\n    steps = n\n    \n    # calculate the base number of centered hexagonal numbers\n    base = 1 + 6 * steps // 12\n    \n    # initialize the result to the base number\n    result = base\n    \n    # calculate the number of steps to go from the center to the edge of the hexagon\n    edge_steps = steps % 12\n    \n    # if the number of steps to go from the center to the edge of the hexagon is odd,\n    # then subtract one from the steps to center the hexagon\n    if edge_steps % 2 == 1:\n        steps -= 1\n    \n    # iterate from the center to the edge of the hexagon and add the steps to the result\n    for i in range(1, edge_steps+1, 2):\n        result += steps\n    \n    # return the result\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1 (dict): first dictionary to merge\n    - dict2 (dict): second dictionary to merge\n    - dict3 (dict): third dictionary to merge\n\n    Returns:\n    - merged_dict (dict): merged dictionary\n    '''\n\n    # Create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n\n    # Iterate through each key in the first dictionary\n    for key in dict1:\n        # If the key already exists in the merged dictionary, add the value from the second dictionary\n        if key in merged_dict:\n            merged_dict[key].update(dict2[key])\n        # If the key doesn't exist in the merged dictionary, add the key and value from the second dictionary\n        else:\n            merged_dict[key] = dict2[key]\n\n    # Iterate through each key in the second dictionary\n    for key in dict2:\n        # If the key already exists in the merged dictionary, add the value from the third dictionary\n        if key in merged_dict:\n            merged_dict[key].update(dict3[key])\n        # If the key doesn't exist in the merged dictionary, add the key and value from the third dictionary\n        else:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = ct.OrderedDict([\n                (k, v) for k, v in dict1[key].items()\n            ])\n            merged_dict[key].update(dict2[key])\n            merged_dict[key].update(dict3[key])\n        elif key in dict2:\n            merged_dict[key] = dict1[key]\n            merged_dict[key].update(dict2[key])\n        elif key in dict3:\n            merged_dict[key] = dict1[key]\n            merged_dict[key].update(dict3[key])\n        else:\n            merged_dict[key] = dict1[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Initialize an empty dictionary to store the merged values\n    merged_dict = {}\n    # Iterate through the three dictionaries and merge their values\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine the three dictionaries into one\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # iterate over each key in the first dictionary\n    for key in dict1:\n        # add the key-value pair to the merged dictionary if it doesn't already exist\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n        # if the key already exists in the merged dictionary, add the value of the third dictionary\n        else:\n            if key in dict3:\n                merged_dict[key] = dict3[key]\n            elif key in dict2:\n                merged_dict[key] = dict2[key]\n    \n    # iterate over each key in the second dictionary\n    for key in dict2:\n        # add the key-value pair to the merged dictionary if it doesn't already exist\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    \n    # iterate over each key in the third dictionary\n    for key in dict3:\n        # add the key-value pair to the merged dictionary if it doesn't already exist\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key], None)\n        elif key in dict3:\n            merged_dict[key] = (dict1[key], None, dict3[key])\n        else:\n            merged_dict[key] = (dict1[key], None, None)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], list) and isinstance(value, list):\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], list) and isinstance(value, list):\n            merged_dict[key].extend(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    smallest_num = min(N)\n    closest_num = smallest_num - 1\n    if smallest_num > 0:\n        closest_num = smallest_num - 1\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N as input and returns the closest smaller number than N.\n\n    If N is already less than 2, then the function returns N.\n\n    If N is 2, then the function returns N-1.\n\n    Otherwise, the function uses the formula: (N-1)*sqrt(5) + 1\n\n    The formula is used because the closest smaller number to any number N is N-1 or N+1, but depending on whether N is even or odd.\n    '''\n    if N < 2:\n        return N\n    elif N == 2:\n        return N-1\n    else:\n        sqrt_5 = int(round(sqrt(5)))\n        return (N-1)*sqrt_5 + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    def closest(n):\n        return min(abs(n-i) for i in range(1,n+1))\n\n    return min(closest(N), closest(N-1))"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    small = n - 1\n    large = n + 1\n    smallest = small if n % 2 == 0 else large\n    while True:\n        if abs(n - smallest) < abs(n - large):\n            return smallest\n        n = int(input(\"Enter a number: \"))\n        small = n - 1\n        large = n + 1\n        smallest = small if n % 2 == 0 else large"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_numbers = []\n    for i in range(1, N+1):\n        if i % 2 == 0:\n            smaller_numbers.append(2*i)\n        else:\n            smaller_numbers.append(3*i)\n\n    smaller_numbers.sort()\n\n    return smaller_numbers[1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_diff = float('inf')\n    closest_num = None\n\n    for i in range(1, N+1):\n        diff = abs(i - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_num = i\n\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # sort the given list\n    nums = sorted(list(set(N)))\n    \n    # get the difference between the last and first number\n    diff = nums[-1] - nums[0]\n    \n    # get the closest smaller number\n    closest_num = diff * 10\n    \n    # add the first number\n    closest_num += nums[0]\n    \n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize variables\n    closest = None\n    diff = None\n\n    # loop through the range of numbers from 1 to N-1\n    for i in range(1, N):\n        # calculate the difference between the current number and N\n        diff = abs(i - N)\n\n        # if the difference is smaller than the current closest or if closest is None\n        if (closest is None) or (diff < closest):\n            # set the closest number as the current number\n            closest = i\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if n == 0:\n        return 0\n    if n < 0:\n        return closest_num(-n)\n    nums = []\n    for i in range(n):\n        nums.append(i)\n    nums.append(n)\n    nums.sort()\n    closest = nums[1]\n    if closest == 0:\n        return 0\n    if closest == n:\n        return n\n    diff = abs(n - closest)\n    if n - diff > closest:\n        return closest - 1\n    else:\n        return closest + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables to keep track of the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n    # Loop through the numbers from 1 to N and check if they are smaller than the smallest number\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    # Check if the smallest number is closer to N than the current largest number\n    if smallest < N:\n        return smallest\n    # If the smallest number is closer to N than the current largest number, find the closest larger number\n    for num in range(N+1, 2*N+1):\n        if num > largest:\n            largest = num\n    # Check if the closest larger number is closer to N than the current smallest number\n    if largest > N:\n        return largest\n    # If the closest larger number is closer to N than the current smallest number, return N\n    else:\n        return N"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables\n    max_len = 0\n    longest_word = \"\"\n    \n    # Loop through each word in the list\n    for word in list1:\n        # Calculate the length of the word\n        word_len = len(word)\n        # If the length is greater than the current maximum length, update variables\n        if word_len > max_len:\n            max_len = word_len\n            longest_word = word\n    \n    # Return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest = \"\"\n    for i in list1:\n        words = i.split()\n        for word in words:\n            if len(word) > len(longest):\n                longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes in two strings: str1 and sub_str. The function checks if sub_str is present as a substring in str1.\n    If it is, the function returns True. Otherwise, it returns False.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the given string into a set to remove any duplicates\n    str1 = set(str1)\n    for string in sub_str:\n        # Convert the given string into a set to remove any duplicates\n        string = set(string)\n        # Check if any of the substrings are present in the given string\n        if any(string.issubset(str1)):\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Split the given string into a list of strings\n    string_list = str1.split()\n\n    # Iterate through the list of strings and check if the substring is present\n    for string in string_list:\n        if string == sub_str:\n            return True\n\n    # If the substring is not present in the list, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the substring is present in the given list of strings\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        print(\"The string '{}' is present in the list.\".format(str1))\n    else:\n        print(\"The string '{}' is not present in the list.\".format(str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through the words in the list and check if the sub_str is a substring of the word\n    for word in words:\n        if sub_str in word:\n            return True\n    # If no sub_str was found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if sub_str is present in the given list of string values\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Initialize sum and count of positive and negative values\n    positive_sum = 0\n    negative_sum = 0\n    positive_count = 0\n    negative_count = 0\n\n    # Iterate through the numbers in the given range\n    for i in range(1, n+1):\n        # Check if the number is positive or negative\n        if i > 0:\n            positive_sum += i\n            positive_count += 1\n        else:\n            negative_sum += i\n            negative_count += 1\n\n        # Check if the sum of the positive and negative values is equal to n\n        if positive_sum + negative_sum == n:\n            # Check if the count of positive and negative values is equal to 1\n            if positive_count == 1 and negative_count == 1:\n                return True\n            else:\n                return False\n        elif positive_sum + negative_sum > n:\n            # Check if the sum of the positive values is greater than n\n            if positive_sum > n:\n                return True\n            else:\n                positive_sum -= negative_sum\n                positive_count -= negative_count\n                negative_sum = 0\n                negative_count = 0\n                continue\n        else:\n            # Check if the sum of the negative values is greater than n\n            if negative_sum > n:\n                return True\n            else:\n                negative_sum -= positive_sum\n                negative_count -= positive_count\n                positive_sum = 0\n                positive_count = 0\n                continue"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Define the maximum value that the number can have\n    max_num = 1000000\n\n    # Check if the given number is less than or equal to 1\n    if n <= 1:\n        return \"The given number is less than or equal to 1.\"\n\n    # Check if the given number is greater than the maximum value\n    elif n > max_num:\n        return \"The given number is greater than the maximum value.\"\n\n    # Check if the given number is divisible by 4\n    elif n % 4 == 0:\n        return \"The given number is divisible by 4.\"\n\n    # Check if the given number is divisible by 7\n    elif n % 7 == 0:\n        return \"The given number is divisible by 7.\"\n\n    # Check if the given number is divisible by 11\n    elif n % 11 == 0:\n        return \"The given number is divisible by 11.\"\n\n    # If none of the above conditions are met, the number is undulating\n    else:\n        return \"The given number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(1, int(n/2)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even number is not undulating.\"\n    else:\n        if n == 1:\n            return \"1 is not undulating.\"\n        else:\n            if n % 4 == 0:\n                return \"Number divisible by 4 is undulating.\"\n            else:\n                if n % 6 == 0:\n                    return \"Number divisible by 6 is undulating.\"\n                else:\n                    return \"Number is not divisible by 4 or 6, and not 1.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the given number is negative or not\n    if n < 0:\n        return False\n    \n    # check if the given number is divisible by 4 or not\n    if n % 4 == 0:\n        return True\n    \n    # if none of the above conditions are satisfied, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Initialize variables\n    is_undulating = False\n    count = 0\n    prev_num = 0\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is equal to the previous number and the difference is 1, then the number is undulating\n        if i == prev_num and i!= n:\n            is_undulating = True\n            break\n        # If the number is greater than the previous number, then the number is not undulating\n        elif i > prev_num:\n            is_undulating = False\n            break\n        # If the number is not equal to the previous number and the difference is not 1, then the number is not undulating\n        else:\n            is_undulating = False\n            break\n        # Update the count of consecutive numbers equal to the previous number\n        count += 1\n        # Update the previous number to the current number\n        prev_num = i\n\n    # Return the count of consecutive numbers equal to the previous number\n    return count"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = None\n    for item in test_list:\n        if min_value is None or item[1] < min_value[1]:\n            min_value = item\n    return min_value[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    for index, item in enumerate(test_list):\n        if minimum_index is None:\n            minimum_index = index\n            minimum_item = item[1]\n        elif item[1] < minimum_item:\n            minimum_index = index\n            minimum_item = item[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples in ascending order based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize the minimum length to infinity\n\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize the length of smallest list to be infinity\n    min_length = float('inf')\n\n    # loop through each list in the list of lists\n    for i in lst:\n        # loop through each element in the current list\n        for j in i:\n            # if the current element is shorter than the current minimum length, update the minimum length\n            if len(j) < min_length:\n                min_length = len(j)\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = []\n    for i in lst:\n        length.append(len(i))\n    return min(length)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    \n    while i <= n/2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the number of divisors of `n`.\n\n    Parameters:\n    -----------\n    n: int\n        An integer value for which we need to find the number of divisors.\n\n    Returns:\n    --------\n    int\n        The number of divisors of `n`.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    i = 1\n\n    # loop through the numbers from 1 to n\n    while i <= n:\n        # check if n is divisible by i\n        if n % i == 0:\n            count += 1\n        i += 1\n\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq:\n            # increment the frequency of the element\n            freq[item] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[item] = 1\n    # return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    frequency_dict = {}\n    # Loop through each element in the list1\n    for element in list1:\n        # If the element is a list, recursively call the function on it\n        if type(element) == list:\n            for sub_element in element:\n                if sub_element in frequency_dict:\n                    frequency_dict[sub_element] += 1\n                else:\n                    frequency_dict[sub_element] = 1\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Recursively call the function to find the frequency of each element in the list\n            subfreq = frequency_lists(element)\n            # Update the frequency of the element in the main dictionary\n            for sub_element, sub_freq in subfreq.items():\n                if sub_element in freq:\n                    freq[sub_element] += sub_freq\n                else:\n                    freq[sub_element] = sub_freq\n        # If the element is not a list, check if it is already in the dictionary\n        elif element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    # Return the final dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) * 1.0 / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * (1/len(numbers))"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [num * len(numbers) / 1 for num in numbers]"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:  \n        result *= num  \n    return result/len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using bitwise operators\n    binary = bin(n)[2:]\n    \n    # Remove leading zeros from the binary string\n    binary = binary.lstrip('0')\n    \n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return '0'\n\n    # Initialize an empty list to store the binary digits\n    binary = []\n\n    # Base case: if n is 1 or 2, append 0 or 1, respectively, to the binary list\n    if n == 1:\n        binary.append('1')\n    elif n == 2:\n        binary.append('10')\n\n    # Loop through all the remainders of n/2 and append their binary representation to the binary list\n    while n > 1:\n        remainder = n % 2\n        binary.append(str(remainder))\n        n //= 2\n\n    # Reverse the order of the binary digits to get the correct order of the binary equivalent\n    binary = binary[::-1]\n\n    # Convert the binary list to a string and return it\n    return ''.join(binary)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # convert decimal to binary\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    # remove leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\" \n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the given integer to a string\n    num_str = str(num)\n\n    # reverse the string\n    reverse_str = num_str[::-1]\n\n    # check if the reversed string is a palindrome\n    if num_str == reverse_str:\n        # if it is, convert it back to an integer and add 1\n        next_num = int(num_str) + 1\n    else:\n        # if not, check if the reversed string is smaller than the original string\n        if int(reverse_str) < int(num_str):\n            # if it is, convert it back to an integer and add 1\n            next_num = int(reverse_str) + 1\n        else:\n            # if not, subtract 1 from the original integer\n            next_num = int(num_str) - 1\n\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is a palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # Initialize the smallest palindrome\n    smallest_palindrome = None\n\n    # Loop through the digits of the input number\n    for i in range(9, -1, -1):\n        # Initialize the palindrome to the input number with the current digit\n        palindrome = num * 10 + i\n\n        # Check if the palindrome is a palindrome\n        if str(palindrome) == str(palindrome)[::-1]:\n            # Check if the palindrome is smaller than the current smallest palindrome\n            if smallest_palindrome is None or palindrome < smallest_palindrome:\n                smallest_palindrome = palindrome\n\n    # Return the smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    min_num = sys.maxsize\n    for i in range(1000, num - 1, -1):\n        if is_palindrome(i) and i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input integer to a string\n    num_str = str(num)\n    # reverse the string\n    rev_num_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_num_str)\n    # check if the reversed integer is a palindrome\n    if str(rev_num) == rev_num_str:\n        # if the reversed integer is a palindrome, increment the original integer\n        rev_num += 1\n    else:\n        # if the reversed integer is not a palindrome, decrement the original integer\n        rev_num -= 1\n    # convert the reversed integer back to a string\n    next_palindrome = str(rev_num)\n    # convert the string to an integer\n    next_palindrome = int(next_palindrome)\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Define a list of all possible palindromes up to the given integer\n    palindromes = []\n    for i in range(1, num+1):\n        for j in range(i, num+1, i):\n            palindromes.append(j*j)\n\n    # Initialize a list to keep track of the smallest and largest palindromes found so far\n    smallest = None\n    largest = None\n\n    # Iterate through the palindromes and find the smallest and largest palindromes\n    for palindrome in palindromes:\n        # Check if the palindrome is a palindrome and larger than the current smallest palindrome\n        if str(palindrome) == str(palindrome)[::-1] and (smallest is None or palindrome < smallest):\n            smallest = palindrome\n\n        # Check if the palindrome is a palindrome and smaller than the current largest palindrome\n        if str(palindrome) == str(palindrome)[::-1] and (largest is None or palindrome > largest):\n            largest = palindrome\n\n    # Return the next smallest palindrome if there is one, or None otherwise\n    return smallest + 1 if smallest is not None else None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if input is an integer\n    if not isinstance(num, int):\n        return \"Input must be an integer\"\n\n    # Calculate the palindrome of the input number\n    palindrome = num\n    while palindrome >= 10:\n        palindrome = sum([int(digit) ** 2 for digit in str(palindrome)])\n\n    # Find the next smallest palindrome\n    next_palindrome = palindrome + 1\n    while not is_palindrome(next_palindrome):\n        next_palindrome += 1\n\n    return next_palindrome\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    # Find the largest palindrome smaller than or equal to num\n    while not is_palindrome(num):\n        num -= 1\n    \n    # Check if the next smallest palindrome is greater than num\n    next_num = num + 1\n    if is_palindrome(next_num):\n        return next_num\n    \n    # If not, return the largest palindrome smaller than or equal to num\n    while not is_palindrome(next_num):\n        next_num += 1\n        \n    return next_num - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given integer is a palindrome or not.\n    '''\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(num, 0, -1):\n        if is_palindrome(i) and (is_palindrome(i + 1) or i + 1 == 10**9):\n            return i\n    return None\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    if result is None:\n        print(num, \"is not a palindrome.\")\n    else:\n        print(\"The next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Returns True if the given integer is a palindrome, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-i - 1]:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if int(num_str[i:]) < int(num_str[:i]):\n            new_num = int(num_str[:i]) + int(num_str[i:])\n            if is_palindrome(new_num):\n                return new_num\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = 0\n    while True:\n        if is_palindrome(smallest_palindrome + num):\n            return smallest_palindrome + num\n        smallest_palindrome += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        raise ValueError(\"k is greater than the length of the array\")\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 1\n        right = n - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if k == mid:\n                return arr[k - 1]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    if k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('Array length is less than k')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid index\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError(\"Index out of range\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Convert the first letter of each word to uppercase\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i][0].upper() + word_list[i][1:]\n    # Join the words back into a string\n    return ''.join(word_list)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, letter in enumerate(word):\n        if i > 0 and letter.isupper():\n            camel_case += '_'\n        camel_case += letter.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert the first word to lowercase and the rest of the words to uppercase\n    camel_case = words[0].lower() + ''.join([word[0].upper() + word[1:] for word in words[1:]])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    prev_char = None\n    for char in word:\n        if char.isupper():\n            if prev_char is not None and prev_char.islower():\n                camel_case += '_'\n            camel_case += char.lower()\n        else:\n            camel_case += char\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = []\n    for i, char in enumerate(word):\n        if i == 0:\n            result.append(char.lower())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_words = [word.capitalize() for word in words]\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word and join them\n    return ''.join([word.capitalize() for word in words])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return 2*eulerian_num(n-1, m) - 2*eulerian_num(n-2, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the variables for the algorithm\n    current_state = (n, m)\n    visited = {(n, m)}\n    a = 0\n    \n    # Loop until no more moves can be made\n    while True:\n        # Get the neighbors of the current state\n        neighbors = {(n+1, m), (n, m+1)}\n        \n        # Check if the current state is already in the visited set\n        if current_state in visited:\n            # If it is, then the number of moves to get to the next state is the number of steps between the current state and the first visited state\n            a = len(visited) - visited.index(current_state)\n            return a\n        \n        # Add the current state to the visited set and move to the next state\n        visited.add(current_state)\n        current_state = neighbors.pop()\n        \n        # If there are no more possible moves, the algorithm has converged\n        if not neighbors:\n            return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def eulerian_num_helper(n, m, k, res):\n        if n == 1:\n            res[k] = (res[k] + m) % m\n        else:\n            for i in range(2, n+1):\n                if (k+i) % n == 0:\n                    res[k+i] = (res[k+i] + res[k]) % m\n        return res\n\n    a = 1\n    b = 1\n    c = 0\n    d = 1\n\n    for i in range(2, n+1):\n        a, b, c, d = eulerian_num_helper(n, m, i, [a, b, c, d])\n\n    return a * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_valid(x, y, z):\n        return (x >= 0 and x < n and y >= 0 and y < m and z >= 0 and z < n * m)\n\n    def get_neighbors(x, y, z):\n        result = []\n        for i in [-1, 0, 1]:\n            for j in [-1, 0, 1]:\n                for k in [-1, 0, 1]:\n                    if i!= 0 or j!= 0 or k!= 0:\n                        nx, ny, nz = x + i, y + j, z + k\n                        if is_valid(nx, ny, nz):\n                            result.append((nx, ny, nz))\n        return result\n\n    def is_eulerian(x, y, z):\n        neighbors = get_neighbors(x, y, z)\n        return len(neighbors) == 3 and any(get_neighbors(nx, ny, nz) == [] for nx, ny, nz in neighbors)\n\n    def dfs(x, y, z, path):\n        if is_eulerian(x, y, z):\n            return [path + [x, y, z]]\n        result = []\n        for nx, ny, nz in get_neighbors(x, y, z):\n            if nx, ny, nz not in path:\n                new_path = path + [(nx, ny, nz)]\n                result.extend(dfs(nx, ny, nz, new_path))\n        return result\n\n    result = []\n    for x in range(n):\n        for y in range(m):\n            for z in range(n * m):\n                path = [(x, y, z)]\n                if is_valid(x, y, z) and is_eulerian(x, y, z):\n                    result.extend(dfs(x, y, z, path))\n\n    return len(result)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function finds the Eulerian number a(n, m).\n    \n    Args:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n    \n    Returns:\n    int: The value of Eulerian number a(n, m).\n    '''\n    \n    # Define the graph as a dictionary\n    graph = {}\n    \n    # Iterate through the edges\n    for i in range(m):\n        # Get the endpoints of the edge\n        u, v = map(int, input().split())\n        # If the edge is not already in the graph, add it\n        if (u, v) not in graph:\n            graph[(u, v)] = []\n        graph[(u, v)].append(1)\n        if (v, u) not in graph:\n            graph[(v, u)] = []\n        graph[(v, u)].append(1)\n    \n    # Create the adjacency list for the graph\n    adj_list = {}\n    for u, vs in graph.items():\n        adj_list[u] = []\n        for v, _ in vs:\n            adj_list[u].append(v)\n    \n    # Check if the graph is Eulerian\n    for i in range(n):\n        # If vertex i is not reachable from any other vertex, it is an Eulerian vertex\n        if i not in adj_list:\n            return i\n    \n    # If the graph is not Eulerian, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Find the LCM of n and m\n    lcm = n * m // math.gcd(n, m)\n    \n    # Calculate the number of ways to choose m items from n items\n    ways = math.factorial(n) // (math.factorial(m) * math.factorial(n - m))\n    \n    # Calculate the sum of ways to choose m items from n items\n    sum_ways = sum(math.comb(n, i) for i in range(1, m + 1))\n    \n    # Calculate the Eulerian number a(n, m)\n    eulerian = ways * lcm // sum_ways\n    \n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function finds the Eulerian number a(n, m).\n    '''\n\n    # initializing the list of all numbers from 1 to n\n    nums = list(range(1, n+1))\n\n    # initializing the list of Eulerian numbers\n    a = []\n\n    # finding the Eulerian number for each element in nums\n    for num in nums:\n        # finding the sum of all elements in nums except the current number\n        new_nums = [x for x in nums if x!= num]\n        total = sum(new_nums)\n\n        # checking if the sum of the remaining elements is equal to m\n        if total == m:\n            a.append(num)\n\n    # returning the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the variables\n    A = [0] * (n+1)\n    B = [0] * (n+1)\n\n    # Fill the values of A and B\n    A[1] = 1\n    B[1] = 1\n\n    for i in range(2, n+1):\n        A[i] = A[i-1] * (1-m/i) + (m/i) * A[i-1]\n        B[i] = B[i-1] * (1-m/i) - (m/i) * B[i-1]\n\n    return A[n] / B[n]\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Create a list of all possible pairs of numbers from 1 to n\n    pairs = [(i, j) for i in range(1, n+1) for j in range(i+1, n+1)]\n    \n    # Find the number of pairs that satisfy the condition: a(p1, p2) = m\n    count = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            if m == a(pairs[i], pairs[j]):\n                count += 1\n    \n    # Return the number of pairs that satisfy the condition\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the input values are valid\n    if n < 1 or m < 1:\n        return \"Invalid input values\"\n    elif n == 1 and m == 1:\n        return 1\n    elif n == 1:\n        return 1 + (m - 1) * m // (2 * m)\n    else:\n        return 2 * (1 + (n - 1) * m // (2 * m)) + eulerian_num(n - 2, m - 1)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = str(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item == True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuple into a list to make the append operation easier\n    test_list = list(test_list)\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for i in test_list:\n        test_tup = tuple(test_tup)\n        test_tup = test_tup + (i,)\n        test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # Merge two lists into a single sorted list\n    merged_list = sorted(num1 + num2)\n\n    # Merge the two sorted lists into a single sorted list\n    merged_list = sorted(merged_list + num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Step 1: Concatenate the three input lists into one\n    merged_list = num1 + num2 + num3\n\n    # Step 2: Sort the merged list using heapq\n    heapq.heapify(merged_list)\n\n    # Step 3: Extract the elements from the heap and put them into a sorted list\n    sorted_list = []\n    while len(merged_list) > 0:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapsort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    \n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    merged_list = sorted(num1 + num2)\n    # Merge the first, middle, and last lists\n    result = sorted(merged_list + num3)\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(num1, num2, merged_list)\n    heapq.merge(merged_list, num3, merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    merged_list = num1 + num2\n\n    # Sort merged list\n    heapq.heapify(merged_list)\n\n    # Merge merged list with num3\n    merged_list = merged_list + num3\n\n    # Sort merged list\n    heapq.heapify(merged_list)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # Use a heap to keep track of the elements in each list\n    heap1 = [-num1[0]] if num1[0] >= 0 else [num1[0]]\n    heapq.heapify(heap1)\n\n    heap2 = [-num2[0]] if num2[0] >= 0 else [num2[0]]\n    heapq.heapify(heap2)\n\n    heap3 = [-num3[0]] if num3[0] >= 0 else [num3[0]]\n    heapq.heapify(heap3)\n\n    # Merge the sorted lists by repeatedly extracting the smallest element from each heap\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0]:\n            if heap3[0] <= heap1[0]:\n                merged_list.append(heap1[0])\n                heapq.heappop(heap1)\n            else:\n                merged_list.append(heap3[0])\n                heapq.heappop(heap3)\n        else:\n            if heap3[0] <= heap2[0]:\n                merged_list.append(heap2[0])\n                heapq.heappop(heap2)\n            else:\n                merged_list.append(heap3[0])\n                heapq.heappop(heap3)\n\n    # Append the remaining elements from the heaps\n    merged_list += heap1 + heap2 + heap3\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    sorted_list = []\n    # Convert the three lists to sets and then convert back to lists\n    num1 = list(set(num1))\n    num2 = list(set(num2))\n    num3 = list(set(num3))\n\n    # Merge the three lists into one sorted list using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        # If the first element of num1 is less than the first element of num2, then\n        # pop the first element of num1 and add it to the sorted list\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            sorted_list.append(heapq.heappop(num1))\n        # If the first element of num2 is less than the first element of num3, then\n        # pop the first element of num2 and add it to the sorted list\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            sorted_list.append(heapq.heappop(num2))\n        # If the first element of num3 is less than the first element of num1, then\n        # pop the first element of num3 and add it to the sorted list\n        else:\n            sorted_list.append(heapq.heappop(num3))\n\n    # If there are still elements in num1, append them to the sorted list\n    if len(num1) > 0:\n        while len(num1) > 0:\n            sorted_list.append(heapq.heappop(num1))\n\n    # If there are still elements in num2, append them to the sorted list\n    if len(num2) > 0:\n        while len(num2) > 0:\n            sorted_list.append(heapq.heappop(num2))\n\n    # If there are still elements in num3, append them to the sorted list\n    if len(num3) > 0:\n        while len(num3) > 0:\n            sorted_list.append(heapq.heappop(num3))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the three lists\n    merged_list = num1 + num2 + num3\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize the count variable\n    count = 0\n    # loop n number of times\n    for i in range(n):\n        # convert the string to a list of digits\n        digits = [int(digit) for digit in s]\n        # rotate the digits by 1 position to the right\n        digits.insert(0, digits.pop())\n        # convert the rotated digits list back to a string\n        s = ''.join([str(digit) for digit in digits])\n        # check if the string contains an odd number\n        if any(digit % 2!= 0 for digit in digits):\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for _ in range(n):\n        s = s[::-1]\n        odd_count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                odd_count += 1\n        count += odd_count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to list of digits\n    binary = [int(digit) for digit in s]\n    # Rotate the binary list n number of times\n    for i in range(n):\n        temp = binary[0]\n        for j in range(len(binary)-1):\n            binary[j] = binary[j+1]\n        binary[-1] = temp\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for digit in binary:\n        if digit % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the current character is odd, increment the count\n        if s[i] == '1':\n            count += 1\n        \n        # If the current character is even and we've rotated n-1 times, increment the count\n        elif s[i] == '0' and n-1 == i:\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize a variable to store the number of odd numbers with an odd value when rotating the binary string the given number of times\n    odd_count = 0\n\n    # Initialize a variable to store the current binary string to be rotated\n    curr_binary = s\n\n    # Loop n times to rotate the binary string\n    for _ in range(n):\n        # Initialize a variable to store the current binary string after rotation\n        next_binary = \"\"\n\n        # Loop through each character in the current binary string\n        for char in curr_binary:\n            # Determine the value of the character after rotation\n            if char == \"0\":\n                next_char = \"1\"\n            else:\n                next_char = \"0\"\n\n            # Add the next character to the new binary string\n            next_binary += next_char\n\n        # Swap the current binary string with the new binary string\n        curr_binary = next_binary\n\n    # Loop through each character in the current binary string to count the odd numbers with an odd value\n    for char in curr_binary:\n        if char == \"1\":\n            odd_count += 1\n\n    # Return the total number of odd numbers with an odd value\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if s[j] == \"1\":\n                s = s[:j] + \"0\" + s[j+1:]\n                count += 1\n            else:\n                s = s[:j] + \"1\" + s[j+1:]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    i = 0\n    # Loop through each character in the binary string\n    for char in s:\n        # Check if the character is an odd number\n        if int(char) % 2!= 0:\n            # If the character is odd, count it\n            count += 1\n            # If we have counted the desired number of characters, exit the loop\n            if count == n:\n                break\n        # Increment the index\n        i += 1\n        # If we have reached the end of the string, reset the index\n        if i == len(s):\n            i = 0\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if len(set(s)) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    # Convert the binary string to a list of bits\n    binary_list = [int(bit) for bit in list(s)]\n    # Rotate the binary list the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n    # Iterate through the rotated binary list and count odd numbers\n    for bit in binary_list:\n        if bit % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (string): binary string to be rotated\n    n (int): number of times to rotate the binary string\n\n    Returns:\n    (int): number of odd values in the rotated binary string\n    '''\n    count = 0\n    if len(s) % 2 == 0:\n        s = s[::-1]\n    for i in range(n):\n        s = s[::-1]\n        if s.count('1') % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common_elements:\n                    if len(common_elements) == len(set(common_elements)):\n                        return common_elements\n                    else:\n                        common_elements.remove(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements:\n                common_elements.append(j)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) > 0:\n        first_list = nestedlist[0]\n        return first_list\n    else:\n        return []"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                common_elements.append(nestedlist[i][j])\n            else:\n                if nestedlist[i][j] in common_elements:\n                    common_elements.remove(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for item in nestedlist:\n        for i in item:\n            common.add(i)\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Iterate through the nested list\n    for sublist in nestedlist:\n        # Iterate through the sublist\n        for elem in sublist:\n            # Add the element to the set if it's not already there\n            if elem not in common:\n                common.add(elem)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for i in nestedlist:\n        for j in i:\n            common_set.add(j)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    This function checks if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # loop through each dictionary in the list\n    for d in list1:\n        # check if the dictionary is empty\n        if len(d)!= 0:\n            return False\n    # if we get here, all dictionaries in the list are empty\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Create a boolean variable to check whether all dictionaries in the list are empty or not\n    is_empty = True\n\n    # Loop through each dictionary in the list\n    for i in range(len(list1)):\n\n        # Check whether the dictionary is empty or not\n        if len(list1[i]) == 0:\n\n            # If it is empty, set the boolean variable to False and break out of the loop\n            is_empty = False\n            break\n\n    # Return the boolean value of whether all dictionaries in the list are empty or not\n    return is_empty\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:  # check if dictionary is empty\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if not i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list to iterate over it\n    num_list = list(nums)\n    # Initialize a variable to store the sum of the list\n    total = 0\n    # Iterate over the list and add each element to the total\n    for num in num_list:\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize the variable to store the sum\n    result = 0\n    \n    # loop through the tuple\n    for num in nums:\n        # add each number to the result\n        result += num\n    \n    # return the sum\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    result = 0\n    for num in nums:\n        result += num\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist.remove(element)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                sublist[test_list.index(sublist)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist.remove(element)\n                sublist.append(float(element))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[sublist.index(item)] = item"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        float_row = []\n        for element in row:\n            try:\n                float_row.append(float(element))\n            except ValueError:\n                float_row.append(element)\n        float_list.append(float_row)\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                if isinstance(element, str):\n                    element = float(str(element).replace(',', ''))\n                elif isinstance(element, int):\n                    element = float(element)\n                else:\n                    raise ValueError(\"Element type not supported\")\n                sublist[test_list.index(sublist)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_list.append(list_to_float(item))\n        elif isinstance(item, (int, float, complex)):\n            new_list.append(float(item))\n        else:\n            print(\"Item in list is not convertible to float:\", item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, float, int)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = test_list[i][j]"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and convert each sub-string to a list item\n    return list(map(str.split, string.split()))"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Find the number of occurrences of the first element in the array\n    first_occurrence = 0\n    for i in range(1, n):\n        if arr[i] == arr[first_occurrence]:\n            first_occurrence += 1\n    # Find the element that appears only once in the array\n    unique_element = arr[first_occurrence]\n    # Find the number of occurrences of the unique element in the array\n    unique_occurrence = 1\n    for i in range(first_occurrence+1, n):\n        if arr[i] == unique_element:\n            unique_occurrence += 1\n    # Return the unique element if it appears only once, else return -1\n    if unique_occurrence == 1:\n        return unique_element\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the counts of each element in the array\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # loop through the dictionary to find the element that appears only once\n    for num in count_dict:\n        if count_dict[num] == 1:\n            return num\n    \n    # if no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize the left and right pointers to the start and end of the array, respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize a variable to keep track of the element that appears only once\n    unique_element = None\n\n    # Use binary search to find the element that appears only once\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        elif arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we found the element that appears only once, return it\n    if unique_element is not None:\n        return unique_element\n\n    # Otherwise, return None if the array has more than one element that appears only once\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    This function finds the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return \"The array should have at least two elements.\"\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # Loop through the array to count the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n\n    # Find the element that appears only once\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        else:\n            return None\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == arr[mid-1]:\n            if arr[mid] == arr[mid+1]:\n                return arr[mid]\n            else:\n                return search(arr[:mid])\n        elif arr[mid] == arr[mid+1]:\n            return search(arr[mid+2:])\n        else:\n            return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0:\n            unique_element = arr[i]\n            continue\n        if arr[i]!= arr[i-1]:\n            unique_element = arr[i]\n            break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once.\n    '''\n\n    # initialize a dictionary to store the count of each element\n    count_dict = {}\n\n    # loop through the array and count the frequency of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # loop through the array again and find the element that appears only once\n    for num in arr:\n        if count_dict[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n            \n    for i in count:\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    # Traverse through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Traverse through the dictionary and return the key with frequency 1\n    for key, value in freq.items():\n        if value == 1:\n            return key\n    \n    # If no element is found with frequency 1, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0]*list1[j][0] - list1[i][1]*list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    def find_max_product(tuple1):\n        \"\"\"\n        Helper function to find the maximum absolute product between two numbers in a tuple.\n        \"\"\"\n        product1, product2 = tuple1\n        abs_diff = abs(product1 - product2)\n        return abs_diff\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            abs_diff = find_max_product((list1[i], list1[j]))\n            if abs_diff > max_product:\n                max_product = abs_diff\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i][0]*list1[j][1])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    result = []\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, current_product)\n            result.append((list1[i][0], list1[j][1]))\n            \n    return max_product, result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    temp_product = 1\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            temp_product = abs(list1[i][0] * list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_pair = (0, 0)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n    return max_product, max_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i!= 1:\n            if i % 2 == 0:\n                j = 3\n            else:\n                j = 2\n            while i*j <= limit:\n                if i*j == j*i:\n                    if j < i:\n                        amicable_sum += i + j\n                    else:\n                        amicable_sum += j + i\n                j += 2\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    # List to store all amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers up to the limit\n    for num in range(1, limit):\n        # Check if the number is amicable\n        if num > 1 and sum_of_proper_divisors(num) == num:\n            amicable_numbers.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(num):\n    # List to store proper divisors\n    proper_divisors = []\n\n    # Loop through all numbers up to the square root of the given number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is divisible by i\n        if num % i == 0:\n            # Add i and the number divided by i to the proper divisors list\n            proper_divisors.append(i)\n            proper_divisors.append(num // i)\n\n    # Return the sum of proper divisors\n    return sum(proper_divisors)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list to store amicable numbers\n    amicable_numbers = []\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            amicable_numbers.append(num)\n\n    # Sum all amicable numbers and return the result\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n\n    # Check if the number is divisible by any number between 1 and the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # The number is amicable\n    return True\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum to 0\n    amicable_sum = 0\n\n    # Loop through all numbers up to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num == sum_of_proper_divisors(num):\n            # If it is, add it to the sum\n            amicable_sum += num\n\n    # Return the sum of amicable numbers\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    # Initialize sum to 0\n    sum_of_proper_divisors = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # Check if the number is divisible by i\n        if num % i == 0:\n            # If it is, add i to the sum\n            sum_of_proper_divisors += i\n\n    # Return the sum of proper divisors\n    return sum_of_proper_divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    # Check for divisibility by any number between 1 and limit/2\n    for num in range(1, int(limit/2)+1):\n        if num == sum([i for i in range(1, int(limit/2)+1) if num % i == 0]):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of two numbers as keys and the sum of the two numbers as values\n    amicable_dict = {}\n    \n    # Iterate through all numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable by checking if it is equal to the sum of any two of its proper divisors\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            # If the number is not divisible by any number other than 1 and itself, add it to the dictionary\n            if i!= 1:\n                sum_of_i_and_j = i + j\n                amicable_dict[sum_of_i_and_j] = i + j\n    \n    # Sum up the values in the dictionary to get the sum of all amicable numbers\n    amicable_sum = sum(amicable_dict.values())\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(2, limit+1):\n        if i not in amicable_numbers:\n            j = i\n            while j <= limit and i + j in amicable_numbers:\n                j += 1\n            if j > limit:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if num == sum(divisors(num)):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef divisors(num):\n    '''\n    Return a list of all divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    # Loop through numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if i!= 1 and i!= limit and is_amicable(i, limit):\n            # If it is, add it to the list of amicable numbers\n            amicable_numbers.append(i)\n            \n    # Calculate the sum of the amicable numbers\n    sum_amicable = sum(amicable_numbers)\n    \n    return sum_amicable\n\ndef is_amicable(num1, num2):\n    '''\n    Check if two numbers are amicable.\n    '''\n    sum_of_squares = num1 + num2\n    return sum_of_squares == (num1 ** 2 + num2 ** 2)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    # Function to find the sum of all amicable numbers from 1 to a specified number\n    # Sum of amicable numbers is the sum of all the proper divisors of the number\n    # A proper divisor is a divisor that is the sum of its proper divisors\n    # This means that if a number is divisible by a divisor, then all of its proper divisors are also divisible by the divisor\n    # So, to find the proper divisors of a number, we just need to check if the number is divisible by any of its divisors\n    # We can then add up all of these proper divisors to find the sum of all proper divisors\n    # A number is called amicable if it is equal to the sum of its proper divisors\n    \n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        \n        # Check if i is amicable\n        if i == sum_of_proper_divisors(i):\n            \n            # If i is amicable, add it to total_sum\n            total_sum += i\n            \n    return total_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle.\n    '''\n    angle_radian = cmath.phase(a + b*1j)\n    angle_degree = angle_radian * 180.0 / cmath.pi\n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Using the arg and real parts of the complex number\n    angle = cmath.phase(a + b*1j)\n    return round(angle.real, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle / 2 / cmath.pi * 360\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj * cmath.phase(a+b)\n    return cmath.phase(c)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180.0 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the modulus and phase of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(a + b*1j)\n\n    # Convert the phase to degrees\n    phase = cmath.phase(phase) * 180 / cmath.pi\n\n    # Return the angle in degrees\n    return phase"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    current_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_diff += 1\n        else:\n            if current_diff > max_diff:\n                max_diff = current_diff\n            current_diff = 0\n    if current_diff > max_diff:\n        max_diff = current_diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            diff = count_0s(string[i:j]) - count_1s(string[i:j])\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n\ndef count_0s(string):\n    return string.count('0')\n\n\ndef count_1s(string):\n    return string.count('1')"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    def count_bits(binary_string):\n        return sum([int(bit) for bit in binary_string])\n\n    def diff_count(binary_string):\n        count_0 = count_bits(binary_string.replace('0', ''))\n        count_1 = count_bits(binary_string.replace('1', ''))\n        return abs(count_0 - count_1)\n\n    def max_diff(binary_string):\n        max_diff = 0\n        for i in range(len(binary_string) - 1):\n            diff = diff_count(binary_string[i:i+2])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n\n    binary_string = str(string)\n    return max_diff(binary_string)\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    length = len(string)\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(length):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count0 = count1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize a dictionary to store the count of 0s and 1s in each position of the binary string\n    count = {}\n    for i in range(len(string)):\n        if string[i] == '0':\n            count[i] = 0 if i not in count else count[i] + 1\n        elif string[i] == '1':\n            count[i] = 1 if i not in count else count[i] + 1\n\n    # Initialize a dictionary to store the count of 0s and 1s in each position of the binary string\n    # after removing 0s and 1s in positions with even indices\n    even_count = {}\n    for i in range(len(string)):\n        if string[i] == '0':\n            even_count[i] = 0 if i % 2!= 0 else count[i] + 1\n        elif string[i] == '1':\n            even_count[i] = 1 if i % 2!= 0 else count[i] + 1\n\n    # Initialize a variable to store the maximum difference between the count of 0s and 1s in each sub-string\n    max_diff = 0\n\n    # Loop through the binary string and check if the difference between the count of 0s and 1s in even and odd positions is greater than the maximum difference found so far\n    for i in range(len(string)):\n        if i % 2 == 0:\n            diff = abs(even_count[i] - count[i])\n            if diff > max_diff:\n                max_diff = diff\n        else:\n            diff = abs(even_count[i] - count[i])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            diff = 1\n        else:\n            diff = 0\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    n = len(string)\n    dp = [0]*n\n    \n    for i in range(1, n):\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 0\n            \n    max_diff = 0\n    for i in range(n):\n        if dp[i] > max_diff:\n            max_diff = dp[i]\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    # initialize result\n    result = 0\n    # loop through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # check if substrings have 0 and 1 in them\n            if string[i] == '0' and string[j-1] == '1':\n                result = max(result, j - i)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Using the Euclidean algorithm to find the greatest common divisor of a and b\n    while b:\n        a, b = b, a % b\n\n    # Initializing the sum variable to 0\n    sum_of_common_divisors = 0\n\n    # Looping through all the numbers from 1 to the square root of a and adding them to the sum if they are divisible by both a and b\n    for i in range(1, int(a ** 0.5) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Calculate the sum of common divisors of two given numbers\n    common_divisors = set(a) & set(b)\n    total_sum = sum(common_divisors)\n    \n    # Return the total sum of common divisors\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # calculate the GCD of the two numbers\n    gcd = 1\n    while a!= 0:\n        a, b = b % a, a\n    while b!= 0:\n        b, gcd = gcd, b % b\n\n    # calculate the sum of common divisors\n    common_divisor_sum = 1\n    for i in range(2, gcd+1):\n        if gcd % i == 0:\n            common_divisor_sum += i\n\n    # return the sum of common divisors\n    return common_divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for num in range(1, b+1):\n        if a % num == 0 and b % num == 0:\n            divisors.append(num)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # create a list of all divisors of a\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.append(i)\n\n    # create a list of all divisors of b\n    divisors2 = []\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors2.append(i)\n\n    # find the common divisors of both lists\n    common_divisors = set(divisors).intersection(set(divisors2))\n\n    # find the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    i=1\n    div_sum = 0\n    while i<=a:\n        if a%i==0 and b%i==0:\n            div_sum += i\n        i+=1\n    return div_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    def is_common_divisor(num, a, b):\n        while b:\n            if b & 1:\n                if num % b == 0:\n                    return True\n            num, b = divmod(num, b)\n            if num == 1:\n                return False\n            if b == 1:\n                return True\n        return False\n    \n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    \n    common_divisors = set()\n    for num in range(1, max(a, b) + 1):\n        if is_common_divisor(num, a, b):\n            common_divisors.add(num)\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n\n    # find common divisors of a and b\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n\n    # find sum of common divisors\n    sum_divisors = sum(divisors)\n\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        for i in range(1, b+1):\n            if b % i == 0:\n                return True\n        return False\n\n    # function to find the sum of common divisors of a and b\n    def sum_common_divisors(a, b):\n        sum = 0\n        for i in range(1, b+1):\n            if a % i == 0 and b % i == 0:\n                sum += i\n        return sum\n\n    # check if both numbers are positive integers\n    if a > 0 and b > 0:\n        # calculate the sum of common divisors of a and b\n        c = sum_common_divisors(a, b)\n        # return the sum\n        return c\n    else:\n        # return an error message if either number is not positive integer\n        return \"Error: Both numbers must be positive integers.\""
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        y = y // 2\n        x = x << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # If y is odd, add x to result\n        if y & 1 == 1:\n            result += x\n        # Shift x to the right by 1\n        x <<= 1\n        # Shift y to the right by 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        # Get the last digit of x and y\n        x_last_digit = x % 10\n        y_last_digit = y % 10\n        \n        # Calculate the sum of last digits and product\n        product = product + x_last_digit * y_last_digit\n        \n        # Remove the last digit from x and y\n        x = x // 10\n        y = y // 10\n    \n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        # If the least significant bit of y is 1, add x to result\n        if y & 1 == 1:\n            result += x\n        # Shift y by 1 and add the next bit to x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the given string to a list of words\n    words = str.split()\n    # Initialize an empty list to store the words longer than n characters\n    long_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, append it to the list of longer words\n            long_words.append(word)\n    # Return the list of longer words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert string to a list of words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If the word is longer than n, append it to the long_words_list\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The length of the words that should be considered.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    row_sum = [0] * 10\n    col_sum = [0] * 10\n    for i in range(10):\n        for j in range(10):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[j] += my_matrix[i][j]\n\n    for i in range(10):\n        if row_sum[i]!= i + 1 or col_sum[i]!= i + 1:\n            return False\n\n    for i in range(10):\n        for j in range(9):\n            if my_matrix[i][j] == my_matrix[i][j + 1] or my_matrix[i][j] == my_matrix[i + 1][j]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n    sum_matrix = [0] * rows\n    sum_row = [0] * cols\n    sum_square = [0] * total\n\n    for i in range(rows):\n        for j in range(cols):\n            sum_matrix[i] += my_matrix[i][j]\n            sum_row[j] += my_matrix[i][j]\n            sum_square[i + j] += my_matrix[i][j]\n\n    for i in range(rows):\n        for j in range(cols):\n            if sum_matrix[i] - sum_row[j]!= sum_square[i + j]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Define the size of the matrix\n    size = len(my_matrix)\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(row[i] for i in range(size))\n\n    # Check if the diagonal sum is equal to the sum of the rows\n    if diagonal_sum == sum(my_matrix[i] for i in range(size)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n * n!= sum(sum(row) for row in my_matrix):\n        return False\n\n    # Calculate the sum of the elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the elements is equal to the product of the matrix size\n    if total!= n * n:\n        return False\n\n    # Check if the sum of the diagonal elements is equal to the product of the matrix size\n    diag_sum = sum(row[i] for i in range(n))\n    if diag_sum!= n * n:\n        return False\n\n    # Check if the sum of the anti-diagonal elements is equal to the product of the matrix size\n    anti_diag_sum = sum(row[n - 1 - i] for i in range(n))\n    if anti_diag_sum!= n * n:\n        return False\n\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # get the dimensions of the matrix\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    # check that the matrix is a square\n    if rows!= cols:\n        return False\n    # check that each row contains unique elements\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    # check that each column contains unique elements\n    for col in range(cols):\n        col_set = set()\n        for row in my_matrix:\n            if row[col] in col_set:\n                return False\n            col_set.add(row[col])\n    # if we get here, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check that the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"Matrix must have 3 rows and 3 columns\"\n\n    # Check that each row and column has unique numbers\n    for row in my_matrix:\n        if len(set(row))!= 3:\n            return \"Each row must have unique numbers\"\n\n    for col in my_matrix:\n        if len(set(col))!= 3:\n            return \"Each column must have unique numbers\"\n\n    # Check that the sum of the main diagonal is equal to the sum of the secondary diagonal\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n    if diagonal_sum!= diagonal_sum:\n        return \"The sum of the main diagonal and the secondary diagonal must be equal\"\n\n    # Check that the sum of the off-diagonal elements is equal to zero\n    off_diagonal_sum = 0\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                continue\n            off_diagonal_sum += my_matrix[i][j]\n    if off_diagonal_sum!= 0:\n        return \"The sum of the off-diagonal elements must be zero\"\n\n    return \"The matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n\n    # check if the sums are equal\n    if row_sum == col_sum:\n        return True\n\n    # check if there is a 1 in the diagonal\n    diag1 = [my_matrix[i][i] for i in range(len(my_matrix))]\n    diag2 = [my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))]\n\n    if diag1 == diag2:\n        return True\n\n    # check if there is a 1 in the first element of each column\n    first_col = [my_matrix[i][0] for i in range(len(my_matrix))]\n\n    for i in range(len(my_matrix)):\n        if first_col[i] == 1:\n            return False\n\n    # check if there is a 1 in the first element of each row\n    first_row = [my_matrix[0][i] for i in range(len(my_matrix[0]))]\n\n    for i in range(len(my_matrix)):\n        if first_row[i] == 1:\n            return False\n\n    # check if there is a 1 in the first element of the matrix itself\n    if my_matrix[0][0] == 1:\n        return False\n\n    # if no sums or diagonals are found, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function calculates whether a given matrix is a magic square or not.\n    '''\n    # Check if the dimensions of the matrix are 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Calculate the sum of all the elements of the matrix\n    total_sum = sum([sum(row) for row in my_matrix])\n    \n    # Check if the total sum is equal to 0\n    if total_sum == 0:\n        return False\n    \n    # Calculate the sum of the first diagonal elements\n    first_diagonal_sum = sum([my_matrix[i][i] for i in range(3)])\n    \n    # Check if the sum of the first diagonal elements is equal to 0\n    if first_diagonal_sum == 0:\n        return False\n    \n    # Calculate the sum of the second diagonal elements\n    second_diagonal_sum = sum([my_matrix[i][2-i] for i in range(3)])\n    \n    # Check if the sum of the second diagonal elements is equal to 0\n    if second_diagonal_sum == 0:\n        return False\n    \n    # If all the above conditions are met, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if matrix is square\n    if n!= len(set(map(list, my_matrix))):\n        return False\n    # check if all rows are the same\n    for i in range(n):\n        if sorted(my_matrix[i])!= sorted(my_matrix[0]):\n            return False\n    # check if all columns are the same\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        if sorted(col)!= sorted(col[0]):\n            return False\n    # check if the diagonals are the same\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[i][n-i-1]:\n            return False\n    for i in range(n):\n        if my_matrix[i][n-i-1]!= my_matrix[n-i-1][i]:\n            return False\n    # matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # calculate the size of the matrix\n    n = len(my_matrix)\n    # initialize the magic number\n    magic_number = 1\n    # initialize the sum of the magic numbers\n    sum_magic = 0\n    # loop through the matrix to calculate the sum of the magic numbers\n    for i in range(n):\n        for j in range(n):\n            sum_magic += my_matrix[i][j]\n    # loop through the matrix again to calculate the sum of the rows\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n        sum_magic += row_sum\n    # loop through the matrix again to calculate the sum of the columns\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[j][i]\n        sum_magic += col_sum\n    # check if the sum of the magic numbers is equal to the product of the matrix size\n    if sum_magic == n * n * (n * n + 1) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n\n    max_item = None\n    max_count = 0\n    for item, count in count.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_freq = max(count.values())\n    return max(num for num, freq in count.items() if freq == max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict with initial values of 0 for each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    # Find the item with the highest frequency\n    max_freq = max(freq.values())\n    max_num = max(freq, key=lambda x: freq[x])\n    return max_num, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # iterate through the list and update the frequency count in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # initialize the maximum frequency count as 0\n    max_freq = 0\n\n    # iterate through the dictionary and update the maximum frequency count if necessary\n    for freq in freq_dict.values():\n        if freq > max_freq:\n            max_freq = freq\n\n    # iterate through the dictionary again to find the item with maximum frequency\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency and its frequency\n    max_num = max(freq_dict, key=freq_dict.get)\n    max_freq = freq_dict[max_num]\n\n    return max_num, max_freq"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n    \n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            if char in 'AEIOU':\n                result += char\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            if vowel_count % 2 == 0:\n                result.append(str1[i])\n            else:\n                result.append(str1[i])\n        else:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_dict = {}\n    for letter in str1:\n        if letter.lower() in vowels:\n            vowel_dict[letter.lower()] = str1.index(letter)\n    reversed_str = \"\"\n    for letter, index in vowel_dict.items():\n        reversed_str = reversed_str + str1[index]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_list = list(vowels)\n    reversed_str = str1[::-1]\n    result = ''\n    for i in reversed_str:\n        if i not in vowels_list:\n            result += i\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_str = ''\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n    return vowel_str[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Check if the tuple is empty or not\n    if len(tup1) == 0:\n        return 'Empty tuple'\n    # Check if the tuple has only one element\n    elif len(tup1) == 1:\n        return str(tup1[0])\n    # If the tuple has multiple elements, convert it to a string\n    else:\n        return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = str(tup1[0])\n    for i in range(1, len(tup1)):\n        string += ',' + str(tup1[i])\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negativenum_sum = 0\n    for num in nums:\n        if num < 0:\n            negativenum_sum += num\n    return negativenum_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal = 1\n    \n    # Iterate n times to get the nth hexagonal number\n    for i in range(1, n+1):\n        hexagonal *= 6\n        hexagonal -= 1\n    \n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize the first two hexagonal numbers\n    hex1 = 1\n    hex2 = 6\n    \n    # loop to find the nth hexagonal number\n    for i in range(n):\n        # find the next hexagonal number\n        hex3 = hex1 + hex2\n        \n        # update the values of hex1 and hex2\n        hex1 = hex2\n        hex2 = hex3\n        \n    # return the nth hexagonal number\n    return hex3"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += i*(2*i-1)\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5*n**2 - 3*n + 5)/2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * (3 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input! Please enter a positive integer.\")\n    else:\n        num = n * (2 * n - 1)\n        return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Compute the length of the nth side of a hexagon\n    def side_length(n):\n        return (n * (n + 1)) // 2\n\n    # Compute the sum of the nth hexagon numbers\n    def hexagonal_sum(n):\n        return (n * (3 * n - 1)) // 2\n\n    # Compute the nth hexagonal number\n    return hexagonal_sum(side_length(n) // 2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Find the value of n in terms of the number of rows\n    num_rows = n // 6\n    # Find the value of n in terms of the number of columns\n    num_cols = n % 6\n\n    # Initialize the hexagonal number\n    hex_num = 0\n\n    # Loop through the number of rows\n    for i in range(num_rows):\n        # Loop through the number of columns\n        for j in range(num_cols):\n            # Add 1 to the hexagonal number\n            hex_num += 1\n\n    # Return the hexagonal number\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0]*len(nums))\n    non_zeroes = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            zeroes[zeroes.index(num)] += 1\n        else:\n            non_zeroes[non_zeroes.index(num)] += 1\n\n    ratio = 0\n    for i in range(len(zeroes)):\n        ratio += zeroes[i] / (non_zeroes[i] + zeroes[i])\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i')\n    for num in nums:\n        count.append(num)\n    zeros = 0\n    non_zeros = 0\n    for i in range(len(count)):\n        if count[i] == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return non_zeros / zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeros += 1\n    \n    if non_zeros == 0:\n        return 0\n    \n    return zeroes / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')  # create an array of integers to store the number of zeroes\n    non_zeroes = array('i')  # create an array of integers to store the number of non-zeroes\n    \n    # loop through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    # calculate the ratio of zeroes to non-zeroes\n    zero_count = zeroes.count(0) / non_zeroes.count(0)\n    \n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n\n    non_zeroes = sum(count)\n    zeroes = len(nums) - non_zeroes\n\n    return non_zeroes/zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # create an array to store the count of each integer value\n    counts = array('i', [0]*max(nums)+1)\n\n    # loop through the array and increment the count of each integer value\n    for num in nums:\n        counts[num] += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    zeros = sum(count for count in counts if count == 0)\n    nonzeros = sum(count for count in counts if count!= 0)\n    ratio = zeros / nonzeros if nonzeros!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0 for i in range(len(nums))])\n    non_zero_count = array('i', [0 for i in range(len(nums))])\n\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(0) + 1] += 1\n        else:\n            non_zero_count[non_zero_count.index(0) + 1] += 1\n\n    ratio = 0.0\n    for i in range(len(zero_count)):\n        ratio += zero_count[i] / (non_zero_count[i] + zero_count[i])\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if zero_count == 0:\n        ratio = 0.0\n    else:\n        ratio = non_zero_count / zero_count\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n & (n-1) == 0:\n        return True\n    if n & (n-1) == n-1:\n        return True\n    if n & (n-2) == 0:\n        return True\n    if n & (n-2) == n-2:\n        return True\n    for i in range(3, int(n**0.5)+1, 2):\n        if n & (n-i) == 0:\n            return True\n        if n & (n-i) == n-i:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is zero\n    if n == 0:\n        return True\n\n    # check if the number is a power of 2\n    if n == 1:\n        return False\n\n    # check if the number is a power of 3\n    if n == 3:\n        return True\n\n    # check if the number is a power of 4\n    if n == 4:\n        return True\n\n    # check if the number is a power of 8\n    if n == 8:\n        return True\n\n    # check if the number is a power of 16\n    if n == 16:\n        return True\n\n    # check if the number is a power of 32\n    if n == 32:\n        return True\n\n    # check if the number is a power of 64\n    if n == 64:\n        return True\n\n    # check if the number is a power of 128\n    if n == 128:\n        return True\n\n    # check if the number is a power of 256\n    if n == 256:\n        return True\n\n    # check if the number is a power of 512\n    if n == 512:\n        return True\n\n    # check if the number is a power of 1024\n    if n == 1024:\n        return True\n\n    # check if the number is a power of 2048\n    if n == 2048:\n        return True\n\n    # check if the number is a power of 4096\n    if n == 4096:\n        return True\n\n    # check if the number is a power of 8192\n    if n == 8192:\n        return True\n\n    # check if the number is a power of 16384\n    if n == 16384:\n        return True\n\n    # check if the number is a power of 32768\n    if n == 32768:\n        return True\n\n    # check if the number is a power of 65536\n    if n == 65536:\n        return True\n\n    # check if the number is a power of 131072\n    if n == 131072:\n        return True\n\n    # check if the number is a power of 262144\n    if n == 262144:\n        return True\n\n    # check if the number is a power of 524288\n    if n == 524288:\n        return True\n\n    # check if the number is a power of 1048576\n    if n == 1048576:\n        return True\n\n    # check if the number is a power of 2097152\n    if n == 2097152:\n        return True\n\n    # check if the number is a power of 4194304\n    if n == 4194304:\n        return True\n\n    # check if the number is a power of 8388608\n    if n == 8388608:\n        return True\n\n    # check if the number is a power of 16777216\n    if n == 16777216:\n        return True\n\n    # check if the number is a power of 33554432\n    if n == 33554432:\n        return True\n\n    # check if the number is a power of 67108864\n    if n == 67108864:\n        return True\n\n    # check if the number is a power of 134217728\n    if n == 134217728:\n        return True\n\n    # check if the number is a power of 268435456\n    if n == 268435456:\n        return True\n\n    # check if the number is a power"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Find the maximum number of powers of 2 that can be added to n to get a result greater than 1\n    max_powers_of_2 = 0\n    while n > 1:\n        n = n >> 1\n        max_powers_of_2 += 1\n\n    # Check whether the sum of powers of 2 can be represented as a power of 2 greater than 1\n    if max_powers_of_2 == 0:\n        return True\n    elif max_powers_of_2 == 1:\n        return False\n    else:\n        return (n == (1 << max_powers_of_2) - 1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # initialize the count of non-zero powers of 2 in the given number\n    count = 0\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # check if the bit is 1\n        if n & (1 << i):\n            # count the non-zero power of 2\n            count += 1\n            # check if the sum of the non-zero powers of 2 is a multiple of 2^i\n            if count * (1 << i)!= n:\n                return False\n    # if the loop completes without returning False, then the number can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Function to check if n is divisible by 2^i for any i\n    def is_power_of_two(i):\n        return n % (2 ** i) == 0\n\n    # Check if n is divisible by 2^0\n    if is_power_of_two(0):\n        return True\n\n    # Check if n is divisible by 2^1\n    if is_power_of_two(1):\n        return is_power_of_two(0)\n\n    # Check if n is divisible by 2^2\n    if is_power_of_two(2):\n        return is_power_of_two(0) and is_power_of_two(1)\n\n    # Check if n is divisible by 2^3\n    if is_power_of_two(3):\n        return is_power_of_two(0) and is_power_of_two(2)\n\n    # Check if n is divisible by 2^4\n    if is_power_of_two(4):\n        return is_power_of_two(0) and is_power_of_two(3)\n\n    # Check if n is divisible by 2^5\n    if is_power_of_two(5):\n        return is_power_of_two(0) and is_power_of_two(4)\n\n    # Check if n is divisible by 2^6\n    if is_power_of_two(6):\n        return is_power_of_two(0) and is_power_of_two(5)\n\n    # Check if n is divisible by 2^7\n    if is_power_of_two(7):\n        return is_power_of_two(0) and is_power_of_two(6)\n\n    # Check if n is divisible by 2^8\n    if is_power_of_two(8):\n        return is_power_of_two(0) and is_power_of_two(7)\n\n    # Check if n is divisible by 2^9\n    if is_power_of_two(9):\n        return is_power_of_two(0) and is_power_of_two(8)\n\n    # Check if n is divisible by 2^10\n    if is_power_of_two(10):\n        return is_power_of_two(0) and is_power_of_two(9)\n\n    # Check if n is divisible by 2^11\n    if is_power_of_two(11):\n        return is_power_of_two(0) and is_power_of_two(10)\n\n    # Check if n is divisible by 2^12\n    if is_power_of_two(12):\n        return is_power_of_two(0) and is_power_of_two(11)\n\n    # Check if n is divisible by 2^13\n    if is_power_of_two(13):\n        return is_power_of_two(0) and is_power_of_two(12)\n\n    # Check if n is divisible by 2^14\n    if is_power_of_two(14):\n        return is_power_of_two(0) and is_power_of_two(13)\n\n    # Check if n is divisible by 2^15\n    if is_power_of_two(15):\n        return is_power_of_two(0) and is_power_of_two(14)\n\n    # Check if n is divisible by 2^16\n    if is_power_of_two(16):\n        return is_power_of_two(0) and is_power_of_two(15)\n\n    # Check if n is divisible by 2^17\n    if is_power_of_two(17):\n        return is_power_of_two(0) and is_power_of_two(16)\n\n    # Check if n is divisible by 2^18\n    if is_power_of_two(18):\n        return is_power_of_two(0) and is_power_of_two(17)\n\n    # Check if n is divisible by 2^19\n    if is_power_of_two(19):\n        return is_power_of_two(0) and is_power_"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if n//i == 1:\n                return True\n            else:\n                j = 2\n                while i*j <= n//i:\n                    if n % (i*j) == 0:\n                        return True\n                    j += 1\n                return False\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is zero or one\n    if n == 0 or n == 1:\n        return True\n\n    # Check if the given number is a power of 2\n    while n % 2 == 0:\n        n //= 2\n\n    # Check if the given number is equal to sum of powers of 2\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    # The given number is given as input.\n\n    # The function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    # If the number can be represented as sum of non-zero powers of 2, then the function returns True, else it returns False.\n\n    # The function first checks whether the given number is a power of 2 or not. If it is not a power of 2, then it can't be represented as sum of non-zero powers of 2.\n    if n & (n - 1)!= 0:\n        return False\n\n    # The function then checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    # The given number is divided by 2 and the result is stored in a variable temp.\n    # The function then checks whether the temp can be represented as sum of non-zero powers of 2 or not.\n    # If the temp can be represented as sum of non-zero powers of 2, then the given number can be represented as sum of non-zero powers of 2, else it can't be represented as sum of non-zero powers of 2.\n    temp = n // 2\n    if temp & (temp - 1)!= 0:\n        return False\n\n    # If the function reaches here, then it can be represented as sum of non-zero powers of 2, so the function returns True.\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # If the number is 1, then it is already a power of 2\n    if n == 1:\n        return True\n    \n    # Loop through the odd numbers from 3 to n/2 (inclusive)\n    for i in range(3, n//2 + 1, 2):\n        # If the number is divisible by i, then it cannot be represented as sum of powers of 2\n        if n % i == 0:\n            return False\n    \n    # If we reach here, then n is a power of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Convert the given number into a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n\n    # Calculate the sum of powers of 2\n    sum_of_powers = sum([2**i for i in range(len(bits))])\n\n    # Check if the sum of powers of 2 is equal to the original number\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for finding circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [num for sublist in test_list for num in sublist]\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened numbers\n    result = set()\n    # Loop through each sublist in the list\n    for sublist in test_list:\n        # Loop through each number in the sublist\n        for num in sublist:\n            # Add the number to the result set\n            result.add(num)\n    # Convert the result set to a list and return it\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for sublist in test_list:\n        flatten_list += sublist\n    return set(flatten_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # sort the entire list in descending order\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        # reverse the entire list from the i-th element\n        for j in range(i):\n            nums[j], nums[i - j - 1] = nums[i - j - 1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Initialize a list to keep track of the sorted positions of each element\n    sorted_indices = [0] * n\n\n    # Initialize a counter to keep track of the number of pancakes we've eaten\n    pancake_counter = 0\n\n    # While we haven't eaten all the pancakes yet...\n    while pancake_counter < n:\n        # Find the largest unsorted element\n        max_unsorted = -1\n        for i in range(n):\n            if sorted_indices[i] < i and nums[i] > nums[sorted_indices[i]]:\n                max_unsorted = i\n                break\n\n        # If we haven't found any unsorted elements, we're done\n        if max_unsorted == -1:\n            break\n\n        # Otherwise, swap the elements at the current indices with the largest unsorted element\n        nums[sorted_indices[max_unsorted]], nums[max_unsorted] = nums[max_unsorted], nums[sorted_indices[max_unsorted]]\n\n        # Increment the counter of pancakes we've eaten\n        pancake_counter += 1\n\n        # Update the sorted indices for all elements that are now sorted\n        for i in range(max_unsorted, n):\n            sorted_indices[i] += 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list.\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part of the list.\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the order of the first i elements of the unsorted part.\n        for j in range(i, 0, -1):\n            nums[i-j] = nums[i-j], nums[i-j-1]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the maximum element in the list\n    max_element = max(nums)\n\n    # Initialize an empty list to store the sorted elements\n    sorted_list = []\n\n    # Iterate over each element in the list\n    for i in range(len(nums)):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max_element)\n\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Find the index of the maximum element in the sorted list\n        sorted_max_index = nums.index(max_element)\n\n        # Append the maximum element to the sorted list\n        sorted_list.append(nums[sorted_max_index])\n\n        # Find the new maximum element\n        max_element = max(nums)\n\n    return sorted_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the sublist starting from the i-th element\n        max_index = i-1\n        for j in range(i-1, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    def swap(nums, i, j):\n        '''\n        Helper function to swap elements in the list.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def partition(nums, low, high):\n        '''\n        Helper function to partition the list around a pivot element.\n        '''\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i+1, high)\n        return i+1\n\n    def sort(nums, low, high):\n        '''\n        Main function to sort the list using pancake sort algorithm.\n        '''\n        if low < high:\n            pivot_index = partition(nums, low, high)\n            sort(nums, low, pivot_index-1)\n            sort(nums, pivot_index+1, high)\n\n    sort(nums, 0, len(nums)-1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Calculate the maximum size of the pancake sort\n    max_size = len(nums)\n    \n    # Bubble sort the list\n    for i in range(max_size):\n        for j in range(max_size-i-1):\n            # If the element is smaller than its neighbor, swap them\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # loop through each element in the list\n    for i in range(len(nums)):\n        # find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, len(nums)):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # swap the current element with the maximum element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # print the sorted list\n        print(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # function to reverse a list\n    def reverse_list(nums):\n        \"\"\"\n        Reverse a list.\n        \"\"\"\n        start = 0\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    # function to calculate the largest pancake\n    def largest_pancake(nums):\n        \"\"\"\n        Calculate the largest pancake.\n        \"\"\"\n        max_val = nums[0]\n        pancake = 0\n        for i in range(1, len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                pancake = i\n        return pancake\n\n    # function to reverse the pancake\n    def reverse_pancake(nums, pancake):\n        \"\"\"\n        Reverse the pancake.\n        \"\"\"\n        start = pancake - 1\n        end = len(nums) - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    # function to sort the list using pancake sort\n    def pancake_sort_helper(nums, start, end):\n        \"\"\"\n        Sort the list using pancake sort.\n        \"\"\"\n        if start >= end:\n            return\n        max_pancake = largest_pancake(nums)\n        reverse_pancake(nums, max_pancake)\n        pancake_sort_helper(nums, start, max_pancake - 1)\n        pancake_sort_helper(nums, max_pancake + 1, end)\n        reverse_list(nums[start:end + 1])\n\n    # sort the list\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the index of the largest element\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap the largest element with the last element\n        nums[i], nums[max_index] = nums[max_index], nums[i]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): First list.\n        list2 (list): Second list.\n        list3 (list): Third list.\n\n    Returns:\n        int: Number of items that are identical in the same position of the three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n    list1 (list): First list to compare.\n    list2 (list): Second list to compare.\n    list3 (list): Third list to compare.\n\n    Returns:\n    int: Number of items that are identical in the same position of the given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if isinstance(Input[i], list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes a list of integers as input and returns the maximum absolute difference between any two elements in the list.\n    '''\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum absolute difference to be the first element\n    max_diff = abs(arr[0] - arr[1])\n    # Loop through the array and compare each element with the previous element\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current and previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update the maximum absolute difference if the current element is greater\n        if diff > max_diff:\n            max_diff = diff\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    # iterate over the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    n = len(arr)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Given an array of integers, returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Find x and y such that ax + by = n\n    \"\"\"\n    # Check if a is zero\n    if a == 0:\n        if b!= 0:\n            # b is non-zero, so x = -n/b\n            x = -n / b\n            # y = 0\n            y = 0\n        else:\n            # a is zero and b is zero, so no solution exists\n            return None\n    else:\n        # a is non-zero, so y = (-n +/- sqrt(n^2 - 4ab))/2ab\n        y = (-n + np.sqrt(n**2 - 4*a*b)) / (2*a*b)\n        # x = (-n +/- sqrt(n^2 - 4ab))/2ab\n        x = (-n - np.sqrt(n**2 - 4*a*b)) / (2*a*b)\n        # Check if x is valid and return if so\n        if x < 0:\n            x = None\n        elif x > 1:\n            x = None\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation has integer coefficients\n    if a % 1!= 0 or b % 1!= 0:\n        return None\n\n    # initialize variables\n    x = 0\n    y = 0\n    a_inv = 0\n    b_inv = 0\n\n    # find the inverse of a and b\n    a_inv = 1 / a\n    b_inv = 1 / b\n\n    # find the values of x and y that satisfy the equation\n    x = (-b_inv * n) // a_inv\n    y = (-a_inv * x) // b_inv\n\n    # check if the equation has real solutions\n    if x % 1!= 0 or y % 1!= 0:\n        return None\n\n    # return the solution as a tuple\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (0, -n//b)\n    else:\n        d = b**2 - 4*a*n\n        if d < 0:\n            return None\n        else:\n            x1 = (-b + d**0.5)//(2*a)\n            x2 = (-b - d**0.5)//(2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    for i in range(1, n+1):\n        x = (n-b)/a\n        y = i\n        if x*a + y*b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Given an integer a, b, and an integer n, returns a tuple (x, y) such that ax + by = n, if such a pair exists.\n    Otherwise, returns None.\n    \"\"\"\n    # First, check if n can be written as an a^k * b^j form, where k >= 0 and j >= 0.\n    # This can be done using the Chinese remainder theorem.\n    def chinese_remainder_theorem(a_list, b_list):\n        n = a_list[0] * b_list[0]\n        for i in range(1, len(a_list)):\n            n = n * a_list[i]\n        for i in range(1, len(b_list)):\n            n = n // b_list[i]\n        return n\n\n    def has_linear_factors(n):\n        return any(a * b == n for a in a_list for b in b_list)\n\n    # Next, find all pairs of integers a_i and b_i such that a_i * b_i = n/i.\n    a_list = []\n    b_list = []\n    for i in range(1, n//2 + 1):\n        if n % i == 0 and has_linear_factors(i):\n            a_list.append(i)\n            b_list.append(n // i)\n\n    # Apply the Chinese remainder theorem to find x and y such that ax + by = n.\n    x = chinese_remainder_theorem(a_list, b_list)\n    if x is not None:\n        y = (x * b - n) // a\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has two solutions\n    if a == 0:\n        return None\n    elif b == 0:\n        return (n//a, n%a)\n    else:\n        x1 = (-b + (n//a**2))//a\n        x2 = (-b - (n//a**2))//a\n        y1 = x1*a - b\n        y2 = x2*a - b\n        return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n+1):\n        x = i\n        y = -a * i + b\n        if x*a + y*b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Finding the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Checking if the discriminant is positive or negative infinity\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation is valid\n    if not (-1000 < a*n < 1000 and -1000 < b*n < 1000 and b!= 0):\n        return None\n\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # if the discriminant is negative, there is no solution\n    if d < 0:\n        return None\n\n    # if the discriminant is zero, there is one solution\n    elif d == 0:\n        x = -b/2/a\n        return (x, x)\n\n    # if the discriminant is positive, there are two solutions\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1, x2 = 0, n // b\n    y1, y2 = 0, (n - x1 * b) // a\n    x, y = None, None\n    if a * x1 + b * y1 == n:\n        x = x1\n        y = y1\n    elif a * x2 + b * y2 == n:\n        x = x2\n        y = y2\n    else:\n        return None\n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        list1 (list): List to remove elements from.\n        list2 (list): List of elements to remove.\n\n    Returns:\n        list: List with elements removed from the given list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # iterate over the first list\n    for elem in list1:\n        # check if the element is in the second list\n        if elem in list2:\n            # if it is, remove it from the list\n            list1.remove(elem)\n    # return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return None\n    else:\n        sum = 0\n        for i in range(n//2):\n            sum += (n - 2*i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        return sum_series(n-1)\n    else:\n        s = 0\n        for i in range(n//2):\n            s += n - 2*i\n        return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    return n + sum_series(n - 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 4:\n        return 0\n    else:\n        sum = 0\n        for i in range(0, n//2):\n            sum += (n - 2*i)\n        return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 3:\n        return 0\n    return n + sum_series(n-2) - sum_series(n-4) + sum_series(n-6)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = 0\n    for i in range(n // 2):\n        series += n - 2 * i\n    return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 1)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = tan(i * 2 * pi / l)\n        area += s * r\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of the polygon\n    area = s * l / 2\n    # calculate the perimeter of the polygon\n    perimeter = s * l\n    # calculate the length of each side\n    side_length = perimeter / l\n    # calculate the number of sides\n    num_sides = l\n    \n    # print the details of the polygon\n    print(\"Area of the polygon: {:.2f}\".format(area))\n    print(\"Perimeter of the polygon: {:.2f}\".format(perimeter))\n    print(\"Side length: {:.2f}\".format(side_length))\n    print(\"Number of sides: {}\".format(num_sides))\n    \n    # calculate the area of the polygon using the formula\n    area = (s**2) * (side_length/2) * math.tan(pi/num_sides)\n    \n    # print the area of the polygon using the formula\n    print(\"Area of the polygon using the formula: {:.2f}\".format(area))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * (tan(i*2*pi/l) + tan((i+1)*2*pi/l))\n    return area/2\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #calculate the area of a regular polygon using the formula A = (s/2) * (sin(pi/l))\n    A = (s/2) * (tan(pi/l))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l)/2\n    return area\n\ndef area_regular_polygon(n, r):\n    '''\n    Write a function to calculate the area of a regular polygon given the number of sides and radius of the base.\n    '''\n    a = 2*pi/n\n    s = r*tan(a)\n    l = n*s\n    area = area_polygon(s, l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * pi / l)\n    return area * s / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += ((tan(pi/l)*s**2)**2)/((tan(pi/i)*s**2)**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using Heron's formula\n    area = (s * l) / (4 * tan(pi/l))\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate divisors of a number\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return divisors\n\n    # Get the divisors of n and m\n    divisors_n = get_divisors(n)\n    divisors_m = get_divisors(m)\n\n    # Check if the sum of the divisors of n and m are the same\n    if sum(divisors_n) == sum(divisors_m):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n\n    # Calculate the sum of the divisors of n using a loop\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if i!= n // i:\n                divisor_sum += n // i\n    \n    # Check if the sum of the divisors of n and its square are the same\n    if divisor_sum == n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = math.factorial(n)\n    div2 = math.factorial(sum_of_divisors(n))\n    if div1 == div2: \n        return True \n    else: \n        return False \n\ndef sum_of_divisors(n): \n    '''\n    Write a function to calculate the sum of the divisors of an integer.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        if n % i == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n using a loop\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n\n    # calculate the sum of divisors of n using a list comprehension\n    div_sum_lst = [i for i in range(1, n+1) if n % i == 0]\n\n    # check if the sum of the two lists are equal\n    if div_sum == div_sum_lst:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # check if n is divisible by 1\n    if n % 2 == 0:\n        return False\n\n    # calculate the sum of divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i\n        if n % (i + 2) == 0:\n            div_sum += i + 2\n\n    # check if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(range(1, n+1)) - set([i for i in range(1, n//2+1)]))\n    # Check if the sum is the same for n and its integer part\n    if div_sum == n or div_sum == int(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = sum(set(int(x) for x in str(n)) - {0}) # Calculate sum of divisors\n    divisors_sum = sum(range(1, int(math.sqrt(n))+1)) # Calculate sum of divisors up to square root of n\n    \n    if divisor_sum == divisors_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if n//i!= i:\n                div_list.append(n//i)\n    return sum(div_list) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    This function takes an integer as an argument and checks if the sum of the divisors of the integer and the integer itself are the same or not. \n    If the sum is the same, it returns True, otherwise, it returns False.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    sum_of_divisors = sum(divisors)\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    div_list = []\n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            div_list.append(i)\n            div_list.append(n // i)\n\n    div_sum = sum(div_list)\n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n    # Initialize a dictionary to count the number of occurrences of each character in the English alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Loop through each character in the English alphabet and count the number of occurrences of that character in the string\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i).lower() in char_count:\n            char_count[chr(i).lower()] += 1\n    # Return the dictionary containing the count of each character at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate through each character in the string and update the count in the dictionary\n    for i in range(26):\n        char_count[chr(97+i)] = str1.count(chr(97+i))\n\n    # Return the total count of characters in the string\n    return sum(char_count.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase to ignore case differences\n    str1 = str1.lower()\n    # Initialize a dictionary to store the position of each character in the string\n    position_dict = {}\n    # Loop through the string and count the number of characters that occur at the same position in the English alphabet\n    for i, char in enumerate(str1):\n        # If the character is not already in the position_dict, add it with a value of 1\n        if char not in position_dict:\n            position_dict[char] = 1\n        # If the character is already in the position_dict, increment its value by 1\n        else:\n            position_dict[char] += 1\n    # Loop through the position_dict and count the number of characters that occur at the same position in the English alphabet\n    count = 0\n    for position, value in position_dict.items():\n        # If the value is 1, increment the count\n        if value == 1:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Create a dictionary to store the frequency of each English alphabet character\n    freq = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Convert the string to lowercase and split it into individual characters\n    str1 = str1.lower()\n    str1 = list(str1)\n    \n    # Iterate over the characters in the string and update the frequency of each English alphabet character\n    for char in str1:\n        freq[char] += 1\n    \n    # Count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for i in range(26):\n        if freq['a'] == freq[chr(97 + i)]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # initialize an empty dictionary to store the count of characters\n    count_dict = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # add the character to the dictionary if it's already in the dictionary\n        if char in count_dict:\n            count_dict[char] += 1\n        # if the character is not already in the dictionary, add it with a count of 1\n        else:\n            count_dict[char] = 1\n    \n    # initialize a counter variable to keep track of the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character occurs at the same position in the English alphabet as in the string\n        if str1.index(char) == count_dict[char]:\n            # increment the counter if the character occurs at the same position in the English alphabet\n            count += 1\n    \n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower()[i] == str1.lower()[(i+1) % 26]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and split into a list of characters\n    str1 = str1.lower()\n    char_list = list(str1)\n\n    # Initialize a counter for each character in the alphabet (lowercase and uppercase)\n    count_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # Iterate through the list of characters and update the counter if the character is in the English alphabet\n    for char in char_list:\n        if char in count_dict:\n            count_dict[char] += 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower() == alphabet[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # convert n to binary and count the number of 1s\n    count = sum(1 for bit in bin(n)[2:] if bit == '1')\n    # find the maximum power of 2 that can be represented by n\n    max_power = 1 << count\n    # return the next power of 2\n    return 2 ** max_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the result to the input value\n    result = n\n\n    # loop while the result is not a power of 2\n    while result & (result - 1)!= 0:\n        # increment the result by 1\n        result += 1\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variables\n    power = 1\n    # Loop through all numbers between 1 and n\n    for i in range(1, n+1):\n        # If the number is a power of 2, increase the power\n        if i == 1 << power:\n            power += 1\n        # If the number is not a power of 2, break the loop\n        else:\n            break\n    # Return the power of 2\n    return 1 << power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the largest power of 2 smaller than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Return the next power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    # Find the binary representation of n\n    binary_str = bin(n)[2:]\n    # Initialize a counter variable and a boolean flag to keep track of the presence of a 0 in the binary string\n    count = 0\n    has_zero = False\n    # Iterate over the binary string from right to left\n    for i in range(len(binary_str)-1, -1, -1):\n        # If the current bit is 0, increment the counter and set the has_zero flag to True\n        if binary_str[i] == '0':\n            count += 1\n            has_zero = True\n        # If the current bit is 1 and the counter is 0, then increment the counter and reset the has_zero flag\n        elif binary_str[i] == '1' and count == 0:\n            count += 1\n            has_zero = False\n        # If the current bit is 1 and the counter is greater than 0, then decrement the counter and reset the has_zero flag\n        else:\n            count -= 1\n            has_zero = False\n    # If there is no 0 in the binary string, return the current value of n\n    if not has_zero:\n        return n\n    # If there is a 0 in the binary string, return the value of 2 raised to the power of the counter + 1\n    return 2**counter + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the highest power of 2 smaller than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Binary search for the smallest power of 2 greater than or equal to n\n    left = 1\n    right = 4096  # maximum value of 16-bit integer\n    while left < right:\n        mid = (left + right) // 2\n        if mid >= n:\n            right = mid\n        else:\n            left = mid + 1\n    \n    return left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**((n-1).bit_length())"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count "
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid input indices\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if indices are within the range of the list\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n\n    # Initialize sum to zero\n    total_sum = 0\n\n    # Iterate through the range of the list\n    for i in range(m, n+1):\n        total_sum += list1[i]\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    :param list1: A list of numbers.\n    :type list1: list\n    :param m: The starting index of the range.\n    :type m: int\n    :param n: The ending index of the range.\n    :type n: int\n    :return: The sum of numbers in the list within the range [m, n].\n    :rtype: int\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m >= len(list1) or n >= len(list1) or m < 0 or n < 0:\n        return 'Invalid index range'\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter (half the perimeter)\n    s = (5*a**2 + 5*a + 5)/5\n    # Calculate the area of the pentagon using Heron's formula\n    area = (5*a**2 + 5*a + 5)/10\n    # Return the perimeter\n    return math.pi*s + 2*area"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n\na = float(input(\"Enter the length of the side of the pentagon: \"))\nperimeter = perimeter_pentagon(a)\nprint(\"The perimeter of the pentagon is:\", perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the sides of the pentagon\n    s = (a * math.sin(math.pi / 5)) / math.tan(math.pi / 5)\n    \n    # calculate the perimeter of the pentagon\n    perimeter = 5 * s\n    \n    # return the value of perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # formula for perimeter of pentagon = 5 * a * (3^(1/2) - 1)\n    return 5 * a * (3**(0.5) - 1)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 5 * a\n    return P"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    s = (5*a**2)/4\n    \n    # Return the perimeter as the square root of the semi-perimeter\n    return math.sqrt(s)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of a side of the pentagon\n    side = 2 * a\n    # Calculate the number of equal sides that the pentagon has\n    num_equal_sides = int(math.sqrt(5) * a - math.sqrt(20) * a + 2)\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a + 5 * a - num_equal_sides * side\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n        elif char == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while start!= -1:\n        start = s.find('std', start)\n        if start!= -1:\n            count += 1\n            start += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n    first_element = test_tuple[0]\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(first_element):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initializing the variable to True\n    is_same_type = True\n    # iterating through the tuple using for loop\n    for i in range(len(test_tuple)):\n        # comparing the data type of the current element and the first element in the tuple\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            # if any element has a different data type, then changing the variable to False\n            is_same_type = False\n            break\n    # returning the result of the check\n    return is_same_type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the length of the tuple is greater than 1\n    if len(test_tuple) > 1:\n        # Get the first element of the tuple\n        first_element = test_tuple[0]\n        # Check the data type of all the elements in the tuple\n        for element in test_tuple:\n            if type(first_element)!= type(element):\n                return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of first element in tuple\n    data_type = type(test_tuple[0])\n\n    # iterate over the remaining elements in tuple\n    for element in test_tuple[1:]:\n        # check if data type of current element is same as the data type of first element\n        if type(element)!= data_type:\n            # if not, return False as we found a mismatch\n            return False\n\n    # if we reached this point, all the elements have same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = type(test_tuple[0])\n\n    # iterate through the remaining elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the current element is of a different data type than the first element\n        if type(element)!= first_element:\n            return False\n\n    # if the loop completes without returning False, all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # iterate over the rest of the elements in the tuple\n    for i in range(1, len(test_tuple)):\n        # get the data type of the current element\n        current_data_type = type(test_tuple[i])\n\n        # if the data types are different, return False\n        if current_data_type!= data_type:\n            return False\n\n    # if we reach this point, all the elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize a list to store the data types of all the elements in the tuple\n    data_types = []\n\n    # Iterate through all the elements in the tuple\n    for item in test_tuple:\n        # Append the data type of each element to the list\n        data_types.append(type(item).__name__)\n\n    # Get the unique data types of all the elements in the tuple\n    unique_data_types = list(set(data_types))\n\n    # Check if the length of the unique data types is equal to 1, if not, then all the elements in the tuple have different data types\n    if len(unique_data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n\n        # If the element at index i is equal to the target element, increment the count\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, return True, otherwise return False\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    majority = -1\n\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n        elif i + 1 < n and arr[i] == arr[i + 1]:\n            count = 1\n            majority = arr[i]\n\n    return majority"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits (binary digits with value 1) in that number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    :param n: An integer that needs to be counted for set bits.\n    :return: An integer representing the number of set bits in the input number.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n - 1)  # clear the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_string += str[i]\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # Check if the current index is odd\n        if index % 2 == 1:\n            # If it is, append the character to the result string\n            result += char\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    odd_list = []\n    for i in range(len(string)):\n        if i % 2 == 1:\n            odd_list.append(string[i])\n    return ''.join(odd_list)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop over the characters in the input string\n    for i in range(len(str)):\n        # if the current character is odd (i.e. its index is odd), append it to the result string\n        if i % 2 == 1:\n            result += str[i]\n    # return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    # initialize an empty string\n    new_str = \"\"\n    # loop through the string\n    for i in range(len(str)):\n        # if the index is odd, append the character to the new string\n        if i % 2!= 0:\n            new_str += str[i]\n    # return the new string\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a\n        else: \n            return c\n    else: \n        if b < c: \n            return b\n        else: \n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # find minimum of three numbers\n    min_num = min(a, b, c)\n    # print the minimum number\n    print(\"The minimum number is:\", min_num)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of these three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each bit in the integer from the left to right\n    for i in range(l, r+1):\n        # check if the bit is set or not\n        if n & (1 << i):\n            # if it is set, increment count variable\n            count += 1\n        else:\n            # if it is not set, return False\n            return False\n    \n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if n is not negative\n    if n < 0:\n        return \"n should be a non-negative integer\"\n\n    # Check if l and r are non-negative integers\n    if not isinstance(l, int) or not isinstance(r, int) or l < 0 or r < 0:\n        return \"l and r should be non-negative integers\"\n\n    # Check if l is less than or equal to r\n    if l > r:\n        return \"l should be less than or equal to r\"\n\n    # Check if l and r are less than or equal to n\n    if l > n or r > n:\n        return \"l and r should be less than or equal to n\"\n\n    # Check if all bits of n are set\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n\n    return count == r - l"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store the result of the function\n    result = True\n\n    # Loop through each bit of the binary representation of n\n    for i in range(l,r+1):\n        # Check if the i-th bit is set\n        if (n & (1<<i))!= 0:\n            # If it is set, return False\n            result = False\n            break\n\n    # Return the result of the function\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    for i in range(l, r+1):\n        count = 0\n        while i!= 0:\n            count += i & 1\n            i >>= 1\n        if count!= n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: integer, the given number.\n    :param l: integer, the lower bound of the range.\n    :param r: integer, the upper bound of the range.\n    :return: boolean, True if all bits are set, else False.\n    \"\"\"\n\n    # Check if all bits are set in the given range\n    if all(bit == 1 for bit in bin(n)[2:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range to binary form\n    range_binary = bin(r-l+1)[2:]\n    # Convert the given number to binary form\n    num_binary = bin(n)[2:]\n    # Compare the binary forms\n    for i in range(len(range_binary)):\n        if range_binary[i]!= num_binary[i]:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Create a variable to store the count of unset bits in the given range\n    count = 0\n\n    # Loop through each bit from left to right\n    for i in range(l, r+1):\n\n        # If the bit is set in the given range, increment the count of unset bits\n        if n & (1 << i):\n            count += 1\n\n        # If the count of unset bits reaches the total number of bits in the given range,\n        # return True because all bits are unset in the given range\n        if count == (r-l+1):\n            return True\n\n    # If the count of unset bits does not reach the total number of bits in the given range,\n    # return False because not all bits are unset in the given range\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function will return True if all the bits are unset in the given range,\n    else it will return False.\n    '''\n    if n < 2**l or n < 2**r:\n        return False\n\n    set_bits = n & ((1 << (r-l+1)) - 1)  # calculate the bits set in the range\n    unset_bits = n - set_bits  # calculate the bits unset in the range\n\n    if unset_bits == 0:  # all the bits are set in the range\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>r:\n        return \"Invalid Range\"\n    elif l==r:\n        return \"All bits are set in the range\"\n    else:\n        for i in range(l,r+1):\n            if bin(i)[2:].count('0')!=0:\n                return \"Not all bits are set in the range\"\n        return \"All bits are set in the range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l == 0 and r == 31: # if both l and r are set to 0 and 31\n        if (n & (1 << l)) == 0 and (n & (1 << r)) == 0: # if n is set to 0\n            return True\n        else:\n            return False\n    elif l == 0 and r!= 31: # if l is set to 0 and r is not set to 31\n        if (n & (1 << r)) == 0:\n            return True\n        else:\n            return False\n    elif l!= 0 and r == 31: # if l is not set to 0 and r is set to 31\n        if (n & (1 << l-1)) == 0:\n            return True\n        else:\n            return False\n    elif l!= 0 and r!= 31: # if both l and r are not set to 0 and 31\n        if (n & (1 << l-1)) == 0 and (n & (1 << r)) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two empty lists to store the negative and positive elements\n    neg = []\n    pos = []\n\n    # Iterate over the first n elements of the array\n    for i in range(n):\n        # If the current element is negative, add it to the negative list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the current element is positive, add it to the positive list\n        else:\n            pos.append(arr[i])\n\n    # Sort the negative and positive lists in ascending order\n    neg.sort()\n    pos.sort()\n\n    # Merge the negative and positive lists into a single list\n    result = neg + pos\n\n    # Return the merged list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Iterate through the array and swap elements based on their signs\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, n):\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n\n    # Iterate through the array and swap elements based on their positions\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            for j in range(i, len(arr)):\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Get the first n elements of the array\n    first_n_elements = arr[:n]\n\n    # Initialize two empty lists to store positive and negative elements\n    positive_elements = []\n    negative_elements = []\n\n    # Iterate through the first n elements\n    for element in first_n_elements:\n        # If the element is positive, append it to the positive list\n        if element > 0:\n            positive_elements.append(element)\n        # If the element is negative, append it to the negative list\n        elif element < 0:\n            negative_elements.append(element)\n\n    # Combine the positive and negative lists and sort them\n    combined_list = negative_elements + positive_elements\n    combined_list.sort()\n\n    # Replace the first n elements of the array with the sorted list\n    arr[:n] = combined_list[:n]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # Put negative numbers at the beginning\n    arr[:n] = [num for num in arr[:n] if num >= 0]\n    arr[:neg_count] = [num for num in arr[:neg_count] if num < 0]\n    arr[n:n+pos_count] = [num for num in arr[n:n+pos_count] if num >= 0]\n\n    # Reverse the positive numbers\n    arr[n:n+pos_count] = arr[n:n+pos_count][::-1]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # sort the array in ascending order\n    arr.sort()\n    \n    # count the negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # add the negative elements to the end of the array\n    for i in range(n):\n        arr.append(arr[neg_count])\n        neg_count += 1\n    \n    # add the positive elements to the beginning of the array\n    for i in range(n):\n        arr.insert(0, arr[pos_count])\n        pos_count += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # First, check if the array is empty or if n is greater than the length of the array\n    if len(arr) == 0 or n > len(arr):\n        return arr\n    \n    # Initialize two empty lists to store the positive and negative elements, respectively\n    pos_arr = []\n    neg_arr = []\n    \n    # Iterate through the array and add elements to the appropriate list based on their value\n    for num in arr:\n        if num < 0:\n            neg_arr.append(num)\n        else:\n            pos_arr.append(num)\n    \n    # Concatenate the positive and negative lists into a single array and sort it in descending order\n    new_arr = neg_arr + pos_arr\n    new_arr.sort(reverse=True)\n    \n    # Re-arrange the first n elements of the original array based on the new order\n    new_arr = new_arr[:n] + arr[n:]\n    \n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate the elements into positive and negative groups\n    positive_elements = []\n    negative_elements = []\n    for element in arr:\n        if element > 0:\n            positive_elements.append(element)\n        else:\n            negative_elements.append(element)\n\n    # Sort the negative elements in descending order\n    negative_elements.sort(reverse=True)\n\n    # Concatenate the negative elements with the positive elements\n    result = negative_elements + positive_elements\n\n    # Trim the result to only include the first n elements\n    result = result[:n]\n\n    # Return the trimmed result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # check if the array has less than n elements or n is negative\n    if len(arr) < n or n < 0:\n        return \"Invalid input\"\n    \n    # initialize variables for counting negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    \n    # loop through the array and count the number of negative and positive elements\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # check if the sum of negative and positive elements is not equal to n\n    if neg_count + pos_count!= n:\n        return \"Invalid input\"\n    \n    # initialize variables for storing negative elements and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # loop through the array again and add the elements to the appropriate lists\n    for i in arr:\n        if i < 0:\n            neg_arr.append(i)\n        else:\n            pos_arr.append(i)\n    \n    # check if the length of negative and positive arrays are equal\n    if len(neg_arr)!= len(pos_arr):\n        return \"Invalid input\"\n    \n    # loop through the negative array and add the elements to the array in reverse order\n    for i in range(len(neg_arr)):\n        neg_arr[i] = neg_arr[len(neg_arr)-1-i]\n    \n    # concatenate the negative and positive arrays\n    result = neg_arr + pos_arr\n    \n    # return the final result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    negatives.extend(positives)\n    return negatives[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    return neg + pos"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace blank spaces with the specified character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and populate it with the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # Pop elements from the heap until the heap is empty\n    while len(heap) < len(list1):\n        # Remove the smallest element from the heap\n        smallest = heapq.heappop(heap)\n        # Add the next smallest element to the heap\n        heapq.heappush(heap, list1.pop(0))\n    # Return the heap (which now contains the n largest elements) as a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, float('-inf'))\n        \n    # Iterate through the list and add the largest elements to the min heap\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        \n    # Extract the n largest elements from the min heap and return them as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(-list1[i],i))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-x for x,_ in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        # Add the i-th largest element to the heap\n        heapq.heappush(min_heap, max(list1))\n        # Remove the smallest element from the heap\n        heapq.heappop(min_heap)\n    # Return the n largest elements from the heap\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n    \n    Returns:\n    float: the lateral surface area of the cylinder.\n    \"\"\"\n    \n    lateral_surface_area = 2 * math.pi * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # area of the base\n    base_area = 2*r*r*h\n    # area of the top\n    top_area = 2*r*r*h\n    # lateral surface area of the cylinder\n    lateral_surface_area = (base_area + top_area)/2\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2*3.14159*r**2 + 2*3.14159*h*r\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # calculate the lateral surface area using the formula:\n    # lateral surface area = 2\u03c0rh\n    lateral_surface_area = 2 * 3.14 * r * h\n    \n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2)*h #area of the cylinder\n    lateral_surface_area = area - 2*3.14159*(r**2) #lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * r * (h / 2)\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # cube of side length l"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Initialize an empty list to store the updated binary string\n    updated_binary_str = []\n\n    # Iterate over the binary string\n    for bit in binary_str:\n        # If the bit is even, append 1, otherwise append 0\n        if int(bit) % 2 == 0:\n            updated_binary_str.append('1')\n        else:\n            updated_binary_str.append('0')\n\n    # Convert the updated binary string back to integer and return\n    return int(''.join(updated_binary_str), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n = n | (n >> 1) | (n >> 2) | (n >> 3) | (n >> 4) | (n >> 5) | (n >> 6) | (n >> 7)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the binary representation of the number to a list of digits\n    num_list = list(bin(n)[2:])\n    \n    # Initialize an empty list to store the modified number\n    modified_num_list = []\n    \n    # Iterate through the list of digits\n    for digit in num_list:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            # If it is even, append a 1 to the modified_num_list\n            modified_num_list.append(1)\n        else:\n            # If it is odd, append a 0 to the modified_num_list\n            modified_num_list.append(0)\n    \n    # Convert the modified list of digits back to a binary number\n    modified_num = int(''.join(map(str, modified_num_list)))\n    \n    # Return the modified binary number\n    return modified_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the new number\n    new_number = 0\n    # Iterate through each bit of the original number\n    for i in range(32):\n        # Check if the ith bit is even\n        if n & (1 << i)!= 0:\n            # Set the ith bit of the new number to 1\n            new_number |= (1 << i)\n    # Return the new number with all even bits set to 1\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0b000000000000000000000000000000\n    even_mask = 0b1111111111111111111111111111111\n\n    # Check if the number contains even bits\n    if (n & even_mask) == even_bits:\n        # If so, set all even bits of the number\n        n |= even_bits\n    \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the bits of the input number, starting from the least significant bit\n    for bit in bin(n)[2:]:\n        # If the current bit is even, append a 1 to the result list\n        if int(bit) == 0:\n            result.append(0)\n        else:\n            result.append(1)\n    # Convert the list of binary digits to an integer and return it\n    return int(\"\".join(str(bit) for bit in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Convert the given number to binary string\n    bin_str = bin(n)[2:]\n\n    # Iterate over each index in the binary string\n    for i in range(len(bin_str)):\n        # If the current bit is even, set it to 1\n        if bin_str[i] == '1':\n            bin_str = bin_str[:i] + '1' + bin_str[i+1:]\n\n    # Convert the binary string back to an integer and return it\n    return int(bin_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the new number\n    new_number = 0\n    # Iterate over each bit in the original number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            new_number += 2 ** (int(bit) * 4)\n        else:\n            new_number += 2 ** (int(bit) * 4 + 2)\n    # Return the new number\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert number to binary string\n    binary_str = bin(n)[2:]\n    # iterate over each character in binary string\n    for i in range(len(binary_str)):\n        # check if current character is an even bit\n        if int(binary_str[i]) % 2 == 0:\n            # set the corresponding bit in the binary string to 1\n            binary_str[i] = '1'\n        else:\n            # set the corresponding bit in the binary string to 0\n            binary_str[i] = '0'\n    # convert the binary string back to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:]\n    n = ''.join(['0' if i in ['0', '1', '3', '5', '7', '9'] else '1' for i in n])\n    return int(n, 2)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Use Counter to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a dictionary to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Convert the counter to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list to a set so that duplicates are automatically removed\n    unique_tuples = set(test_list)\n    \n    # use Counter() to count the number of occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Convert the set back to a dictionary and count the occurrences\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate through the unique tuples\n    for tup in unique_tuples:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    # Return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Create a dictionary to map each unique tuple to its count\n    result_dict = {}\n    for key, value in counter.items():\n        result_dict[key] = value\n\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            substr = str[i:j+1]\n            if substr!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            substrings.append(str[i:j])\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n    str (str): A string.\n\n    Returns:\n    int: The number of non-empty substrings of the given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j].strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the character is a letter or a number\n        if str[i].isalpha() or str[i].isdigit():\n            # If it is, check if there are any non-letter or non-number characters before it\n            j = i - 1\n            while j >= 0 and not (str[j].isalpha() or str[j].isdigit()):\n                j -= 1\n            # If there are no non-letter or non-number characters before it, increment the count\n            if j < 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # initialize count to 0\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each substring starting at this position\n        for j in range(i+1, len(str)+1):\n            # check if the substring is non-empty\n            if str[i:j]!= '':\n                # increment the count\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(string)\n\n    for i in range(n):\n        for j in range(i, n):\n            if string[i:j+1].strip():\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1].strip()!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of sequences to zero\n    total_sequences = 0\n\n    # Initialize the previous element to -1\n    prev_element = -1\n\n    # Iterate through the range of n elements\n    for i in range(n):\n        # Check if the current element is between 2*prev_element and m (inclusive)\n        if 2 * prev_element + 1 <= m:\n            # Increment the total number of sequences\n            total_sequences += 1\n        # Update the previous element to the current element\n        prev_element = i\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the variable to count the number of sequences\n    count = 0\n\n    # Iterate through the numbers from 2 to m\n    for i in range(2, m+1):\n\n        # Initialize the variable to count the number of sequences that start from i\n        current_count = 0\n\n        # Iterate through the numbers from 1 to n-1\n        for j in range(1, n):\n\n            # If the current element is greater than or equal to twice the previous element but less than or equal to m\n            if i >= 2*j and i <= m:\n\n                # Increment the count of sequences that start from i\n                current_count += 1\n\n        # Add the count of sequences that start from i to the count of sequences\n        count += current_count\n\n    # Return the count of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize a dictionary to store the previous element and its count\n    element_counts = {0: 1}\n\n    # Loop through each number from 1 to m\n    for i in range(1, m + 1):\n\n        # For each number, loop through each number from 1 to m\n        for j in range(1, m + 1):\n\n            # If the current element is greater than or equal to twice the previous element and less than or equal to m,\n            # add the count of the previous element to the total count\n            if i >= 2 * j and i <= m:\n                element_counts[i] = element_counts.get(i, 0) + element_counts.get(j, 0)\n\n    # Return the total count of possible sequences\n    return sum(element_counts.values())"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i >= 2*m:\n            total_sequences += (m-i)//2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize an array to store the previous element\n    prev_arr = [0] * (n + 1)\n\n    # Loop through all possible sequences of length n\n    for i in range(1, m + 1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * prev_arr[i - 1] and i <= m:\n            # Increment the count by 1\n            count += 1\n\n            # Update the previous element in the array\n            prev_arr[i] = i\n\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    total_sequences = 0\n    sequence = [2]\n\n    # Iterate through all possible sequences\n    for i in range(1, m):\n        if sequence[-1] <= 2 * i <= m:\n            sequence.append(i)\n            if len(sequence) == n:\n                total_sequences += 1\n                sequence.pop()\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            if i > 2 * j and i <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables to keep track of the number of sequences we've seen\n    num_sequences = 0\n    # Initialize variables to keep track of the last two elements of the sequence\n    last_two = [0, 0]\n    \n    # Iterate over all possible pairs of elements in the sequence\n    for i in range(n):\n        # Calculate the next element of the sequence based on the last two\n        next_element = min(max(2*last_two[0], m), min(m, last_two[1]+1))\n        # Update the last two elements of the sequence\n        last_two = [next_element, last_two[0]]\n        # Increment the number of sequences if we've seen a sequence of length n\n        if i == n-1:\n            num_sequences += 1\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(m, n + 1):\n        # Loop through all possible indices from 1 to i - 1\n        for j in range(1, i):\n            # Check if the current index is greater than or equal to twice the previous index and less than or equal to m\n            if j >= 2 * j and j <= m:\n                # Increment the count by 1\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Helper function to check if the current number is valid for the given condition\n    def is_valid(num):\n        prev_num = 0\n        for i in range(n):\n            if num - i * 2 >= prev_num and num - i * 2 <= m:\n                return True\n            prev_num = num\n        return False\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through all the numbers between 1 and m\n    for i in range(1, m + 1):\n        # Check if the current number is valid for the given condition\n        if is_valid(i):\n            count += 1\n\n    # Return the count of valid sequences\n    return count\n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the second list is greater than 0\n    if len(list2) > 0:\n        # Get the length of the first list\n        n = len(list1)\n        # Get the last element of the second list\n        last_element = list2[-1]\n        # Create a new list with the first n-1 elements of the first list and the last element of the second list\n        new_list = list1[:n-1] + [last_element]\n        # Return the new list\n        return new_list\n    else:\n        # If the second list is empty, return the original list\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1):\n        list1[i] = list2[i]\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Check if the length of the second list is greater than the length of the first list\n    if len(list2) > length:\n        # If it is, raise an error\n        raise ValueError(\"The length of the second list is greater than the length of the first list.\")\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the second list\n    n = len(list2)\n    # get the length of the first list\n    m = len(list1)\n    # check if the second list is longer than the first list\n    if n > m:\n        # get the last element of the second list\n        last_element = list2[-1]\n        # create a list of the last element repeated n times\n        repeated_last_element = [last_element] * n\n        # concatenate the two lists and assign the result to the first list\n        list1.extend(repeated_last_element)\n    else:\n        # if the second list is shorter than the first list, we can simply extend the first list with the second list\n        list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists should have the same length.\")\n    else:\n        for i in range(len(list1)-1):\n            list1[i] = list2[i]\n        list1[-1] = list2[-1]"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_characters(string):\n    return len(string)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 1:\n        return 1\n    elif N % 4 == 0:\n        return 16*N*N\n    elif N % 2 == 0:\n        return 4*N*N\n    else:\n        return 2*N*N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    i = 1\n    while True:\n        i = i + 1\n        next_square = int(math.sqrt(i))**2\n        if next_square > N:\n            break\n    \n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square greater than N.\n\n    Args:\n    N (int): A positive integer.\n\n    Returns:\n    int: The next perfect square greater than N.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Find the smallest number greater than sqrt_N\n    next_sqrt_N = 2 * sqrt_N\n\n    # Check if N is greater than next_sqrt_N\n    if N > next_sqrt_N:\n        # Find the largest power of 2 that is less than or equal to sqrt_N\n        power_of_two = 2 ** int(math.log2(sqrt_N))\n\n        # If N is a perfect square, return the square root of N rounded up to the next integer\n        if power_of_two == sqrt_N:\n            return int(math.ceil(math.sqrt(N)))\n\n        # If N is not a perfect square, return the square root of the next power of 2\n        return int(math.ceil(math.sqrt(power_of_two)))\n\n    # If N is already a perfect square, return the square root of N\n    return int(math.ceil(math.sqrt(N)))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # define a helper function to check if a number is a perfect square\n    def is_square(num):\n        root = math.sqrt(num)\n        return root == int(root)\n\n    # find the square root of the given number\n    root = math.sqrt(N)\n\n    # check if the square root is an integer\n    if int(root) ** 2 == N:\n        # the square root is already a perfect square\n        return N\n\n    # iterate from 1 to the square root\n    for i in range(1, int(root) + 1):\n        if is_square(i * i):\n            return i * i\n\n    # if we make it here, then there is no perfect square greater than the given number\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    for i in range(sqrtN, 0, -1):\n        if i**2 > N:\n            return i**2\n    return sqrtN**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        \"\"\"\n        A helper function to find the next prime number after a given number.\n        \"\"\"\n        while not is_prime(num+1):\n            num += 1\n        return num\n\n    def next_perfect_square(num):\n        \"\"\"\n        A helper function to find the next perfect square number greater than a given number.\n        \"\"\"\n        while True:\n            square = num**2\n            if square > N:\n                return square\n            num = next_prime(square)\n\n    perfect_square = next_perfect_square(N)\n    return perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the input number.\n    \"\"\"\n    # Initialize variables\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = int(sqrt_N) + 1\n    next_N = next_sqrt_N * next_sqrt_N\n\n    # Check if next perfect square is greater than input number\n    if next_N > N:\n        return next_N\n\n    # Otherwise, return the next perfect square less than or equal to the input number\n    else:\n        return next_Perfect_Square(next_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Check if N is a perfect square\n    is_square = math.isqrt(N) ** 2 == N\n    \n    # If N is not a perfect square, find the next one\n    if not is_square:\n        # Iterate until N is a perfect square\n        while True:\n            # Find the next perfect square greater than N\n            next_sqrt = math.sqrt(N) + 1\n            \n            # Check if the next perfect square is greater than N\n            if math.sqrt(next_sqrt) ** 2 > N:\n                return next_sqrt\n    \n    # If N is a perfect square, return N\n    else:\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    if N < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    elif N == 0:\n        return 1\n    elif N == 1:\n        return 4\n    elif N == 4:\n        return 9\n    else:\n        sqrtN = int(math.sqrt(N))\n        if N > sqrtN:\n            sqrtN += 1\n        else:\n            sqrtN = (sqrtN + 1) * (sqrtN + 1)\n        return sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    def is_square(num):\n        return num == int(num**0.5+0.5)**2\n\n    def find_next_perfect_square(N):\n        while True:\n            if is_square(N+1):\n                return N+1\n            else:\n                N += 1\n\n    next_square = find_next_perfect_square(N)\n    return next_square\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize the variables to keep track of the minimum and maximum values and their indices\n    max_ending_here = max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_index = 0\n\n    # Traverse through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            # arr[i] == max_ending_here or arr[i] == min_ending_here\n            # This case is not a valid bitonic subsequence\n            max_ending_here = max_so_far = min_ending_here = arr[i]\n            min_index = i\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # If the array is empty or has only one element, return it\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n\n    # If the array has multiple elements, initialize the maximum sum to the first element\n    max_sum = arr[0]\n\n    # Initialize the left and right pointers to the first and last elements of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Traverse the array from the left to the right\n    while left < right:\n        # If the current element is less than the next element, update the maximum sum and move to the next element\n        if arr[left] < arr[right]:\n            max_sum = max(max_sum, arr[left] + arr[right])\n            left += 1\n        # Otherwise, update the maximum sum and move to the previous element\n        else:\n            max_sum = max(max_sum, arr[right] + arr[left])\n            right -= 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    left = 0\n    right = 0\n    is_increasing = True\n    \n    # Iterate through the array\n    while right < len(arr):\n        # Check if the current element is increasing\n        if arr[right] > arr[right+1]:\n            is_increasing = True\n        else:\n            is_increasing = False\n        \n        # Update the maximum sum if the current element is not increasing\n        if not is_increasing:\n            left = right\n            max_sum = max(max_sum, arr[right])\n        \n        # Move the right pointer to the next element\n        right += 1\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = max(dp[i-1], arr[i])\n\n    max_sum = dp[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Calculate the first two elements of the array\n    a = arr[0]\n    b = arr[1]\n\n    # Check if the second element is increasing or decreasing\n    if b < a:\n        c = a\n        d = b\n    else:\n        c = b\n        d = a\n\n    # Calculate the maximum sum of the bitonic subsequence\n    max_sum = c + d\n    current_sum = c\n\n    # Check for the remaining elements of the array\n    for i in range(2, n):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < a:\n            e = a\n            f = arr[i]\n        else:\n            e = arr[i]\n            f = b\n\n        # Update the current sum\n        if f < d:\n            current_sum += f - d\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = f\n\n        # Update the values of a, b, c, and d\n        a = b\n        b = c\n        c = d\n        d = e\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize variables for the maximum sum of the subsequences\n    max_sum_increasing = max_sum_decreasing = float('-inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is increasing or decreasing\n        if i == 0 or arr[i] > arr[i-1]:\n            # If it's increasing, check if it's the maximum sum so far\n            if arr[i] + max_sum_increasing > max_sum_increasing:\n                max_sum_increasing = arr[i] + max_sum_increasing\n\n        else:\n            # If it's decreasing, check if it's the maximum sum so far\n            if arr[i] + max_sum_decreasing > max_sum_decreasing:\n                max_sum_decreasing = arr[i] + max_sum_decreasing\n\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    left, right = 0, n - 1\n    max_left = max_right = float('-inf')\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[left] < arr[mid]:\n            if arr[mid] > arr[right]:\n                left = mid\n            else:\n                right = mid\n        else:\n            if arr[mid] < arr[right]:\n                right = mid\n            else:\n                left = mid\n\n    if arr[left] < arr[right]:\n        max_left = arr[left]\n    else:\n        max_right = arr[right]\n\n    for i in range(1, n):\n        if arr[left] < arr[right]:\n            if arr[left] < arr[mid]:\n                if arr[mid] < arr[right]:\n                    max_left = max(max_left, arr[left] + arr[mid] + arr[right])\n                else:\n                    max_left = max(max_left, arr[left] + arr[right])\n            else:\n                if arr[mid] < arr[right]:\n                    max_left = max(max_left, arr[mid] + arr[right])\n                else:\n                    max_left = max(max_left, arr[mid] + arr[left])\n\n            if arr[mid] < arr[right]:\n                left = mid\n            else:\n                right = mid\n        else:\n            if arr[left] > arr[right]:\n                if arr[mid] > arr[right]:\n                    max_right = max(max_right, arr[left] + arr[mid] + arr[right])\n                else:\n                    max_right = max(max_right, arr[left] + arr[right])\n            else:\n                if arr[mid] > arr[right]:\n                    max_right = max(max_right, arr[mid] + arr[right])\n                else:\n                    max_right = max(max_right, arr[mid] + arr[left])\n\n            if arr[mid] > arr[right]:\n                left = mid\n            else:\n                right = mid\n\n    return max(max_left, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Helper function to check if a sequence is bitonic or not\n    def is_bitonic(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if i == 0 or arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            # Check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                max_sum = current_sum\n            # Reset the current sum\n            current_sum = 0\n\n    # Check if the last element in the array is increasing or decreasing\n    if len(arr) == 0 or arr[len(arr)-1] > arr[len(arr)-2]:\n        current_sum += arr[len(arr)-1]\n    else:\n        # Check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Traverse the array in both increasing and decreasing directions\n    inc = [float('-inf')] * n\n    dec = [float('-inf')] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc[i] = max(inc[i], inc[i-1] + arr[i])\n        else:\n            dec[i] = max(dec[i], dec[i-1] + arr[i])\n\n    # Initialize the maximum sum variable\n    max_sum = inc[0] + dec[0]\n\n    # Traverse the array again and update the maximum sum variable\n    for i in range(1, n):\n        if inc[i] > max_sum:\n            max_sum = inc[i]\n        if dec[i] > max_sum:\n            max_sum = dec[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Calculate the number of 1s in the array\n    ones = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ones += 1\n\n    # Calculate the number of 0s in the array\n    zeros = n - ones\n\n    # Initialize variables for the sum of increasing and decreasing subsequences\n    increasing_sum = 0\n    decreasing_sum = 0\n\n    # Find the maximum sum of increasing and decreasing subsequences\n    for i in range(n):\n        if arr[i] == 1:\n            if zeros == 0:\n                break\n            zeros -= 1\n            increasing_sum += 1\n        else:\n            if ones == 0:\n                break\n            ones -= 1\n            decreasing_sum += 1\n\n    # Return the maximum sum of increasing and decreasing subsequences\n    return max(increasing_sum, decreasing_sum)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    \n    # Initialize variables\n    x_n = 1\n    y_n = 1\n    \n    # Babylonian method\n    for i in range(1, 21):\n        x_n = 1/2 * (x_n + y_n)\n        y_n = 1/2 * (x_n**2 - number + y_n)\n    \n    # Return the final value of x_n\n    return x_n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess * guess > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (number / guess) + guess / (2*guess)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    # If the number is already a perfect square, return the number itself\n    if number == int(number**0.5 + 0.5) ** 2:\n        return number\n    # Otherwise, compute the square root using the babylonian method\n    else:\n        x = number\n        y = 1\n        count = 0\n        while abs(x - y**2) > 1e-6:\n            count += 1\n            x = (x + y**2) / 2\n            y = (x + y) / 2\n        return round(x, 2)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess**2 == number:\n            return guess\n        elif guess**2 < number:\n            guess = (guess + number / guess) / 2\n        else:\n            guess = (guess + number / guess) / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # set initial guess for root\n    guess = number / 2\n\n    # initialize variables\n    prev_guess = 0\n    count = 0\n\n    # iterate until within a tolerance of 0.0001\n    while abs(guess**2 - number) > 0.0001:\n\n        # update guess\n        guess = (guess + number / guess) / 2\n\n        # increment count\n        count += 1\n\n        # update previous guess\n        prev_guess = guess\n\n    # return the root and the number of iterations\n    return guess, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return math.sqrt(number)\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number\n    x1 = 0.5 * (x0 + number / x0)\n    x2 = 0.5 * (x1 + number / x1)\n    x3 = 0.5 * (x2 + number / x2)\n    x4 = 0.5 * (x3 + number / x3)\n    x5 = 0.5 * (x4 + number / x4)\n    x6 = 0.5 * (x5 + number / x5)\n    x7 = 0.5 * (x6 + number / x6)\n    x8 = 0.5 * (x7 + number / x7)\n    x9 = 0.5 * (x8 + number / x8)\n    x10 = 0.5 * (x9 + number / x9)\n    x11 = 0.5 * (x10 + number / x10)\n    x12 = 0.5 * (x11 + number / x11)\n    x13 = 0.5 * (x12 + number / x12)\n    x14 = 0.5 * (x13 + number / x13)\n    x15 = 0.5 * (x14 + number / x14)\n    x16 = 0.5 * (x15 + number / x15)\n    x17 = 0.5 * (x16 + number / x16)\n    x18 = 0.5 * (x17 + number / x17)\n    x19 = 0.5 * (x18 + number / x18)\n    x20 = 0.5 * (x19 + number / x19)\n    x21 = 0.5 * (x20 + number / x20)\n    x22 = 0.5 * (x21 + number / x21)\n    x23 = 0.5 * (x22 + number / x22)\n    x24 = 0.5 * (x23 + number / x23)\n    x25 = 0.5 * (x24 + number / x24)\n    x26 = 0.5 * (x25 + number / x25)\n    x27 = 0.5 * (x26 + number / x26)\n    x28 = 0.5 * (x27 + number / x27)\n    x29 = 0.5 * (x28 + number / x28)\n    x30 = 0.5 * (x29 + number / x29)\n    x31 = 0.5 * (x30 + number / x30)\n    x32 = 0.5 * (x31 + number / x31)\n    x33 = 0.5 * (x32 + number / x32)\n    x34 = 0.5 * (x33 + number / x33)\n    x35 = 0.5 * (x34 + number / x34)\n    x36 = 0.5 * (x35 + number / x35)\n    x37 = 0.5 * (x36 + number / x36)\n    x38 = 0.5 * (x37 + number / x37)\n    x39 = 0.5 * (x38 + number / x38)\n    x40 = 0.5 * (x39 + number / x39)\n    x41 = 0.5 * (x40 + number / x40)\n    x42 = 0.5 * (x41 + number / x41)\n    x43 = 0.5 * (x42 + number / x42)\n    x44 = 0.5 * (x43 + number / x43)\n    x45 = 0.5 * (x44 + number / x44)\n    x46 = 0.5 * (x45 + number / x45)\n    x47 = 0.5 * (x46 + number / x46)\n    x48 = 0.5 * (x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initial guess\n    x = 1\n\n    # convergence tolerance\n    tol = 1e-10\n\n    # maximum number of iterations\n    max_iters = 100\n\n    # iteration counter\n    i = 0\n\n    while abs(x*x - number) > tol and i < max_iters:\n        x = (x + number/x) / 2\n        i += 1\n\n    # check if convergence has been achieved\n    if i == max_iters:\n        print(\"Convergence not achieved after\", i, \"iterations.\")\n        return None\n\n    # compute square root using Newton's method\n    x = x - number/x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = number / 2\n    x1 = (x0 + number / x0) / 2\n    x2 = (x1 + number / x1) / 2\n    x3 = (x2 + number / x2) / 2\n    x4 = (x3 + number / x3) / 2\n    x5 = (x4 + number / x4) / 2\n    x6 = (x5 + number / x5) / 2\n    x7 = (x6 + number / x6) / 2\n    x8 = (x7 + number / x7) / 2\n    x9 = (x8 + number / x8) / 2\n    x10 = (x9 + number / x9) / 2\n    x11 = (x10 + number / x10) / 2\n    x12 = (x11 + number / x11) / 2\n    x13 = (x12 + number / x12) / 2\n    x14 = (x13 + number / x13) / 2\n    x15 = (x14 + number / x14) / 2\n    x16 = (x15 + number / x15) / 2\n    x17 = (x16 + number / x16) / 2\n    x18 = (x17 + number / x17) / 2\n    x19 = (x18 + number / x18) / 2\n    x20 = (x19 + number / x19) / 2\n    x21 = (x20 + number / x20) / 2\n    x22 = (x21 + number / x21) / 2\n    x23 = (x22 + number / x22) / 2\n    x24 = (x23 + number / x23) / 2\n    x25 = (x24 + number / x24) / 2\n    x26 = (x25 + number / x25) / 2\n    x27 = (x26 + number / x26) / 2\n    x28 = (x27 + number / x27) / 2\n    x29 = (x28 + number / x28) / 2\n    x30 = (x29 + number / x29) / 2\n    x31 = (x30 + number / x30) / 2\n    x32 = (x31 + number / x31) / 2\n    x33 = (x32 + number / x32) / 2\n    x34 = (x33 + number / x33) / 2\n    x35 = (x34 + number / x34) / 2\n    x36 = (x35 + number / x35) / 2\n    x37 = (x36 + number / x36) / 2\n    x38 = (x37 + number / x37) / 2\n    x39 = (x38 + number / x38) / 2\n    x40 = (x39 + number / x39) / 2\n    x41 = (x40 + number / x40) / 2\n    x42 = (x41 + number / x41) / 2\n    x43 = (x42 + number / x42) / 2\n    x44 = (x43 + number / x43) / 2\n    x45 = (x44 + number / x44) / 2\n    x46 = (x45 + number / x45) / 2\n    x47 = (x46 + number / x46) / 2\n    x48 = (x47 + number / x47) / 2\n    x49 = (x48 + number / x48) / 2\n    x50 = (x49 + number / x49) / 2\n    x51 = (x50 + number / x50) / 2\n    x52 = (x51 + number / x51) / 2\n    x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize two pointers - one for start and one for end of the string\n    start = 0\n    end = 0\n    # Initialize a variable to store the length of the longest palindromic subsequence\n    max_length = 1\n    # Iterate over all characters in the string\n    for i in range(1, n):\n        # Check if the current character is a palindrome\n        if str[i] == str[i-1]:\n            # If it is, then update the start and end pointers\n            start = i-1\n            end = i\n        else:\n            # If it's not a palindrome, then update the start and end pointers\n            while str[i]!= str[start]:\n                start += 1\n            while str[i]!= str[end]:\n                end -= 1\n        # Calculate the length of the current subsequence\n        length = end-start+1\n        # Update the max length if necessary\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D table to store the length of the longest palindromic subsequence ending at each position\n    table = [[0] * n for _ in range(n)]\n\n    # base case: if the length of the string is 1, the longest palindromic subsequence is 1\n    for i in range(1, n):\n        table[i][i] = 1\n\n    # fill the table in a bottom-up manner\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # create a 2D table to store the lengths of the longest palindromic subsequences of \n    # the prefixes of the given string\n    table = [[0] * n for _ in range(n)]\n\n    # fill the first row and the first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # fill the table in a bottom-up manner\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence \n    # for substrings of length i \n    table = [[0] * n for _ in range(n)] \n  \n    # Calculate length of longest palindromic subsequence for all substrings of \n    # length 1 \n    for i in range(n): \n        if str[i] == str[i]: \n            table[i][i] = 1 \n  \n    # Calculate length of longest palindromic subsequence for substrings of \n    # length 2 \n    for length in range(3, n + 1): \n        for i in range(n - length + 1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                table[i][j] = 2 + table[i+1][j-1] \n  \n    # Return the length of the longest palindromic subsequence \n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    # Initialize a 2D array to store the lengths of longest palindromic subsequences\n    # in substrings of the given string.\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the 2D array using dynamic programming approach.\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                # If characters are same, then length of LPS is 2+dp[i+1][j-1]\n                dp[i][j] = 2 + dp[i+1][j-1]\n            elif i+1 < j:\n                # If characters are different, then length of LPS is maximum of\n                # dp[i+1][j] and dp[i][j-1].\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence.\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    table = [[0] * n for _ in range(n)]\n    max_length = 1\n    max_start = 0\n\n    for i in range(n):\n        table[i][i] = 1\n        if s[i] == s[i + 1]:\n            table[i][i + 1] = 2\n\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n                if table[start][end] > max_length:\n                    max_length = table[start][end]\n                    max_start = start\n            elif table[start + 1][end] > table[start][end]:\n                table[start][end] = table[start + 1][end]\n\n    return max_length, max_start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j] and (i - j <= 2 or dp[j + 1][i - 1]):\n                dp[j][i] = dp[j + 1][i - 1] + 2\n                if dp[j][i] > max_length:\n                    max_length = dp[j][i]\n                    start = j\n            else:\n                dp[j][i] = max(dp[j][i - 1], dp[j + 1][i])\n\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        t = [[0 for j in range(n)] for i in range(n)]\n        max_len = 1\n        for i in range(1, n):\n            if s[i] == s[i-1]:\n                t[i][i] = 2\n                max_len = 2\n            else:\n                t[i][i] = 1\n        for length in range(2, n):\n            for start in range(n-length+1):\n                end = start + length - 1\n                if s[start] == s[end]:\n                    t[start][end] = t[start+1][end-1] + 2\n                    if t[start][end] > max_len:\n                        max_len = t[start][end]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        max_len = 1\n        for i in range(1, n):\n            if s[i] == s[i-1]:\n                dp[i] = dp[i-1] + 2\n                if dp[i] > max_len:\n                    max_len = dp[i]\n            else:\n                dp[i] = 1\n                if dp[i] > max_len:\n                    max_len = dp[i]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    if len(str) == 0 or len(str) == 1:\n        return len(str)\n    else:\n        dp = [1] * len(str)\n        for i in range(1, len(str)):\n            if str[i] == str[i-1]:\n                dp[i] = dp[i-1] + 1\n            else:\n                dp[i] = max(dp[i-1], dp[i])\n        return dp[-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + ((1/n)**2) + ((1/n)**3) +... + ((1/n)**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n-1)/2*n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1 + 1/n + 1/n**2 + 1/n**3 +... + 1/n**(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + (1/n - 1)/2 + (1/n - 2)/3 +... + (1/n - n)/n\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1 / n * (2 * n - 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Calculate the harmonic sum of n-1\n    for i in range(1, n+1):\n        sum += 1 / i\n    \n    # Return the harmonic sum of n-1\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    for num in intersection:\n        intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n    \n    # Sort the intersection list\n    intersection.sort()\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the elements of array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through the elements of array_nums2\n    for num in array_nums2:\n        # If the element is in the set of elements of array_nums1, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Iterate through both arrays\n    for num in array_nums1:\n        # If the number is in array_nums2, add it to the common elements set\n        if num in array_nums2:\n            common_elements.add(num)\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return set1.intersection(set2)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store unique elements of array_nums1\n    set1 = set(array_nums1)\n    # Create a set to store unique elements of array_nums2\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets and convert it to a list\n    intersection = list(set1.intersection(set2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a set of the unique values in array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty set to store the intersection\n    intersection = set()\n    # Loop through array_nums2\n    for num in array_nums2:\n        # If the current number is in set_nums1, add it to the intersection set\n        if num in set_nums1:\n            intersection.add(num)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of unique elements in array1\n    set_nums1 = set(array_nums1)\n    # Create a set of unique elements in array2\n    set_nums2 = set(array_nums2)\n    # Find the intersection of sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays using a set.\n\n    Parameters:\n    array_nums1 (list): The first array of numbers.\n    array_nums2 (list): The second array of numbers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n\n    # Convert both arrays to sets to easily find their intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert back to a list\n    intersection = list(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the elements of both arrays\n    dict1 = {}\n    dict2 = {}\n    \n    # Add elements of array_nums1 and array_nums2 to the dictionaries\n    for num in array_nums1:\n        if num not in dict1:\n            dict1[num] = True\n    for num in array_nums2:\n        if num not in dict2:\n            dict2[num] = True\n    \n    # Find the intersection of the two dictionaries using set intersection\n    intersection = set(dict1.keys()) & set(dict2.keys())\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list.\n    \n    Parameters:\n    lst (list): The input list.\n    element (any): The element to insert.\n    \n    Returns:\n    list: The resulting list.\n    \"\"\"\n    new_lst = []\n    for i, item in enumerate(lst):\n        new_lst.append(element)\n        new_lst.append(item)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i, elem in enumerate(lst):\n        result.append(elem)\n        result.append(elem)  # append the element to the result list twice to duplicate it\n        result.append(elem)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # loop through the list and insert the element before each element\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    # return the modified list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    # create a new list with the inserted element\n    new_lst = [elem] + lst\n    # return the new list\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    for i in range(len(list)):\n        list.insert(0, element)\n\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and returns the modified list.\n    The function inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.abs(num)\n        theta = cmath.phase(num)\n\n        # Print the polar coordinates\n        print(f\"{num.real:.2f} + {num.imag:.2f}j, r = {r:.2f}, theta = {theta:.2f} rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num) * 180.0 / cmath.pi\n            result.append((r, theta))\n        else:\n            result.append(num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert each number to complex number\n    complex_numbers = [complex(num) for num in numbers]\n    \n    # Iterate through each complex number\n    for num in complex_numbers:\n        # Get the magnitude of the number\n        magnitude = abs(num)\n        \n        # Get the angle of the number\n        angle = cmath.phase(num)\n        \n        # Print the result\n        print(f\"{magnitude}+{angle}j\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        complex_number = complex(num[0], num[1])\n        r = abs(complex_number)\n        theta = cmath.phase(complex_number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # convert to complex number\n        complex_num = complex(num)\n        \n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(complex_num.real**2 + complex_num.imag**2)\n        angle = cmath.phase(complex_num)\n        \n        # print the magnitude and angle of the complex number\n        print(\"Magnitude: \", magnitude)\n        print(\"Angle: \", angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r, phi = cmath.polar(num)\n        # print the complex number and its polar coordinates\n        print(num, '(', r,'+ ', phi, 'i)')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            polar_list.append((r, theta))\n        else:\n            polar_list.append(None)\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        # calculate the magnitude and angle of the complex number\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n\n        # convert the magnitude and angle to polar coordinates\n        polar_angle = angle * 180 / cmath.pi\n        polar_magnitude = magnitude * 2\n\n        # add the polar coordinates to the list\n        polar_numbers.append((polar_angle, polar_magnitude))\n\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = num.real, num.imag\n        abs_val = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"{num} = {abs_val} * exp({angle} * 1j)\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Find all possible combinations of n elements from the list\n    combs = combinations_with_replacement(l, n)\n\n    # Convert each combination to a tuple and store in a list\n    result = [tuple(comb) for comb in combs]\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # generate all combinations of length n using combinations_with_replacement function\n    comb = combinations_with_replacement(l, n)\n\n    # convert the combinations to a list of tuples\n    comb = list(comb)\n\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return [tuple(c) for c in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green']\n    color_combinations = []\n    for color in colors:\n        for comb in combinations_with_replacement(l, n):\n            color_combinations.append((color, *comb))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)-n+1):\n        comb.append(tuple(l[i:i+n]))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition\n    combinations = combinations_with_replacement(l, n)\n\n    # Create a list to store the tuples with colors\n    color_combinations = []\n\n    # Iterate through the combinations and append them to the list\n    for combination in combinations:\n        color_combinations.append(tuple(combination))\n\n    return color_combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p**2<=n):\n        # If prime[p] is not changed, then it is a prime\n        if(prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # Return the count of prime numbers\n    count = 0\n    for i in range(2, n):\n        if(prime[i] == True):\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check whether a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    A function to count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number of prime numbers less than\", n, \"are:\", count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a helper function that takes in a number and returns True if it is a prime number, and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n\n    while num < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n\n    return count\n\nn = int(input(\"Enter a non-negative number: \"))\nprint(\"The number of prime numbers less than\", n, \"is:\", count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables to store the maximum elements\n    max1 = max2 = None\n    \n    # loop through the tuples\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # check if the current element is greater than the current maximum\n        if elem1 > max1:\n            # update the maximum elements\n            max1 = elem1\n            max2 = elem2\n        elif elem2 > max2:\n            # update the maximum elements\n            max1 = elem2\n            max2 = elem1\n            \n    # return the maximum elements\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                max_tup += (test_tup1[i],)\n            elif test_tup1[i] < test_tup2[i]:\n                max_tup += (test_tup2[i],)\n            else:\n                max_tup += (test_tup1[i],)\n        return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return max1, max2\n    else:\n        return max2, max1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Convert the tuples to sets to make them unique and order-independent\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n\n    # Find the elements that are present in both tuples\n    common_elements = test_tup1_set.intersection(test_tup2_set)\n\n    # Find the elements that are present in only one of the tuples\n    exclusive_elements = test_tup1_set.symmetric_difference(test_tup2_set)\n\n    # Find the elements that are present in both tuples but have a higher value\n    max_elements = test_tup1_set.symmetric_difference(common_elements)\n\n    # Combine the max elements with the exclusive elements to maximize the total sum\n    max_total = max(test_tup1_set.union(max_elements), test_tup2_set.union(max_elements))\n\n    # Convert the sets back to tuples and return the result\n    return tuple(max_elements), max_total"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            return \"Tie\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables to keep track of the largest element\n    max1 = max2 = None\n    # iterate over the tuples and compare the elements\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        # check if the element is greater than the current maximum\n        if elem1 > elem2 and (max1 is None or elem1 > max1):\n            max1 = elem1\n        elif elem2 > elem1 and (max2 is None or elem2 > max2):\n            max2 = elem2\n    # return the maximum element\n    return max(max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize variables to store the maximum value and index of each tuple\n    max1 = max2 = index1 = index2 = 0\n\n    # Loop through each element in the two tuples and compare them\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max1 = test_tup1[i]\n            index1 = i\n        else:\n            max2 = test_tup2[i]\n            index2 = i\n\n    # Return the tuple with the maximum value and index\n    if max1 >= max2:\n        return (max1, index1)\n    else:\n        return (max2, index2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If the first tuple has a higher sum, return that tuple\n    if sum(test_tup1) > sum(test_tup2):\n        return test_tup1\n    # Otherwise, return the second tuple\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the first 10 Newman-Shanks-Williams primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    # Loop through the primes up to n and check if n is a prime\n    for prime in primes:\n        if prime*prime > n:\n            break\n        elif n % prime == 0:\n            # If n is a multiple of a prime, it is not a Newman-Shanks-Williams prime\n            return False\n\n    # If n is not a multiple of any prime, it is a Newman-Shanks-Williams prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # We need to check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n\n    # The first 4 primes are 2, 3, 5, and 7\n    if n < 4:\n        return 2\n\n    # Check if n is a multiple of 2 (prime factorization: 2^k)\n    if n % 2 == 0:\n        return \"The {}th newman\u2013shanks\u2013williams prime number is not defined.\".format(n)\n\n    # Start with 3 and check for primality until we reach the nth newman\u2013shanks\u2013williams prime\n    k = 0\n    while True:\n        x = 3 ** k\n        if x > n:\n            return 3 ** k\n        elif x == n:\n            return 3 ** k\n        k += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count and set of primes to 0\n    count = 0\n    primes = set()\n\n    # Check if the input is valid\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Check if the input is a prime number\n    if n == 2 or n == 3:\n        return n\n\n    # Generate the first two primes\n    primes.add(2)\n    primes.add(3)\n\n    # Loop through the remaining numbers\n    for num in range(5, n+1):\n        # If the number is prime, add it to the set and increment the count\n        if is_prime(num):\n            primes.add(num)\n            count += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return primes.pop()\n\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    # If the number is less than 2, it's not prime\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_newman_prime(num):\n        \"\"\"\n        Helper function to find the next newman prime number.\n        \"\"\"\n        while not is_prime(num):\n            num += 1\n        return num\n\n    num = next_newman_prime(1)\n    for _ in range(n - 1):\n        num = next_newman_prime(num)\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # list of primes less than or equal to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # loop through primes and find the nth prime\n    for i in range(n):\n        if i + 1 in primes:\n            print(i + 1)\n            return\n\n    # if we reach here, n is greater than the length of the list of primes\n    print(\"n is greater than the length of the list of primes.\")"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    i = 2\n    count = 0\n    \n    # Find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        if i == 1 or i == 4 or i == 7 or i == 10 or i == 13 or i == 16 or i == 19 or i == 22 or i == 25 or i == 28 or i == 31 or i == 34 or i == 37 or i == 40 or i == 43 or i == 46 or i == 49 or i == 52 or i == 55 or i == 58 or i == 61 or i == 64 or i == 67 or i == 70 or i == 73 or i == 76 or i == 79 or i == 82 or i == 85 or i == 88 or i == 91 or i == 94 or i == 97 or i == 100:\n            count += 1\n        i += 1\n    \n    return i-1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # The first newman prime is 2\n    if n == 1:\n        return 2\n\n    # Initialize the list of primes\n    primes = []\n\n    # Keep adding 2 to the list of primes until we have n primes\n    while len(primes) < n:\n        primes.append(2)\n\n    # Start from the next prime number and add new primes until we have n primes\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"Please enter a positive integer.\"\n\n    # Initialize variables\n    count = 0\n    prev_num = 0\n    current_num = 2\n\n    # Check if current_num is a newman prime\n    while count < n:\n        # Check if current_num is prime\n        is_prime = True\n        for i in range(2, int(current_num**0.5) + 1):\n            if current_num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Check if current_num is newman prime\n            if current_num - prev_num == 2:\n                count += 1\n            prev_num = current_num\n        current_num += 1\n\n    # Return the nth newman prime number\n    return current_num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    i = 2\n    while len(prime_list) < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(i)\n        i += 1\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_newman_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_newman_prime(num):\n    '''\n    Check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if num < 4:\n        return False\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n    \n    # perform element-wise division using tuple unpacking\n    result = tuple(a/b for a,b in zip(test_tup1, test_tup2))\n    \n    # print the result\n    print(f\"The result of element-wise division is: {result}\")"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n    else:\n        # Perform element-wise division\n        result_tup = tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # If either of the input tuples is empty, return an empty tuple\n    if not test_tup1 or not test_tup2:\n        return ()\n\n    # Check if both input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        return ()\n\n    # Divide the elements of the input tuples element-wise and return the result\n    return tuple(x / y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length!\")\n        return None\n    \n    # Perform element-wise division across the two tuples\n    result_tup = tuple(a/b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # perform element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half_length = len(list1) // 2\n    first_part = list1[:half_length]\n    second_part = list1[half_length:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the first part of the list\n    part1_length = L\n\n    # calculate the length of the second part of the list\n    part2_length = len(list1) - part1_length\n\n    # split the list into two parts and return the resulting lists in a tuple\n    part1 = list1[:part1_length]\n    part2 = list1[part1_length:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to hold the first part of the list\n    part1 = []\n    # Create an empty list to hold the second part of the list\n    part2 = []\n    # Loop through the given list and add each element to the appropriate list\n    for i in range(len(list1)):\n        if i < L:\n            part1.append(list1[i])\n        else:\n            part2.append(list1[i])\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return \"L should be less than or equal to the length of the list\"\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts of length L\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts in a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than or equal to L, return the list as a tuple\n        return (list1, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(lst) > L:\n        # If the length of the list is greater than L, divide it into two parts and return them as a tuple\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return (first_part, second_part)\n    # If the length of the list is equal to or less than L, return the list as a tuple\n    else:\n        return (lst, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list for the first part of the list\n    list2 = []\n    # Initialize variables to keep track of the current index and the total length of the list\n    index = 0\n    total_length = len(list1)\n    # Loop through the list and add elements to the second part of the list until the length of the second part reaches L\n    while index < total_length:\n        if index + L < total_length:\n            # Add the first L elements to the first part of the list\n            list2.extend(list1[index:index+L])\n            # Add the remaining elements to the second part of the list\n            list2.extend(list1[index+L:])\n            # Update the index and total length variables\n            index += L\n            total_length -= L\n        else:\n            # Add the entire list to the first part of the list\n            list2.extend(list1[index:])\n            # Update the index variable\n            index += total_length\n            total_length = 0\n    # Return the resulting lists in a tuple\n    return (list1[:index], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is at least L\n    if len(list1) >= L:\n        # Divide the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # Raise an error if the length of the list is less than L\n        raise ValueError(\"The length of the list should be at least L\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Convert the input list to a set to ensure uniqueness\n    list1 = list(set(list1))\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Find the middle index\n    mid = len(list1) // 2\n    # Split the list into two parts\n    list2 = list1[:mid]\n    list1 = list1[mid:]\n    # Return the two parts as a tuple\n    return (list1, list2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the dog's age in dog years\n    dog_years = h_age / 172.4\n    \n    # Return the dog's age in dog years as an integer value\n    return int(dog_years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(height):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years based on their height in inches.\n    \"\"\"\n    # convert height to centimeters\n    height_cm = height * 2.54\n    # calculate dog's age in dog's years\n    age_dogs = 7 * height_cm // 140\n    # return the dog's age in dog's years\n    return age_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7 # multiply the height in inches by 7 to get dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(height):\n    years = 7\n    height_inches = height * 0.0254\n    age_in_years = years / height_inches\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age // 365) # convert dog's age in years\n    if h_age % 365!= 0: # check if age is in years\n        dog_years += 1 # if not, add 1 to convert it to years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed_age = {'Labrador Retriever': 12, 'Golden Retriever': 6, 'Labrador Sporting Dog': 8}\n    breed = input(\"Enter the breed of dog: \")\n    if breed in breed_age:\n        dog_age = h_age - breed_age[breed]\n    else:\n        dog_age = \"Dog is not a recognized breed. Please enter a valid breed.\"\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if step <= 0 or step >= n:\n        return []\n    results = []\n    for i in range(0, n, step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through the list until we have used up all the elements\n    while len(S) > 0:\n        # Split the list into two equal halves until we have used up all the elements\n        half1 = S[:len(S)//2]\n        half2 = S[len(S)//2:]\n        # Add the two halves to the result list\n        result.append(half1)\n        result.append(half2)\n        # Remove the first element of the list\n        S = half2\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting sublists\n    result = []\n    # Iterate through the list using a while loop\n    i = 0\n    while i < len(S):\n        # If i is a multiple of step, add the current element to the sublist and reset the counter\n        if i % step == 0:\n            result.append(S[i])\n            i = 0\n        # Increment the counter\n        i += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = step\n    result = []\n    while n <= len(S):\n        result.append(S[:n])\n        S = S[n:]\n        n += step\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return (6 * l) ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2 # formula for lateral surface area of a cube\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area\n    ls = (6 * l * l) + (12 * l * l * l) + (8 * l * l * l * l)\n    \n    return ls"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the surface area\n    surface_area = l**2 * 6\n    \n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = [x for x in range(1, n+1, 2)]\n    sum_of_squares = sum(x*x for x in odd_numbers)\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initializing a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i*i\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 0\n    sum_of_squares = 0\n    while count < n:\n        sum_of_squares += (2 * count + 1)**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        sum_squares = 0\n        for i in range(1, n+1, 2):\n            sum_squares += i*i\n        return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum_of_squares = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd number to the sum variable\n        sum_of_squares += i**2\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    #initialize the sum of squares to 0\n    square_sum = 0\n    #iterate through the odd natural numbers up to n\n    for i in range(1, n+1, 2):\n        #add the square of the current number to the sum of squares\n        square_sum += i*i\n    #return the sum of squares\n    return square_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = []\n    for i in range(1, n+1, 2):\n        odd_numbers.append(i)\n    odd_squares = [num**2 for num in odd_numbers]\n    return sum(odd_squares)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the number of stars to 0\n    stars = 0\n    \n    # Loop through the range of 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the current number is divisible by 3\n        if i % 3 == 0:\n            # If it is, add 1 to the number of stars\n            stars += 1\n    \n    # Return the final number of stars\n    return stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * (find_star_num(n-1)) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(\"*\", end=\"\")\n        print()\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # define the first n stars\n    for i in range(n):\n        print('*', end='')\n    print()\n    # define the remaining stars\n    for i in range(n-1, 0, -1):\n        print('*', end='')\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return None\n    \n    star_num = ''\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            star_num += '*'\n        else:\n            star_num +=''\n    \n    return star_num.strip()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # base case\n    if n == 1:\n        return \"*\"\n    else:\n        # recursive case\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Define the base and the exponent of the formula\n    base = 1\n    exponent = 1\n\n    # Calculate then'th star number using the formula\n    result = 0\n    for i in range(1, n+1):\n        result += base ** exponent\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return \"*\"\n    else:\n        return find_star_num(n - 1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"1 star\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert character to its ascii value\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns the ascii value of that character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n                count += 1\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize sum variable\n    even_sum = 0\n    # loop through the array\n    for i in range(len(arr)):\n        # check if the current element is even and at an even index\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            # add the even number to the sum\n            even_sum += arr[i]\n    # return the sum\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    #initialize variables\n    sum_even_power = 0\n    current_num = 2\n    \n    #loop until n even natural numbers have been found\n    while sum_even_power < n:\n        #check if current number is even\n        if current_num % 2 == 0:\n            #if it is, add it to the sum of even powers\n            sum_even_power += current_num ** 5\n        #move on to the next number\n        current_num += 1\n    \n    #return the sum of even powers\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers\n\nprint(even_Power_Sum(10)) # Output: 1800"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_list = []\n    \n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Add the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    \n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(sub_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the number of elements in the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same number of elements.\")\n        return\n    \n    # create a new tuple with the subtracted elements\n    subtracted_tuple = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            subtracted_tuple.append(test_tup1[i] - test_tup2[i])\n        else:\n            subtracted_tuple.append(test_tup1[i])\n    \n    # return the subtracted tuple\n    return subtracted_tuple"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create a new tuple to store the result\n    result_tup = ()\n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple and the elements of the second tuple with the same index and append the result to the new tuple\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    # Return the new tuple of results\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(map(lambda x,y: x-y, test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum of even index binomial coefficients to 0 \n    sum_even_index_coeffs = 0 \n\n    # Iterate through all values of n from 1 to n \n    for i in range(1, n+1): \n\n        # Calculate the even index binomial coefficient of i \n        even_index_coeff = math.comb(n, i)\n\n        # If the index is even, add it to the sum of even index binomial coefficients \n        if i % 2 == 0: \n            sum_even_index_coeffs += even_index_coeff\n\n    # Return the sum of even index binomial coefficients \n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize the sum to zero\n    sum_even = 0\n    \n    # loop through all values of n and check if they are even\n    for i in range(1, n+1, 2):\n        \n        # calculate the value of the binomial coefficient\n        b = math.comb(n, i)\n        \n        # add the value of the binomial coefficient to the sum if it's even\n        if i % 2 == 0:\n            sum_even += b\n            \n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to 0\n    sum_even_binomial = 0\n    # Loop through the range of n\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n        # Check if the coefficient is even\n        if i % 2 == 0:\n            # If it is, add it to the sum of even index binomial coefficients\n            sum_even_binomial += coeff\n    # Return the sum of even index binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    sum_even_binomial = 0\n    num_terms = n // 2\n    # Calculate the even index binomial coefficients and add them to the sum\n    for i in range(num_terms):\n        term = 1\n        for j in range(i+1):\n            term *= (n - j)\n            term //= j\n        sum_even_binomial += term\n    # Return the sum\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Calculate the number of even index terms\n    even_terms = n * (n - 1) // 2\n\n    # Calculate the sum of even index binomial coefficients using the formula:\n    # Sum[binomial(n, k) * 2^(-k) * k^2]\n    # where binomial(n, k) is the binomial coefficient for n choose k\n    # and 2^(-k) is the power of 2 raised to the negative of k\n\n    for k in range(1, even_terms + 1):\n        sum += math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        bin_coeff = math.comb(n, i)\n        if i%2 == 0:\n            sum += bin_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of the even-indexed binomial coefficients of that number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            sum += term\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n == 0:\n        return 0\n    \n    # calculate the sum of even index binomial coefficients\n    even_binomial_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_binomial_sum += math.comb(n, i)\n    \n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    This function takes a positive integer n as input and calculates the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0  # initialize the sum to 0\n    for i in range(2, n+1):  # iterate from 2 to n\n        even_coeff = 0  # initialize the even coefficient to 0\n        for j in range(1, i+1):  # iterate from 1 to i\n            even_coeff += math.comb(i, j)  # calculate the binomial coefficient\n        if i % 2 == 0:  # check if i is even\n            sum_even_binomial += even_coeff  # add the even coefficient to the sum\n    return sum_even_binomial"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume\n    vol = (1/3) * 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3) * pi * r**2 * h)\n    return vol\n\npi = 3.14159265359"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (r**3) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14159 * r**2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    # Formula to calculate volume of a cylinder using formula V = \u03c0r\u00b2h\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume using the formula V = 1/3 * \u03c0 * r^2 * h\n    V = 1/3 * 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3/5) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = 3.14 * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r**2*h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and returns a new dictionary that contains only the key-value pairs from the original dictionary where the value is greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, val in enumerate(test_tup):\n        if val == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 0\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 0\n        else:\n            count += 1\n            if test_tup[i] == test_tup[i-1]:\n                count -= 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (i * (2*i-1))\n    return decagonal_num\n\nn = int(input(\"Enter a number to check for decagonal number: \"))\nresult = is_num_decagonal(n)\nprint(result)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = 1\n    \n    for i in range(1, n+1):\n        decagonal_number += i*(2*i-1)\n        \n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the sum of the cubes of the decagonal numbers from 1 to n\n    decagonal_sum = sum([i**3 for i in range(1, n+1)])\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num = dec_num * (i+1) // 2\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = 1\n    count = 0\n    while count <= n:\n        if count == 0:\n            decagonal_number += 1\n        else:\n            decagonal_number += 2 * (count + 1)\n        count += 1\n    return decagonal_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the base and limit values\n    base = 1\n    limit = n * (n+1) // 2\n\n    # Iterate through the base and limit values\n    for i in range(base, limit+1):\n        # Check if the current number is a decagonal number\n        if i == (i // 2) * i:\n            return True\n    \n    # If the loop completes without finding a decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        return 4*n**2 - 6*n + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    num_decagonal = 1\n    row = 1\n    \n    # Check if the input is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    # Calculate the nth decagonal number\n    while row <= n:\n        while num_decagonal <= n:\n            num_decagonal += row\n            row += 2\n        row -= 2\n        num_decagonal -= n\n        \n    return num_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i * (2 * i - 1)\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3*n - 1) // 2"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # initialize the index variable to -1\n    index = -1\n    \n    # loop through the array\n    for i in range(len(dlist)):\n        # if the current element is equal to the item, return the index and set the index variable to the current index\n        if dlist[i] == item:\n            index = i\n            break\n    \n    # return a tuple containing the boolean indicating if the item was found and the index of the item\n    return (True, index) if index!= -1 else (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    # Initialize a flag and a variable to store the index position\n    found = False\n    index = -1\n\n    # Iterate through the array\n    for i in range(len(dlist)):\n        # If the element is found, set the flag and index\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return a tuple containing the found flag and index\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n        elif i == len(dlist) - 1 and dlist[i]!= item:\n            return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    set_list = set(test_list)\n    if len(set_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize an empty set to store unique elements\n    unique_set = set()\n\n    # Iterate over each element in the list\n    for item in test_list:\n        # Check if the element is already in the set\n        if item in unique_set:\n            # If it is, return False\n            return False\n        else:\n            # Otherwise, add the element to the set\n            unique_set.add(item)\n\n    # If we make it through the entire loop without finding a duplicate, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Using a set to remove duplicates and then checking if the length is equal to the length of the list\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return None\n    \n    # initialize the result list with zeros\n    result = [0] * len(nums1)\n    \n    # subtract each element of the two lists and store in the result list\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    \n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as inputs and returns a new list that contains the subtraction of the corresponding elements from the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = {}\n    for digit in str(n):\n        count[digit] = count.get(digit, 0) + 1\n\n    for digit in count:\n        if count[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10  # initialize frequency list with zeros\n    \n    # count the frequency of each digit in the number\n    for d in digits:\n        freq[d] += 1\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n // 10:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # initialize a dictionary to store frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if digit!= count:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    freq = [0] * 10  # initialize frequency array with zeros\n    \n    # count frequency of each digit\n    for d in str(n):\n        freq[int(d)] += 1\n        \n    # check whether each digit frequency is less than or equal to its value\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n % 10:\n            return False\n            \n    # if all digits pass the frequency check, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]  # convert integer to list of digits\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    num = str(n)\n    for digit in num:\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = []\n    for digit in str(n):\n        freq.append(n.count(digit))\n\n    for i in range(10):\n        if freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # create a dictionary to store the frequency of each digit in the integer\n    freq_dict = {}\n\n    # iterate through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # iterate through the dictionary to check the frequency of each digit\n    for digit in freq_dict:\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq_dict[digit] > int(digit):\n            return False\n\n    # if all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for digit in str(n):\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    for digit in frequency:\n        if frequency[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Convert the integer to a string\n    s = str(n)\n\n    # Get the list of unique digits\n    digits = set(s)\n\n    # Loop through each digit\n    for d in digits:\n        # Count the occurrences of the digit in the string\n        count = s.count(d)\n\n        # Check if the frequency is less than or equal to the digit itself\n        if count > 0 and count > d:\n            return False\n\n    # If all digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    else:\n        return all(check_element(list[i+1:], element) for i in range(len(list)-1))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        return all(x == element for x in list)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    '''\n    Check whether all items in a list are equal to a given element.\n    '''\n    for item in lst:\n        if item!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(a){1}(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[bB]{2,3}'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    matches = re.findall(pattern, text)\n    return True if matches else False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'  # regular expression pattern to match 'ab' followed by two or three 'b's\n    return bool(re.search(pattern, text))  # check if the pattern matches in the text"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[^b]*b[02]{2}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba(?=.*b){2,3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"The string contains the pattern 'a.*b{2,3}'.\")\n    else:\n        print(\"The string does not contain the pattern 'a.*b{2,3}'.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[23]'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?:b{2,3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # check if the given array is of length n\n    if len(a)!= n:\n        return \"Invalid array length\"\n\n    # initialize the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # iterate through the given array and add the elements to the current sum\n    for i in range(n):\n        current_sum += a[i]\n\n        # check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum is less than or equal to zero, we need to subtract the last element from the current sum\n        if current_sum <= 0:\n            current_sum = a[i] - current_sum\n\n    # if the current sum is greater than the maximum sum, add it to the maximum sum\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    # repeat the array k times\n    modified_array = [a[0]] * k\n    for i in range(k - 1):\n        modified_array.append(a[0])\n\n    # initialize the current sum\n    current_sum = 0\n\n    # iterate through the modified array and add the elements to the current sum\n    for i in range(n):\n        current_sum += modified_array[i]\n\n        # check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum is less than or equal to zero, we need to subtract the last element from the current sum\n        if current_sum <= 0:\n            current_sum = modified_array[i] - current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the sum of the first k elements\n    sum1 = sum(a[:k])\n    # Calculate the sum of the last k elements\n    sum2 = sum(a[-k:])\n    # Initialize the maximum sum and the current sum\n    max_sum = max(sum1, sum2)\n    current_sum = max_sum\n    # Calculate the maximum sum by finding the maximum sum from the modified array\n    for i in range(n-k):\n        current_sum = max(a[i] + current_sum, a[i+k] + current_sum)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous array in the given array\n    max_sum = max(sum(a[:i+1]) for i in range(n))\n    # Find the sum of the repeated array k times\n    sum_repeated = sum((a[:i+1] * k) for i in range(n))\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    total_sum = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the sum of the current array\n        curr_sum += a[i]\n\n        # Check if the sum exceeds the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Check if the sum is equal to the maximum sum and k is less than or equal to 1\n        if curr_sum == max_sum and k <= 1:\n            break\n\n        # Calculate the total sum and check if it exceeds the maximum sum\n        total_sum = max_sum * k + curr_sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the sum of the original array\n    original_sum = sum(a)\n    \n    # find the largest sum of a contiguous subarray without repeating\n    max_sum = original_sum\n    \n    # initialize the sum of the first k elements of the modified array\n    modified_sum = 0\n    \n    # loop through the array k times\n    for i in range(k):\n        # find the sum of the current modified array\n        modified_sum += a[0]\n        # update the maximum sum if the current modified array is larger than the previous maximum\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n        # remove the first element from the modified array\n        modified_sum -= a[0]\n        \n    # return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the largest sum and current sum to negative infinity\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array and keep track of the current sum\n    for i in range(n):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n            \n    # Repeat the process for the additional k times\n    for _ in range(k):\n        current_sum = 0\n        for i in range(n):\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n            \n            # If the current sum becomes negative, reset it to zero\n            if current_sum < 0:\n                current_sum = 0\n                \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array of the given size and repeated k times\n    modified_array = [a[0]] * k + a\n    \n    # initialize variables for tracking the maximum subarray sum and its starting index\n    max_sum = a[0]\n    start_index = 0\n    \n    # loop through the modified array\n    for i in range(1, len(modified_array)):\n        \n        # if the current element is greater than the maximum subarray sum, update the maximum subarray sum and start index\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n            start_index = i\n            \n    # return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array where each element is the sum of the first k elements of the original array\n    # and the previous element\n    new_array = []\n    new_array.append(sum(a[:k]))\n    for i in range(1, k):\n        new_array.append(new_array[-1] + a[i])\n    \n    # find the maximum subarray sum of the modified array\n    max_sum = max(new_array)\n    \n    # find the maximum subarray sum of the original array\n    max_sum_orig = max(sum(a), sum(a[i:i+k] for i in range(len(a)-k+1)))\n    \n    # find the maximum subarray sum that repeats the original array k times\n    max_sum_repeated = max(max_sum_orig, new_array[new_array.index(max_sum) - k])\n    \n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k - 1:\n            repeated_sum = current_sum - (current_sum - a[i - k + 1])\n            current_sum = repeated_sum\n            max_sum = max(max_sum, repeated_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    sum_array = [0] * n\n    sum_array[0] = a[0]\n    max_sum = a[0]\n\n    for i in range(1, n):\n        sum_array[i] = sum_array[i-1] + a[i]\n        if sum_array[i] > max_sum:\n            max_sum = sum_array[i]\n\n    k_array = [0] * k\n    k_array[0] = a[0]\n    for i in range(1, k):\n        k_array[i] = a[i]\n\n    for i in range(k, n):\n        temp_sum = sum_array[i-k] + k_array[i-k]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the even natural number to the sum of squares\n        sum_of_squares += i*i\n\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize the sum variable\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i**2\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    num = 2\n    while num <= n:\n        sum_squares += num ** 2\n        num += 2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    i = 0\n    \n    while i <= n:\n        even_sum += i**2\n        i += 2\n        \n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    #initializing sum variable\n    sum = 0\n\n    #looping through first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        #calculating square of i and adding it to sum\n        sum += i**2\n\n    #returning sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize a variable to hold the sum of squares\n    sum = 0\n    \n    #loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        #add the square of the even number to the sum\n        sum += i*i\n    \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(n):\n        even_sum += i*i\n    return even_sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length of each list in the original list\n    max_lengths = []\n\n    # Loop through each list in the original list\n    for lst in list1:\n        # Initialize a variable to store the length of the current list\n        current_length = len(lst)\n\n        # If the length of the current list is greater than the length of the maximum length list, update the maximum length list\n        if current_length > max(max_lengths):\n            max_lengths = [current_length]\n        elif current_length == max(max_lengths):\n            # If the length of the current list is equal to the length of the maximum length list, add it to the list\n            max_lengths.append(current_length)\n\n    # Return the maximum length list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and all(len(subsublist) > len(max_sublist) for subsublist in max_lengths)):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Find the maximum length of a list of lists.\n\n    Parameters:\n    list1 (list of lists): A list of lists.\n\n    Returns:\n    int: The maximum length of the list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list) or len(list1[i]) == len(max_length_list) and len(list1[i][0]) > len(max_length_list[0]):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a list to store the maximum lengths\n    max_lengths = []\n\n    # Iterate through each list in the input list\n    for i in range(len(list1)):\n        # Initialize a variable to store the current maximum length\n        current_max = 0\n\n        # Iterate through each element in the current list\n        for j in range(len(list1[i])):\n            # If the current element is longer than the current maximum, update the maximum\n            if len(str(list1[i][j])) > current_max:\n                current_max = len(str(list1[i][j]))\n\n        # Add the current maximum length to the list of maximum lengths\n        max_lengths.append(current_max)\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        else:\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # loop through each list in the input list\n    for lst in list1:\n        # loop through each element in the list\n        for elem in lst:\n            # if the current element is longer than any element in max_lengths, update max_lengths\n            if len(elem) > max(max_lengths):\n                max_lengths = [len(elem)]\n            # if the current element is longer than an element in max_lengths, append its length to max_lengths\n            elif len(elem) > max(max_lengths[:-1]):\n                max_lengths.append(len(elem))\n    # return the maximum length in max_lengths\n    return max(max_lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case: if n == 1, then there is only one way to paint the fence with k colors\n    if n == 1:\n        return 1\n    \n    # base case: if k == 1, then there is only one way to paint the fence with n posts\n    if k == 1:\n        return n\n    \n    # recursive case: if n > 1 and k > 1, then there are two ways to paint the fence\n    # - one way with one post and the other way with n-1 posts\n    # - if the colors of adjacent posts are the same, then there are n-2 ways to paint the fence with (n-1) posts and the color of the last post\n    # - if the colors of adjacent posts are different, then there are (n-1) ways to paint the fence with (n-2) posts and the color of the last post\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    # Create a list to store the counts of each color\n    counts = [0] * k\n\n    # Initialize the count of ways to 1\n    count = 1\n\n    # Loop through the possible combinations of colors and count the number of ways\n    for i in range(n):\n        # Increment the count of the current color\n        counts[i % k] += 1\n\n        # Calculate the number of ways by checking if the adjacent posts have the same color\n        if i > 0 and counts[i % k] == counts[(i - 1) % k]:\n            # Decrement the count of the current color\n            counts[i % k] -= 1\n            # Increment the count of the adjacent post\n            counts[(i - 1) % k] += 1\n            # Add the count of the current color and the adjacent post to the count of ways\n            count += count_no_of_ways(n, k)\n            # Decrement the count of the adjacent post\n            counts[(i - 1) % k] -= 1\n            # Increment the count of the current color\n            counts[i % k] -= 1\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Create an array to store the count of ways to paint the fence using k colors\n    ways = [0] * (n+1)\n    ways[0] = 1  # If the fence has only one post, it is always painted\n    \n    # Loop through the array from 1 to n\n    for i in range(1, n+1):\n        # Loop through the colors from 0 to k\n        for j in range(k):\n            # If the color at the current index in the array is equal to the color at the index i in the array,\n            # then the color at the index i in the array has been used to paint the previous color at the index i-1 in the array\n            if j == ways[i-1]:\n                # Then the color at the index i in the array has been used to paint the current color at the index i in the array\n                ways[i] += ways[i-1]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (k+1)\n    dp[0] = 1\n    \n    for i in range(1, k+1):\n        dp[i] = dp[i-1] * (n-i+1)\n    \n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if j <= 2*i:\n                dp[i] += dp[j] * (2*i)\n    \n    return dp[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): "
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Check for the base case of n being 1 or less\n    if n <= 1:\n        return 1\n\n    # Loop through the first k colors\n    for i in range(1, k+1):\n        # Initialize the left and right pointers\n        left = 0\n        right = n-1\n\n        # Initialize a boolean variable to keep track of whether a color has been found\n        found = False\n\n        # Loop through the remaining colors\n        for j in range(2, k+1):\n            # Move the left pointer to the right until the color is found or the left pointer reaches the right pointer\n            while (left < right and arr[left][1]!= arr[left][0]):\n                left += 1\n\n            # Move the right pointer to the left until the color is found or the right pointer reaches the left pointer\n            while (left < right and arr[right][1]!= arr[right][0]):\n                right -= 1\n\n            # If the colors are adjacent, increment the count and reset the pointers\n            if left < right:\n                count += 1\n                left = 0\n                right = n-1\n                found = True\n                break\n\n            # If no color is found, reset the pointers\n            else:\n                left = 0\n                right = n-1\n                found = False\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n    elif k == 1:\n        return 0\n\n    # Create an array to store the number of ways of painting the fence\n    dp = [0] * (k + 1)\n    dp[0] = 0\n    dp[1] = 1\n\n    # Fill the array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                # If there is only one color, we cannot paint the same post twice\n                dp[j] = dp[j] + dp[j - 1]\n            else:\n                # If there are at least two colors, we can paint the same post twice\n                dp[j] = dp[j] + dp[j - 2]\n\n    # Return the last element of the array\n    return dp[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the count of ways\n    count_list = [0] * (n + 1)\n\n    # Base case: if the fence has 1 post, then there is only one way to paint it\n    count_list[1] = 1\n\n    # Calculate the count of ways for n posts\n    for i in range(2, n + 1):\n        # For each position in the fence, we can paint either the current post or the previous post\n        for j in range(1, i):\n            # We can paint either the current post or the previous post if the two adjacent posts have different colors\n            count_list[i] += count_list[j] * (k - 1)\n        # We can also paint the current post if the previous post has the same color as the current post\n        count_list[i] += count_list[i - 1]\n\n    return count_list[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize variables\n    ways = [0] * (n+1)\n    ways[0] = 1\n    ways[1] = k\n\n    # Fill the rest of the ways array\n    for i in range(2, n+1):\n        for j in range(i):\n            if ways[i-j-1] > 0:\n                ways[i] += ways[i-j-1]\n\n    # Return the count of ways\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # We can use dynamic programming to find out the number of ways of painting the fence\n    # Let's assume that the first post has color 1 and the second post has color 2\n    # We can paint the first post as color 1 and the second post as color 2 and count the remaining posts as ways\n    # We can then paint the second post as color 1 and the remaining posts as color 2 and count the remaining posts as ways\n    # We can then paint the remaining posts as color 1 and the second post as color 2 and count the remaining posts as ways\n    # We can continue this process for all the remaining posts and count the number of ways\n    # Finally, we can return the total number of ways\n\n    # Define a helper function to count the number of ways for the given colors\n    def count_ways(colors):\n        count = 1  # One way to paint the fence\n\n        # Iterate over all the colors except the last one\n        for i in range(len(colors) - 1):\n            # If the colors are the same, then the painting is not possible\n            if colors[i] == colors[i + 1]:\n                count = 0\n                break\n\n        return count\n\n    # Initialize the first post with color 1 and the second post with color 2\n    colors = [1, 2]\n\n    # Iterate over all the remaining posts\n    for i in range(3, n + 1):\n        # Add the number of ways of painting the fence for the current colors to the count\n        count = count_ways(colors)\n        colors = [1, 2] + colors[1:]  # Append the first post to the end of the colors list\n\n        # Iterate over all the colors except the last one\n        for j in range(len(colors) - 1):\n            # If the colors are the same, then the painting is not possible\n            if colors[j] == colors[j + 1]:\n                count = 0\n                break\n\n        colors = [2] + colors  # Append the second post to the beginning of the colors list\n\n        # Add the number of ways of painting the fence for the current colors to the count\n        count += count_ways(colors)\n\n        # Check if the colors are the same for the last post\n        if colors[0] == colors[-1]:\n            count += 1\n\n        # Update the colors list for the next iteration\n        colors = [1, 2] + colors[1:]\n\n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient  "
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(s ** 2 - w ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w**2 + h**2)\n    third_side = math.sqrt(area**2 - w**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the semi-perimeter\n    s = (math.sqrt(3)/2) * w\n    \n    # Calculate the length of the first angle\n    a = s / 2\n    \n    # Calculate the length of the second angle\n    b = math.sqrt(3) * h / 2\n    \n    # Calculate the length of the third angle\n    c = math.sqrt(3) * w / 2\n    \n    # Calculate the length of the third side\n    d = math.sqrt(3) * a\n    \n    # Return the length of the third side\n    return d"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the second side using Law of Cosines\n    s = math.sqrt(w**2 + h**2)\n    # calculate the third side using Pythagorean theorem\n    third_side = math.sqrt(w**2 + s**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w ** 2 + h ** 2) ** 0.5 # calculate the length of the perpendicular to the diagonal\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = 1/2 * math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # Formula to find the third side of a right angled triangle\n    s = (w**2 + h**2 + math.sqrt(w**2 + h**2)) / 2\n    \n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = float('-inf')\n    for item in listval:\n        if item > max_num:\n            max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    Parameters:\n    listval (list): A list of values of any type.\n\n    Returns:\n    Any: The maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize maximum value to first element in list\n    max_val = listval[0]\n\n    # loop through list and compare each element to max value\n    for i in listval:\n        if i > max_val:\n            max_val = i\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_num = None\n    for val in listval:\n        if max_num is None or val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize variables to store the maximum value and its corresponding type\n    max_val = float('-inf')\n    max_type = None\n    \n    # Iterate through the list\n    for item in listval:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            item_max = max_val(item)\n            # If the maximum value of the sublist is greater than the current maximum, update the variables\n            if item_max > max_val:\n                max_val = item_max\n                max_type = type(item_max)\n        # If the item is an integer, float, or string, update the maximum value if necessary\n        elif isinstance(item, (int, float, str)):\n            if item > max_val:\n                max_val = item\n                max_type = type(item)\n    \n    # Return the maximum value and its type\n    return max_val, max_type"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list of values and returns the maximum value in the list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_list.append(i)\n    return sum(divisors_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Get the length of the array\n    n = len(arr)\n\n    # Helper function to swap elements in an array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to count inversions in an array using divide and conquer approach\n    def count_inversions(arr, low, high):\n        if low == high:\n            return 0\n\n        # Divide the array into two halves\n        mid = (low + high) // 2\n\n        # Count inversions in left half\n        inv_left = count_inversions(arr, low, mid)\n\n        # Count inversions in right half\n        inv_right = count_inversions(arr, mid + 1, high)\n\n        # Count inversions in sorted halves\n        inv_sorted = count_inversions(arr, low, high)\n        for i in range(mid + 1, high + 1):\n            for j in range(low, mid + 1):\n                if arr[i] < arr[j]:\n                    inv_sorted += 1\n\n        # Combine the inversions\n        return inv_left + inv_right + inv_sorted\n\n    # Call the count_inversions function\n    return count_inversions(arr, 0, n - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n  \n    # To store count of inversions in two subarrays \n    inv_count = [0] * n \n  \n    # This function is used by merge_sort function \n    def merge(arr, low, mid, high): \n        i = low \n        j = mid + 1 \n        k = low \n\n        # Merge two subarrays \n        while i <= mid and j <= high: \n            if arr[i] <= arr[j]: \n                inv_count[k] += mid - j + 1 \n                arr[k] = arr[i] \n                i += 1 \n            else: \n                inv_count[k] += j - mid \n                arr[k] = arr[j] \n                j += 1 \n            k += 1 \n\n        # Copy remaining elements of subarray1 if any \n        while i <= mid: \n            inv_count[k] += mid - i + 1 \n            arr[k] = arr[i] \n            i += 1 \n            k += 1 \n  \n        # Copy remaining elements of subarray2 if any \n        while j <= high: \n            inv_count[k] += high - j \n            arr[k] = arr[j] \n            j += 1 \n            k += 1 \n  \n    # This function is used by merge_sort function \n    def merge_sort(arr, low, high): \n        if low < high: \n            mid = (low + high) // 2 \n\n            # Sort first and second halves \n            merge_sort(arr, low, mid) \n            merge_sort(arr, mid + 1, high) \n\n            # Merge sorted halves \n            merge(arr, low, mid, high) \n  \n    # Call merge_sort function to sort the array \n    merge_sort(arr, 0, n - 1) \n  \n    # Return the count of inversions \n    return inv_count[0]"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Calculates the number of inversions in an array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The number of inversions in the array.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n    \"\"\"\n    if not all(isinstance(i, int) for i in arr):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    n = len(arr)\n    inversions = 0\n\n    for i in range(n):\n        # initialize two pointers:\n        # one at the beginning of the array,\n        # one at the end of the array\n        left = i\n        right = n - 1\n\n        while left < right:\n            # if the elements at left and right indices are in the correct order,\n            # swap them and increment the inversions count\n            if arr[left] > arr[right]:\n                arr[left], arr[right] = arr[right], arr[left]\n                inversions += n - left - right\n                # move the left pointer to the right\n                left += 1\n            # if the left element is greater than the right element,\n            # the inversions must have occurred between them, so we can move\n            # the left pointer to the right to ensure that the right element\n            # is greater than the left element.\n            else:\n                left += 1\n\n        # after the outer loop completes, the left pointer will be pointing to\n        # the first element that is greater than the left element. We need to\n        # swap it with the last element in the array to get the correct\n        # inversions count.\n        if i!= left - 1:\n            arr[left - 1], arr[i] = arr[i], arr[left - 1]\n            inversions += n - left + i\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    i = j = 0\n    merged = []\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    \n    for i in range(len(sorted_arr) - 1):\n        inv_count += (i + 1) * (len(sorted_arr) - i - 1)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversions are when two elements are in the wrong order.\n    '''\n\n    # Helper function for counting inversions\n    def count_inv(arr, left, right):\n        '''\n        Helper function to count inversions in an array.\n        '''\n\n        # Base case: If the array has only one element or is already sorted, return 0 inversions\n        if left == right:\n            return 0\n\n        # Partition the array around the pivot element\n        pivot = arr[left]\n        i = left + 1\n        j = right\n\n        while True:\n            while i <= j and arr[i] <= pivot:\n                i += 1\n            while i <= j and arr[j] >= pivot:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = arr[j], arr[i]\n            else:\n                break\n\n        # Recursively count the number of inversions in the left and right subarrays\n        inv_left = count_inv(arr, left, j)\n        inv_right = count_inv(arr, i, right)\n\n        # Count the number of inversions in the entire array using the two subarray counts\n        inv_full = 0\n        if left < j:\n            inv_full += count_inv(arr, left, j)\n        if i < right:\n            inv_full += count_inv(arr, i, right)\n        return inv_left + inv_right + inv_full\n\n    # Call the helper function to count the inversions in the array\n    return count_inv(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Helper function for counting inversions\n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            left_half = arr[:mid] \n            right_half = arr[mid:] \n  \n            # Recursively sort the left and right halves \n            merge_sort(left_half) \n            merge_sort(right_half) \n  \n            i = j = k = 0 \n  \n            # Merge the sorted halves back into arr \n            while i < len(left_half) and j < len(right_half): \n                if left_half[i] <= right_half[j]: \n                    arr[k] = left_half[i] \n                    i += 1 \n                else: \n                    arr[k] = right_half[j] \n                    j += 1 \n                k += 1 \n  \n            while i < len(left_half): \n                arr[k] = left_half[i] \n                i += 1 \n                k += 1 \n  \n            while j < len(right_half): \n                arr[k] = right_half[j] \n                j += 1 \n                k += 1 \n  \n    # Merge Sort the array to count inversions \n    merge_sort(arr) \n  \n    # Initialize variables for inversion count and swap count \n    inv_count = 0 \n    swap_count = 0 \n  \n    # Iterate through the array and count inversions and swaps \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i - 1]: \n            inv_count += len(arr) - i \n            swap_count += 1 \n  \n    # Return the final inversion count and swap count \n    return inv_count, swap_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - i - 1\n                #swap the elements\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # sort the first i elements of the array\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                # swap the elements if the inversion is found\n                arr[i], arr[j] = arr[j], arr[i]\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n    lst (list): A nested list to flatten.\n\n    Returns:\n    A flattened list.\n\n    Examples:\n    >>> flatten_list([[1, 2], [3, [4, 5], 6], [7]])\n    [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Create an empty list to hold the flattened elements\n    flat_list = []\n    # Loop through each element in the list\n    for item in list1:\n        # If the item is a list, recursively call the function on it\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    current_sum = 0\n    stock_prices = defaultdict(int)\n    for stock, price in stdata:\n        current_sum += price\n        stock_prices[stock] = current_sum\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to store the sum of each item and its count\n    item_sum = defaultdict(int)\n    # Use max() to get the maximum sum\n    max_sum = max(item_sum.values())\n    # Iterate through the list of tuples and update the sum and count for each item\n    for item, price in stdata:\n        item_sum[item] += price\n    # Calculate the maximum aggregate\n    max_aggregate = max(sum(item_sum.values()) for item in item_sum)\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for name, price in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_aggr[name] = max(max_aggr[name], price)\n\n    # Return the maximum aggregate for each customer\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = float('-inf')\n    max_mapping = defaultdict(int)\n    \n    for transaction in stdata:\n        if transaction[2] > max_sum:\n            max_sum = transaction[2]\n            max_mapping.clear()\n            max_mapping[transaction[0]] = transaction[1]\n        elif transaction[2] == max_sum:\n            max_mapping[transaction[0]] += transaction[1]\n    \n    return max_mapping"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_aggs = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for item, price in stdata:\n        # Calculate the maximum aggregate for this item\n        max_aggs[item] = max(max_aggs[item], price)\n\n    # Iterate over the defaultdict and return the maximum aggregate\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregate for each day\n    day_agg = defaultdict(int)\n    \n    # Iterate through each tuple in the list\n    for day, amount in stdata:\n        # Update the aggregate for the current day\n        day_agg[day] += amount\n        \n    # Initialize the maximum aggregate\n    max_agg = 0\n    \n    # Iterate through the dictionary and update the maximum aggregate\n    for amount in day_agg.values():\n        if amount > max_agg:\n            max_agg = amount\n            \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each item\n    max_dict = defaultdict(int)\n\n    # iterate through the list of tuples and update the max_dict for each item\n    for item, price in stdata:\n        max_dict[item] = max(max_dict[item], price)\n\n    # find the maximum aggregate from the max_dict and return it\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate \n    from that list.\n\n    Parameters:\n    stdata: a list of tuples, each tuple containing a student ID and their grade\n    \n    Returns:\n    max_agg: the maximum aggregate among all the grades in the list of tuples\n    '''\n    \n    # create a defaultdict to store the count of each grade\n    grade_count = defaultdict(int)\n    \n    # iterate over the tuples and update the grade_count dictionary\n    for student_id, grade in stdata:\n        grade_count[grade] += 1\n    \n    # find the maximum value in the grade_count dictionary\n    max_agg = max(grade_count, key=grade_count.get)\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_aggr = defaultdict(int)\n    # Iterate through the list of tuples\n    for trans, amount in stdata:\n        # For each transaction, calculate the maximum aggregate\n        max_aggr[trans] += amount\n    # Find the maximum aggregate from the defaultdict\n    max_aggr_total = max(max_aggr.values())\n    return max_aggr_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for s, c, p in stdata:\n        max_dict[s] += c * p\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**(2*n), 2**2*2**(2*n)):\n        binary_seq = bin(i)[2:] # get the binary representation of i\n        first_n_bits = binary_seq[:n] # get the first n bits\n        last_n_bits = binary_seq[-n:] # get the last n bits\n        if first_n_bits == last_n_bits: # check if the sum of first n bits is same as the sum of last n bits\n            count += 1\n    return count\n\nn = 5 # input the value of n\nprint(\"Count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize the count of binary sequences\n    count = 0\n    \n    # Loop through all possible combinations of 0s and 1s\n    for i in range(2**n):\n        # Extract the first n bits\n        seq = bin(i)[2:].zfill(n)\n        \n        # Calculate the sum of the first n bits\n        sum1 = sum([int(bit) for bit in seq])\n        \n        # Calculate the sum of the last n bits\n        sum2 = sum([int(bit) for bit in seq[::-1]])\n        \n        # Check if the sums are equal\n        if sum1 == sum2:\n            # Increment the count of binary sequences\n            count += 1\n    \n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        current = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in current[:n]) == sum(int(bit) for bit in current[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        count += 1\n    for i in range(2**n-1, 2**2*n-1):\n        count += 1\n    return count\n\nprint(count_binary_seq(3)) # Output: 15"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        bits = [int(digit) for digit in bin(i)[2:]]\n        if bits[n-1] == bits[-n]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i == 0 or i == 2**(n-1)-1:\n            count += 1\n        elif sum(i//(2**j) % 2 for j in range(n)) == sum((i//(2**j) % 2 for j in range(n, 2*n))[::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    def binary_seq_sum(num, n):\n        return bin(num)[2:].zfill(n)[::-1].sum()\n\n    count = 0\n    for i in range(2**n, 2**(2*n)+1):\n        if binary_seq_sum(i, n) == binary_seq_sum(i-1, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize a list to store the count of each binary sequence\n    count_list = []\n\n    # initialize a binary sequence of length 2n with all zeros\n    binary_seq = '0' * 2 * n\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n\n        # get the last n bits of the binary sequence\n        last_n_bits = binary_seq[-n:]\n\n        # get the sum of the first n bits\n        first_n_sum = sum([int(bit) for bit in binary_seq[:n]])\n\n        # get the sum of the last n bits\n        last_n_sum = sum([int(bit) for bit in last_n_bits])\n\n        # check if the sum of the first n bits and the sum of the last n bits are the same\n        if first_n_sum == last_n_sum:\n            # if they are, increment the count of the binary sequence in the list\n            count_list.append(binary_seq)\n\n    # return the count of the binary sequence in the list\n    return len(count_list)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        temp = i\n        count += temp\n        count += (temp >> (n-1))\n        temp = (temp << 1) & ((1 << (n+1)) - 1)\n        count += temp\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize count to zero\n    count = 0\n    \n    # Loop from 0 to 2^n-1\n    for i in range(2**n): \n        # Extract first n bits\n        first_n = i >> (n-1)\n        # Extract last n bits\n        last_n = i & ((2**n)-1)\n        # Check if sum of first n bits is same as sum of last n bits\n        if first_n == last_n: \n            # Increment count\n            count += 1\n            \n    # Return count\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        elif isinstance(value, list):\n            depth = 1 + len([x for x in value if isinstance(x, dict)])\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_dict = d\n    while isinstance(current_dict, dict):\n        depth += 1\n        current_dict = current_dict.values()\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n            depth = max(depth, dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for key in d:\n            if isinstance(d[key], dict):\n                depth = max(depth, dict_depth(d[key])+1)\n            else:\n                depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k,v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the number of elements in the array\n    n = len(arr)\n\n    # calculate the initial element to be searched\n    initial_element = arr[index]\n\n    # calculate the number of rotations to be performed\n    num_rotations = rotations % n\n\n    # initialize the left and right pointers\n    left = 0\n    right = n-1\n\n    # perform binary search to find the element at the given index\n    while left <= right:\n        mid = (left + right) // 2\n        rotated_mid = arr[mid-num_rotations]\n        if rotated_mid == initial_element:\n            return arr[mid]\n        elif rotated_mid < initial_element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # if the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): A list of integers.\n    ranges (list): A list of tuples representing the range of valid rotations.\n    rotations (int): The number of rotations to perform.\n    index (int): The index at which to find the element.\n\n    Returns:\n    int: The element at the specified index after the specified number of rotations.\n\n    \"\"\"\n    # Calculate the total number of rotations\n    total_rotations = rotations * len(ranges)\n\n    # Initialize the starting index\n    current_index = index\n\n    # Iterate over each rotation range\n    for range_start, range_end in ranges:\n        # Check if the current index is within the range\n        if current_index >= range_start and current_index <= range_end:\n            # Calculate the distance to the end of the range\n            distance = current_index - range_start\n\n            # Update the current index based on the rotation\n            current_index = (range_end + range_start) % (len(arr) - 1) - distance\n\n    # Return the element at the final index\n    return arr[current_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr (list of integers): list of integers to be rotated\n    ranges (list of tuples): list of tuples containing start and end index for each range to be rotated\n    rotations (list of integers): list of integers containing the number of rotations to perform\n    index (integer): the index of the element to be found after rotations\n\n    Returns:\n    The element at the given index after rotations.\n    \"\"\"\n    element = arr[index]\n    for rotation in rotations:\n        # rotate the element\n        left = index - rotation\n        right = index + rotation\n        if left < 0:\n            left = len(arr) - 1\n        if right >= len(arr):\n            right = 0\n        # swap elements\n        arr[left], arr[right] = arr[right], arr[left]\n        # update the index for the next rotation\n        index = (left + right) // 2\n    # return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    def find_Element_recursive(arr, index, rotation, range_start, range_end):\n        if range_start > range_end:\n            return None\n\n        mid = (range_start + range_end) // 2\n\n        if arr[index] == mid:\n            return mid\n\n        elif arr[index] < mid:\n            if rotation > 0:\n                return find_Element_recursive(arr, index, rotation - 1, mid + 1, range_end)\n            else:\n                return find_Element_recursive(arr, index, rotation, range_start, mid - 1)\n\n        else:\n            if rotation > 0:\n                return find_Element_recursive(arr, index, rotation - 1, range_start, mid - 1)\n            else:\n                return find_Element_recursive(arr, index, rotation, mid + 1, range_end)\n\n    return find_Element_recursive(arr, index, rotations, ranges[0], ranges[-1])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 7, 9]\n    ranges = [0, 5]\n    rotations = 2\n    index = 3\n    print(\"Element at index\", index, \"after\", rotations, \"rotations is:\", find_Element(arr, ranges, rotations, index))"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # initialize variables\n    temp = arr[0]\n    count = 0\n    \n    # loop through the array and find the element at the given index\n    for i in range(1, len(arr)):\n        if temp == arr[i]:\n            count += 1\n            if count == index:\n                return temp\n            \n            # check if the element is in the next range\n            for j in range(len(ranges)):\n                if i == ranges[j][0]:\n                    temp = arr[i]\n                    count = 0\n                    break\n        elif count > 0:\n            count -= 1\n            \n    # if the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize count and rotations for the current element\n    count = 1\n    current_rotations = 0\n    \n    # Traverse the array\n    for i in range(len(arr)):\n        # Check if the current element is already in the given range\n        if arr[i] in ranges:\n            # If it is, check if it is at the given index\n            if i == index:\n                return arr[i]\n            # If not, increment the count and check if it is at the given index after rotations\n            else:\n                if current_rotations >= rotations:\n                    return arr[i]\n                else:\n                    current_rotations += 1\n                    count += 1\n                    \n        # If the current element is not in the given range, increment the count and rotate the array\n        else:\n            count += 1\n            current_rotations += 1\n            arr = arr[-count:] + arr[:count]\n    \n    # If the given index is not found in the array, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the given array, ranges of rotations and index of the element to be found as input.\n    It returns the element at the given index after the number of rotations.\n\n    :param arr: list of integers\n    :param ranges: list of tuples representing the rotations to be done on the array\n    :param rotations: list of integers representing the number of rotations for each range\n    :param index: integer representing the index of the element to be found\n    :return: integer representing the element at the given index after rotations\n    \"\"\"\n    # Initialize variables to keep track of the sum of elements in the subarray after rotations\n    sum_after_rot = [0] * len(ranges)\n    for i in range(len(ranges)):\n        # Calculate the sum of elements in the subarray after rotations\n        sum_after_rot[i] = arr[i] * (rotations[i] - 1)\n\n    # Find the index of the element in the sum_after_rot array\n    for i in range(len(sum_after_rot)):\n        if sum_after_rot[i] >= index:\n            return i\n\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    rotated_arr = arr[::-1] # Reverse the array to make it circular\n\n    # Find the rotation index to be applied to the original array\n    for i in range(len(rotations)):\n        if rotations[i] > index:\n            rot_index = i\n            break\n\n    # Apply the required rotation to the rotated array\n    for i in range(rot_index):\n        rotated_arr = rotated_arr[rotations[i]]\n\n    # Find the element at the given index in the rotated array\n    element = rotated_arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the element at index 0 after rotations\n    if index == 0:\n        if rotations == 0:\n            return arr[0]\n        else:\n            return find_Element(arr, ranges, rotations-1, 0)\n    \n    # Find the element at index after rotations\n    for i in range(index, len(arr)):\n        if arr[i] == ranges[i-index]:\n            return arr[i]\n    \n    # If element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Finding the maximum number of rotations required to reach the given index\n    max_rotations = 0\n    for i in range(len(arr)):\n        if index >= len(arr[i]):\n            max_rotations += 1\n            index -= len(arr[i])\n    max_rotations += 1\n\n    # Finding the index of the element after rotating the given index by the number of rotations\n    for i in range(max_rotations):\n        for j in range(len(arr)):\n            if index < len(arr[j]):\n                index += len(arr[j])\n            else:\n                index -= len(arr[j])\n\n    # Returning the element at the given index after rotating the array by the number of rotations\n    return arr[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    pattern = re.compile(r'p\\w+')\n    for word in words:\n        match = pattern.search(word)\n        if match:\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*')\n    result = re.findall(pattern, words)\n    if result:\n        return result[0] +'and'+ result[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^\\w*p\\w*$', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p.*', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 0:\n        return 'No words starting with \"p\"'\n    else:\n        return f'\"p\" words: {p_words[0]}, {p_words[1]}'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+$'\n    for word in words:\n        if re.match(pattern, word):\n            return [word, word.replace('p', 'P')]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    for word in words:\n        if re.search(pattern, word):\n            return word.split()[1:]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n - 1:\n        return a[index]\n    elif k > index:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n\n    if k <= index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    max_so_far = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    if a[index] < a[k]:\n        return max_so_far\n\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(max_so_far, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i] and j > k:\n                dp[i] = max(dp[i], dp[j] + a[i])\n                if dp[i] > dp[k]:\n                    k = i\n    return dp[k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[j] + a[i] for j in range(i) if a[j] < a[i])\n        if i >= k and a[i] > a[k - 1]:\n            dp[i] += dp[k - 1]\n    return max(dp[i] for i in range(1, n + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        raise ValueError('k is not greater than or equal to index')\n    if index == 0:\n        return 0\n    if index == n:\n        return a[k-1]\n    \n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = a[0]\n    for i in range(2, n+1):\n        if i == k:\n            dp[i] = max(dp[i-1], dp[i-2]) + a[i-1]\n        else:\n            dp[i] = max(dp[i-1], dp[i-2]) + a[i-1]\n    return dp[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if index == n:\n        return 0\n    if a[index] < a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an empty list to store the maximum sum of increasing subsequences for each prefix\n    max_sum_list = [0] * (n + 1)\n\n    # Initialize the maximum sum of increasing subsequences for the first prefix as 0\n    max_sum_list[0] = 0\n\n    # Iterate through all the prefixes from 1 to n\n    for i in range(1, n + 1):\n        # Initialize the maximum sum of increasing subsequences for the ith prefix as 0\n        max_sum_list[i] = max_sum_list[i - 1]\n\n        # Iterate through all the indices from i to k\n        for j in range(i, min(i + k, n) + 1):\n            # Calculate the sum of the increasing subsequences from index to j\n            sum_inc_subseq = 0\n            for l in range(i, j):\n                sum_inc_subseq += a[l]\n\n            # Update the maximum sum of increasing subsequences for the ith prefix\n            if sum_inc_subseq > max_sum_list[i]:\n                max_sum_list[i] = sum_inc_subseq\n\n    # Return the maximum sum of increasing subsequences for the given prefix\n    return max_sum_list[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a new array to store the maximum sum of increasing subsequences from prefix until ith index\n    max_so_far = [0] * n\n\n    # initialize the maximum sum of increasing subsequence from prefix until ith index to 0\n    max_so_far[index] = a[index]\n\n    # loop through the remaining array and calculate the maximum sum of increasing subsequences from prefix until ith index\n    for i in range(index + 1, n):\n        # if the sum of the current element and the maximum sum of increasing subsequence from prefix until j is greater than k, update the maximum sum of increasing subsequence from prefix until j to the sum of the current element and the maximum sum of increasing subsequence from prefix until j\n        if a[i] + max_so_far[i-1] > k:\n            max_so_far[i] = a[i] + max_so_far[i-1]\n        # if the sum of the current element and the maximum sum of increasing subsequence from prefix until j is less than or equal to k, update the maximum sum of increasing subsequence from prefix until j to the sum of the current element and the maximum sum of increasing subsequence from prefix until i-1\n        else:\n            max_so_far[i] = a[i] + max_so_far[i-1]\n\n    # return the maximum sum of increasing subsequence from prefix until k\n    return max_so_far[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0]\n    dp = [0] * (k+1)\n    dp[0] = a[0]\n    for i in range(1, k+1):\n        dp[i] = max(dp[i-1], a[i] + dp[i-2])\n    for i in range(index, n):\n        dp[k] = max(dp[k], a[i] + dp[k-1])\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if index == n:\n        return max_sum_increasing_subseq(a, n-1, index-1, k-1)\n    if index == 0:\n        if k == 0:\n            return a[k]\n        else:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n\n    if k == 0:\n        return max(a[index-1] + max_sum_increasing_subseq(a, n, index-1, k-1), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n    else:\n        return max(a[index-1] + max_sum_increasing_subseq(a, n, index-1, k-1), a[index] + max_sum_increasing_subseq(a, n, index-1, k))\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): A tuple of integers.\n    m (int): The row number of the first cell of the colon.\n    n (int): The column number of the first cell of the colon.\n\n    Returns:\n    colon (list): A list of tuples representing the colon of the input tuple.\n    \"\"\"\n\n    # Create a copy of the input tuple\n    colontuple = deepcopy(tuplex)\n\n    # Loop through the columns and rows of the colon and fill it in\n    for i in range(m, n):\n        colontuple[i] = 0\n\n    return colontuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    colontup = deepcopy(tuplex)\n    # if the length of the tuple is less than n, pad it with None values\n    while len(colontup) < n:\n        colontup.append(None)\n    # get the first m elements of the colon\n    colon = colontup[:m]\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get a copy of the original tuple\n    colontuple = deepcopy(tuplex)\n    # initialize an empty list to store the result\n    colonlist = []\n    # loop through the tuple\n    for i in range(m):\n        # get the value for column i\n        colval = colontuple[i]\n        # create a tuple with the value and empty space for the rest of the columns\n        colonlist.append((colval, (None,)*n))\n    # return the colon as a tuple of tuples\n    return tuple(colonlist)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # iterate over the columns\n    for i in range(m):\n        # initialize a list to hold the values of the column\n        column = []\n        # iterate over the rows of the tuple\n        for j in range(n):\n            # add the value of the tuple at the current position to the list of values of the column\n            column.append(new_tuplex[i][j])\n        # add the list of values to the new tuple\n        new_tuplex[i] = column\n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Create a new tuple of length m with zeros\n    new_tuplex = tuple([0]*m)\n    # Loop through the tuple and append the first n elements to the new tuple\n    for i in range(n):\n        new_tuplex = new_tuplex + (tuplex_copy[i],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Creating a new tuple with length equal to n\n    colon = (0,) * n\n    \n    # Adding the elements from tuplex to the new tuple\n    for i in range(len(tuplex)):\n        colon[i] = tuplex[i]\n        \n    # Returning the new tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list to store the colon\n    col = []\n    \n    # Loop through the tuple\n    for i in range(len(tuplex)):\n        # Create a new list to store the i-th element\n        row = []\n        \n        # Loop through the m elements in the new list\n        for j in range(m):\n            # Append the j-th element to the row list\n            row.append(tuplex[i][j])\n            \n        # Append the row list to the col list\n        col.append(row)\n    \n    # Return the colon as a tuple\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    t = deepcopy(tuplex)\n    # reverse the copy of the tuple\n    t = t[::-1]\n    # initialize a counter for the number of elements in the colon\n    count = 0\n    # loop through the copy of the tuple\n    for i in range(len(t)):\n        # if we have reached the desired length of the colon\n        if count == m:\n            # break the loop\n            break\n        # if the current element is not None\n        if t[i] is not None:\n            # append the current element to the colon\n            colon.append(t[i])\n            # increment the counter for the number of elements in the colon\n            count += 1\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Get the number of rows\n    rows = length // m\n    # Check if there are any extra elements left over\n    extra_rows = length % m\n    # Get the length of each row\n    row_length = rows * m\n    # Create a new tuple to hold the colon\n    colon = ()\n    # Loop through each row\n    for i in range(rows):\n        # Create a tuple of the current row\n        row = tuplex_copy[:row_length]\n        # Add the row to the colon\n        colon = colon + (row,)\n        # Remove the row from the original tuple\n        tuplex_copy = tuplex_copy[row_length:]\n    # If there are any extra elements left over, add them to the colon\n    if extra_rows > 0:\n        # Create a tuple of the current row\n        row = tuplex_copy[:extra_rows]\n        # Add the row to the colon\n        colon = colon + (row,)\n    # Return the colon of the tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple and reverse the order of the elements\n    new_tuplex = deepcopy(tuplex[::-1])\n    # Initialize an empty list to store the colon\n    colon = []\n    # Loop through each element of the new tuple and add it to the colon\n    for i in range(min(len(new_tuplex),m)):\n        colon.append(new_tuplex[i])\n    # Add the rest of the elements to the colon as a tuple\n    for i in range(max(len(new_tuplex),m),len(new_tuplex)):\n        colon.append(tuple(new_tuplex[i]))\n    # Add the colon to the original tuple\n    new_tuplex = colon\n    # Reverse the order of the elements again and return the new tuple\n    return new_tuplex[::-1]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize two variables to store the largest product for each factor\n    max_product1 = max_product2 = float('-inf')\n\n    # Loop through the two lists and find the maximum product for each factor\n    for i in range(len(nums1)):\n        factor1 = nums1[i]\n        for j in range(len(nums2)):\n            factor2 = nums2[j]\n            product = factor1 * factor2\n            if product > max_product1:\n                max_product1 = product\n            if product > max_product2 and j < len(nums2)-1:\n                max_product2 = product\n\n    # Return the maximum number of largest products found\n    return max(max_product1, max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the maximum value in nums1 and nums2\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n    \n    # initialize the product matrix\n    product_matrix = [[0]*(N+1) for i in range(len(nums1)+1)]\n    \n    # calculate the product matrix\n    for i in range(1, len(nums1)+1):\n        for j in range(1, N+1):\n            product_matrix[i][j] = nums1[i-1] * nums2[j-1] * product_matrix[i-1][j-1]\n    \n    # find the maximum products\n    max_products = []\n    for i in range(1, N+1):\n        max_products.append(max(product_matrix[len(nums1)][i], product_matrix[i][N]))\n    \n    # sort the maximum products in descending order\n    max_products.sort(reverse=True)\n    \n    # return the specified number of largest products\n    return max_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product of two numbers from the two lists\n    max_product = max(nums1[0] * nums2[0], nums1[-1] * nums2[-1])\n    \n    # Initialize the maximum product and the maximum indices of the largest products found so far\n    max_product_indices = [0, 0]\n    max_product_indices_2 = [0, 0]\n    \n    # Initialize the list of indices to select from\n    indices_to_select = [0, 1]\n    \n    # Loop through the remaining indices to select from\n    for i in range(2, N):\n        # Calculate the product of the two largest products found so far and the next number to select\n        current_product = max_product_indices[0] * max_product_indices_2[0] * nums1[i] * nums2[i]\n        \n        # Check if the current product is larger than the previous maximum product\n        if current_product > max_product:\n            # If it is, update the maximum product and indices\n            max_product = current_product\n            max_product_indices = [i, 0]\n            max_product_indices_2 = [0, 0]\n        \n        # If the current product is smaller than the previous maximum product, compare with the next largest product found so far\n        elif current_product == max_product:\n            # If it is the same as the maximum product, compare with the next smallest number in the list\n            if nums1[i] < nums2[i]:\n                max_product_indices_2 = [max_product_indices[0], i]\n            else:\n                max_product_indices_2 = [i, max_product_indices[1]]\n        \n        # If the current product is larger than the second largest product, update the maximum indices\n        if max_product_indices[0] == max_product_indices_2[0]:\n            max_product_indices_2[1] = i\n    \n    # Find the indices of the selected numbers\n    selected_indices = [max_product_indices[0] + 1, max_product_indices_2[0] + 1]\n    \n    # Return the selected indices\n    return selected_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # initialize variables to store the largest products and their indices\n    max_product = float('-inf')\n    max_index1 = -1\n    max_index2 = -1\n\n    # loop through the two lists, selecting one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # check if the product is larger than the current largest product\n            if product > max_product:\n                max_product = product\n                max_index1 = i\n                max_index2 = j\n\n    # return the indices of the two factors that maximize the product\n    return max_index1, max_index2, max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products\n    largest_product_1 = 0\n    largest_product_2 = 0\n\n    # Loop through the first N elements of the two lists\n    for i in range(N):\n        # Calculate the product of the current elements of the two lists\n        product_1 = nums1[i] * nums2[i]\n        product_2 = nums1[i] * nums2[N-1-i]\n\n        # Update the largest product if the current product is greater\n        if product_1 > largest_product_1:\n            largest_product_1 = product_1\n\n        if product_2 > largest_product_2:\n            largest_product_2 = product_2\n\n    return largest_product_1, largest_product_2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    product = 1\n    \n    for i in range(N):\n        product *= max(nums1[i], nums2[i])\n        max_product = max(max_product, product)\n        \n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N elements\n    product = 1\n    for i in range(N):\n        product *= nums1[i]\n\n    # Find the largest N products\n    largest_products = []\n    for i in range(len(nums1) - N + 1):\n        product_left = product\n        product_right = 1\n        for j in range(N):\n            product_right *= nums2[i+j]\n        if product_left > product_right:\n            largest_products.append(product_left)\n        else:\n            largest_products.append(product_right)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the largest products variables\n    largest1 = 0\n    largest2 = 0\n    \n    # Loop through the list of numbers and find the largest products\n    for i in range(N):\n        if nums1[i] > largest1:\n            largest1 = nums1[i]\n        if nums2[i] > largest2:\n            largest2 = nums2[i]\n    \n    # Return the largest products\n    return largest1 * largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables for largest product and its index\n    largest_product = float('-inf')\n    largest_product_index = 0\n    \n    # Iterate through the two lists and find the largest product\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two selected factors and check if it's larger than the current largest product\n            product = nums1[i] * nums2[j]\n            if product > largest_product:\n                largest_product = product\n                largest_product_index = i\n    \n    # Create a list of all selected factors and sort them in descending order\n    selected_factors = [nums1[largest_product_index], nums2[largest_product_index]]\n    selected_factors.sort(reverse=True)\n    \n    # Return the largest product and the selected factors\n    return largest_product, selected_factors"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two parameters and returns the maximum of those two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as an argument and converts it to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    This function sets the left most unset bit of a given number n.\n    \"\"\"\n    # Initialize a variable to keep track of the leftmost unset bit.\n    leftmost_unset = 1\n    \n    # Loop through each bit in n from right to left.\n    for bit in bin(n)[2:]:\n        # If the bit is unset, set the leftmost_unset variable to the current bit.\n        if bit == '0':\n            leftmost_unset = leftmost_unset << 1\n    \n    # Set the leftmost_unset variable to the leftmost bit.\n    leftmost_unset = leftmost_unset << 1\n    \n    # Return the leftmost_unset variable.\n    return leftmost_unset"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 1\n    while bit <= n:\n        if (bit & n) == 0:\n            n = n | bit\n            break\n        bit = bit << 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Iterate through the binary string from right to left\n    for i in range(len(binary_str)):\n        # If the bit at position i is 0, set it to 1 and break out of the loop\n        if binary_str[i] == '0':\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n            break\n\n    # Convert the binary string back to an integer\n    result = int(binary_str, 2)\n\n    # Return the modified number\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize a variable to keep track of the unset bits\n    unset_bits = 0\n\n    # Traverse through each bit in the number and check if it's set to 1\n    for i in range(32):\n        if (n >> i) & 1 == 1:\n            unset_bits |= 1 << i  # Set the i-th bit to 1\n\n    # Set the leftmost unset bit to 1\n    return n | unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit as 1\n    leftmost_unset_bit = 1\n    # Iterate through the bits of the number\n    for bit in bin(n)[2:]:\n        # If the bit is set, move to the next bit\n        if bit == '1':\n            leftmost_unset_bit <<= 1\n        # If the bit is unset, break out of the loop\n        else:\n            break\n    # Set the leftmost unset bit\n    n &= ~(leftmost_unset_bit - 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize the count of unset bits\n    count = 0\n    # Loop through the bits of the integer\n    while n:\n        # Check if the current bit is unset\n        if not n & 1:\n            # If it is, increment the count\n            count += 1\n        # Shift the integer to the right by 1 bit\n        n >>= 1\n    # Set the leftmost unset bit to 1\n    return 1 << count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the index of the leftmost set bit\n    left_most_set_bit = n.bit_length() - 1\n    while n & (1 << left_most_set_bit):\n        left_most_set_bit -= 1\n\n    # Set the left most unset bit to 1\n    n |= 1 << left_most_set_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # check if the leftmost bit is already set\n        n >>= 1 # shift the number to the right by 1\n    return n | (1 << (n.bit_length() - 1)) # set the leftmost unset bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32):\n        if (n & (1 << i)) == 0:\n            n |= (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit in a given integer.\n\n    Parameters:\n    n (int): An integer to set the leftmost unset bit in.\n\n    Returns:\n    int: An integer where the leftmost unset bit has been set to 1.\n    \"\"\"\n    # Initialize the rightmost set bit to 1\n    rightmost_set_bit = 0\n\n    # Initialize the mask to 1\n    mask = 1\n\n    # Iterate through all bits in n\n    while mask & n:\n        # If the current bit is set, increment the rightmost set bit\n        if mask & n:\n            rightmost_set_bit += 1\n\n        # Shift the mask to the right\n        mask = mask << 1\n\n    # Shift the mask to the left by the number of bits to the left of the\n    # rightmost set bit\n    mask = mask << rightmost_set_bit\n\n    # Return n with the leftmost unset bit set to 1\n    return n | mask"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * (r**3 + h**3)\n    return V\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given the radius r and height h.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius of the cone and its height as arguments and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n    \"\"\"\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the volume of the cone using the formula: V = (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize highest power of 2 to be 1\n    highest = 1\n\n    # loop until highest power of 2 is greater than or equal to n\n    while highest <= n:\n\n        # increase highest power of 2 by 1\n        highest <<= 1\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return 2**int(n**0.5)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # loop through powers of 2 and find the highest power of 2 that is less than or equal to n\n    for i in range(1, n+1):\n        if i < (n & -i):\n            return i\n    return None"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        highest_power = 1\n        while n > highest_power:\n            highest_power = highest_power << 1\n        return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n >>= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest = 1\n    while highest * highest <= n:\n        highest *= 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power < n:\n        power <<= 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n as input and returns then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # recursive case\n    prev = 2\n    curr = 1\n    \n    for i in range(2, n+1):\n        next = prev + curr\n        prev = curr\n        curr = next\n    \n    return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number using recursion.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    \n    lucas_numbers = [2, 1]\n    for _ in range(2, n):\n        next_number = lucas_numbers[-1] + lucas_numbers[-2]\n        lucas_numbers.append(next_number)\n    \n    return lucas_numbers[-1]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, element in enumerate(list_):\n        list_[i] = string.format(element)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through each list and append the elements to the dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Loop through the first list and add each element to the nested dictionary as a key with the value as another list\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        \n    # Loop through the second list and add each element to the nested dictionary as a key with the value as another list\n    for i in range(len(l3)):\n        nested_dict[l1[i]].append(l3[i])\n        \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define the nested dictionary\n    nested_dict = {}\n    # Iterate over the input lists and add the elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                key = l1[i] + '_' + l2[j] + '_' + l3[k]\n                value = {\n                    'a': 'apple',\n                    'b': 'banana',\n                    'c': 'cherry',\n                }\n                result[key] = value\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(lists)):\n        for item in lists[i]:\n            if item in nested_dict:\n                nested_dict[item].append(i)\n            else:\n                nested_dict[item] = [i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define a nested dictionary\n    nested_dict = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each item in the list\n        for j in range(len(l1[i])):\n            # If the current item is a list, add it to the nested dictionary\n            if isinstance(l1[i][j], list):\n                if l1[i][j][0] not in nested_dict:\n                    nested_dict[l1[i][j][0]] = {}\n                nested_dict[l1[i][j][0]][l2[i][j]] = l3[i][j]\n            # If the current item is a scalar, add it to the nested dictionary\n            else:\n                if l1[i][j] not in nested_dict:\n                    nested_dict[l1[i][j]] = {}\n                nested_dict[l1[i][j]][l2[i][j]] = l3[i][j]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the final result\n    final_dict = {}\n    # Loop through each list and add each item as a key-value pair to the final_dict\n    for i, items in enumerate([l1, l2, l3]):\n        for item in items:\n            # Add the current item as a key to the final_dict\n            final_dict[item] = []\n            # Add the index of the current item as a value for the current key in the final_dict\n            final_dict[item].append(i)\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(lists)):\n        key = str(i)\n        value = lists[i]\n        result[key] = value\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # if n is 1, return n\n    if n == 1:\n        return n\n\n    # recursive call to get sum of first half of the array\n    first_half_sum = get_max_sum(n//2)\n\n    # recursive call to get sum of second half of the array\n    second_half_sum = get_max_sum(n//2)\n\n    # recursive call to get sum of third quarter of the array\n    third_quarter_sum = get_max_sum(n//4)\n\n    # recursive call to get sum of fourth quarter of the array\n    fourth_quarter_sum = get_max_sum(n//4)\n\n    # recursive call to get sum of fifth quarter of the array\n    fifth_quarter_sum = get_max_sum(n//5)\n\n    # calculate the maximum sum by taking the maximum of the sum of the first half, second half, third quarter, fourth quarter and fifth quarter of the array and adding n to it\n    max_sum = max(first_half_sum, second_half_sum, third_quarter_sum, fourth_quarter_sum, fifth_quarter_sum) + n\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    max_sum = n\n    \n    if n % 2 == 0:\n        max_sum += get_max_sum(n/2)\n    if n % 3 == 0:\n        max_sum += get_max_sum(n/3)\n    if n % 4 == 0:\n        max_sum += get_max_sum(n/4)\n    if n % 5 == 0:\n        max_sum += get_max_sum(n/5)\n        \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize a variable to store the maximum length\n    max_length = 0\n    \n    # loop through the input_list\n    for item in input_list:\n        # check if the length of the item is greater than the maximum length\n        if len(item) > max_length:\n            # if it is, update the maximum length\n            max_length = len(item)\n    \n    # return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n            max_list = num\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Initialize a variable to store the maximum length of the input list\n    max_length = 0\n    \n    # Iterate over each element of the input list\n    for element in input_list:\n        # Check if the length of the element is greater than the current maximum length\n        if len(element) > max_length:\n            # Update the maximum length if the element has a longer length\n            max_length = len(element)\n    \n    # Return the input list with the maximum length\n    return input_list[max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            max_list = [num]\n        elif len(str(num)) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n\n    Parameters:\n    input_list (list): a list of items.\n\n    Returns:\n    list: the list with the maximum length.\n\n    \"\"\"\n    # Initialize the maximum length to 0\n    max_length = 0\n    # Initialize an empty list to store the longest list\n    longest_list = []\n    # Loop through each item in the input list\n    for item in input_list:\n        # Get the length of the current item\n        length = len(str(item))\n        # If the length is greater than the maximum length, update the maximum length and longest list\n        if length > max_length:\n            max_length = length\n            longest_list = [item]\n        # If the length is the same as the maximum length, add the item to the longest list\n        elif length == max_length:\n            longest_list.append(item)\n    # Return the longest list\n    return longest_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = tuple(set(test_tup))\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a dictionary to store unique elements of the tuple\n    unique_dict = {}\n    # Loop through the tuple and add each element to the dictionary\n    for elem in test_tup:\n        unique_dict[elem] = True\n    # Check if all elements in the dictionary are True\n    if True in unique_dict.values():\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    if len(test_tup) == len(unique_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and checks if it contains no duplicates.\n    '''\n    # Create a set to store unique elements of the tuple\n    unique_elements = set(test_tup)\n    # Check if the set is empty, i.e., contains all unique elements\n    return len(unique_elements) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    # check if set is empty, i.e. no duplicates\n    if not test_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    first_non_repeating = ''\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n        if char_count[char] == 1:\n            first_non_repeating = char\n            break\n\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their counts\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character.\n    If all characters are repeating, then the function will return None.\n    \"\"\"\n    char_count = {}  # dictionary to store the count of each character\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through each character in the dictionary and return the first one with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    # Count the frequency of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if len(string)!= 1:\n        return False\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        median = a\n    elif b >= a and b >= c:\n        median = b\n    else:\n        median = c\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Find the median\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and finds their median.\n\n    Args:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Get the length of the sorted array\n    length = len(sorted_numbers)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Get the average of the middle two numbers\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        # Return the middle number if it's odd\n        median = sorted_numbers[length//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \n    Input: a, b, c are the three numbers whose median is to be found.\n    \n    Output: The median of the three numbers.\n    \"\"\"\n    \n    # Sort the three numbers in ascending order\n    a = sorted([a,b,c])[1]\n    b = sorted([a,b,c])[1]\n    c = sorted([a,b,c])[1]\n    \n    # If the three numbers are in decreasing order, reverse them\n    if a >= b and a >= c:\n        a, b, c = c, b, a\n    elif b >= a and b >= c:\n        a, b, c = c, a, b\n    else:\n        a, b, c = b, c, a\n        \n    # Calculate the median\n    median = (a + b + c) / 3\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = [a, b, c]\n    sorted_numbers.sort()\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        return sorted_numbers[len(sorted_numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the indices of the middle numbers\n    mid_a = len(numbers) // 2\n    mid_b = (len(numbers) // 2) - 1\n    mid_c = (len(numbers) // 2)\n\n    # Calculate the median\n    if (len(numbers) % 2 == 0):\n        median = (numbers[mid_a] + numbers[mid_b]) / 2\n    else:\n        median = numbers[mid_a]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a,b,c])\n    \n    # Find the middle number\n    middle = len(numbers) // 2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(numbers) % 2 == 1:\n        median = numbers[middle]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (numbers[middle-1] + numbers[middle]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = sorted([a, b, c])\n    middle = len(sorted_list) // 2\n\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[middle - 1] + sorted_list[middle]) / 2\n    else:\n        return sorted_list[middle]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        if type(num) == int:\n            result += sum(int(digit) for digit in str(num))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        sum_of_digits_list.append(sum_of_digits)\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(int(digit) for digit in str(num))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        # Convert the string to a list of integers\n        num_list = list(num_str)\n        # Loop through each integer in the list of integers\n        for digit in num_list:\n            # Add the integer to the running total of digits\n            total_sum += digit\n    \n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total += digits_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result.append(sum(digits))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list and compute its sum of digits\n    digit_sum = 0\n    for num in nums:\n        # Convert the number to a string and split it into its individual digits\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of digits in the number\n        digit_sum += sum(digits)\n    # Return the sum of digits\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result += digit_sum\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a result tuple with the same length as the first input tuple\n    result_tup = tuple(0 for _ in range(len(test_tup1)))\n\n    # Iterate over the tuples and perform the bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have equal lengths.\")\n        return\n    \n    # initialize the result tuple with the first element of each tuple\n    result_tup = (test_tup1[0], )\n    \n    # iterate over the tuple elements and perform bitwise xor\n    for i in range(1, len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    return len(Counter(test_list))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # convert the list into a set to remove duplicates\n    unique_tuples = set(test_list)\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should have the same number of elements.\")\n        return\n    # adding tuple elements index wise\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= tuple:\n            if type(test_tup2[i])!= tuple:\n                print(\"Both input tuples should have all the elements as tuple.\")\n                return\n            else:\n                for j in range(len(test_tup2[i])):\n                    test_tup1[i] += test_tup2[i][j]\n        else:\n            for j in range(len(test_tup1[i])):\n                if type(test_tup2[i][j])!= tuple:\n                    test_tup1[i][j] += test_tup2[i][j]\n                else:\n                    for k in range(len(test_tup1[i][j])):\n                        test_tup1[i][j][k] += test_tup2[i][j][k]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Initialize the result tuple with the length of the first tuple\n    result = [0] * len(test_tup1)\n    \n    # Perform index wise addition of tuple elements\n    for i in range(len(test_tup1)):\n        # Check if the tuple elements are numeric\n        if isinstance(test_tup1[i], (int, float)) and isinstance(test_tup2[i], (int, float)):\n            result[i] = test_tup1[i] + test_tup2[i]\n        else:\n            print(\"Both elements of the tuple must be numeric.\")\n            return\n    \n    # Return the result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # creating an empty list to store the resultant tuple\n    result = []\n    # iterating through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # initializing a variable to hold the value of the current element\n        current_sum = 0\n        # iterating through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # adding the values of the elements of the first and second tuple\n            current_sum += test_tup1[i][j] + test_tup2[i][j]\n        # appending the value of the current element to the result list\n        result.append(current_sum)\n    # returning the resultant tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        elif isinstance(test_tup1[i], tuple):\n            result_tup += (test_tup2[i],)\n        elif isinstance(test_tup2[i], tuple):\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the first tuple\n    for i in range(len(test_tup1)):\n        # append the sum of corresponding elements of the two tuples\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Use the zip function to create a new tuple with elements from both tuples\n    combined_tup = zip(test_tup1, test_tup2)\n    # Use list comprehension to perform index wise addition of elements\n    result_tup = [a + b for a, b in combined_tup]\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total_sum = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            total_sum.append(test_tup1[i][j] + test_tup2[i][j])\n    return total_sum"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples should have same length.\")\n        return\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    Function to check whether an element exists within a tuple.\n\n    Parameters:\n        tuplex (tuple): The tuple that we are searching for an element in.\n        tuple1 (tuple): The tuple that we are searching for an element in.\n\n    Returns:\n        bool: Returns True if the element exists in the first tuple, False otherwise.\n\n    Example:\n        >>> tuplex = (1, 2, 3)\n        >>> tuple1 = (1, 2, 3, 4, 5)\n        >>> check_tuplex(tuplex, tuple1)\n        True\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1) == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f\"{x} is even\")\n    else:\n        print(f\"{x} is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    #Check if the input is an integer\n    if type(x)!= int:\n        return \"Please enter an integer.\"\n    #Calculate the parity of the number\n    if x % 2 == 0:\n        return \"Even number.\"\n    else:\n        return \"Odd number.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # Check whether the number is even or odd\n    if x % 2 == 0:\n        # If the number is even, return odd\n        return \"The number is even and the parity is odd.\"\n    else:\n        # If the number is odd, return even\n        return \"The number is odd and the parity is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return \"The parity of the given number is odd\"\n    else:\n        return \"The parity of the given number is even\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:  # if the number is even\n        print(x, 'is even.')\n    else:  # if the number is odd\n        print(x, 'is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if the number is even\n        return \"The number is even.\"\n    else: # if the number is odd\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n\n    # create a new list with the digits in reverse order\n    digits_reverse = list(num_str[::-1])\n\n    # convert the list back to a string and remove any leading zeros\n    digits_str = \"\".join([str(d) for d in digits_reverse if d!= '0'])\n\n    # calculate the next number by appending the digits of the previous number in reverse order\n    next_num = int(digits_str + str(int(num_str[0])))\n\n    return next_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits of n\n    digits = [int(digit) for digit in str(n)]\n    # find the index of the smallest digit\n    smallest_index = digits.index(min(digits))\n    # create a list of all possible permutations of digits (except for the smallest digit)\n    permutations = []\n    for digit in digits:\n        if digit!= digits[smallest_index]:\n            temp = list(digits)\n            temp[smallest_index], temp[digits.index(digit)] = temp[digits.index(digit)], temp[smallest_index]\n            permutations.append(temp)\n    # find the permutation that results in the next bigger number\n    for permutation in permutations:\n        if int(''.join(map(str, permutation))) > n:\n            return ''.join(map(str, permutation))\n    # if no such permutation exists, return n itself\n    return str(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Sort the list in descending order\n    num_list.sort(reverse=True)\n    # Convert the sorted list back to a string and add a '1'\n    next_bigger_num = ''.join(num_list) + '1'\n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    # initialize a list of digits representing the input number\n    digits = [int(d) for d in str(n)]\n    # reverse the order of the digits\n    digits.reverse()\n    # initialize the result variable to store the rearranged number\n    result = 0\n    # loop over the digits and add them to the result in reverse order\n    for d in digits:\n        result += d * 10**(len(digits)-1)\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    def reverse(num):\n        '''\n        Reverse the digits of a given number.\n        '''\n        return int(str(num)[::-1])\n\n    def digits_to_int(digits):\n        '''\n        Convert the digits to an integer.\n        '''\n        return int(''.join(str(d) for d in digits))\n\n    def find_next_bigger(num):\n        '''\n        Find the next bigger number by rearranging the digits.\n        '''\n        num = reverse(num)\n        digits = list(str(num))\n        for i in range(len(digits)):\n            for j in range(i + 1, len(digits)):\n                if digits_to_int(digits[:i] + digits[i] + digits[j] + digits[i + 1] + digits[j + 1:]) > num:\n                    return digits_to_int(digits[:i] + digits[i] + digits[j] + digits[i + 1] + digits[j + 1:])\n        return num\n\n    return find_next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Reverse the order of the digits\n    digits.reverse()\n    # Loop through the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # If the digit is greater than 9, change it to 0 and increment by 1\n        if int(digits[i]) > 9:\n            digits[i] = '0'\n            digits[i+1] = str(int(digits[i+1])+1)\n            # Exit the loop as we've found the next bigger number\n            break\n    # Convert the list of digits back to an integer\n    result = int(''.join(digits))\n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for d in digits:\n        next_bigger = (next_bigger * 10) + d + 1\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    number = str(n)\n    \n    # Iterate through each character in the string\n    for i in range(len(number)):\n        # Check if the current character is a digit\n        if number[i].isdigit():\n            # Convert the current character to an integer\n            digit = int(number[i])\n            \n            # Check if the digit is greater than 9\n            if digit > 9:\n                # Find the position of the digit in the string\n                digit_position = number.find(str(digit))\n                \n                # If the digit is in the first position, move it to the end\n                if digit_position == 0:\n                    continue\n                # If the digit is in the last position, move it to the beginning\n                elif digit_position == len(number) - 1:\n                    number = number[:digit_position] + number[digit_position+1:]\n                # Otherwise, move it to its previous position\n                else:\n                    # Get the previous character to the left of the digit\n                    previous_char = number[digit_position - 1]\n                    # Get the next character to the right of the digit\n                    next_char = number[digit_position + 1]\n                    # Replace the digit with the previous character\n                    number = number[:digit_position] + str(previous_char) + str(digit) + str(next_char) + number[digit_position + 2:]\n                    \n    # Convert the string back to an integer and return it\n    return int(number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = list(str(n))\n    # Reverse the list of digits\n    digits.reverse()\n    # Initialize the next bigger number to None\n    next_bigger = None\n    # Loop through the digits in reverse order\n    for digit in digits:\n        # If the digit is 9, add 1 to the next bigger number and reset it to 0 if it becomes 10\n        if digit == '9':\n            next_bigger = next_bigger + 1 if next_bigger is not None else 10\n            next_bigger = 0 if next_bigger == 10 else next_bigger\n        # If the digit is less than 9, add 1 to it and reset it to 0 if it becomes 10\n        else:\n            next_bigger = next_bigger + 1 if next_bigger is not None else 10\n            next_bigger = 0 if next_bigger == 10 else next_bigger\n    # Convert the next bigger number to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def rearrange_digits(num):\n        '''\n        Helper function to rearrange the digits of a number.\n        '''\n        digits = [int(d) for d in str(num)]\n        digits.sort(reverse=True)\n        return int(''.join(map(str, digits)))\n    \n    next_bigger = rearrange_digits(n)\n    if next_bigger > n:\n        return rearrange_bigger(next_bigger)\n    else:\n        return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    for num in nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, num1)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    while len(heap) > 1:\n        num1 = heapq.heappop(heap)\n        num2 = heapq.heappop(heap)\n        if num2 < num1:\n            heapq.heappush(heap, num1)\n        else:\n            heapq.heappush(heap, num2)\n    return heapq.heappop(heap)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Create a heap with the elements from the first list\n    min_heap = []\n    for num in nums1_set:\n        heapq.heappush(min_heap, -num)\n\n    # Initialize the answer set\n    answer = set()\n\n    # Iterate over the second list to find k smallest pairs\n    for num in nums2_set:\n        # Remove the number from the heap if it is greater than num\n        while min_heap and min_heap[0] > -num:\n            heapq.heappop(min_heap)\n\n        # If the heap is not empty and the size of the answer set is less than k, add the pair to the answer set\n        if min_heap and len(answer) < k:\n            answer.add((min_heap[0], -num))\n\n        # Add the number to the heap\n        heapq.heappush(min_heap, -num)\n\n    return list(answer)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes in two arrays of numbers and an integer k as arguments.\n    It returns a list of tuples, where each tuple contains two elements from the first array and one element from the second array.\n    The elements from the first array are sorted in non-decreasing order, and the elements from the second array are sorted in non-decreasing order.\n    The function uses a min heap to keep track of the smallest k pairs found so far.\n    '''\n    # Sort the first array in non-decreasing order\n    nums1.sort()\n\n    # Initialize a min heap of size k\n    min_heap = []\n\n    # Initialize a variable to keep track of the number of pairs found\n    count = 0\n\n    # Loop through the second array and add each element to the min heap\n    for num2 in nums2:\n        heapq.heappush(min_heap, num2)\n\n        # If the size of the heap is equal to k, increment the count and pop the smallest element from the heap\n        if len(min_heap) == k:\n            count += 1\n            heapq.heappop(min_heap)\n\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store pairs\n    pairs = []\n    \n    # Iterate over both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Add the current pair to the min heap if its sum is less than or equal to k\n            if nums1[i] + nums2[j] <= k:\n                heapq.heappush(pairs, (nums1[i] + nums2[j], (i, j)))\n                \n            # If the heap size is greater than or equal to k, pop the pair with the smallest sum from the heap\n            while len(pairs) > k:\n                heapq.heappop(pairs)\n    \n    # Convert the pairs back into a list of tuples\n    result = []\n    while pairs:\n        result.append(pairs[0])\n        heapq.heappop(pairs)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1+num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        _, (num1, num2) = heapq.heappop(heap)\n        result.append((num1, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (-num1-num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    \n    result = []\n    while heap:\n        score, pair = heapq.heappop(heap)\n        result.append(pair)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Initialize a min heap to store the smallest k elements\n    min_heap = []\n    \n    # Loop through both arrays and add the smallest element to the heap\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n            elif num1+num2 < min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n                \n    # Extract the k smallest elements and return them in a list\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a priority queue of size k to store the smallest pairs\n    min_heap = []\n\n    # Iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Calculate the sum of the current elements\n            current_sum = num1 + num2\n\n            # If the sum is greater than or equal to the current smallest sum in the priority queue,\n            # or if the current smallest sum in the priority queue is None, add the current pair to the heap\n            if current_sum >= len(min_heap) * -min_heap[0][0] or len(min_heap) == 0:\n                heapq.heappush(min_heap, (current_sum, (num1, num2)))\n\n            # If the priority queue has more than k elements, remove the smallest element from it\n            elif len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n            # If the current smallest sum in the priority queue is equal to the sum of the current pair,\n            # remove the pair with the smaller element from the priority queue and add the current pair to it\n            else:\n                smallest_pair = heapq.heappop(min_heap)\n                if smallest_pair[0] == current_sum:\n                    heapq.heappush(min_heap, (current_sum, (num1, num2)))\n\n    # Return the k smallest pairs\n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(min_heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the array in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # create a min heap of size k\n    min_heap = []\n\n    # iterate over the array\n    for i in range(len(nums1)):\n        # get the second element from the first element\n        second_element = nums2[i]\n\n        # if the heap size is less than k, then add both the elements to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-second_element, (nums1[i], nums2[i])))\n\n        # else, if the heap size is greater than or equal to k, then we need to compare the second element with the smallest element in the heap.\n        else:\n            # if the second element is greater than or equal to the smallest element in the heap, then we need to pop the heap and add the current element to the heap\n            if second_element >= -heapq.heappop(min_heap)[0]:\n                heapq.heappush(min_heap, (-second_element, (nums1[i], nums2[i])))\n\n    # extract the k smallest pairs from the heap\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap)[1])\n\n    # return the result\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    # Sort the list of pairs of tuples based on the product of the tuples\n    list1.sort(key=lambda x: x[0] * x[1])\n    \n    # Initialize the minimum product to be the product of the first tuple\n    min_product = list1[0][0] * list1[0][1]\n    \n    # Loop through the sorted list of pairs of tuples and update the minimum product\n    for i in range(1, len(list1)):\n        if list1[i][0] * list1[i][1] < min_product:\n            min_product = list1[i][0] * list1[i][1]\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a function to calculate the product of two tuples\n    def product_of_tuples(tuple1, tuple2):\n        return tuple1[0] * tuple2[1] - tuple1[1] * tuple2[0]\n\n    # Define a variable to store the minimum product found\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it is less than the current minimum product\n            product = product_of_tuples(list1[i], list1[j])\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum and maximum values\n    min_val = list1[0][0]\n    max_val = list1[0][0]\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Get the values of the current tuple\n        num1 = list1[i][0]\n        num2 = list1[i][1]\n        \n        # Update the minimum and maximum values\n        if num1 < min_val:\n            min_val = num1\n        if num2 < min_val:\n            min_val = num2\n        if num1 > max_val:\n            max_val = num1\n        if num2 > max_val:\n            max_val = num2\n    \n    # Calculate the minimum product\n    min_product = min_val * max_val\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product of two tuples in a list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    if len(list1) == 0:\n        return 0\n\n    min_product = float('inf')\n    temp = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp = [list1[i][0] * list1[j][1], list1[i][1] * list1[j][0]]\n            if min(temp) < min_product:\n                min_product = min(temp)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [(x[0], x[1]) for x in list1]\n    list3 = [(x[0], x[2]) for x in list1]\n    list4 = [(x[1], x[2]) for x in list1]\n    list5 = [(x[0], x[1], x[2]) for x in list1]\n    list6 = [(x[1], x[2], x[0]) for x in list1]\n    list7 = [(x[0], x[1], x[2], x[3]) for x in list1]\n\n    # find the minimum product of each tuple\n    minimum_product = min(min(list2) * min(list3) * min(list4) * min(list5),\n                          min(list6) * min(list7))\n\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        print(\"List should have an even number of elements\")\n        return\n    \n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n            \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product.append(list1[i][0]*list1[j][1])\n    min_value = min(product)\n    return min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0]*list1[j][1]\n            if pair_product < min_product:\n                min_product = pair_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize two variables to store the minimum product and the current product\n    min_product = float('inf')\n    current_product = 1\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the current product of the two tuples\n            current_product = list1[i][0] * list1[j][1]\n            \n            # Check if the current product is smaller than the minimum product\n            if current_product < min_product:\n                min_product = current_product\n                \n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    minval = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval)\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        print(\"Error: List is empty.\")\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf') # initialize minimum value to positive infinity\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = min(listval)\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n\n    # Loop through the list starting from the second element\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the current minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value to be the current element\n            min_val = listval[i]\n\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]  # initialize min value as the first element of the list\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min_val with the first value in the list\n    min_val = listval[0]\n    \n    # Loop through the list and compare each value to min_val\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all words to lowercase\n    word = word.lower()\n    # Replace underscores with spaces\n    word = re.sub('_','', word)\n    # Split the word into words and capitalize the first letter of each word\n    camel_case = ''.join([word[0].upper() + word[1:].lower() for word in word.split()])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r\"(?<!^)(?=[A-Z])\"\n    return re.sub(pattern, lambda m: \"_\" + m.group(0).lower(), word).title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n\n    # Replace all underscores with spaces\n    word = re.sub(r'(?<!^)(?=[A-Z])','', word).strip()\n\n    # Convert first letter to uppercase and rest to lowercase\n    return word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all words to lowercase\n    word = word.lower()\n    # remove underscores from words\n    word = re.sub('_', '', word)\n    # capitalize the first letter of each word\n    camel_word = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.upper()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Convert the word to camel case by converting the first letter to lowercase and the rest to uppercase\n    camel_case_word = word.title()\n\n    # Remove the underscores from the camel case word\n    camel_case_word = re.sub('_', '', camel_case_word)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first letter of each word to uppercase and join them back together\n    camel_case_word = words[0].capitalize() + ''.join([word.capitalize() for word in words[1:]])\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.?)')\n    return pattern.sub(lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Define the regular expression pattern for snake case to convert it to camel case\n    pattern = re.compile(r'_(.)')\n    # Split the word into individual words using the regular expression pattern\n    words = pattern.split(word)\n    # Convert the first word to lowercase and join the words back together using camel case\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','') # Replace underscores with spaces\n    words = word.split() # Split the string into words\n    camel_words = [word.capitalize() for word in words] # Capitalize the first letter of each word\n    return ''.join(camel_words) # Join the words into a string and return it"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:  # if the number is even, add it to the new list\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    :param lst: list of tuples\n    :param n: index of the element to extract\n    :return: the nth element from the list\n    \"\"\"\n    if len(lst) < n:\n        raise ValueError(\"List has less than n elements\")\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the input is valid\n    if len(list1) == 0:\n        raise ValueError(\"The input list is empty\")\n    elif n > len(list1):\n        raise ValueError(f\"The index {n} is greater than the length of the list\")\n    \n    # Extract the nth element from the list\n    if isinstance(list1[0], tuple):\n        return list1[n-1]\n    else:\n        return list1[n-1][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        print(\"The input must be a list!\")\n        return None\n    \n    if type(n)!= int:\n        print(\"The input must be an integer!\")\n        return None\n    \n    if n > len(list1):\n        print(\"The index is out of range!\")\n        return None\n    \n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i][1]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # Check if n is a positive integer\n        if not isinstance(n, int) or n < 1:\n            raise ValueError\n        # Check if the list contains at least n elements\n        if len(list1) < n:\n            raise ValueError\n        # Extract the nth element from the list of tuples\n        return list1[n-1]\n    except ValueError:\n        # If any value error occurs, print a message\n        print(\"Invalid input. Please provide a positive integer for n.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n    list1 (list of tuples): The list of tuples from which we want to extract an element.\n    n (int): The index of the element we want to extract.\n\n    Returns:\n    The nth element from the list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input and returns the nth element of the list.\n    \"\"\"\n    if isinstance(list1, list) and isinstance(n, int) and 1 <= n <= len(list1):\n        return list1[n-1]\n    else:\n        raise ValueError(\"Invalid input\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1: list\n    list2: list\n\n    Returns:\n    bool: True if any value in list1 exists in list2, False otherwise.\n\n    '''\n\n    for value in list1:\n        if value in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(i in list1 for i in list2) or any(i in list2 for i in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # converting both list to sets for faster search\n    list1 = set(list1)  \n    list2 = set(list2)\n\n    # iterating over both sets and checking if any element is in common\n    for element in list1:\n        if element in list2:\n            return True\n\n    # if no element is in common, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list, else it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            print(f\"{i} exists in both lists.\")\n            return True\n    print(f\"No value in {list1} exists in {list2}.\")\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: a sequence of elements to check for overlap\n    :type list1: list\n    :param list2: a sequence of elements to check for overlap\n    :type list2: list\n    :return: True if there is an overlapping value, False otherwise\n    :rtype: bool\n    \"\"\"\n    # convert the lists to sets to have constant time lookups\n    list1_set = set(list1)\n    list2_set = set(list2)\n    # iterate over the list2_set and check if it is a subset of list1_set\n    for elem in list2_set:\n        if elem in list1_set:\n            return True\n    # if we get here, no overlapping value was found\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value in the first list exists in the second list, and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            print(item, \"exists in both lists\")"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair \n    with the highest product from the array.\n    '''\n    \n    # Initialize variables to store the maximum product and the maximum subarray\n    max_product = float('-inf')\n    current_product = float('-inf')\n    \n    # Loop through the array and find the maximum product and subarray\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    \n    return (arr[arr.index(max_product)], arr[arr.index(current_product)])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    if max1 * max2 > min1 * min2:\n        print(\"({}, {})\".format(max1, max2))\n    else:\n        print(\"({}, {})\".format(min1, min2))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum product and the pair\n    max_product = arr[0] * arr[1]\n    pair = (arr[0], arr[1])\n\n    # Check if the second element is greater than the first element\n    if arr[1] > max_product:\n        max_product = arr[1]\n        pair = (arr[0], arr[1])\n\n    # Check if the third element is greater than the second element\n    if arr[2] > max_product:\n        max_product = arr[2]\n        pair = (arr[0], arr[1])\n\n    # Return the pair and its maximum product\n    return pair, max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple with the pair of integers that have the highest product.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            \n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    min_product = float('inf')\n    min_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n            if arr[i] * arr[j] < min_product:\n                min_product = arr[i] * arr[j]\n                min_pair = (arr[i], arr[j])\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    This function takes in an array of integers and returns the pair of integers that have the highest product.\n    '''\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max1:\n                max2 = max1\n                max1 = arr[i]*arr[j]\n            elif arr[i]*arr[j] > max2:\n                max2 = arr[i]*arr[j]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max1 = 0\n    max2 = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    max1 = arr[i]\n                    max2 = arr[j]\n    print(\"The pair with highest product is:\", max1, \"and\", max2, \"with a total product of\", max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = (-float('inf'), -float('inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_pair[0]*max_pair[1]:\n                max_pair = (arr[i]*arr[j], arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a pair with the highest product.\n    '''\n    max1 = max2 = float('-inf') # initialize max1 and max2 as negative infinity\n    max_pair = (float('-inf'), float('-inf')) # initialize max_pair as negative infinity\n    \n    for num in arr: \n        # check if current number is greater than max1\n        if num > max1: \n            # if yes, update max1 and max2\n            max2 = max1\n            max1 = num\n        elif num > max2: \n            # if no, update only max2\n            max2 = num\n        # check if current product is greater than max_pair\n        if max1 * max2 > max_pair[0] * max_pair[1]: \n            # if yes, update max_pair\n            max_pair = (max1 * max2, num)\n    \n    # return the max_pair\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and finds the common first element in each tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(set(i[0])) == 1:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of groups.\n    A group is a tuple of tuples where the first element of the tuples are equal.\n    '''\n    result = []\n    # Iterate over all pairs of tuples in the input list\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            # Check if the first elements of the tuples are equal\n            if Input[i][0] == Input[j][0]:\n                # If they are, create a new group and add the tuples to it\n                group = [Input[i], Input[j]]\n                # If the group already exists in the result list, add the tuples to it\n                if group in result:\n                    result[result.index(group)].extend([Input[i], Input[j]])\n                else:\n                    result.append(group)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of lists where each inner list contains a tuple of common elements for each tuple in the input list.\n    '''\n    # Initialize an empty list to hold the common elements\n    common_elements = []\n\n    # Iterate over the input list of tuples\n    for t in Input:\n        # Initialize an empty list to hold the common elements for this tuple\n        tuple_common_elements = []\n\n        # Iterate over the other elements of this tuple\n        for e in t:\n            # If the current element is in the common_elements list, add it to the tuple_common_elements list\n            if e in common_elements:\n                tuple_common_elements.append(e)\n\n        # If the tuple_common_elements list is not empty, append it to the common_elements list\n        if tuple_common_elements:\n            common_elements.append(tuple_common_elements)\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if common_element is None:\n            common_element = Input[i][0]\n        elif common_element!= Input[i][0]:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary \n    where the keys are the unique elements from the first element of the \n    tuples and the values are lists of tuples where the first element is \n    the common first element.\n    '''\n\n    # Create an empty dictionary to store the common elements and their\n    # corresponding tuples\n    common_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in Input:\n\n        # Get the first element of the tuple\n        first_elem = tup[0]\n\n        # Check if the first element is already in the common_dict\n        if first_elem in common_dict:\n\n            # If it is, append the tuple to the list of tuples associated\n            # with that first element\n            common_dict[first_elem].append(tup)\n\n        # If the first element is not already in the common_dict, create a\n        # new list to store the tuples with that first element\n        else:\n            common_dict[first_elem] = [tup]\n\n    # Return the dictionary of common elements and their corresponding tuples\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if tup[0]!= common_element:\n            common_element = tup[0]\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common.append(i)\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Find common first element in given list of tuple.\n    \"\"\"\n\n    # Check if Input is a list of tuples\n    if not isinstance(Input, list) or not all(isinstance(t, tuple) for t in Input):\n        raise ValueError(\"Input should be a list of tuples\")\n\n    # Initialize an empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate over the list of tuples\n    for t in Input:\n        # Get the first element of the tuple\n        first_element = t[0]\n\n        # If the first element is not in the dictionary, add it with a count of 1\n        if first_element not in common_elements:\n            common_elements[first_element] = 1\n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            common_elements[first_element] += 1\n\n    # Find the common elements with the smallest count\n    min_common_elements = min(common_elements.values(), key=lambda x: x)\n\n    # Find the first element with the smallest count in the dictionary\n    min_element = min(common_elements, key=lambda x: common_elements[x])\n\n    # Return the common elements with the smallest count\n    return (min_element, min_common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary\n    result = {}\n\n    # Loop through the input list of tuples\n    for tup in Input:\n\n        # Get the first element of the tuple\n        elem = tup[0]\n\n        # If the first element is not in the dictionary, add it as a new key\n        if elem not in result:\n            result[elem] = []\n\n        # Add the tuple to the corresponding key in the dictionary\n        result[elem].append(tup)\n\n    # Loop through the dictionary to find common first elements\n    common_elems = []\n    for key in result:\n        if len(result[key]) > 1:\n            common_elems.append(key)\n\n    # Return the list of common first elements\n    return common_elems"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary\n    common_element = {}\n    # iterate through the input list of tuples\n    for tup in Input:\n        # extract the first element from the tuple\n        first = tup[0]\n        # check if the first element is already in the dictionary\n        if first in common_element:\n            # if it is, then increment the count of the tuple\n            common_element[first] += 1\n        else:\n            # if it is not, then add the tuple to the dictionary\n            common_element[first] = 1\n    # create a list of tuples with common elements\n    result = []\n    for key, value in common_element.items():\n        if value == len(Input):\n            result.append((key, value))\n    # sort the list of tuples by the count of the elements\n    result.sort(key=lambda x: x[1])\n    # return the list of tuples with common elements\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # Loop through the list and find the element with the maximum length\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    # Return the element with the maximum length\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list as input and returns the element of the list that has the maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_length = 0\n    # Initialize a variable to store the element of the list with maximum length\n    max_element = None\n    # Iterate over each element of the list\n    for element in lst:\n        # Check if the length of the current element is greater than the maximum length\n        if len(element) > max_length:\n            # If yes, update the maximum length and the element of the list\n            max_length = len(element)\n            max_element = element\n    # Return the maximum element of the list\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # initialize the total sum to 0\n    total_sum = 0\n    # loop through each number in the list\n    for num in list1:\n        # round the number to 2 decimal places using the round() function\n        rounded_num = round(num, 2)\n        # add the rounded number to the total sum\n        total_sum += rounded_num\n    # multiply the total sum by the length of the list and print the result\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    result = total_sum * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    print(sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round every number in the list\n    list1 = [round(x) for x in list1]\n\n    # Calculate the total sum\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 2\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        cube = i**3\n        sum += cube\n        i += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n\n    while i < n:\n        sum += i ** 3\n        i += 1\n\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    This function finds the cube sum of the first n even natural numbers.\n    '''\n    # initialize a variable to store the cube sum\n    cube_sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the cube of the current number to the cube sum\n        cube_sum += i**3\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_cubes += i ** 3\n    return sum_of_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i*i for i in range(2, n+1, 2)]\n    cube_sum = sum(even_numbers)\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Join the elements of the tuple by a space\n    concat_str =''.join(map(str, test_tup))\n    return concat_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): A tuple to be concatenated.\n\n    Keyword Args:\n    delimiter (str): The delimiter to be used for concatenating the elements.\n\n    Returns:\n    str: The concatenated string.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += item + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(x) for x in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / (n ** 3)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # Iterate through the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initializing a variable to store the sum of cubes\n    sum_cubes = 0\n    \n    # iterating through first n natural numbers\n    for i in range(1, n+1):\n        # calculating the cube of the current number\n        cube = i ** 3\n        # adding the cube to the sum of cubes\n        sum_cubes += cube\n        \n    # calculating the average of cubes\n    average = sum_cubes / n\n    \n    # returning the average of cubes\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n\n    return sum_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    # initialize variables\n    sum_of_cubes = 0\n    count = 0\n\n    # loop through the natural numbers starting from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of i and add it to the sum\n        sum_of_cubes += i**3\n        # increment the count\n        count += 1\n\n    # calculate the average of cubes and return it\n    if count == 0:\n        return 0\n    else:\n        return sum_of_cubes/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    return total_sum/n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in test_tuple:\n        rear_index = i[-1]\n        rear_index_list.append(rear_index)\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[-1] for s in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_indices.append(i)\n        else:\n            rear_indices.append(i+1)\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        if i in rear_indices:\n            rear_elements.append(string[i])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_index = len(string) - 1\n        rear_indices.append(rear_index)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j == x:\n                    count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in list1:\n        if isinstance(i, list):\n            count += count_element_in_list(i, x)\n        elif i == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n            \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list of odd numbers.\n    \"\"\"\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the input string\n    match = re.match(pattern, dt)\n    # Check if the match was successful\n    if match:\n        # Extract the groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Convert the date in yyyy-mm-dd format to dd-mm-yyyy format\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert yyyy-mm-dd format to dd-mm-yyyy format\n    yyyy_mm_dd = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dd_mm_yyyy = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    pattern = re.compile(yyyy_mm_dd)\n    matches = pattern.findall(dt)\n    if len(matches) == 1:\n        match = matches[0]\n        return f'{match[2]}-{match[1]}-{match[0]}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    # regex to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use regex to match the date and extract the year, month, and day\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # construct the new date format string\n        new_format = '%d-%m-%Y'\n        new_dt = datetime.datetime.strptime(dt, new_format).strftime(new_format)\n\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match date format in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input string matches the pattern\n    if not re.match(pattern, dt):\n        raise ValueError(\"Invalid date format\")\n\n    # Split the input string to get the day, month, and year\n    year, month, day = dt.split('-')\n\n    # Convert the date to dd-mm-yyyy format\n    return '-'.join([day, month, year])"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Split the date into year, month, and day\n    date_parts = re.split('-', dt)\n\n    # Reverse the order of the parts to get day, month, and year\n    reversed_parts = date_parts[::-1]\n\n    # Join the reversed parts to get the desired date format\n    new_dt = '-'.join(reversed_parts)\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern with the given date string\n    match = re.match(pattern, dt)\n    # if the match object is not None, extract the components of the date\n    if match:\n        year, month, day = match.groups()\n        # convert the year, month, and day components to the desired format\n        new_date = f'{day}-{month}-{year}'\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    matches = re.match(pattern, dt)\n    if matches:\n        year, month, day = matches.groups()\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_format = dt.strftime(\"%d-%m-%Y\")\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of pattern in dt\n    matches = re.findall(pattern, dt)\n\n    # Convert each match to dd-mm-yyyy format\n    new_dt = [f'{matches[i][2]}-{matches[i][1]}-{matches[i][0]}' for i in range(len(matches))]\n\n    # Join the new date strings with a comma and space separator\n    new_dt_str = ','.join(new_dt)\n\n    return new_dt_str"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    n = len(my_list)\n\n    # The gap sequence is a simple way to determine an optimal gap size.\n    gap = n // 2\n\n    while gap > 0:\n        # The insertion sort algorithm is used in each iteration to sort a gap size elements.\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Define the increment sequence for shell sort\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        # Insertion sort for the current gap size\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Set gap value as the length of the array divided by 2\n    gap = len(my_list) // 2\n\n    # While gap is greater than 0\n    while gap > 0:\n        # For each gap value\n        for i in range(gap, len(my_list)):\n            # Set temp value as current element\n            temp = my_list[i]\n\n            # Compare with elements before and after the gap\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                # Shift the elements before the gap to the right\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            # Place the current element at the correct position\n            my_list[j] = temp\n\n        # Decrease the gap value by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    test_tup1 (tuple): First tuple of elements to be processed.\n    test_tup2 (tuple): Second tuple of elements to be processed.\n\n    Returns:\n    tuple: A tuple containing the elementwise and tuples from the given two tuples.\n    \"\"\"\n\n    # Initialize an empty list to store the elementwise and tuples from the given two tuples\n    and_tups = []\n\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the element at index i from the first tuple\n        elem1 = test_tup1[i]\n        # Extract the element at index i from the second tuple\n        elem2 = test_tup2[i]\n        # Extract the elementwise and tuple from the two elements\n        and_tup = (elem1 & elem2)\n        # Append the and_tup to the and_tups list\n        and_tups.append(and_tup)\n\n    # Return the and_tups list as a tuple\n    return tuple(and_tups)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each element in the first tuple\n    for i in test_tup1:\n        # Iterate through each element in the second tuple\n        for j in test_tup2:\n            # Append the element-wise and of the two elements to the result list\n            result.append(i & j)\n    # Return the result list as the elementwise and of the two input tuples\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Loop through each element of the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Perform elementwise and\n        elem_and = elem1 & elem2\n\n        # Append the result to the result tuple\n        result_tup += (elem_and,)\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the given tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should be of equal length.\"\n    \n    # Extract the elementwise and tuples\n    and_tup = tuple(i & j for i,j in zip(test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    # Extract the elementwise and tuples from the two tuples\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(*[tuple(a) for a in [test_tup1, test_tup2]]))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is positive, then the directrix exists\n    if discriminant > 0:\n        # Calculate the first root\n        first_root = (-b + discriminant**0.5)/(2*a)\n        \n        # Calculate the second root\n        second_root = (-b - discriminant**0.5)/(2*a)\n        \n        # Print the roots\n        print(\"First root:\", first_root)\n        print(\"Second root:\", second_root)\n        \n    # If the discriminant is negative, then there are no real roots\n    elif discriminant < 0:\n        print(\"There are no real roots.\")\n        \n    # If the discriminant is zero, then there are two distinct real roots\n    else:\n        # Calculate the two roots\n        root = -b/(2*a)\n        \n        # Print the root\n        print(\"There is only one real root:\", root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    print(\"The directrix of the parabola is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        return \"The given equation is not a valid parabola.\"\n    \n    # Calculate the roots of the discriminant\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n    # Check if the roots are real and in ascending order\n    if root1.is_integer() and root2.is_integer() and root1 < root2:\n        return \"The directrix of the parabola is {:.2f}\".format(root1)\n    else:\n        return \"The directrix of the parabola is not a real number.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in three parameters, 'a', 'b', and 'c', representing the coefficients of the parabola.\n    It then calculates and returns the directrix of the parabola. The directrix of a parabola is the point where the gradient of the parabola crosses the y-axis.\n    '''\n    # calculate the coefficients of the parabola\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is negative, indicating that the parabola has no real roots\n    if discriminant < 0:\n        return \"The parabola has no real roots.\"\n\n    # calculate the two roots of the parabola\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n\n    # return the roots as a tuple\n    return (root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the determinant\n    determinant = b**2 - 4*a*c\n    \n    # If the determinant is zero, there is no real root\n    if determinant == 0:\n        return None\n    \n    # Calculate the two roots of the determinant\n    x1 = (-b + math.sqrt(determinant)) / (2*a)\n    x2 = (-b - math.sqrt(determinant)) / (2*a)\n    \n    # Sort the roots in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n    \n    return x1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant > 0:\n        x1 = (-b + determinant**0.5)/(2*a)\n        x2 = (-b - determinant**0.5)/(2*a)\n        return x1, x2\n    elif determinant == 0:\n        x = -b/(2*a)\n        return x\n    else:\n        return \"No real root exists.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the determinant of the matrix\n    det = (b ** 2) - (4 * a * c)\n\n    # Find the inverse of the matrix\n    inverse_det = 1 / det\n\n    # Find the x-coordinate of the intersection point of the parabola with the y-axis\n    x_int = (-b + (inverse_det * b ** 2)) / (2 * a)\n\n    # Find the y-coordinate of the intersection point of the parabola with the y-axis\n    y_int = a * x_int ** 2 + c\n\n    # Return the directrix\n    return x_int"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is between the roots: \", root1, root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix is at the root: \", root)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters: a, b, and c, representing the coefficients of a quadratic equation.\n    It calculates the discriminant and checks if it is less than zero. If it is, then there is no real root and the function returns None.\n    Otherwise, it returns the root of the quadratic equation.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        return None\n    else:\n        return (-b + discriminant**(1/2)) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in list1:\n        if i in list2:\n            common_list.append(i)\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Find the intersection of the two lists\n    intersection = [x for x in list1 if x in list2]\n    # Return true if there is at least one common element\n    return True if intersection else False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if both lists have elements\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    # iterate through both lists and check if each element is in the other list\n    for element in list1:\n        if element in list2:\n            return True\n    # if we reach here, no common element was found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    common_elements = set(list1) & set(list2)\n    return bool(common_elements)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    length_base1 = (base1 + base2) / 2\n    length_base2 = length_base1 + area\n    median = (length_base1 + length_base2 + height) / 3\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n    # Calculate the area of the base\n    area_base = base1 * base2 * height / 2\n    # Calculate the area of the trapezium\n    area_trapezium = (base1 + base2) * height / 2\n    # Calculate the difference between the areas\n    area_diff = area_base - area_trapezium\n    # Calculate the length of the trapezium base\n    length_base = (base1 + base2) / 2\n    # Calculate the length of the trapezium\n    length_trapezium = (2 * (area_base + area_trapezium) / area_trapezium) ** 0.5\n    # Calculate the ratio of the two lengths\n    ratio = length_base / length_trapezium\n    # Calculate the median length of the trapezium\n    median_length = perimeter * ratio / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the hypotenuse\n    hypotenuse = (base1 ** 2 + base2 ** 2) ** 0.5\n    # Calculate the length of the perpendicular to the hypotenuse and height\n    perpendicular = (2 * area) / hypotenuse\n    # Calculate the length of the shorter side\n    shorter_side = hypotenuse - perpendicular\n    # Calculate the length of the longer side\n    longer_side = hypotenuse + perpendicular\n    # Find the median length\n    if shorter_side <= longer_side:\n        median_length = shorter_side\n    else:\n        median_length = longer_side\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the sum of the two bases and the height\n    sum_bases = base1 + base2 + height\n    \n    # Calculate the sum of the two bases and the height squared\n    sum_bases_squared = (base1 + base2 + height) ** 2\n    \n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Calculate the area of the first half of the trapezium\n    area_first_half = area / 2\n    \n    # Calculate the area of the second half of the trapezium\n    area_second_half = area - area_first_half\n    \n    # Calculate the sum of the areas of the two halves\n    sum_areas = area_first_half + area_second_half\n    \n    # Calculate the median length of the trapezium\n    median_length = sum_bases_squared - sum_areas\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    base1_length = base1 * height\n    base2_length = base2 * height\n    \n    # Sort the two bases based on their lengths\n    sorted_bases = sorted([base1_length, base2_length])\n    \n    # Calculate the length of the longer base\n    longer_base_length = sorted_bases[0] + sorted_bases[1]\n    \n    # Calculate the length of the shorter base\n    shorter_base_length = sorted_bases[0] - sorted_bases[1]\n    \n    # Calculate the area of the trapezium\n    trapezium_area = longer_base_length / 2\n    \n    # Calculate the height of the trapezium\n    trapezium_height = shorter_base_length / trapezium_area\n    \n    # Calculate the length of the trapezium\n    trapezium_length = longer_base_length + shorter_base_length\n    \n    # Calculate the median of the two bases\n    median_base1 = longer_base_length / 2\n    median_base2 = shorter_base_length / 2\n    \n    # Calculate the median of the trapezium\n    median_trapezium = trapezium_length / 2\n    \n    # Determine which base is the taller\n    if trapezium_height > median_base1:\n        median_base = median_base1\n    else:\n        median_base = median_base2\n        \n    # Determine the median length of the trapezium\n    if median_trapezium > median_base:\n        return median_trapezium\n    else:\n        return median_base"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the length of the perimeter of the trapezium\n    perimeter = 0.5 * base1 + 0.5 * base2 + height\n    # calculate the length of the shorter side of the trapezium\n    shorter_side = min(base1, base2)\n    # calculate the length of the longer side of the trapezium\n    longer_side = max(base1, base2)\n    # calculate the length of the middle section of the trapezium\n    middle_section = longer_side - shorter_side\n    # calculate the length of the median section of the trapezium\n    median = (middle_section + area) / perimeter\n    # return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculating the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculating the sides of the trapezium\n    side1 = area / 2\n    side2 = area - side1\n\n    # Calculating the length of the shorter side\n    shorter_side = min(side1, side2)\n\n    # Calculating the length of the longer side\n    longer_side = max(side1, side2)\n\n    # Calculating the median\n    median = (shorter_side + longer_side) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2) / 2\n    area = math.sqrt(s * (s - base1) * (s - base2))\n    return area * height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using Heron's formula\n    area = (base1 + base2) * height / 2\n    # Calculate the length of the base of the trapezium using the formula: length = sqrt(3) * base / 2\n    base = 3 * base1 / 2\n    # Calculate the length of the other base of the trapezium using the formula: length = sqrt(3) * base / 2\n    other_base = 3 * base2 / 2\n    # Calculate the sum of the two bases and the height to get the length of the other half of the trapezium\n    other_half = (base1 + base2) * height - area\n    # Use the formula: length = sqrt(3) * base / 2 + sqrt(3) * other_base / 2 = 2 * sqrt(3) * base / 3 + other_half\n    length = 2 * (3 * base / 3 + other_half)\n    # Return the median length of the trapezium\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium using the given base and height\n    length = (base1 + base2) / 2 * height\n\n    # Calculate the length of the left half of the trapezium\n    left_half_length = (base1 + base2) / 2 * (height / 2)\n\n    # Calculate the length of the right half of the trapezium\n    right_half_length = (base1 + base2) / 2 * (height / 2 + 1)\n\n    # Sort the length values and find the median\n    sorted_values = sorted([left_half_length, right_half_length, length])\n    median = sorted_values[1]\n\n    # Return the median value\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            print(\"The number is greater than the elements of the array.\")\n            return True\n    print(\"The number is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through the array and check if the number is greater than the current element\n    for i in arr:\n        if i > number:\n            return True\n    # if the loop completes without returning True, the number is not greater than any element\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{arr[i]} is greater than {number}\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The entered number is greater than the element at index\", arr.index(i))\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    This function takes an array and a number as input and returns True if the number is greater than any element of the array, otherwise it returns False.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"The number {number} is greater than {i}.\")\n            return True\n        elif i == number:\n            print(f\"The number {number} is equal to {i}.\")\n            return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r\"a+b\"\n\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n    pattern = r'a+b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba{1,}b\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b+)')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Find the last digit of a given number.\n\n    :param n: a positive integer\n    :return: the last digit of the number\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n\n    # get the last digit of the string\n    last_digit = num_str[-1]\n\n    # return the last digit as an integer\n    return int(last_digit)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list containing only the negative numbers in the original list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() and int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or (char.isalpha() and char.isupper()):\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the character is odd\n        if char_list[i] % 2!= 0:\n            # If it is, remove it from the list\n            char_list.pop(i)\n            # Decrease the loop index\n            i -= 1\n    # Convert the list back to a string\n    return ''.join(char_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_str = ''\n    \n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if the character is odd, append it to the even_str\n            even_str += char\n    \n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the output\n    output = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2 == 1:\n            # If it is odd, append it to the output string\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            str2 += char\n    return str2"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and (test_list[i], test_list[j]) not in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    counts = [0] * 2  # initialize two counts lists\n    for tup in test_list:\n        # iterate through the tuple pairs\n        for i in range(len(tup)):\n            # increment the count for the opposite end of the pair\n            counts[i % 2] += 1\n    # return the total count\n    return sum(counts)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0:2] and (test_list[j][0], test_list[i][1]) in test_list[i][0:2]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    multiple = 1\n    result = 0\n    for num in L:\n        result += num * multiple\n        multiple *= 10\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n\n    # Initialize the variable to store the sum of all the integers in the list\n    single_sum = 0\n\n    # Iterate over each integer in the list\n    for num in L:\n        # Add the integer to the single_sum variable\n        single_sum += num\n\n    # Return the single_sum\n    return single_sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # create a new list to store the single integer\n    result = []\n    \n    # iterate over the list of integers\n    for num in L:\n        # if the number is not divisible by 2, append it to the result list\n        if num % 2!= 0:\n            result.append(num)\n    \n    # join the list of single integers into a single integer using the sum() function\n    return sum(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num > 1:\n            result += num\n        else:\n            result = num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num = single_num * num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w+\\b\\s*adv\\b\\s*', text.lower())\n    if adverbs:\n        print(\"Adverbs:\", adverbs)\n        for i, adv in enumerate(adverbs):\n            print(f\"{i+1}. {adv}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Create a regular expression pattern for adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for adverbs\n    adverb_pattern = r'\\b(after|against|along|among|around|at|before|behind|below|beneath|beside|between|beyond|but|by|during|for|from|in|inside|into|like|near|of|off|on|outside|over|past|regarding|round|since|than|through|till|to|toward|under|up|upon|with|within|without|within|without)\\b'\n    # Search for adverbs in the text\n    adverbs = re.findall(adverb_pattern, text)\n    # Initialize an empty dictionary to store the adverb position\n    position_dict = {}\n    # Iterate through the adverbs and store their positions in the dictionary\n    for i, adverb in enumerate(adverbs):\n        position_dict[adverb] = i\n    # Return the dictionary of adverb positions\n    return position_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a tuple containing the first adverb and its position in the sentence.\n    '''\n\n    # Regular expression pattern for finding adverbs\n    pattern = r'\\b(in|on|at|by|for|with|against|about|above|below|beside|across|along|behind|ahead|around|before|after|during|between|through|throughout|within)\\b'\n\n    # Find all adverbs in the sentence using the regular expression pattern\n    adverbs = re.findall(pattern, text)\n\n    # Check if the list of adverbs is empty\n    if not adverbs:\n        return None\n\n    # Extract the first adverb and its position from the list of adverbs\n    adverb = adverbs[0]\n    index = text.lower().index(adverb.lower())\n\n    # Return the tuple containing the first adverb and its position\n    return adverb, index"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for matching adverbs\n    pattern = r'\\b(also|also\\s*not|also\\s+not|also\\s+not\\s+also|also\\s+not\\s+also\\s+not)\\b'\n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and print out the adverb and its position in the sentence\n    for match in matches:\n        index = text.index(match)\n        print(match, index)\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b([A-Z][a-z]*[A-Z])\\b', text)\n    # Use the regular expression '\\b([A-Z][a-z]*[A-Z])\\b' to match adverbs, i.e. words starting with a capital letter followed by one or more lowercase letters.\n    \n    for i, adverb in enumerate(adverbs):\n        print(f\"Adverb {i+1}: {adverb}\")\n        \n    if len(adverbs) > 0:\n        print(f\"\\nAdverb {len(adverbs)+1}: {text[text.index(adverbs[-1]):]}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs using a regular expression\n    adverbs = re.findall(r'\\b\\w*adverb\\b', text)\n\n    # Initialize a list to store the adverb and its position in the sentence\n    adverb_positions = []\n\n    # Iterate through the adverbs and store their positions in the list\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((adverb, i + 1))\n\n    # Return the list of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern for adverbs\n    pattern = re.compile(r'\\b\\w+(er|est|ive|y)\\b')\n\n    # Find all the occurrences of adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n\n    # Check if there are any adverbs in the sentence\n    if adverbs:\n        # Define a list to store the adverb and its position in the sentence\n        adverb_positions = []\n\n        # Iterate through all the adverbs found in the sentence\n        for i, adverb in enumerate(adverbs):\n            # Check if the adverb is the first adverb in the sentence\n            if i == 0:\n                # Add the adverb and its position to the list\n                adverb_positions.append((adverb, i + 1))\n\n        # Return the list of adverb and their positions\n        return adverb_positions\n    else:\n        # Return an empty list if there are no adverbs in the sentence\n        return []"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # split the sentence into words\n    words = text.split()\n\n    # find all adverbs\n    adverbs = re.findall(r'\\b(?:adverb)\\b', text)\n\n    # find their positions in the sentence\n    positions = [words.index(word) for word in words if word in adverbs]\n\n    # print the adverbs and their positions\n    for i in range(len(adverbs)):\n        print(f\"{adverbs[i]} found at position {positions[i]}\")\n\n    # return the positions of the adverbs\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(\\w*)\\s+(?:a|an|the|this)\\b')\n    matches = adverb_pattern.finditer(text)\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        print(f\"{adverb} found at position {position}\")\n    return"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6*l*l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store positive numbers\n    positives = array('i')\n    \n    # Loop through the array of integers\n    for num in nums:\n        # If the number is positive, add it to the positives array\n        if num > 0:\n            positives.append(num)\n    \n    # Calculate the ratio of positive numbers to the total number of numbers\n    positive_ratio = len(positives) / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n            \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array to store the positive numbers\n    positive_arr = array('i')\n    # Loop through the input array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Add the number to the positive array\n            positive_arr.append(num)\n    # Find the length of the positive array\n    positive_len = len(positive_arr)\n    # Calculate the ratio of positive numbers\n    pos_ratio = positive_len / len(nums)\n    # Return the ratio of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0, 0])  # initialize two integers to count the number of positive and negative numbers respectively\n\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n\n    total = len(nums)\n    return count[0] / total, count[1] / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Initialize a list to store the positive counts\n    positive_count_list = []\n\n    # Iterate through the array of integers\n    for num in nums:\n        # If the number is positive, append it to the list of positive counts\n        if num > 0:\n            positive_count_list.append(num)\n\n    # Calculate the ration of positive numbers and return it as a float\n    positive_count_sum = sum(positive_count_list)\n    if positive_count_sum == 0:\n        return 0\n    else:\n        return float(len(positive_count_list)) / positive_count_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i')\n    negative_numbers = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n        else:\n            negative_numbers.append(num)\n\n    positive_count = len(positive_numbers) / len(nums)\n    negative_count = len(negative_numbers) / len(nums)\n\n    return positive_count, negative_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i', [0] * len(nums))\n    negative_nums = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n        else:\n            negative_nums.append(num)\n\n    pos_count = len(positive_nums)\n    neg_count = len(negative_nums)\n\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list so we can use it as an array of integers\n    nums = list(nums)\n    # Count the number of positive integers\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    # Calculate the ration of positive integers\n    ratio = count / len(nums)\n    # Return the ration as a float between 0 and 1\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number from it.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Find the largest negative number in a list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The largest negative number in the list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest_num = list1[0]\n\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1000000\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] \n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        t = t[:K]\n        result.append(t)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = tuple(test_list[i][:j])\n                break\n    \n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][:K], tup[2][:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list.pop(i)\n        else:\n            test_list[i] = tuple(test_list[i][k:] for k in range(K))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        new_tuple = tuple(test_list[i])\n        new_tuple = new_tuple[K:]\n        trimmed_list.append(new_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(tup[i:i+K] for i in range(len(tup)-K+1))\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K+1):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n\n    # checking if the length of two tuples are same or not\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length.\")\n        return\n\n    # initializing the result list\n    result_list = []\n\n    # iterating over the first tuple and performing index wise multiplication\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    # returning the result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(\"Index {}: {} x {} = {}\".format(i, test_tup1[i], test_tup2[i], test_tup1[i] * test_tup2[i]))"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples must have same length'\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n\n    for i in tup:\n        if i in count_dict:\n            result[i] = count_dict[i]\n        else:\n            result[i] = 0\n\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = {}\n    \n    for item in tup:\n        if item in counter:\n            result[item] = counter[item]\n            \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    count = {}\n    for key, value in c.items():\n        count[tup] = value\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are their respective occurrences in the tuple.\n    '''\n\n    # create a dictionary to store the counts of the elements in the list\n    count_dict = {}\n\n    # iterate through the list and count the occurrences of each element in the tuple\n    for item in lst:\n        count_dict[item] = tup.count(item)\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the number of times each element appears in the tuple.\n    '''\n    count_dict = Counter(tup)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for elem in tup:\n        if elem in lst:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # iterate through the list and calculate the cubes of each element\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808]\n\n    sum = 0\n    for num in perrin_numbers:\n        if num <= n:\n            sum += num\n\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total\n\nprint(cal_sum(100))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0 \n    while p < n: \n        p = p * (3 + 4*p)\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n Perrin numbers.\n    \"\"\"\n    perrin_nums = [1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1379, 1432, 1486, 1541, 1597, 1654, 1712, 1771, 1831, 1892, 1954, 2017, 2081, 2146, 2212, 2279, 2347, 2416, 2486, 2557, 2629, 2702, 2776, 2851, 2927, 3004, 3082, 3161, 3241, 3322, 3404, 3487, 3571, 3656, 3742, 3829, 3917, 4006, 4096, 4187, 4279, 4372, 4466, 4561, 4657, 4754, 4852, 4951, 5051, 5152, 5254, 5357, 5461, 5566, 5672, 5779, 5887, 5996, 6106, 6217, 6329, 6442, 6556, 6671, 6787, 6904, 7022, 7141, 7261, 7382, 7504, 7627, 7751, 7876, 8002, 8129, 8257, 8386, 8516, 8647, 8779, 8912, 9046, 9181, 9317, 9454, 9592, 9731, 9871, 10012, 10154, 10297, 10441, 10586, 10732, 10879, 11027, 11176, 11326, 11477, 11629, 11782, 11936, 12091, 12247, 12404, 12562, 12721, 12881, 13042, 13204, 13"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    This function calculates the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144]\n    total_sum = 0\n    for num in perrin_numbers:\n        if num > n:\n            break\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    total = 0\n    for i in range(n):\n        total += p[i]\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    :param str_list: list of string values\n    :param size: number of characters to extract from each string value\n    :return: list of extracted strings\n    \"\"\"\n    result = []\n    for string in str_list:\n        extracted = string[:size]\n        result.append(extracted)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(str[:l[i]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if size <= 0:\n        return []\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a number as input.\n    The function extracts the specified number of strings from the list,\n    and returns a new list containing the extracted strings.\n    \"\"\"\n    result = []\n    for i in range(size):\n        if len(str_list) >= i:\n            result.append(str_list.pop(0))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract a string of specified size from a list of strings.\n\n    Parameters:\n        str_list (list): a list of strings\n        size (int): the size of the extracted string\n\n    Returns:\n        list: a list of extracted strings\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [x for x in str_list if len(x) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) >= 1:\n        # If the list has at least one element, iterate over the list\n        for i in range(len(l)):\n            # Extract the specified size of string from the list\n            if len(l[i]) == l[0]:\n                # Check if the length of the string matches the specified length\n                return l[i]\n    # If no string is found, return None\n    return None"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of size extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(' '.join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespace from the string using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert the input string into a list of characters\n    char_list = list(text1)\n    # Use the regular expression module to remove all whitespaces\n    char_list = re.sub(r'\\s+','', ''.join(char_list)).split()\n    # Convert the list of characters back into a string\n    text2 = ''.join(char_list)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # Define regular expression pattern to match whitespaces\n    pattern = r'\\s+'\n    # Use re.sub() function to remove whitespaces from the string\n    return re.sub(pattern, '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    # Return the modified string\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount\n        return loss\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    loss_percentage = sale_amount / actual_cost * 100\n\n    if loss_percentage >= 25:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount >= 0:\n        return 0\n    else:\n        return abs(actual_cost - sale_amount)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            total += i\n    if n > 1:\n        total += n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i % 2 == 0:\n                even_factors += n // i\n            else:\n                even_factors += (n // i) + 1\n\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # To find the sum of even factors of a number, we can iterate through the range of odd numbers up to the square root of the input number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # If the input number is divisible by i, add it to the running sum\n        if n % i == 0:\n            sum = sum + i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n\n    # Initialize the sum of even factors to 0\n    sum = 0\n\n    # Loop through all the odd numbers between 3 and n-2\n    for i in range(3, n-2, 2):\n        # Check if i is even\n        if i % 2 == 0:\n            # Add i to the sum of even factors\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    #Function to find even factors of a number \n    def evenFactors(num): \n        return [i for i in range(2, num+1, 2) if num % i == 0] \n\n    #Finding even factors of n \n    even_factors = evenFactors(n) \n\n    #Finding sum of even factors \n    total_sum = sum(even_factors) \n\n    #Returning the sum of even factors \n    return total_sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n%i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            even_factors.append(i)\n            if i!= n//i:\n                even_factors.append(n//i)\n    return sum(even_factors)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[A-Za-z]+[zZ]\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched word\n    if match:\n        return match.group()\n    # If no match is found, return None\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum2 in month_dict:\n        return month_dict[monthnum2]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return 'Invalid Month Number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # check if the input is a valid month number\n    if not isinstance(monthnum2, int):\n        return \"Invalid input. Please enter a valid month number.\"\n\n    # check if the input is within the range of valid month numbers\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid input. Please enter a valid month number.\"\n\n    # check if the month number contains 31 days or not\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"The given month number contains 31 days.\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"The given month number contains 30 days.\"\n    elif monthnum2 in [2]:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            return \"The given month number contains 29 days.\"\n        else:\n            return \"The given month number contains 28 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print(monthnum2, \"has 31 days\")\n    else:\n        print(monthnum2, \"does not have 31 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum in [2]:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return 29\n        else:\n            return 28"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if len(monthnum2) == 2:\n        if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n            return True\n        else:\n            return False\n    elif len(monthnum2) == 3:\n        if monthnum2 in ['04', '06', '09', '11']:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number. Month numbers must be between 1 and 12.\"\n    # Check if the month number contains 31 days\n    if monthnum == 2:\n        return \"February has 29 or 30 days.\"\n    else:\n        return \"This month has 31 days.\""
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # reverse the string using slicing\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function takes a list and returns the sublist with the smallest length.\n    \"\"\"\n\n    # Initialize minimum length to the length of the entire list\n    min_len = len(lst)\n\n    # Initialize minimum sublist to the entire list\n    min_sublist = lst\n\n    # Iterate over the sublists of length 2 to the length of the entire list\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            # Calculate the length of the sublist between indices i and j\n            sublist_len = j - i + 1\n            # If the current sublist has a smaller length than the previous minimum, update the minimum\n            if sublist_len < min_len:\n                min_len = sublist_len\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return []\n\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize a variable to store the minimum length\n    min_len = len(lst[0])\n    # loop through the list and find the sublist with the minimum length\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            # check if the current sublist has a smaller length than the minimum length\n            if len(lst[i][j:]) < min_len:\n                # update the minimum length if the current sublist has a smaller length\n                min_len = len(lst[i][j:])\n    # return the sublist with the minimum length\n    return lst[i]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Find the length of each sublist\n    sublist_lengths = [len(sublist) for sublist in lst]\n\n    # Find the minimum length\n    min_len = min(sublist_lengths)\n\n    # Find the sublist having minimum length\n    min_sublist = [sublist for sublist in lst if len(sublist) == min_len]\n\n    # Return the sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function calculates the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * width\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    This function takes two parameters: length and breadth, and calculates the area of a rectangle using the formula:\n    area = length x breadth\n    \n    It returns the area of the rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()  # convert all characters to lowercase\n    pattern = re.compile(r'\\b[a-z]+\\b')  # define a pattern to match substrings containing only lowercase letters\n    matches = pattern.findall(str1)  # find all substrings containing only lowercase letters\n    for match in matches:\n        str1 = str1.replace(match, '')  # replace each substring with an empty string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase characters\n    pattern = re.compile(r'[A-Z]+')\n    # find all uppercase substrings in the string using the pattern\n    matches = pattern.findall(str1)\n    # loop through the matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # find all substrings of the input string that match the pattern\n    matches = re.findall(pattern, str1)\n    # iterate over the matches and remove them from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regex pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b', re.IGNORECASE)\n    \n    # Find all uppercase substrings in the string\n    uppercase_substrings = pattern.findall(str1)\n    \n    # Iterate over all uppercase substrings and replace them with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define the regular expression pattern for uppercase letters\n    pattern = re.compile(r'(?i)[A-Z]+')\n    \n    # Find all uppercase substrings in the string\n    upper_substrings = pattern.findall(str1)\n    \n    # Loop through each uppercase substring and replace it with an empty string\n    for upper_substring in upper_substrings:\n        str1 = str1.replace(upper_substring, '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # create a pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # use the re.sub() function to replace uppercase substrings with empty strings\n    result = re.sub(pattern, '', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z][a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z][a-z]*')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match uppercase substrings\n    pattern = r'([A-Z][a-z]+)'\n    \n    # find all matches in the string using the regular expression pattern\n    matches = re.findall(pattern, str1)\n    \n    # loop through the matches and replace the uppercase substrings with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    \n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if type(sublist) == list:\n            result.extend(sublist[:1])\n        else:\n            result.append(sublist[:1])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list and returns a new list where each sublist is replaced with its first element.\n    '''\n    # Create a new list to hold the extracted sublists\n    extracted_lst = []\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # If the sublist has at least one element, add its first element to the extracted_lst\n        if sublist:\n            extracted_lst.append(sublist[0])\n    # Return the extracted_lst\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an argument and returns a new list with the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize an empty list to hold the first elements of each sublist\n    result = []\n    \n    # iterate through each sublist in the list\n    for sublist in lst: \n        # check if the sublist is not empty\n        if sublist: \n            # append the first element of the sublist to the result list\n            result.append(sublist[0])\n        else: \n            # if the sublist is empty, append None to the result list\n            result.append(None)\n            \n    # return the result list\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(s):\n    \"\"\"\n    Count the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if not list1:\n        return []\n    list1.sort()\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(lst) < 2:\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1 = sorted(list1)\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(1, len(list1)+1):\n        for j in range(i):\n            print(list1[j], end=' ')\n        print()"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Use a loop to iterate through the list of elements\n    for i in range(1, len(list1) + 1):\n        # Use a loop to generate all possible combinations of length i\n        for j in itertools.combinations(list1, i):\n            # Add each combination to the list of combinations\n            combinations.append(j)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest = list1[:i] + list1[i+1:]\n            for comb in combinations_list(rest):\n                result.append([list1[i]] + comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst]\n    else:\n        result = []\n        for i in range(len(lst)):\n            rest_list = lst[:i] + lst[i+1:]\n            for comb in combinations_list(rest_list):\n                result.append([lst[i]] + comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store the combinations\n    result = []\n    # Sort the list in ascending order\n    list1.sort()\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # If the current element is the first element in the list, add it to the result list\n        if i == 0:\n            result.append([list1[0]])\n        # If the current element is not the first element, add all the remaining elements to the result list\n        else:\n            # Create a new empty list to store the combinations of the remaining elements\n            new_result = []\n            # Loop through each element in the list after the current element\n            for j in range(i+1, len(list1)):\n                # Add the current element and the remaining element to the new combination\n                new_combination = [list1[i], list1[j]]\n                # If the new combination is not already in the result list, add it to the result list\n                if new_combination not in result:\n                    result.append(new_combination)\n            # Add the current element to the new combination list and append it to the result list\n            new_combination = [list1[i]]\n            result.append(new_combination)\n    # Return the result list\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): List of integers representing the given array.\n\n    Returns:\n    int: Maximum product subarray product.\n    '''\n\n    # Initialize max_product as a variable and store the first element of the array\n    max_product = arr[0]\n    max_so_far = arr[0]\n\n    # Iterate over the array and calculate the maximum product subarray\n    for i in range(1, len(arr)):\n        max_so_far = max(max_so_far * arr[i], arr[i])\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n\n    The maximum product subarray is the contiguous subarray within the array that has the largest product.\n\n    Args:\n    - arr (list[int]): an array of integers\n\n    Returns:\n    - int: the maximum product subarray\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        elif arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = max(arr[0], arr[1])\n    min_product = min(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        if arr[i] > 0:\n            temp_max = max(max_product * arr[i], max_product * arr[i], min_product * arr[i])\n            max_product = temp_max\n            temp_min = min(min_product * arr[i], max_product * arr[i], min_product * arr[i])\n            min_product = temp_min\n        else:\n            temp_max = max(max_product, min_product)\n            max_product = temp_max\n            temp_min = min(max_product, min_product)\n            min_product = temp_min\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product*arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set()\n    for value in dict.values():\n        values.add(value)\n    return len(values) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for i in range(len(dict)):\n        if value!= list(dict.values())[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Initializing a list to store all values of the dictionary\n    values = []\n\n    # Looping through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # Adding the value to the list\n        values.append(value)\n\n    # Checking if all values are same in the list\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if len(dict.values()) == 1:\n            return True\n        elif len(dict)!= len(dict.values()):\n            return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1 and values.pop() == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n\n    for i in range(1, n+1):\n        if not all(dict.values()):\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dictionary, n):\n    \"\"\"\n    Check if all values in a dictionary are equal to the same value.\n    \n    Parameters:\n    dictionary (dict): the dictionary to check\n    n (int): the number of elements in the dictionary\n    \n    Returns:\n    bool: True if all values are equal, False otherwise.\n    \"\"\"\n    for i in range(n):\n        if len(set(dictionary.values())) == 1:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= dict[dict.keys()[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        for key, value in dict.items():\n            if key not in dict or value!= dict[key]:\n                return False\n        return check_value(dict.copy(), n-1)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if n == 1:\n            return True\n        elif dict[key]!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through the dictionary and remove any items that have an empty string value\n    for item in dict1:\n        if dict1[item] == '':\n            del dict1[item]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product_ending_here = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        else:\n            max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_product_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    for i in range(1, n):\n        for j in range(i):\n            if i - j > 0:\n                max_product = max(max_product, arr[j] * arr[i] * arr[i - j])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product, max_product = max_product, current_product\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    \n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        dp[i] = max(arr[i], dp[i-1] * arr[i])\n        \n    return dp[-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Find the length of the array and the first element of the array\n    n = len(arr)\n    first_element = arr[0]\n\n    # Initialize the maximum product and the current subsequence product\n    max_product = first_element\n    current_product = first_element\n\n    # Initialize the current subsequence and the maximum subsequence index\n    current_subseq = [first_element]\n    max_subseq_index = 0\n\n    # Iterate over the rest of the array\n    for i in range(1, n):\n        # Check if the current element is greater than the first element of the current subsequence\n        if arr[i] > current_subseq[-1]:\n            # If it is, add it to the current subsequence and update the product if necessary\n            current_subseq.append(arr[i])\n            current_product = max(current_product, current_subseq[-1] * arr[i])\n        else:\n            # If it isn't, check if the length of the current subsequence is greater than the maximum subsequence length\n            if len(current_subseq) > max_subseq_index:\n                # If it is, update the maximum subsequence index and maximum product\n                max_subseq_index = len(current_subseq)\n                max_product = max(max_product, current_product)\n            # If it isn't, add the current subsequence to the end of the maximum subsequence and update the product if necessary\n            current_subseq = [arr[i]]\n            current_product = arr[i]\n\n    # Check if the length of the current subsequence is greater than the maximum subsequence length\n    if len(current_subseq) > max_subseq_index:\n        max_subseq_index = len(current_subseq)\n        max_product = max(max_product, current_product)\n\n    # Check if the length of the maximum subsequence is greater than 1\n    if max_subseq_index > 1:\n        # If it is, find the largest element of the maximum subsequence and multiply it by the smallest element\n        max_subseq_max = max(current_subseq)\n        min_subseq_min = min(current_subseq)\n        max_product = max(max_product, max_subseq_max * min_subseq_min)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], max_ending_here, arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        min_ending_here = arr[0]\n\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n                max_so_far = max(max_so_far, max_ending_here)\n            elif arr[i] < min_ending_here:\n                min_ending_here = arr[i]\n                max_so_far = max(max_so_far, min_ending_here)\n            else:\n                max_ending_here = arr[i]\n\n        return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    for num in arr:\n        max_product_ending_here = max(max_product_ending_here * num, num)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables for the first and second elements\n    first = test_tup[0]\n    second = test_tup[1]\n    \n    # Initialize a variable for the sum of the neighboring elements\n    pairwise_sum = first + second\n    \n    # Loop through the remaining elements and add them to the pairwise sum\n    for i in range(2, len(test_tup)):\n        next_elem = test_tup[i]\n        pairwise_sum += next_elem\n        \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple must have at least two elements\")\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:]) + add_pairwise(test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup)-1):\n            result.append(test_tup[i] + test_tup[i+1])\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_list = []\n    for i in range(len(test_tup)-1):\n        sum_list.append(test_tup[i] + test_tup[i+1])\n    return sum_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return None\n    \n    # loop through the tuple and add the neighboring elements\n    for i in range(n-1):\n        test_tup[i] += test_tup[i+1]\n    \n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize variables\n    prev_num = test_tup[0]\n    total = 0\n\n    # Loop through the tuple\n    for i in range(1, len(test_tup)-1):\n        # Calculate the pairwise addition\n        total += test_tup[i] + test_tup[i+1]\n\n    # Add the last two elements of the tuple\n    total += test_tup[-1] + test_tup[-2]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n):\n        if i < n-1:\n            test_tup[i] += test_tup[i+1]\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n == 1:\n        return test_tup[0]\n    elif n == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        for i in range(1, n-1):\n            test_tup[i] += test_tup[i-1]\n        return add_pairwise(test_tup)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(a + b for a, b in zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array arr and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    # initialize the product variable to 1\n    product = 1\n\n    # loop through the array and multiply each element by the current product\n    for element in arr:\n        product = (product * element) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod*i) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    # Initialize the result to 1\n    result = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Multiply the current number with the result\n        result *= num\n        \n        # Calculate the remainder when divided by n\n        remainder = result % n\n        \n        # Update the result if the remainder is greater than 0\n        if remainder > 0:\n            result -= remainder\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1 \n    for num in arr: \n        product = (product * num) % n \n    return product "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n as input and returns the remainder of the product of array multiplication modulo n.\n    '''\n    if len(arr) == 1:\n        return arr[0] % n\n\n    # Find the product of the first two elements\n    prod = arr[0] * arr[1]\n    if prod >= n:\n        prod %= n\n\n    # Find the remainder of the product of the remaining elements\n    for i in range(2, len(arr)):\n        prod = (prod * arr[i]) % n\n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if all the elements in the list are consecutive numbers, False otherwise.\n    '''\n    \n    # Initialize a variable to keep track of the current number\n    num = l[0]\n    \n    # Iterate over the list and check if the current number is consecutive or not\n    for i in range(1, len(l)):\n        if l[i]!= num + 1:\n            return False\n        num = l[i]\n    \n    # If the loop completes without returning False, then all the numbers are consecutive\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    for i in range(len(l)-1):\n        if l[i+1] == l[i] + 1:\n            print(\"The list contains consecutive numbers\")\n            return True\n    else:\n        print(\"The list does not contain consecutive numbers\")\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if all the numbers in the list are consecutive, else returns False.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers and False otherwise.\n    '''\n    if len(l) <= 1: \n        return False \n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return \"The list should have at least two elements\"\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    # converting the given tuple list to a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # converting the intersection set back to a list\n    for i in intersection:\n        intersection_list.append(tuple(i))\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of tuples of all elements from the two lists and then convert it back to a list\n    all_tuples = list(set(test_list1) & set(test_list2))\n    # Sort the list of tuples in ascending order of the first element in each tuple\n    sorted_tuples = sorted(all_tuples, key=lambda x: x[0])\n    # Return the sorted list of tuples\n    return sorted_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert all the elements of both lists to sets to remove duplicates\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = list1_set.intersection(list2_set)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for i in set1:\n        if i in set2:\n            result.append(i)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create an empty set to store the intersection of elements in both lists\n    intersection = set()\n\n    # iterate through the elements of the first list\n    for element in test_list1:\n        # check if the element exists in the second list\n        if element in test_list2:\n            # add the element to the intersection set\n            intersection.add(element)\n\n    # return the intersection set\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Filter out the duplicates in the second list\n    list2_unique = list(set(test_list2))\n\n    # Iterate over the first list and find the tuple intersection\n    result = []\n    for item in test_list1:\n        if tuple(item) in list2_unique:\n            result.append(item)\n\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuple = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j and i not in common_tuple:\n                common_tuple.append(i)\n    return common_tuple"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string with the characters replaced\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # create a dictionary with the counts of each element in the input dictionary\n    count_dict = Counter(dict1)\n    \n    # sort the dictionary by value in descending order\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    \n    # create a new dictionary with the sorted elements\n    sorted_dict_new = {}\n    \n    # iterate over the sorted dictionary and add each element as a key with a value of 1\n    for item in sorted_dict:\n        sorted_dict_new[item[0]] = 1\n    \n    return sorted_dict_new"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n\n    Args:\n        dict1 (dict): a dictionary to be sorted\n\n    Returns:\n        dict: the sorted dictionary\n    '''\n\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # Sort the Counter object by values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and sorts the dictionary by value in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Add the largest and smallest values together to find the sum\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums[1:]:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    \n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements.\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Return the sum of the first and last elements\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the maximum and minimum value in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the sum of the maximum and minimum value\n    sum_of_max_min = max_val + min_val\n\n    # Return the sum of the maximum and minimum value\n    return sum_of_max_min"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers and returns the sum of the largest and smallest value in the array.\n    '''\n    # Get the minimum and maximum values in the array\n    min_val = min(nums)\n    max_val = max(nums)\n    # Calculate the sum of the minimum and maximum values\n    sum_min_max = min_val + max_val\n    return sum_min_max"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return (max_num + min_num)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    # Find the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is in lower case.\n    Otherwise, it returns False.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    string = string.lower()\n    # Return the lower case string\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use re.sub() to remove the lowercase substrings from the string\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Remove all lowercase substrings using regular expressions\n    lowercase_pattern = re.compile(r'[a-z]+')\n    string = lowercase_pattern.sub('', string)\n    \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Use regex to find all lowercase substrings\n    pattern = r'[a-z]+'\n    substrings = re.findall(pattern, str1)\n    \n    # Remove all lowercase substrings from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all substrings that are entirely lowercase from the string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n\n    # find all lowercase substrings in the string\n    matches = pattern.findall(string)\n\n    # remove all lowercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the pattern to find all occurrences of lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Iterate over the matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return lowercase.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    # loop through the list of lowercase substrings and remove them from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # remove all lowercase substrings using regular expressions\n    string = re.sub(r'[a-z]+', '', string)\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n\n    # Find the length of the input number\n    length = len(str(n))\n\n    # Iterate through each digit of the number\n    for i in range(length) :  \n        # Check if the current digit is the first one\n        if n % 10 == 0 :  \n            # Return the current digit\n            return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_num = n % 10\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** len(str(n))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # converting the input number to a string\n    n_str = str(n)\n    # getting the first character of the string\n    first_char = n_str[0]\n    # converting the first character to a digit and returning it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return first_Digit(n // 10)\n    else:\n        return n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0: # odd number check\n            odd_list.append(num) # append odd numbers to the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns only the odd numbers from the list.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # initialize an empty list to store the odd numbers\n    result = []\n    \n    # loop through each number in the input list\n    for num in lst:\n        # if the number is odd, append it to the result list\n        if num % 2!= 0:\n            result.append(num)\n            \n    # return the result list\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # calculate the sum of cubes of first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n    \n    # calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # find the difference between the two sums\n    difference = cube_sum - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # function to calculate the sum of the first n natural numbers\n    def sum_of_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # function to find the difference between the two sums\n    def find_difference(n):\n        return abs(sum_of_cubes(n) - sum_of_natural_numbers(n))\n\n    # calling the function\n    print(\"Difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is:\", find_difference(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers \n    and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n        \n    # Calculate the difference between the two sums\n    difference = abs(sum_cubes - sum_numbers)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_nums = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Define a function to calculate the sum of cubes\n    def sum_cubes(n):\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the difference between the two sums\n    difference_sum = abs(sum_cubes_n - sum_n)\n\n    # Return the difference\n    return difference_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    \"\"\"\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of first n natural numbers\n    def sum_of_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes_n = sum_of_cubes(n)\n\n    # Calculate the sum of first n natural numbers\n    sum_of_natural_numbers_n = sum_of_natural_numbers(n)\n\n    # Return the difference between the two sums\n    return sum_of_cubes_n - sum_of_natural_numbers_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1) * (2 * n + 1) * (2 * n + 1)) // 30\n\n    # calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_natural_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first_n = [i for i in range(1, n+1)]\n    cube_sum = sum([i**3 for i in first_n])\n    sum_of_n = sum(first_n)\n    return cube_sum - sum_of_n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor_sum = A[i] ^ A[(i+1)%N]\n        if xor_sum % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N):\n        for j in range(N):\n            if A[i]!= A[j]:\n                xor_value = A[i] ^ A[j]\n                if xor_value % 2!= 0:\n                    odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n    if xor_sum % 2 == 1:\n        count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor & 1 == 1:\n                count += 1\n    return count\n\nA = [int(x) for x in input(\"Enter the elements of array A: \").split()]\nN = int(input(\"Enter the size of array A: \"))\n\nprint(\"The number of pairs with odd xor value is:\", find_Odd_Pair(A, N))"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    # Initialize two variables to keep track of even and odd numbers\n    even = 0\n    odd = 0\n    \n    # Iterate through the array and count the number of even and odd numbers\n    for num in A:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n            \n    # Calculate the xor of even and odd numbers\n    xor_result = even ^ odd\n    \n    # Count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c.lower()) + 32 if c.isalpha() else ord(c)) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    \n    # Create a new string with the toggled case of each character\n    toggled_string = ''\n    for char in string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            toggled_string += char.upper()\n    \n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    list1 = [int(digit) for digit in str(n1)]\n    list2 = [int(digit) for digit in str(n2)]\n\n    # calculate the sum of differences between digits of the two numbers\n    sum_diff = 0\n    for i in range(len(list1)):\n        sum_diff += abs(list1[i] - list2[i])\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # Find the per-digit difference between the two numbers\n    diff = []\n    for i in range(max(len(num1), len(num2))):\n        digit1 = num1[i] if i < len(num1) else 0\n        digit2 = num2[i] if i < len(num2) else 0\n        diff.append(abs(digit1 - digit2))\n\n    # Return the sum of the differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # loop through each digit in the first number\n    sum_diff = 0\n    for i in range(len(num1_str)):\n        # extract the digit from the string\n        digit1 = int(num1_str[i])\n\n        # loop through each digit in the second number\n        for j in range(len(num2_str)):\n            # extract the digit from the string\n            digit2 = int(num2_str[j])\n\n            # calculate the difference between the digits\n            diff = digit1 - digit2\n\n            # add the difference to the running sum\n            sum_diff += diff\n\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two numbers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # calculate the per-digit difference between the two lists of digits\n    diff = [abs(num1[i] - num2[i]) for i in range(len(num1))]\n\n    # calculate the sum of the per-digit difference\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two integers into lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # calculate the distance between the two digits lists\n    distance = abs(len(digits1)-len(digits2))\n    \n    # calculate the sum of the per-digit difference between the two digits lists\n    total_diff = 0\n    for i in range(max(len(digits1), len(digits2))):\n        diff = abs(digits1[i]-digits2[i])\n        total_diff += diff\n    \n    # return the sum of the per-digit difference\n    return distance * total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # convert the integers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    \n    # create a list to store the per-digit differences\n    digit_diff_list = []\n    \n    # iterate over the digits in each string\n    for i in range(len(num1_str)):\n        # convert each digit to an integer\n        num1_digit = int(num1_str[i])\n        num2_digit = int(num2_str[i])\n        \n        # calculate the per-digit difference\n        digit_diff = abs(num1_digit - num2_digit)\n        \n        # add the difference to the list of differences\n        digit_diff_list.append(digit_diff)\n    \n    # calculate the sum of the per-digit differences\n    digit_diff_sum = sum(digit_diff_list)\n    \n    # return the sum of the per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # calculate the per-digit difference\n    per_digit_diff = [abs(d1 - d2) for d1, d2 in zip(digits1, digits2)]\n\n    # calculate the sum of the per-digit differences\n    sum_per_digit_diff = sum(per_digit_diff)\n\n    return sum_per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Calculate the per-digit difference\n    diff = 0\n    for i in range(len(n1_str)):\n        diff += int(n1_str[i]) - int(n2_str[i])\n        \n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Calculate the difference between the two numbers\n    diff = n1 - n2\n\n    # Initialize the sum of per-digit differences to 0\n    sum_diff = 0\n\n    # Iterate through each digit in the difference\n    for digit in str(abs(diff)):\n        # Convert the current digit to an integer\n        digit_int = int(digit)\n\n        # Add the product of the digit and its position to the sum of per-digit differences\n        sum_diff += digit_int * (abs(diff) // 10 ** (len(str(abs(diff))) - digit_int - 1))\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_difference = 0\n    for i in range(len(str(n1))):\n        digit_difference = abs(ord(str(n1)[i]) - ord(str(n2)[i]))\n        sum_difference += digit_difference\n    return sum_difference"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n\n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    a (list): A list of integers.\n    size (int): The size of the sublist to be considered.\n\n    Returns:\n    int: The sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    # Initialize the variables for the maximum subarray sum and its start index\n    max_sum = float('-inf')\n    start_index = 0\n\n    # Loop through the list and find the maximum subarray sum\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n\n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n            \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    # Sort the union elements in ascending order\n    union.sort()\n    # Print the union elements\n    for element in union:\n        print(element, end=\" \")"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Union of two tuples using set()\n    unique_elements = set(test_tup1) | set(test_tup2)\n    \n    # Sort the union elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    \n    # Print the sorted union elements\n    print(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Use set to remove duplicates from the combined tuple\n    unique_tuple = set(combined_tuple)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_tuple))\n    \n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single set\n    combined_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(combined_set))\n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples into a single tuple\n    combined_tuple = test_tup1 + test_tup2\n    \n    # convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tuple)\n    \n    # convert the set back to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    \n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the union of the two lists\n    union = set(list1) | set(list2)\n\n    # Convert the set back to a tuple and sort it\n    sorted_union = sorted(tuple(union))\n\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # creating a set to store the elements of test_tup1\n    set1 = set(test_tup1)\n    # creating a set to store the elements of test_tup2\n    set2 = set(test_tup2)\n    # finding the union of the two sets and converting it to a list\n    union_list = list(set1.union(set2))\n    # sorting the list in ascending order\n    union_list.sort()\n    # outputting the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets to eliminate duplicates\n    unique_set1 = set(test_tup1)\n    unique_set2 = set(test_tup2)\n    # find the union of the sets using the union() method\n    union_set = unique_set1.union(unique_set2)\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to store the union of the two tuples\n    union_set = set()\n    \n    # Loop through each element in the first tuple\n    for item in test_tup1:\n        # If the element is not already in the union set, add it\n        if item not in union_set:\n            union_set.add(item)\n    \n    # Loop through each element in the second tuple\n    for item in test_tup2:\n        # If the element is not already in the union set, add it\n        if item not in union_set:\n            union_set.add(item)\n    \n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Output the sorted list as a space-separated string\n    print(' '.join(map(str, union_list)))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to lists to make them mutable and modify them in place\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # create a new list to store the union of the two lists\n    union_list = []\n    # loop through the first list and add all elements to the union list\n    for elem in test_list1:\n        union_list.append(elem)\n    # loop through the second list and add all elements to the union list that are not already in the first list\n    for elem in test_list2:\n        if elem not in test_list1:\n            union_list.append(elem)\n    # sort the union list in ascending order\n    union_list.sort()\n    # convert the union list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    longest = 0\n    curr_len = 1\n\n    # Loop through the list\n    for i in range(1, len(lst)):\n\n        # If the current element is the same as the next element, increment the length\n        if lst[i] == lst[i-1]:\n            curr_len += 1\n        else:\n            # If the length is greater than the previous longest, update longest\n            if curr_len > longest:\n                longest = curr_len\n\n            # Reset the length to 1\n            curr_len = 1\n\n    # If the length is greater than the previous longest, update longest\n    if curr_len > longest:\n        longest = curr_len\n\n    # Return the longest sublist length\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Iterate through the list\n    for item in lst:\n        # If the current item is greater than the maximum, update the maximum and reset the current length\n        if item > max_length:\n            max_length = item\n            current_length = 1\n        # If the current item is not greater than the maximum, add it to the current length\n        else:\n            current_length += 1\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Calculate the length of the current sublist\n        current_length = len(sublist)\n        # Update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    length = 0\n    \n    for i in range(len(lst)):\n        while i < len(lst) and lst[i] == lst[i-1]:\n            i += 1\n        if i == len(lst):\n            length = 1\n        else:\n            length = i - max_length + 1\n            \n        if length > max_length:\n            max_length = length\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_len = 1\n        else:\n            for j in range(max_len, 0, -1):\n                if lst[i] in lst[i-j:i]:\n                    max_len = j\n                    break\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            current_length += 1\n        else:\n            current_length += lst[i+1] - lst[i]\n            if current_length > max_length:\n                max_length = current_length\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            current_length = j - i + 1  \n            if current_length > max_length:  \n                max_length = current_length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    longest_sublist = []\n    for i in range(len(lst)):\n        if not longest_sublist or i not in longest_sublist:\n            longest_sublist = [i]\n        else:\n            for j in range(len(longest_sublist)):\n                if i not in longest_sublist[:j]:\n                    longest_sublist[j:j] = [i]\n            longest_sublist.append(i)\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length, len(lst[i]))\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n    max_length = 0\n    sublist = []\n    for i in range(len(lst)):\n        if not sublist or sublist[-1] < lst[i]:\n            sublist.append(lst[i])\n        else:\n            sublist = []\n            sublist.append(lst[i])\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=')\\w+(?:(?:\\W)(\\w+))?(?=\\')\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[\\w\\s]+?(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(?:[^\\\\\"]|\\\\.)*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # regex pattern to match values between quotation marks\n    values = re.findall(pattern, text) # find all values in the text using the regex pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*?(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(?:\\\\.|[^\"\\\\])*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(\\w+)(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")([\\w\\s]+)(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] == arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    chars = list(word)\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize sum to 0\n    total = 0\n    # Convert the integer to a string and split it into a list of characters\n    digits = [int(digit) for digit in str(n)]\n    # Iterate through the list of characters and add each digit to the sum\n    for digit in digits:\n        total += digit\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop over the list of digits and add them to the sum variable\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to 0\n    total = 0\n    # loop through each digit of the integer\n    while n > 0:\n        # add the current digit to the sum variable\n        total += n % 10\n        # divide the integer by 10 to remove the last digit\n        n //= 10\n    # return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        # Add the digit to the sum variable\n        sum += digit\n        # Remove the last digit from the integer\n        n //= 10\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n!= 0:\n        digit = n % 10\n        n = n // 10\n        sum += digit\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Get the digits of n\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    digits_sum = 0\n    while n > 0:\n        digits_sum += n % 10\n        n //= 10\n    return digits_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    return list1[1:] == sorted(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    elif list1[1] < list1[0]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    if list1[0] >= list1[1]:\n        return False\n    return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check if a list is sorted or not.\n\n    :param lst: a list of items to check for sorting\n    :return: True if the list is sorted, False otherwise\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list1 (list of lists of strings): A list of lists of strings\n\n    Returns:\n    A list of sorted lists of strings, where each sublist of strings is sorted in ascending order.\n    \"\"\"\n    # Use a nested loop to iterate through each sublist of strings in the input list\n    for sublist in list1:\n        # Use the built-in `sorted` function to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create a set of all unique numbers in all lists\n    unique_nums = set()\n    for lst in nums:\n        unique_nums.update(lst)\n    \n    # convert set back to list and return\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Add the unique number to the set\n            unique_nums.add(num)\n\n    # Create a new list to store the unique numbers\n    unique_num_list = []\n\n    # Loop through the set of unique numbers and append them to the new list\n    for num in unique_nums:\n        unique_num_list.append(num)\n\n    # Return the new list\n    return unique_num_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    # Remove duplicates from the list\n    unique_nums = list(set(nums))\n    # Sort the list in ascending order\n    unique_nums.sort()\n    # Return the sorted list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique numbers from each list\n    unique_nums = set()\n    # Loop through each list in the nums list and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert lists to sets to remove duplicates\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums.update(num_list)\n    # convert set back to list and sort it\n    unique_nums = sorted(list(unique_nums))\n    # return the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # iterate over each list in the given list of lists\n    for num_list in nums:\n        # iterate over each number in the list\n        for num in num_list:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # return the list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to set to remove duplicates and then back to a list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n    # Initialize a variable to store the product of unique numbers\n    product = 1\n    # Loop through each unique number in the set\n    for num in unique_nums:\n        # Multiply the current unique number by the product\n        product *= num\n    # Return the final product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of its unique elements.\n    \"\"\"\n    unique_set = set(list_data)\n    unique_list = sorted(list(unique_set))\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(lst):\n    unique_nums = list(set(lst))\n    if len(unique_nums) > 1:\n        product = 1\n        for num in unique_nums:\n            product *= num\n        return product\n    else:\n        return None"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))  # converting list to set to remove duplicates, then back to list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_set = set(list_data)\n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # calculate the area of the base of the cylinder\n    area_base = 2 * r * h\n    \n    # calculate the surface area of the cylinder\n    surface_area = area_base + 2 * r * r\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the semi-circle radius\n    sr = r/2\n    \n    # Calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*h + 2*math.pi*sr*h + 2*math.pi*(r-sr)*(h**2)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculate the surface area of the cylinder using the formula S = 2\u03c0r\u00b2h\n    return 2*3.14*r**2*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the half-base and half-height\n    base_half_length = r\n    height_half_length = h\n\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * (base_half_length + height_half_length) * r\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n\n    area = math.pi * r**2  # cylinder surface area\n    volume = (1/3) * math.pi * r**2 * h  # cylinder volume\n\n    surface_area = 2 * area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes two arguments, radius and height of the cylinder, and calculates the surface area of the cylinder.\n    '''\n\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of cylinder is pi * r^2 * h\n    surface_area = 3.14 * r**2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area using the formula\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A else False.\n    A and B are assumed to be sorted in ascending order.\n    \"\"\"\n    i = j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n\n    # Traverse through the list A \n    i = 0 \n    j = 0 \n\n    while j < len(B): \n\n        # If the current element of list A is equal to the next element \n        # of list B \n        if A[i] == B[j]: \n\n            # Move both pointers one step ahead \n            i += 1 \n            j += 1 \n\n        else: \n\n            # If the current element of list A is not equal to the next element \n            # of list B, move the pointer of list A to the right \n            i = i - j + 1 \n\n            # Move the pointer of list B to the right \n            j += 1 \n\n        # If the length of list A is equal to the length of list B \n        if i == len(A): \n            return True \n\n    # If the end of list A is reached without finding the sublist \n    return False \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    if B[0] in A:\n        return is_Sub_Array(A, B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    for i in range(len(A)): \n        if A[i] in B: \n            if B.count(A[i]) > B.index(A[i]): \n                return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False\n\n    for i in range(len(B)): \n        if B[i] in A: \n            for j in range(len(A)): \n                if A[j]!= B[i]: \n                    break\n            else: \n                return True\n\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if B is a sublist of A\n    if B in A:\n        return True\n\n    # check if any element in B is present in A\n    for i in range(len(A)):\n        if B[0] in A[i:]:\n            return True\n\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit in its factorial.\n    \"\"\"\n    # initialize the factorial\n    factorial = 1\n    \n    # loop through the digits of the number and multiply each digit by its factorial\n    while n > 0:\n        digit = n % 10\n        factorial *= digit\n        n //= 10\n    \n    # return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # get the last digit of n\n    last_digit = n % 10\n\n    # calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # return the last digit of factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize result variable to store the last digit of factorial\n    result = 0\n    \n    # loop through the digits of the given number\n    while n > 0:\n        # find the last digit of factorial\n        last_digit = n % 10\n        # add the last digit to the result variable\n        result += last_digit\n        # remove the last digit from the number\n        n //= 10\n    \n    # return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Loop through each digit of the number\n    for digit in str(n):\n        # Add the factorial of the digit to the result\n        result += int(digit)\n\n    # Return the last digit of the factorial\n    return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 0\n\n    # Convert the input number to a string\n    num_str = str(n)\n\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Check if the last digit is greater than the current digit\n        if digit_int > last_digit:\n            # Update the last digit to be the current digit\n            last_digit = digit_int\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes an integer as input and returns the last digit of the factorial of the number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Use list comprehension to calculate the factorial\n    factorial = [1]*(n+1)\n    factorial[0] = 1\n    for i in range(1, n+1):\n        factorial[i] *= i\n\n    # Find the last digit in the factorial\n    last_digit = factorial[-1] % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial = factorial * temp % 10\n        temp //= 10\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function finds the last digit in the factorial of a given number.\n    \"\"\"\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Convert the string to a list of integers\n    num_list = list(num_str)\n\n    # Calculate the factorial\n    factorial = 1\n    for i in range(1, len(num_list)+1):\n        factorial *= int(num_list[len(num_list)-i])\n\n    # Find the last digit in the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Get the last digit of the factorial\n    last_digit = int(str(fact)[-1])\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    while i < len(list1):\n        yield list1[i]\n        yield list2[i]\n        yield list3[i]\n        i += 1"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the input lists\n    length = len(list1)\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # Loop through the input lists\n    for i in range(length):\n        # Add the i-th element of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    \n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        result.append(list1[index1])\n        result.append(list2[index2])\n        result.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    \n    if index1 < len(list1):\n        result.extend(list1[index1:])\n    if index2 < len(list2):\n        result.extend(list2[index2:])\n    if index3 < len(list3):\n        result.extend(list3[index3:])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            if list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            elif list2[j] < list3[k]:\n                result.append(list2[j])\n                j += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        elif list2[j] < list1[i]:\n            if list2[j] < list3[k]:\n                result.append(list2[j])\n                j += 1\n            elif list1[i] < list3[k]:\n                result.append(list1[i])\n                i += 1\n            else:\n                result.append(list3[k])\n                k += 1\n        else:\n            if list3[k] < list1[i]:\n                result.append(list3[k])\n                k += 1\n            elif list3[k] < list2[j]:\n                result.append(list3[k])\n                k += 1\n            else:\n                result.append(list1[i])\n                i += 1\n    if i < len(list1):\n        result += list1[i:]\n    elif j < len(list2):\n        result += list2[j:]\n    else:\n        result += list3[k:]\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Define a function to concatenate two lists\n    def concat_lists(list1, list2):\n        return list1 + list2\n    \n    # Define a function to concatenate two lists using recursion\n    def recursive_concat(list1, list2):\n        if len(list1) == 0:\n            return list2\n        else:\n            return [list1[0]] + recursive_concat(list1[1:], list2)\n    \n    # Use the concat_lists and recursive_concat functions to interleave the lists\n    return concat_lists(recursive_concat(list1, recursive_concat(list2, list3)), [])"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a dictionary to store the count of each element in the first tuple\n    count1 = {}\n    for element in test_tup1:\n        if element in count1:\n            count1[element] += 1\n        else:\n            count1[element] = 1\n\n    # create a dictionary to store the count of each element in the second tuple\n    count2 = {}\n    for element in test_tup2:\n        if element in count2:\n            count2[element] += 1\n        else:\n            count2[element] = 1\n\n    # compare the two dictionaries and find the dissimilar elements\n    dissimilar_elements = []\n    for element in count1:\n        if element not in count2:\n            dissimilar_elements.append(element)\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set to store the unique elements in test_tup1 and test_tup2\n    unique_elements = set(test_tup1 + test_tup2)\n    \n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # Loop through the unique elements in the set\n    for element in unique_elements:\n        # If the element is not present in both tuples, add it to the dissimilar_elements list\n        if element not in test_tup1 and element not in test_tup2:\n            dissimilar_elements.append(element)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set of the elements in both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the elements that are present only in set1\n    dissimilar1 = set1.difference(set2)\n    \n    # Find the elements that are present only in set2\n    dissimilar2 = set2.difference(set1)\n    \n    # Print the dissimilar elements\n    print(\"Dissimilar elements in set1:\", dissimilar1)\n    print(\"Dissimilar elements in set2:\", dissimilar2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1) ^ set(test_tup2)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elements.append(elem1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n\n    # Iterate over the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            dissimilar_set.add(i)\n    return dissimilar_set"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven = []\n    for element in test_tuple:\n        if not even_fnc(element):\n            uneven.append(element)\n    return uneven"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            uneven_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            uneven_tuple.append(i)\n        else:\n            pass\n    return uneven_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif isinstance(item, list):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(tup):\n        '''\n        Function to remove uneven elements in a tuple.\n        '''\n        new_tup = []\n        for i in tup:\n            if even_fnc(i):\n                new_tup.append(i)\n        return tuple(new_tup)\n\n    return tuple(remove_uneven(test_tuple))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, list):\n            even_list.append(even_ele(elem, even_fnc))\n        elif isinstance(elem, tuple):\n            even_list.append(even_fnc(elem))\n        else:\n            even_list.append(elem)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list\n\ndef is_even(num): \n    '''\n    A function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = (1, 2, (3, 4, (5, 6)), 7, (8, 9), 10, (11, 12, (13, 14)))\nprint(even_ele(test_tuple, is_even))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result_list.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result_list.append(i)\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            even_list.append(even_fnc(i))\n        elif isinstance(i, tuple):\n            even_list.append(even_ele(i, even_fnc))\n        else:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of square pyramid\n    # A = (base * height) / 2\n    A = (b * s) / 2\n    return A"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = b * s * 2 # calculate the surface area using formula for a square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = (b**2)*s + (b**2)*s + (b*s**2) + (b*s**2) + (b**2)*s + (b**2)*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes the base edge and height of a square pyramid as inputs and calculates the surface area of the pyramid.\n    \"\"\"\n    # Calculate the area of each pyramid using Heron's formula\n    area_base = 0.5 * b * b\n    area_top = 0.5 * b * s\n    \n    # Add up the areas of all the pyramids to get the total surface area\n    surface_area = area_base + area_top\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of each pyramid\n    side_length = b * 0.5\n    pyramid_area = (side_length ** 2) * 4\n    \n    # Calculate the surface area of the base\n    base_area = side_length ** 2\n    \n    # Add the surface areas of the base and the pyramids\n    surface_area = base_area + pyramid_area\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function takes in the base edge of a square pyramid and the height of the pyramid as arguments. \n    It returns the surface area of the pyramid.\n    \"\"\"\n    return (2 * base * height) + (2 * base * base) + (2 * height * height)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    surface_area = (3*b**2 + 6*b*s + s**2) / 2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes a base edge and a height as input and returns the surface area of a square pyramid.\n    The formula for the surface area of a square pyramid is: A = 1/2bh\n    '''\n    \n    surface_area = 0.5 * base_edge * height\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = 0.5 * b * s\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 4*catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(1)\n    1\n    >>> catalan_number(10)\n    55\n    >>> catalan_number(100)\n    1771107178896638638400\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*catalan_number(n//2) + catalan_number(n//2)\n    else:\n        return 2*catalan_number((n-1)//2) + catalan_number((n-1)//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    # Initialize the two matrices\n    A = [[1],[1]]\n    B = [[1,1],[1,0]]\n    C = [[1],[0]]\n    # Calculate the nth catalan number\n    for i in range(2, n+1):\n        A.append([A[j][i-1] + A[j][i-2] for j in range(2)])\n        B.append([B[j][i-1] + B[j][i-2] + B[j][i-3] for j in range(2)])\n        C.append([C[j][i-1] + C[j][i-2] for j in range(2)])\n    return C[1][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Catalan numbers cannot be negative.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the n-th Catalan number recursively.\n\n    Args:\n        n (int): The index of the Catalan number to calculate.\n\n    Returns:\n        int: The n-th Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (1 - 2 * (n % 2) / 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 1:\n        return None\n    elif num == 1:\n        return 1\n    else:\n        return 2 * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n\n    Time Complexity: O(n)\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    catalan = [1] * (2 * n + 1)\n\n    catalan[0] = catalan[1] = 1\n\n    for i in range(2, 2 * n + 1):\n        catalan[i] = (4 * catalan[i - 1] - catalan[i - 2]) / (i - 1)\n\n    return catalan[2 * n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    # initialize the coefficients\n    c1 = 1\n    c2 = 1\n    \n    # calculate the nth catalan number\n    for i in range(1, n+1):\n        c1 = c1 * (i+1) // 2\n        c2 = c2 * i // 2\n        \n    return c1 + c2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (2*n+1)*(catalan_number(n-1) + catalan_number(n-2))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Find all instances of the regular expression \".*ly$\"\n    adverbs = re.findall(r'.*ly$', text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Loop through all the adverbs found\n    for i, adv in enumerate(adverbs):\n        # If the adverb is not preceded by a non-word character, add its position to the list\n        if not re.match(r'\\w', adv):\n            adverb_positions.append(i)\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to search for\n    pattern = r'\\b(ly)\\b'\n\n    # Use re.findall() method to find all matches\n    matches = re.findall(pattern, text)\n\n    # Print the matches and their positions\n    print('Adverbs:')\n    for match, pos in matches:\n        print(match, ':', text.find(match), 'at position', pos)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all instances of \"ly\" at the end of a word\n    matches = re.findall(r'(?<=\\b\\w+)\\bly\\b', text, re.IGNORECASE)\n\n    # Sort the matches by their positions in the text\n    matches.sort(key=lambda x: text.index(x))\n\n    # Print the matches and their positions in the text\n    for match in matches:\n        print(f'{match} found at position {text.index(match)}')\n\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing\n    the adverb ending with \"ly\" and its starting position in the string.\n    '''\n    # Define a regular expression pattern to match the adverb ending with \"ly\"\n    pattern = r'\\bly\\b'\n    # Use the re.findall() function to find all non-overlapping occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Loop through each adverb and append its starting position to the positions list\n    for adverb in adverbs:\n        positions.append(text.find(adverb))\n    # Return the list of positions of the adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with 'ly' in a given string, and return its position(s).\n\n    Args:\n        text (str): The text to search for adverbs.\n\n    Returns:\n        list: A list of positions where the first adverb ending with 'ly' is found.\n    \"\"\"\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n\n    return [m.start() for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regex pattern for adverbs ending with ly\n    pattern = re.compile(r'\\bly\\b', re.IGNORECASE)\n    # find all the matches in the given text and store them in a list\n    matches = pattern.findall(text)\n    # return a list of tuples containing the positions of the adverbs and their values\n    return [(match.start(), match.group(0)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+(ly)$\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    matches = re.finditer(pattern, text)\n    positions = [(m.start(), m.end()) for m in matches]\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern to search for adverbs ending with \"ly\"\n    pattern = r'\\b(\\w*)\\bly\\b'\n    # Use re.finditer to iterate over all non-overlapping matches of the pattern\n    for match in re.finditer(pattern, text):\n        # Get the position of the first match and the matched substring\n        position = match.start()\n        substring = match.group(0)\n        # Print the position and the substring\n        print(position, substring)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    # Regular expression search for all adverbs ending with ly\n    matches = re.findall(pattern, text)\n    # List to store adverb positions and lengths\n    adverbs = []\n    # Iterate through matches and add positions and lengths to adverbs list\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        adverb_len = end_pos - start_pos\n        adverbs.append((start_pos, adverb_len))\n    # Return adverb positions and lengths list\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns\n    the n most expensive items in the list.\n    '''\n    # Create a min heap to store the n most expensive items\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, (-item, item))\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Return the n most expensive items as a list\n    return [heapq.heappop(max_heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of the top n items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n        \n    # Add the remaining items to the heap\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n        \n    # Return the top n items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate over the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap size exceeds n, remove the item with the smallest value\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the items in the min heap in descending order\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a positive integer n as input and\n    returns a list containing the n most expensive items in the input list.\n\n    The function uses a heap data structure to find the n most expensive items\n    in the input list. The heap is implemented as a min heap, where the\n    smallest item (i.e., the first element of the list) is always at the root of\n    the heap.\n\n    The function first converts the input list of items into a heap using the\n    heapq module. Then, it removes the smallest n elements from the heap and\n    returns the remaining elements in the heap as the result.\n\n    Time complexity: O(n log n), where n is the number of items in the input list.\n    Space complexity: O(n), where n is the number of items in the input list.\n    \"\"\"\n\n    # Convert the input list into a heap\n    heap = [(-item, i) for i, item in enumerate(items)]\n    heapq.heapify(heap)\n\n    # Remove the smallest n elements from the heap and return the remaining elements\n    return [heapq.heappop(heap)[1] for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap with the first n elements of the dataset\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate over the remaining elements and push them into the heap\n    for item in items[n:]:\n        if item > heap[0]:\n            heapq.heappushpop(heap, item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n    \n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    min_heap = []\n    max_heap = []\n\n    # Initialize the max heap with the first n items\n    for item in items[:n]:\n        heapq.heappush(max_heap, item)\n\n    # Iterate over the remaining items in the dataset\n    for item in items[n:]:\n        # If the item is less expensive than the maximum item in the max heap,\n        # remove the maximum item from the max heap and replace it with the new item\n        if item < heapq.heappop(max_heap):\n            heapq.heappush(max_heap, item)\n\n        # If the maximum item in the max heap is less expensive than the item,\n        # push the item onto the min heap\n        else:\n            heapq.heappush(min_heap, item)\n\n        # If the size of the min heap is greater than n, remove the minimum item from the heap\n        while len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return -heap[0] if heap else None"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"The index is greater than the length of the list.\")\n    elif n == 1:\n        l.append(l.pop(0))\n        print(\"List after appending:\", l)\n    else:\n        l.insert(n, l.pop(0))\n        print(\"List after inserting:\", l)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Take the first n elements of the list\n    first_n = l[:n]\n    # Remove the first n elements from the list\n    l = l[n:]\n    # Concatenate the first n elements with the rest of the list\n    result = first_n + l\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    part1 = l[:n]\n    part2 = l[n:]\n    new_list = part2 + part1\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at the nth element\n    l1, l2 = l[:n], l[n:]\n    # add the first part to the end\n    l = l1 + l2\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    elif n < 0:\n        return []\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        return l\n    \n    else:\n        half = n // 2\n        first_part = l[:half]\n        second_part = l[half:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if n is valid\n    if n <= 0 or n > len(l):\n        return \"Invalid input. n should be between 1 and the length of the list.\"\n    # Split the list at nth element and add the first part to the end\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables to store the largest and smallest values in the list\n    min_val = nums[0]\n    max_val = nums[0]\n\n    # loop through the list and update the min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    # calculate the difference between the largest and smallest values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize two variables to store the largest and smallest values in the list\n    max_val = nums[0]\n    min_val = nums[0]\n    \n    # iterate through the list and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # calculate the difference between the max and min values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    # find the largest value\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # find the smallest value\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # calculate the difference\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sorting the list in ascending order\n    nums.sort()\n    # Returning the difference between the largest and smallest values in the list\n    return nums[-1] - nums[0]"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            return i\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store the perfect squares between a and b\n    perfect_squares_list = []\n\n    # Loop through all integers between a and b\n    for i in range(a, b+1):\n        # Check if the integer is a perfect square\n        if i * i == a:\n            perfect_squares_list.append(i)\n        elif i * i == b:\n            perfect_squares_list.append(i)\n        else:\n            # If the integer is not a perfect square, check if it is a pair of perfect squares\n            j = i\n            while j * j <= b:\n                if i * i == j * j:\n                    perfect_squares_list.append(i)\n                    perfect_squares_list.append(j)\n                j += 1\n\n    # Return the list of perfect squares between a and b\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all the perfect squares between two given numbers a and b.\n    '''\n    #Creating a list to store the perfect squares\n    perfect_squares_list = []\n    \n    #Iterating from a to b\n    for i in range(a, b+1):\n        #Calculating the square root of i\n        root = int(i ** 0.5)\n        \n        #Checking if the square root is an integer\n        if root.is_integer():\n            #Calculating the square of the square root\n            square = int(root ** 2)\n            \n            #Checking if the square is between a and b\n            if square >= a and square <= b:\n                #If the square is between a and b, adding it to the list\n                perfect_squares_list.append(square)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # check if a is less than b\n    if a < b:\n        a, b = b, a\n    \n    # iterate from a to b and check for perfect squares\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        square = int(i**0.5)\n        if i == square**2:\n            # print the square if it is a perfect square\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_set = set()\n    for num in range(a, b+1):\n        if num**2 == num and num not in perfect_squares_set:\n            perfect_squares_set.add(num)\n    return perfect_squares_set\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a:\n            print(i)\n        elif i*i == b:\n            print(i)\n        elif i*i > a and i*i < b:\n            print(i, i*i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i*i == a:\n            squares.append(i)\n        elif i*i == b:\n            squares.append(i)\n        else:\n            square = int(i**0.5)\n            if square**2 == i:\n                squares.append(square)\n            elif square**2 > i:\n                break\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate through the numbers from a to b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = i * i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle\n    theta (complex): The angle of the line with the x-axis\n\n    Returns:\n    x (float): The distance from the origin to the point on the line perpendicular to the line from the origin\n    y (float): The distance from the origin to the point on the line parallel to the line from the origin\n    \"\"\"\n\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): the distance from the origin\n    theta (float): the angle in radians\n\n    Returns:\n    tuple: (x, y) where x is the distance from the origin and y is the angle in radians\n\n    \"\"\"\n    # Convert theta from radians to degrees\n    theta = cmath.degrees(theta)\n    \n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    This function takes a radius r and a phase phi in radians, and returns the corresponding x and y coordinates in the rectangular plane.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): distance from origin\n    phi (float): angle in radians\n\n    Returns:\n    x (float): x-coordinate of point in rectangular coordinates\n    y (float): y-coordinate of point in rectangular coordinates\n    \"\"\"\n\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r,theta) to rectangular coordinates.\n    \"\"\"\n    # Convert to complex number\n    z = cmath.rect(r*cmath.exp(1j*theta))\n    # Convert to rectangular coordinates\n    x = z.real\n    y = z.imag\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        print(\"The list must have at least two elements.\")\n        return\n    else:\n        # Create a new list that contains the first and last elements swapped\n        swappedList = newList[1:] + [newList[0]]\n        return swappedList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    length = len(newList)\n    if length < 2:\n        return \"List should have at least two elements.\"\n    else:\n        first = newList[0]\n        last = newList[length-1]\n        newList[0] = last\n        newList[length-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list should have at least two elements.\"\n\n    # Interchange the first and last elements\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is less than 2\n    if len(newList) < 2:\n        return newList\n    \n    # Interchange the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least two elements to swap.\"\n    else:\n        # swap the first and last elements in the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0] \n    last = newList[-1] \n    newList[0] = last \n    newList[-1] = first \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # check if the list has more than one element\n    if len(newList) < 2:\n        print(\"The list should have more than one element.\")\n        return None\n    # interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n\n    # swap the first and last element\n    first, last = newList[0], newList[-1]\n    newList[0], newList[-1] = last, first\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum_of_product = 0\n\n    # Iterate over the first k terms of the binomial co-efficient sequence\n    for i in range(k):\n\n        # Calculate the binomial co-efficient of i and k\n        binomial_coeff = (n + 1) // 2 * factorial(n - i) * factorial(k - i) // factorial(i)\n\n        # Add the binomial co-efficient to the sum of the product of consecutive binomial co-efficients\n        sum_of_product += binomial_coeff\n\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if k is less than or equal to n\n    if k > n:\n        return None\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Calculate binomial coefficient\n    factorial = 1\n    for i in range(1,k+1):\n        factorial *= i\n\n    # Calculate sum of product of consecutive binomial coefficients\n    sum = factorial // (factorial - (n-k))\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if n is less than k\n    if n < k:\n        return \"Error: n must be greater than or equal to k.\"\n    \n    # Initialize the sum\n    sum = 0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        sum += (n-i+1) * binomial_Coeff(n-1,i-1)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, representing the values of n and k in the binomial coefficient sum.\n    The function calculates the sum of the product of consecutive binomial co-efficients and returns it.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate from 0 to k\n    for i in range(k+1):\n        # Calculate the binomial coefficient (n choose i)\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        # Calculate the product of consecutive binomial coefficients (n choose i) and k choose i-k\n        product = factorial\n        for l in range(k+1, i+1):\n            product *= l\n        # Add the product of consecutive binomial coefficients to the sum\n        sum += product\n    # Return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 0\n    elif k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum = 0\nfor i in range(n-k+1):\n    sum += binomial_Coeff(n,i) * binomial_Coeff(k-1,i)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k+1):\n        sum += (n-i) * binomial_Coeff(n-1,i)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient using recursion\n    def binomial_coeff_recursive(n,k,total):\n        if n == k:\n            return total\n        else:\n            return binomial_coeff_recursive(n-1,k,total*(n-k)/(k-1))\n\n    # Find the sum of the product of consecutive binomial co-efficients using the recursive function\n    return binomial_coeff_recursive(n,k,1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k,n+1):\n        sum += (n-i+1) * binomial_Coeff(n,i-1)\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n,k))"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address using regular expression\n    ip = re.sub(r'^(0+)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    if re.match(pattern, ip):\n        ip = ip.replace('.0', '')\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0*)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match the format of an ip address\n    pattern = re.compile(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    # Check if the given ip address matches the pattern\n    if pattern.match(ip):\n        # Split the ip address into octets\n        octets = ip.split('.')\n        # Remove leading zeroes from each octet\n        for i in range(len(octets)):\n            if octets[i] == '0':\n                octets[i] = ''\n        # Join the octets into a new ip address\n        new_ip = '.'.join(octets)\n        return new_ip\n    else:\n        # Return the original ip address if it does not match the pattern\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Removing leading zeroes from ip address using regular expression\n    ip = re.sub('^0+', '', ip)\n    \n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    if even_num is None or odd_num is None:\n        return \"No even or odd numbers found in the list.\"\n    else:\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return None\n\n    # Find the first even number in the list\n    even_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n\n    # Find the first odd number in the list\n    odd_num = None\n    for num in list1:\n        if num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    # Check if both even and odd numbers are present in the list\n    if even_num is None or odd_num is None:\n        return None\n\n    # Calculate the difference between the even and odd numbers\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    first_even = None\n    first_odd = None\n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # if the first even number is not initialized, set it to this number\n            if first_even is None:\n                first_even = num\n            # otherwise, subtract the first even number from this number to find the difference\n            else:\n                diff = num - first_even\n                # if the difference is less than the first difference found, set the first difference to this difference\n                if diff < first_diff:\n                    first_diff = diff\n    # return the difference\n    return first_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return \"Error: The list is empty.\"\n    \n    # Check if the list contains only one number\n    elif len(list1) == 1:\n        if list1[0] % 2 == 0:\n            return list1[0]\n        else:\n            return list1[0] + 1\n    \n    # Check if the list contains two numbers\n    elif len(list1) == 2:\n        if list1[0] % 2 == 0:\n            return list1[0]\n        elif list1[1] % 2 == 1:\n            return list1[1]\n        else:\n            return abs(list1[0] - list1[1])\n    \n    # If the list contains more than two numbers, iterate through the list and calculate the difference of even and odd numbers\n    else:\n        even_sum = 0\n        odd_sum = 0\n        for num in list1:\n            if num % 2 == 0:\n                even_sum += num\n            else:\n                odd_sum += num\n        \n        if even_sum == 0 and odd_sum == 0:\n            return \"Error: No even or odd numbers found.\"\n        else:\n            return abs(even_sum - odd_sum)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    diff = abs(even_count - odd_count)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        even_diff = even_num - odd_num\n    else:\n        even_diff = even_num + odd_num\n\n    return even_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                first_even -= num\n        else:\n            if first_odd is None:\n                first_odd = num\n            else:\n                first_odd -= num\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        even_num += 1\n    else:\n        even_num -= 1\n    \n    if odd_num % 2 == 0:\n        odd_num -= 1\n    else:\n        odd_num += 1\n    \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = 0\n    odd_first = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_first += i\n        else:\n            odd_first += i\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n        if str1[i] == str2[i]:\n            dp[i][i] = 0\n    for len_ in range(2, n+1):\n        for i in range(n-len_+1):\n            j = i + len_-1\n            if str1[i]!= str2[j]:\n                dp[i][j] = float('inf')\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1], dp[i+1][j-1]) + 1\n    return dp[0][n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # convert both strings to lists of integers\n    str1 = [int(x) for x in str1]\n    str2 = [int(x) for x in str2]\n\n    # compare the two lists, swapping values if they are not equal\n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swap_count += 1\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    n = len(str1)\n    swaps = 0\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            if str1[i] == '1' and str2[i] == '0' : \n                swaps += 1\n            elif str1[i] == '0' and str2[i] == '1' : \n                swaps += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2): \n    # Convert both binary strings to lists of integers\n    bin1 = [int(x) for x in str1]\n    bin2 = [int(x) for x in str2]\n    \n    # Initialize swaps count to 0\n    swaps = 0\n    \n    # Compare each pair of bits in both binary strings\n    for i in range(len(bin1)): \n        if bin1[i]!= bin2[i]: \n            # If a pair of bits is different, swap them\n            bin1[i], bin2[i] = bin2[i], bin1[i] \n            # Increment swaps count\n            swaps += 1\n    \n    # Return the number of swaps required to convert bin1 to bin2\n    return swaps \n``` \n\nLet's test this function with some examples: \n\n```python\nprint(min_Swaps(\"11100111\", \"11101110\")) # Output: 2\nprint(min_Swaps(\"11010000\", \"11001100\")) # Output: 1\nprint(min_Swaps(\"10101010\", \"10110010\")) # Output: 2\nprint(min_Swaps(\"11111111\", \"00000000\")) # Output: 16\n``` \n\nThe function correctly returns the minimum number of swaps required to convert one binary number to another."
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through each bit in the binary numbers\n    for i in range(32):\n        # Calculate the bitwise XOR of the two integers\n        xor = int1 ^ int2\n\n        # If the result is 0, we don't need to swap anything\n        if xor == 0:\n            continue\n\n        # Find the least significant bit that is set in the XOR result\n        lsb = xor & -xor\n\n        # Calculate the index of the least significant bit in both strings\n        str1_lsb_index = str1.index(str(lsb))\n        str2_lsb_index = str2.index(str(lsb))\n\n        # Calculate the number of swaps required to convert the LSB from the first string to the LSB in the second string\n        first_str_lsb_count = str1.count('1') - str1.count('0')\n        second_str_lsb_count = str2.count('1') - str2.count('0')\n        swaps = abs(first_str_lsb_count - second_str_lsb_count)\n\n        # Update the minimum number of swaps if this is the smallest so far\n        if swaps < min_swaps:\n            min_swaps = swaps\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function will count the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Check if the length of the binary strings is equal\n    if len(str1)!= len(str2):\n        return \"Strings are not of equal length.\"\n    \n    # Initialize variables\n    count = 0\n    swapped = False\n    \n    # Loop through the binary strings\n    for i in range(len(str1)):\n        \n        # Check if the characters are equal\n        if str1[i]!= str2[i]:\n            \n            # If they are not, swap them\n            str1[i], str2[i] = str2[i], str1[i]\n            \n            # Count the number of swaps\n            count += 1\n            \n            # Mark that swapping has occurred\n            swapped = True\n            \n    # Check if swapping has occurred\n    if swapped == False:\n        return \"No swaps required.\"\n    else:\n        return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Initialize a 2D array to store the cost of swapping characters from both strings\n    cost = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n\n    # Initialize the cost of swapping each character of both strings with its corresponding position\n    for i in range(1, n1 + 1):\n        cost[i][0] = i\n    for j in range(1, n2 + 1):\n        cost[0][j] = j\n\n    # Fill the cost matrix using dynamic programming\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            # If the characters of the two strings match, cost is zero\n            if str1[i - 1] == str2[j - 1]:\n                cost[i][j] = cost[i - 1][j - 1]\n            # If the characters of the two strings don't match, swap one character to make the strings match\n            else:\n                # Find the position of the character in the first string that can be swapped with the character in the second string\n                min_pos = cost[i - 1][j]\n                for k in range(i):\n                    if str1[k] == str2[j - 1] and cost[k + 1][j] < min_pos:\n                        min_pos = cost[k + 1][j]\n                # Swap the characters at the minimum position and the current position of the first string\n                str1[i - 1], str2[j - 1] = str2[j - 1], str1[i - 1]\n                # Add the cost of swapping the characters to the cost matrix\n                cost[i][j] = min_pos + 1\n\n    # Return the minimum number of swaps required to convert the two binary strings\n    return cost[n1][n2]\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    i = 0\n    \n    while i < n:\n        if str1[i]!= str2[i]:\n            break\n        i += 1\n        swaps += 1\n        \n    if i == n:\n        return swaps\n    \n    # Swap the characters at the i-th index\n    str1[i], str1[n-1] = str1[n-1], str1[i]\n    str2[i], str2[n-1] = str2[n-1], str2[i]\n    swaps += 1\n    \n    # Check if the problem reduces to binary search\n    if n > 1:\n        return min(min_Swaps(str1[:n//2], str2[:n//2]), min_Swaps(str1[n//2:], str2[n//2:]))\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to binary numbers\n    binary1 = int(str1, 2)\n    binary2 = int(str2, 2)\n\n    # find the number of bits in each binary number\n    n1 = len(bin(binary1)[2:])\n    n2 = len(bin(binary2)[2:])\n\n    # compare the numbers of bits and return the minimum number of swaps required\n    return min(n1, n2)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            break\n        else:\n            swaps += n-i\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Enter the size of tuple:\")\n    size = int(input())\n    sys.stdout.write(\"Enter the elements of tuple:\")\n    elements = tuple(input().split())\n    size_of_tuple = sys.getsizeof(tuple_list)\n    size_of_elements = sys.getsizeof(elements)\n    final_size = size_of_tuple + size_of_elements + size\n    print(\"The size of the tuple is:\", final_size)\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # get the size of the tuple\n    tuple_size = sys.getsizeof(tuple_list)\n    \n    # convert the size to bytes\n    tuple_size_bytes = tuple_size * sys.getsizeof(1)\n    \n    return tuple_size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize variables\n    total_size = 0\n    \n    # iterate through the tuple_list\n    for item in tuple_list:\n        # check if the item is a tuple\n        if isinstance(item, tuple):\n            # recursively calculate the size of the tuple\n            item_size = tuple_size(item)\n            # add the size of the tuple to the total_size\n            total_size += item_size\n        else:\n            # add the size of the item to the total_size\n            total_size += sys.getsizeof(item)\n    \n    # return the total_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # calculate the size of each element in bytes\n    element_size = sys.getsizeof(tuple_list[0])\n    # calculate the size of the tuple in bytes\n    tuple_size = sys.getsizeof(tuple_list)\n    # calculate the total size of the tuple and all its elements in bytes\n    total_size = tuple_size + sum([element_size * len(x) for x in tuple_list])\n    # return the total size in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize the size to zero\n    size = 0\n    # iterate over the tuples in the list\n    for tuple in tuple_list:\n        # compute the size of the tuple in bytes\n        tuple_size = sys.getsizeof(tuple)\n        # add the size to the running total\n        size += tuple_size\n    # return the total size\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return 0\n    else:\n        size_of_list = 0\n        for i in tuple_list:\n            size_of_list += sys.getsizeof(i)\n        return size_of_list + sys.getsizeof(tuple_list)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the indices of the kth smallest element in both arrays\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If both elements are equal, increment i to move to the next element in arr1\n            i += 1\n            j += 1\n\n    # Find the kth smallest element based on the position of the kth element in the two arrays\n    if i < len(arr1):\n        return arr1[i]\n    elif j < len(arr2):\n        return arr2[j]\n    else:\n        # If both arrays are exhausted, return None to indicate that there is no such element\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n    \n    if len(arr1) == 0:\n        return arr2[k-1]\n    \n    if len(arr2) == 0:\n        return arr1[k-1]\n    \n    if k <= len(arr1):\n        if arr1[k-1] < arr2[0]:\n            return find_kth(arr1[k:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[1:], k)\n    \n    if k <= len(arr1) + len(arr2):\n        if arr2[k-len(arr1)-1] < arr1[0]:\n            return find_kth(arr1, arr2[k:], k)\n        else:\n            return find_kth(arr1, arr2, k-len(arr1)-1)\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    kth = None\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if kth is None or arr1[i] < kth:\n                kth = arr1[i]\n            i += 1\n        else:\n            if kth is None or arr2[j] < kth:\n                kth = arr2[j]\n            j += 1\n            \n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a number k and returns the kth smallest element from the arrays.\n\n    Args:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The number of elements to find in the sorted arrays.\n\n    Returns:\n    int: The kth smallest element from the given sorted arrays.\n\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth element from the two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    \n    # Finding the length of the array\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Traverse both the arrays simultaneously\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[k] = arr1[k], arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr2[j], arr2[k] = arr2[k], arr2[j]\n            j += 1\n            k += 1\n            \n    # If one of the array is completely traversed\n    # then the remaining elements in the other array are k elements\n    if i == n1:\n        return arr2[j:k]\n    else:\n        return arr1[i:k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Merge two sorted arrays into one\n    merged_arr = arr1 + arr2\n\n    # Find the kth element\n    sorted_arr = sorted(merged_arr)\n    kth_element = sorted_arr[k-1]\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    if len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n\n    if arr1[0] <= arr2[0]:\n        if k <= len(arr1):\n            return find_kth(arr1[1:], arr2, k)\n        else:\n            return find_kth(arr1, arr2[1:], k-len(arr1))\n    else:\n        if k <= len(arr2):\n            return find_kth(arr1, arr2[1:], k)\n        else:\n            return find_kth(arr1, arr2, k-len(arr2))"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Function to check if a number is armstrong or not\n    \"\"\"\n    num = str(num)\n    power = 1\n    sum = 0\n    for digit in num:\n        sum += int(digit) ** power\n        power += 1\n    return sum == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether the given number is Armstrong number or not.\n    \"\"\"\n    # Finding the length of the number\n    length = len(str(n))\n    \n    # Initializing sum variable\n    sum = 0\n    \n    # Iterating through each digit of the number\n    for i in range(length):\n        # Extracting the digit of the number\n        digit = int(str(n)[i])\n        \n        # Multiplying the digit with the sum of squares of the previous digits\n        sum += digit ** length\n    \n    # Checking whether the sum of squares of digits is equal to the original number\n    if sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    # convert the number to string\n    str_num = str(number)\n    \n    # initialize variables to store the sum of the powers of each digit\n    sum_of_powers = 0\n    digit_count = 0\n    \n    # loop through each digit in the number\n    for digit in str_num:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        \n        # calculate the power of the digit\n        power = 0\n        while digit_int > 0:\n            power += digit_int % 10\n            digit_int //= 10\n        \n        # add the power of the digit to the sum of powers\n        sum_of_powers += power**digit_count\n        \n        # increment the digit count\n        digit_count += 1\n    \n    # check if the sum of powers equals the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function takes an integer and returns True if it is an Armstrong number and False otherwise.\n    \"\"\"\n    # Check if the number is less than 10\n    if n < 10:\n        return False\n\n    # Calculate the sum of the cube of the digits\n    num_digits = len(str(n))\n    cube_sum = sum([int(digit)**3 for digit in str(n)])\n\n    # Return True if the sum is equal to the original number\n    return cube_sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    num = str(number)\n    sum = 0\n    temp = number\n\n    while number > 0:\n        digit = number % 10\n        sum += digit ** len(num)\n        number //= 10\n\n    if temp == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(num):\n    '''\n    This function takes an integer as input and returns True if it is an armstrong number, False otherwise.\n    An Armstrong number is a number whose sum of its own digits raised to the power of the number of digits is equal to the number itself.\n    '''\n    if num < 10:\n        return False\n    elif num == 10:\n        return True\n    else:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits = sum(digits)\n        power_of_digits = len(digits)\n        total_sum = sum_of_digits ** power_of_digits\n        return num == total_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # check if number is an integer\n    if not isinstance(number, int):\n        return \"Number must be an integer.\"\n    \n    # calculate the sum of the cubes of the digits in the number\n    digits = [int(digit) for digit in str(number)]\n    cube_sum = sum([digit**3 for digit in digits])\n    \n    # check if the calculated sum is equal to the original number\n    if number == cube_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    \n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # calculate the sum of the cubes of each digit of the number\n    sum_of_cubes = 0\n    for i in range(num_len):\n        digit = int(num_str[i])\n        sum_of_cubes += digit ** 3\n    \n    # check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # convert the number to a string\n    num_str = str(number)\n\n    # initialize a variable to store the sum of cubes\n    sum_cubes = 0\n\n    # loop through each digit in the number and add its cube to the sum\n    for digit in num_str:\n        digit = int(digit)\n        sum_cubes += digit**3\n\n    # check if the sum of cubes is equal to the original number\n    if sum_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    average = total / number\n    print(\"Sum of the first\", number, \"natural numbers is:\", total)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    n = 1\n    while n <= number:\n        sum += n\n        n += 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    # Initializing sum and count variables\n    sum_of_numbers = 0\n    count = 0\n\n    # Generating and storing the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n\n    # Calculating the sum and average\n    average = sum_of_numbers / count\n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    print(\"Sum of first\", number, \"natural numbers is:\", total)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables to store sum and average\n    total = 0\n    count = 0\n    # loop over first n numbers and compute sum and average\n    for i in range(number):\n        total += i\n        count += 1\n    # compute and print average\n    average = total / count\n    print('Sum:', total)\n    print('Average:', average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns a boolean value indicating whether the input number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    char_set = set(str1)\n    # Check if the length of the set is 1 (i.e. all characters are unique)\n    if len(char_set) == 1:\n        return None\n    # Find the first character that appears more than once in the set\n    for char in char_set:\n        if str1.count(char) > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count > 1:\n            return char\n            \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char = None\n    count = 0\n    for char in str1:\n        if char == first_char:\n            count += 1\n        elif char!= first_char:\n            first_char = char\n            count = 1\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char not in char_list:\n            char_list.append(char)\n        else:\n            return char_list[char_list.index(char)]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                return str1[i]\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic_numbers.append(i*(i+1))\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if n // i == i:\n                lucid_numbers.append(i)\n            else:\n                lucid_numbers.append(n // i)\n                lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n):\n        if i % 2!= 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if i >= 1:\n                ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    i = 0\n    while i * (i + 1) <= n:\n        lucids.append(i * (i + 1))\n        i += 1\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucids = []\n    for i in range(n):\n        lucid = i * (i + 1) // 2\n        lucids.append(lucid)\n\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n            i += 1\n        elif i > n:\n            break\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Write a helper function to check if a given integer is a Lucid number.\n    '''\n    sum_of_squares = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum_of_squares += digit ** 2\n        temp //= 10\n    return n * n == sum_of_squares"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic_numbers = []\n    current = 1\n\n    while current <= n:\n        if is_lucid(current):\n            ludic_numbers.append(current)\n        current += 1\n\n    return ludic_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a number is a lucid number or not.\n    '''\n\n    # check if the number has only 1 digit\n    if len(str(n)) == 1:\n        return True\n\n    # check if the number has at least 2 digits\n    if len(str(n)) < 2:\n        return False\n\n    # check if the sum of the digits of the number is a multiple of 7\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    if sum_of_digits % 7 == 0:\n        return True\n\n    return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            lucid.append(i)\n    lucid.append(n)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    reversed_words = \" \".join(words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    reversed_words = words[::-1]  # reverse the order of words in the list\n    return \" \".join(reversed_words)  # join the reversed words back into a string with spaces\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse each word in the list using slicing\n    reversed_words = [word[::-1] for word in words]\n    \n    # join the list of reversed words with spaces to form the reversed string\n    reversed_s = \" \".join(reversed_words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the words back together separated by spaces\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words = list(reversed(words))\n    s =''.join(words)\n    return s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Check if the given integer is a prime number and return True if it is, otherwise return False.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Initialize a variable to store if the number is prime or not\n    is_prime = True\n\n    # Loop through all the numbers from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # If the number is divisible by any number from 2 to the square root of the number, it is not prime\n        if num % i == 0:\n            is_prime = False\n            break\n\n    # Return the value of the is_prime variable\n    return is_prime\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(match, start_index, end_index)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(0), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        yield literal, start_index, end_index\n\ntext = \"Hello, world! This is a test string.\"\npattern = r'\\b\\w+\\b'\nfor literal, start_index, end_index in find_literals(text, pattern):\n    print(f\"Found literal: '{literal}' at index {start_index} to {end_index}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. \n    The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    This function will find the nth Bell number.\n    '''\n\n    # initialize the first two bell numbers\n    bell_1 = 1\n    bell_2 = 1\n\n    # iterate till n-1\n    for i in range(2, n):\n        # calculate the next bell number\n        bell_i = bell_1 + bell_2\n\n        # update the values for bell_1 and bell_2\n        bell_1 = bell_2\n        bell_2 = bell_i\n\n    return bell_i"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize variables\n    num1 = 0\n    num2 = 1\n\n    # Calculate nth bell number\n    for i in range(1, n+1):\n        nth_bell = num1 + num2\n        num1 = num2\n        num2 = nth_bell\n\n    return num2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n\n    Parameters:\n    n (int): The number of Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n    \"\"\"\n    return int((n / 2) * (n / 2 + 1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 0 \n    factorial = 1 \n    power = n \n    while power > 0: \n        factorial *= power \n        power -= 1 \n    result = factorial // (factorial + 1) \n    return result "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nprint(bell_Number(5)) # Output: 12\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # remove the kth element from the list\n    list1.pop(L-1)\n\n    # return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and an integer L and returns a new list with the same elements,\n    but the k'th element removed.\n    \"\"\"\n    list2 = list1[:L-1] + list1[L:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Get the length of the list\n    n = len(list1)\n    # Initialize the index variable to 0\n    i = 0\n    # Initialize the new list to store the elements\n    new_list = []\n    # Iterate through the list\n    for j in range(n):\n        # If the current index is not equal to L-1, add the current element to the new list\n        if i!= L-1:\n            new_list.append(list1[j])\n        # If the current index is equal to L-1, remove the element at index L-1 from the original list\n        elif i == L-1:\n            del list1[L-1]\n        # Increment the index\n        i += 1\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1 = list(list1)\n    k = L - 1\n    if k >= len(list1):\n        return []\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    while k < len(list1):\n        list1.pop(k)\n        k += 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Remove the kth element from a list.\n    '''\n    if L == 0:\n        return []\n    elif L == len(list1):\n        return []\n    elif L < 0 or L > len(list1):\n        raise ValueError(\"Invalid index\")\n    else:\n        return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_value to the first element in the column\n    max_value = test_list[0][N-1]\n    \n    # loop through the matrix and update max_value if the nth element is greater than max_value\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the max value\n    max_val = float('-inf')\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # If the index of the column we are interested in is greater than or equal to the length of the row, we can't get the nth column, so return None\n        if N >= len(row):\n            return None\n\n        # Get the nth column value\n        nth_col = row[N]\n\n        # If the nth column value is greater than the current max value, update the max value\n        if nth_col > max_val:\n            max_val = nth_col\n\n    # If we have looped through all the rows without finding the nth column, return None\n    return None"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(test_list)\n    columns = len(test_list[0])\n\n    # Check if the given column exists in the matrix\n    if N > columns:\n        return \"Error: Column does not exist in the matrix.\"\n\n    # Initialize the max value to be the first element of the column\n    max_val = test_list[0][N-1]\n\n    # Iterate over the remaining elements in the column\n    for i in range(1, rows):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0:\n        return None\n\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max_of_nth(test_list[i], N))\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    count = 0\n    \n    for i in range(len(test_list)):\n        if count == N:\n            max_value = max(max_value, test_list[i][N-1])\n        count += 1\n    \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i < N:\n            continue\n        value = max(test_list[i][N-1], test_list[i][N-2])\n        max_value = max(max_value, value)\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # loop through each row of the matrix\n    for row in test_list:\n        # get then'th column of the row\n        nth_column = [row[i] for i in range(len(row)) if i % N == 0]\n        # find the maximum value in the nth column\n        max_val = max(nth_column)\n        # print the max value of the nth column\n        print(max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    max_row = 0\n    for i in range(len(test_list)):\n        if i == N:\n            continue\n        if max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n            max_row = i\n    return max_val, max_row"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if N <= len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the matrix\n    num_rows = len(test_list)\n    # Get the length of the first element in the matrix\n    num_cols = len(test_list[0])\n    # Check if the Nth column exists in the matrix\n    if N >= num_cols:\n        return None\n    # Initialize an empty list to store the max values of each row\n    max_values = []\n    # Loop through each row of the matrix\n    for i in range(num_rows):\n        # Get then'th column of the i-th row\n        nth_col = [row[N] for row in test_list]\n        # Find the max value of then'th column\n        max_value = max(nth_col)\n        # Add the max value to the max_values list\n        max_values.append(max_value)\n    # Return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        new_lst.append([lst[i][0], lst[i+1][1]])\n    return new_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            total += test_list[i][j]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        current_sum = 0\n        for j in range(i, len(test_list)):\n            current_sum += test_list[j][0]\n            sum_list.append(current_sum)\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            for i in item:\n                total += i\n        else:\n            total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to zero\n    cumulative_sum = 0\n\n    # Loop through the tuple list and add each value to the cumulative sum\n    for value in test_list:\n        cumulative_sum += value\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    total = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            total += val\n    \n    # Return the cumulative sum\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple) / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        if isinstance(num_tuple, tuple):\n            average = sum(num_tuple) / len(num_tuple)\n            average_list.append(average)\n        else:\n            average_list.append(num_tuple)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Compute the sum of all values in the tuple\n        total = sum(tup)\n        # Compute the average by dividing the sum by the number of values in the tuple\n        avg = total / len(tup)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        result.append(total/len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for num_list in nums:\n        total += sum(num_list)\n        count += len(num_list)\n    averages = [total/count]\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg = sum_tup / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store averages\n    averages = []\n\n    # iterate over each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize sum to 0 for each tuple\n        sum = 0\n\n        # iterate over each value in the tuple\n        for val in tup:\n            # add value to sum for each tuple\n            sum += val\n\n        # calculate and append average value to list\n        averages.append(sum/len(tup))\n\n    # return list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_nums = sum(tup)\n        average = sum_nums/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    else:\n        modulo_list = []\n        for i in range(len(test_tup1)):\n            modulo_list.append(test_tup1[i] % test_tup2[i])\n        return tuple(modulo_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length!\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jump_count = 0\n    i = 0\n    while i < steps:\n        if i > 0 and i % 2 == 0:\n            jump_count += 1\n        i += 1\n\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    def helper(i, j, k):\n        if i == steps or j == d or k == d or i > steps:\n            return steps - i\n        if i < steps and j < d and k < d:\n            return min(helper(i+1, j+1, k), helper(i+1, j, k+1), helper(i, j+1, k+1), helper(i, j+1, k), helper(i, j, k+1))\n        else:\n            return min(helper(i+1, j+1, k), helper(i+1, j, k+1), helper(i, j+1, k+1), helper(i, j, k+1))\n    \n    return helper(0, 0, 0)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    distance = 0\n    # Iterate through steps\n    for i in range(steps):\n        # If the distance is greater than or equal to the destination, increment count\n        if distance >= d:\n            count += 1\n        # Move the distance and subtract 1 from the remaining steps\n        distance += 1\n        steps -= 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the distance traveled and the number of jumps\n    dist = 0\n    jump_count = 0\n\n    # Loop through each step in the list of steps\n    for i in range(len(steps)):\n        # If the current step is greater than the desired distance, reset the distance to 0 and add 1 to the jump count\n        if steps[i] > d:\n            dist = 0\n            jump_count += 1\n        # If the current step is less than or equal to the desired distance, add 1 to the distance traveled\n        else:\n            dist += 1\n\n    # Return the number of jumps required\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize the dp array\n    dp = [[float('inf')] * (steps+1) for _ in range(steps+1)]\n    dp[0][0] = 0\n    \n    # Fill the dp array using the recurrence relation\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            if (i, j) == (0, 0):\n                dp[i][j] = 0\n            else:\n                if (i, j) == (d, 0):\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1])\n                    \n    # Return the minimum number of jumps needed to reach the target point\n    return dp[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf')] * (steps+1) for _ in range(steps+1)]\n    dp[0][0] = 0\n\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            if i == j == d:\n                dp[i][j] = 0\n                continue\n            if i > j:\n                dp[i][j] = dp[j-1][i-1] + 1\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[j][i-1]) + 1\n\n    return dp[steps][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps\n    else:\n        return min_Jumps(steps, d-1) + steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Define the initial state\n    pos = 0\n    step_count = 0\n    curr_pos = pos\n    path = []\n    \n    # Define the target state\n    target = (d, 0)\n    \n    # Iterate through the list of steps\n    while step_count < steps and curr_pos!= target:\n        # Check if the current position is a valid jump destination\n        if curr_pos[0] + 1 < target[0]:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n        elif curr_pos[1] - 1 >= 0:\n            curr_pos = (curr_pos[0], curr_pos[1] - 1)\n        else:\n            # If the current position is not valid, add the position to the path and move to the next step\n            path.append(curr_pos)\n            step_count += 1\n    \n    # Return the length of the path\n    if step_count == steps:\n        return step_count\n    else:\n        return step_count + len(path)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    total_steps = 0\n    min_steps = steps\n    step_count = 0\n    i = j = 0\n    n = len(steps)\n\n    while i < n and j >= 0:\n        i += 1\n        if i <= j:\n            j += 1\n        elif i > j:\n            i += 1\n        if i == d:\n            total_steps += 1\n            j = n - 1\n        step_count += 1\n\n    if total_steps < min_steps:\n        return min_steps\n    else:\n        return step_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    # Calculate the minimum number of jumps required to reach (d, 0) from origin\n    min_jumps = 0\n    for i in range(steps):\n        if (d - i) >= 0:\n            min_jumps += 1\n        else:\n            break\n    return min_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have same length\")\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        nums1[i] //= nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # If both lists have the same length, we can divide each element\n    if len(nums1) == len(nums2):\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result\n    # If the length of one list is shorter than the other, we need to pad the shorter list with zeros\n    elif len(nums1) < len(nums2):\n        nums2 = nums2 + [0] * (len(nums1) - len(nums2))\n        return div_list(nums1, nums2)\n    # If the length of one list is longer than the other, we need to pad the longer list with zeros\n    else:\n        nums1 = nums1 + [0] * (len(nums2) - len(nums1))\n        return div_list(nums1, nums2)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'The two lists should have same length.'\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            return 'Cannot divide by zero.'\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should be of same length.\")\n        return\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] / nums2[i]\n        return nums1"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall(r'\\d+', test_str)  # Find all numbers in the string\n    nums.sort(reverse=True)  # Sort the numbers in reverse order\n    nums_str = ''.join(nums)  # Convert the sorted numbers to a string\n    return test_str.replace(nums_str, '') + nums_str  # Replace the numbers with the sorted numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n\n    Args:\n        test_str (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n    \"\"\"\n    num_pattern = r'\\d+'\n    num_list = re.findall(num_pattern, test_str)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n    \n    test_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            test_str += i\n    \n    while len(num_str)!= 0:\n        test_str += num_str[0]\n        num_str = num_str[1:]\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list) + test_str.replace(''.join(num_list), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize an empty list to store numbers\n    numbers = []\n\n    # iterate over each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the list\n        if char.isdigit():\n            numbers.append(char)\n\n    # sort the list in ascending order\n    numbers = sorted(numbers)\n\n    # concatenate the numbers in reverse order to form the final string\n    final_str = ''.join(reversed(numbers))\n\n    return final_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str.replace(num_str, '') + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            test_str = ''.join(num_list) + test_str\n            num_list = []\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(test_str)\n    # Initialize a variable to keep track of the index of the last digit\n    last_digit_index = -1\n    \n    # Loop through the list of characters and move all the digits to the end of the string\n    for index, char in enumerate(char_list):\n        # If the character is a digit, move it to the end of the list\n        if char.isdigit():\n            last_digit_index = index\n    \n    # Reverse the list to get the digits in the correct order\n    digits = char_list[last_digit_index:]\n    char_list[last_digit_index:] = []\n    \n    # Reverse the list of characters to get the digits in the correct order\n    char_list.reverse()\n    \n    # Combine the two lists of digits and characters and return the final string\n    return ''.join(char_list + digits)\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    nums.reverse()\n    result = ''\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 0\n    \n    for i in range(n):\n        left, right = i, i\n        while left >= 0 and right < n and a[left] % a[right]!= 0:\n            left -= 1\n        max_size = max(max_size, right - left + 1)\n        \n        left, right = i, i\n        while left >= 0 and right < n and a[right] % a[left]!= 0:\n            right += 1\n        max_size = max(max_size, right - left + 1)\n        \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_length = 0\n    max_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and len(max_subset) < max_length:\n                max_subset = [a[i], a[j]]\n                max_length = len(max_subset)\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables to keep track of the largest subset size and the maximum number in the subset\n    max_size = 1\n    max_num = a[0]\n\n    # Iterate through the list, adding numbers to the subset until the subset size is greater than the maximum size found so far\n    for i in range(1, len(a)):\n        if a[i] % max_num == 0:\n            max_size += 1\n        else:\n            max_num = a[i]\n            max_size = 1\n\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def is_divisible(x, y):\n        '''\n        Helper function to check if x and y are divisible.\n        '''\n        return x % y == 0\n    \n    def count_subsets(arr):\n        '''\n        Helper function to count the number of subsets of arr.\n        '''\n        subsets = [1] * len(arr)\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if is_divisible(arr[i], arr[j]):\n                    subsets[i] += subsets[j]\n        return subsets\n    \n    def find_largest_subset(subsets):\n        '''\n        Main function to find the size of the largest subset of arr that is divisible.\n        '''\n        max_subset_size = 0\n        for i in range(1, len(subsets)):\n            if subsets[i] > subsets[max_subset_size]:\n                max_subset_size = i\n        return max_subset_size\n    \n    arr = sorted(set(a))\n    subset_sizes = count_subsets(arr)\n    largest_size = find_largest_subset(subset_sizes)\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize two variables to keep track of the current largest subset and the current subset\n    max_size = 1\n    current_size = 1\n\n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # If the current number is not divisible by the previous number, increase the current size\n        if a[i] % a[i-1]!= 0:\n            current_size += 1\n        else:\n            # If the current number is divisible by the previous number, update the max_size and current_size\n            max_size = max(max_size, current_size)\n            current_size = 1\n\n    # Return the max size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables to keep track of the current subset and the maximum subset found so far\n    subset = [a[0]]\n    current_subset_size = 1\n    max_subset_size = 0\n\n    # Loop over the remaining elements in the list\n    for i in range(1, len(a)):\n        # If the current element is divisible by the first element of the subset, add it to the subset and update the size of the subset\n        if a[i] % subset[0] == 0:\n            current_subset_size += 1\n            subset.append(a[i])\n        # If the current element is not divisible by the first element of the subset, reset the current subset size and remove the first element of the subset\n        else:\n            current_subset_size = 1\n            subset = [a[i]]\n        # Update the maximum subset size if necessary\n        max_subset_size = max(max_subset_size, current_subset_size)\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    i = 0\n    \n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i]!= 0:\n            j += 1\n        \n        size = j - i\n        if size > max_size:\n            max_size = size\n        \n        i = j\n        \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list of numbers in non-decreasing order\n    a.sort()\n    # Initialize two pointers, left and right, to the beginning and end of the list, respectively\n    left = 0\n    right = len(a) - 1\n    # Initialize a variable to store the maximum size of the subset\n    max_size = 0\n    # Initialize a variable to store the current size of the subset\n    current_size = 0\n    # Loop until the left pointer is less than the right pointer\n    while left < right:\n        # Check if the difference between the current number and the next number is divisible by 2\n        if a[left] + a[right] % 2 == 0:\n            # If it is, increment the current size by 1\n            current_size += 1\n            # If the current size is greater than the maximum size, update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n            # Move the left pointer to the right if the current number is not divisible by 2\n            if a[left] + a[right] % 2!= 0:\n                left += 1\n        # If the current number is not divisible by 2, move the right pointer to the left\n        else:\n            right -= 1\n    # If the maximum size is less than the length of the list, it means there is no subset that is divisible by 2\n    if max_size < len(a):\n        max_size = len(a)\n    # Return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Calculate the median\n    median_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median = merged_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists into one\n    merged = merge_lists(arr1, arr2)\n\n    # Find the middle element\n    middle_index = n // 2\n    median = merged[middle_index]\n\n    return median\n\n\ndef merge_lists(arr1, arr2):\n    \"\"\"\n    Merge two sorted lists into one.\n    \"\"\"\n    merged = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\n    return merged"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Find the median of the sorted array\n    mid = len(arr) // 2\n    if len(arr) % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # If the length of the list is odd, the median is the middle element\n    if len(arr) % 2 == 1:\n        return arr[n//2]\n    \n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        return (arr[n//2 - 1] + arr[n//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Calculate the median based on the size of the list\n    if n % 2 == 0:\n        # If the size is even, return the average of the middle two elements\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        # If the size is odd, return the middle element\n        return merged_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create two pointers for each list\n    i, j = 0, 0\n\n    # Initialize the two pointers to the first element of each list\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the current element is the same in both lists, increment both pointers\n            i += 1\n            j += 1\n\n    # If there is only one element remaining in either list, it is the median\n    if i == n:\n        return arr1[j]\n    elif j == n:\n        return arr2[i]\n    else:\n        # If there are two elements remaining, it is the average of the two elements\n        return (arr1[j] + arr2[i]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        # If n is even, take the average of the two middle elements\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        # If n is odd, take the middle element\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one\n    merged_arr = arr1 + arr2\n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n    # Find the median based on the size of the list\n    if n % 2 == 0:\n        return (sorted_arr[n//2] + sorted_arr[n//2 - 1]) / 2\n    else:\n        return sorted_arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    arr = arr1 + arr2\n    # sort the merged list\n    arr.sort()\n    # get the median index\n    median_index = n // 2\n    # return the median\n    if n % 2 == 0:\n        return (arr[median_index - 1] + arr[median_index]) / 2\n    else:\n        return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Calculate the length of the merged list\n    merged_length = len(merged_list)\n    \n    # Check if the length of the merged list is odd or even\n    if merged_length % 2 == 0:\n        # If even, find the average of middle two elements\n        median = (merged_list[merged_length//2 - 1] + merged_list[merged_length//2]) / 2\n    else:\n        # If odd, find the middle element\n        median = merged_list[merged_length//2]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = 1\n    result = []\n    for num in nums:\n        result.append(num ** power)\n        power += 1\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase and return it\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the length of the list is odd or even\n    if length % 2 == 0:\n        # If the length is even, swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # If the length is odd, swap the first and second elements\n        newList[0], newList[1] = newList[1], newList[0]\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    newList[0] = lastElement\n    newList[-1] = firstElement\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Get the last and first element of the list\n        last_element = newList[-1]\n        first_element = newList[0]\n        \n        # Interchange the first and last elements\n        newList[0] = last_element\n        newList[-1] = first_element\n        \n        # Return the updated list\n        return newList\n    else:\n        # If the list has less than two elements, return the same list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return \"Error: List is empty.\"\n    elif len(newList) == 1:\n        return \"Error: List has only one element.\"\n    else:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Interchange the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"The new list is: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the length of the list is 0 or 1\n    if len(newList) == 0 or len(newList) == 1:\n        return newList\n    # swapping the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # returning the swapped list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(3):\n        s = (1 - (i + 1) / 3) * r\n        area += math.pi * s * s\n    return math.sqrt(area)\n\nprint(triangle_area(1))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_valid(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    # Find the semi-perimeter of the triangle\n    semi_perimeter = 2 * r\n\n    # Find the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    largest_semi_perimeter = math.sqrt(r**2 - semi_perimeter**2)\n\n    # Find the length of the longest side of the largest triangle that can be inscribed in the semicircle\n    longest_side = 2 * largest_semi_perimeter\n\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(longest_side**2 / 2)\n\n    # Check if the largest triangle is valid\n    if is_valid(area, area, area):\n        return area\n    else:\n        return None"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Finding the semi-circle center\n    c = 2 * r\n    print(\"Semi-circle center is\", c)\n\n    # Finding the semi-circle area\n    area = 2 * r * r\n    print(\"Semi-circle area is\", area)\n\n    # Finding the semi-circle circumference\n    circumference = 2 * c\n    print(\"Semi-circle circumference is\", circumference)\n\n    # Finding the side of the largest triangle that can be inscribed in the semicircle\n    side = circumference / 2\n    print(\"Side of the largest triangle that can be inscribed in the semicircle is\", side)\n\n    # Calculating the area of the largest triangle\n    a = side * (side - r) / 2\n    print(\"Area of the largest triangle that can be inscribed in the semicircle is\", a)\n\n    # Returning the area of the largest triangle\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # find the semi-circle radius\n    s = r / math.sin(math.pi / 3)\n\n    # find the area of the triangle whose base is r and height is sqrt(s^2 - r^2)\n    a = 0.5 * r * (math.sqrt(s ** 2 - r ** 2))\n\n    # find the area of the triangle whose base is sqrt(s^2 - r^2) and height is s\n    b = 0.5 * s * (math.sqrt(s ** 2 - r ** 2))\n\n    # find the area of the triangle whose base is r and height is r\n    c = 0.5 * r * r\n\n    # find the largest area\n    largest_area = max(a, b, c)\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    This function takes a radius r as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    '''\n    area = (3*r**2) / (4*math.tan(math.pi/3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159\n    a = pi * (r ** 2)\n    area = 2 * a / pi\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter and the semi-area\n    s = r * (1 - (1/3)) # semi-perimeter\n    a = r * (1 - (2/3)) # semi-area\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    if r > 1:\n        largest_triangle_area = (3 * a + 4 * (s ** 2)) / (4 * s ** 2) # If r is greater than 1\n    else:\n        largest_triangle_area = 0 # If r is less than or equal to 1\n    \n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r * math.asin(1)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = math.sqrt(s * (s - r) * (s - 2 * r))\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-circle area\n    area = math.pi * r**2\n\n    # Find the largest triangle that can be inscribed in the semi-circle\n    s = math.sqrt(area)\n\n    # Find the side of the largest triangle that is a half of the semi-circle\n    half_s = s / 2\n\n    # Calculate the area of the largest triangle\n    area_l = (half_s * (half_s - r) * (half_s - r) + r**2) / 2\n\n    # Return the area of the largest triangle\n    return math.sqrt(area_l)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    side_length = 0\n\n    while side_length <= r:\n        area += (3 * side_length * side_length) / (4 * math.tan(math.pi/3))\n        side_length += 1\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array: List of natural numbers sorted in ascending order.\n        start: Optional parameter to specify the start index of the search.\n        end: Optional parameter to specify the end index of the search. If not specified, the function will use the length of the array as the end index.\n\n    Returns:\n        The smallest missing number from the sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array)\n\n    if start < 0 or start > end:\n        raise ValueError(\"start index must be within the range of the array\")\n\n    if end > len(array):\n        raise ValueError(\"end index must be within the range of the array\")\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if mid == 0 or array[mid - 1] < array[mid]:\n            start = mid\n        else:\n            end = mid\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if i+1 not in array:\n            return i+1\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == 0 or array[mid] > array[mid - 1]:\n            if mid == len(array) - 1 or array[mid + 1] > array[mid]:\n                return mid + 1\n            else:\n                start = mid + 1\n        else:\n            end = mid - 1\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the input array is sorted\n    if not sorted(array):\n        raise ValueError(\"Input array must be sorted\")\n\n    # If the end index is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Loop through the array and find the first missing number\n    for i in range(start, end):\n        if i!= array[i]:\n            return i + 1\n\n    # If no missing number is found, return the length of the array + 1 (since arrays are 0-indexed)\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    string = string.replace(\" \", \"%20\")\n    return string"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < (len(sub)-1):\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < (len(sub[x])-1):\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    adj_list = [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]\n    for i in range(4):\n        if adj_list[i] not in sub:\n            sub.append(adj_list[i])\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if sub == []:\n        sub = [(x,y), (x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    else:\n        sub.append((x,y))\n        sub = list(set(sub))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        if y > 0:\n            adj.append((x-1, y-1))\n        elif y < y_max:\n            adj.append((x-1, y_max))\n        else:\n            pass\n    elif x < x_max:\n        if y > 0:\n            adj.append((x+1, y-1))\n        elif y < y_max:\n            adj.append((x+1, y_max))\n        else:\n            pass\n    else:\n        pass\n\n    if x > 0 and y > 0:\n        adj.append((x-1, y))\n    elif x > 0 and y < y_max:\n        adj.append((x-1, y+1))\n    elif x < x_max and y > 0:\n        adj.append((x+1, y))\n    elif x < x_max and y < y_max:\n        adj.append((x+1, y+1))\n    else:\n        pass\n\n    if x < x_max and y > 0:\n        adj.append((x+1, y))\n    elif x < x_max and y < y_max:\n        adj.append((x+1, y+1))\n    elif x > 0 and y > 0:\n        adj.append((x-1, y))\n    elif x > 0 and y < y_max:\n        adj.append((x-1, y+1))\n    else:\n        pass\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < n-1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < m-1:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append(ele)\n    neighbours = []\n    if x > 0:\n        neighbours.append((x - 1, y))\n    if x < 4:\n        neighbours.append((x + 1, y))\n    if y > 0:\n        neighbours.append((x, y - 1))\n    if y < 4:\n        neighbours.append((x, y + 1))\n    return neighbours"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Get the x and y coordinates of the current element\n    x, y = ele\n    \n    # Initialize an empty list to store the adjacent coordinates\n    adj_coords = []\n    \n    # Add the top left adjacent coordinate to the list\n    adj_coords.append((x-1, y-1))\n    \n    # Add the top adjacent coordinate to the list\n    adj_coords.append((x, y-1))\n    \n    # Add the top right adjacent coordinate to the list\n    adj_coords.append((x+1, y-1))\n    \n    # Add the left adjacent coordinate to the list\n    adj_coords.append((x-1, y))\n    \n    # Add the center adjacent coordinate to the list\n    adj_coords.append((x, y))\n    \n    # Add the right adjacent coordinate to the list\n    adj_coords.append((x+1, y))\n    \n    # Add the bottom left adjacent coordinate to the list\n    adj_coords.append((x-1, y+1))\n    \n    # Add the bottom adjacent coordinate to the list\n    adj_coords.append((x, y+1))\n    \n    # Add the bottom right adjacent coordinate to the list\n    adj_coords.append((x+1, y+1))\n    \n    # Return the list of adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for x in range(max(ele[0]-1, 0), min(ele[0]+2, 9)):\n        for y in range(max(ele[1]-1, 0), min(ele[1]+2, 9)):\n            if (x, y)!= ele:\n                adj.append((x, y))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    if x > 0 and y > 0:\n        adj_coords.append((x-1, y-1))\n    if x > 0:\n        adj_coords.append((x-1, y))\n    if x > 0 and y < 2:\n        adj_coords.append((x-1, y+1))\n    if x < 2:\n        adj_coords.append((x+1, y))\n    if x < 2 and y < 2:\n        adj_coords.append((x+1, y+1))\n    if x < 2 and y > 0:\n        adj_coords.append((x+1, y-1))\n    if x > 0 and y > 0:\n        adj_coords.append((x-1, y+1))\n    if x < 2 and y > 0:\n        adj_coords.append((x+1, y+1))\n    return adj_coords + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the coordinates of the element\n    x, y = ele\n    \n    # Initialize the result list\n    result = []\n    \n    # Define the neighbor offsets\n    offsets = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    \n    # Iterate through all the neighbor offsets and get the adjacent coordinates\n    for offset in offsets:\n        nx = x + offset[0]\n        ny = y + offset[1]\n        \n        # Check if the adjacent coordinates are within the boundaries of the map\n        if 0 <= nx < len(sub) and 0 <= ny < len(sub[0]):\n            result.append((nx, ny))\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_').replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    # loop through the words\n    for i in range(len(words)):\n        # check if the word contains a whitespace\n        if'' in words[i]:\n            # replace the whitespace with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # check if the word contains an underscore\n        elif '_' in words[i]:\n            # replace the underscore with a whitespace\n            words[i] = words[i].replace('_','')\n    # join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # Check if the word contains a space\n        if'' in words[i]:\n            # Replace spaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        else:\n            # Replace underscores with spaces\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space =''\n    underscore = '_'\n    result = ''\n    for char in text:\n        if char == space:\n            result += underscore\n        elif char == underscore:\n            result += space\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with spaces\n    text = text.replace('_','')\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    spaces_regex = re.compile(r'\\s+')\n    underscores_regex = re.compile(r'_+')\n    text = spaces_regex.sub('_', text)\n    text = underscores_regex.sub(' ', text)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initializing an empty string to store the modified string\n    modified_text = ''\n    # iterating over each character in the string\n    for char in text:\n        # if the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text += '_'\n        # if the character is not a whitespace, append it to the modified string\n        else:\n            modified_text += char\n    # returning the modified string\n    return modified_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n        i -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for non-zero elements and other for zero elements\n    non_zero_ptr = 0\n    zero_ptr = len(num_list)\n    \n    # Traverse through the list and swap the non-zero elements and zero elements\n    while non_zero_ptr < zero_ptr:\n        if num_list[non_zero_ptr]!= 0:\n            num_list[non_zero_ptr], num_list[zero_ptr] = num_list[zero_ptr], num_list[non_zero_ptr]\n            non_zero_ptr += 1\n            zero_ptr -= 1\n            \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i] == 0:\n            num_list[i], num_list[n-1] = num_list[n-1], num_list[i]\n            n -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    \n    num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n    \n    for i in range(len(num_list)-2, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one at the beginning and the other at the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # while i is less than j\n    while i < j:\n        # if the element at i is not zero\n        if num_list[i]!= 0:\n            # increment i by 1\n            i += 1\n        # if the element at j is zero\n        else:\n            # move the element at j to the end of the list\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            # decrement j by 1\n            j -= 1\n    \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = [x for x in num_list if x == 0]\n    non_zeros = [x for x in num_list if x!= 0]\n    num_list.extend(zeros)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list to store the non-zero values\n    new_list = []\n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the new list\n        if num!= 0:\n            new_list.append(num)\n        # If the number is zero, append it to the new list as well\n    for num in range(len(num_list), len(num_list) + len(new_list)):\n        if num_list[num - len(num_list)] == 0:\n            new_list.append(num_list[num - len(num_list)])\n    # Return the new list with zeroes moved to the end\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate over all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1,n):\n            \n            # Calculate the xor of the current pair of numbers\n            xor = arr[i] ^ arr[j]\n            \n            # Add the xor to the sum\n            sum += xor\n    \n    # Return the sum of xor of all pairs of numbers\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum = xor_sum ^ arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR all pairs of numbers in the list\n    xor_sum = sum([a^b for a,b in zip(arr,arr[1:])])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            total += xor\n    return total"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list and its size and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    # XOR of all elements in the list\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum = xor_sum ^ arr[i]\n\n    # XOR of all elements in the list after excluding first element\n    xor_sum_excl_first = 0\n    for i in range(1, n):\n        xor_sum_excl_first = xor_sum_excl_first ^ arr[i]\n\n    # XOR of all elements in the list after excluding last element\n    xor_sum_excl_last = 0\n    for i in range(len(arr) - 1, -1, -1):\n        xor_sum_excl_last = xor_sum_excl_last ^ arr[i]\n\n    # Return XOR of all elements in the list\n    return xor_sum ^ xor_sum_excl_first ^ xor_sum_excl_last"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the Heap Sort algorithm.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    n = len(heap)\n    hq.heapify(heap)\n\n    for i in range(n-1, 0, -1):\n        hq.heapreplace(heap, heap[0])\n\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    heap = [0] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap, i, len(iterable))\n    \n    # Extract the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heap[0])\n        heap[0] = heapq.heappop(heap)\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n    # create a max heap from the list\n    hq.heapify(lst)\n    # sort the list using heap sort\n    for i in range(len(lst) - 1, 0, -1):\n        hq.heappop(lst)\n        hq.heappush(lst, lst[i])\n    # return the sorted list\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a min heap\n    hq.heapify(iterable)\n\n    # extract the smallest element from the min heap and append it to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the list into a max heap\n    hq.heapify(iterable)\n    # Removing the root element from the max heap\n    for i in range(len(iterable)-1, 0, -1):\n        hq.heapreplace(iterable, iterable[0])\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    The time complexity of the algorithm is O(n log n), where n is the length of the list.\n    '''\n    heap = hq.heapify(iterable)  # convert list to heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))  # extract the smallest element from the heap and add it to the result list\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0: \n        return \"No profit and loss possible\"\n    elif actual_cost == sale_amount:\n        return \"No profit and loss possible\"\n    else:\n        return \"No profit and loss possible\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return \"No profit or loss\"\n    else:\n        return \"Profitable\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Arguments:\n    actual_cost -- actual cost of the sale\n    sale_amount -- amount of the sale\n    \n    Returns:\n    True if the sale has no profit and no loss, else False\n    \"\"\"\n    \n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if the profit and loss are both 0\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check if the actual cost is less than or equal to the sale amount\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return noprofit_noloss(actual_cost - 1, sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True, 0\n    else:\n        profit = actual_cost - sale_amount\n        loss = sale_amount - actual_cost\n        return False, profit, loss"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return False, 'Actual cost is less than or equal to sale amount'\n    elif actual_cost >= sale_amount:\n        return True, 'Actual cost is greater than sale amount'\n    else:\n        return None, 'Something went wrong'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\",profit,\"and a loss of\",loss)\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n\n    # Calculate the heat index\n    heat_index = 237.3 * math.exp((17.625 * (t_f - 32)) / (t_f - 243.125))\n\n    # Calculate the wind chill index\n    w_c_index = int(round(heat_index / v))\n\n    return w_c_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n    \n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    '''\n    \n    # Convert temperature to Fahrenheit\n    t = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    chill = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v)\n    \n    # Round the result to the nearest integer\n    chill = int(math.ceil(chill))\n    \n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # Formula for wind chill index from NASA's 1999 paper\n    # https://www.ncdc.noaa.gov/monitoring-content/wx-science/how-to-calculate-the-wind-chill-index\n    # https://www.ncdc.noaa.gov/monitoring-content/wx-science/wind-chill-index-calculations\n    #\n    # S = (11.12 * (v / 100) + 0.6215 * (t / 237.3) + 0.2246 * (math.sqrt(v) / 10) - 42.37)\n    #\n    # The constant 0.6215 comes from an equation that assumes a standard atmosphere.\n    # The constant 0.2246 comes from a relationship between the wind speed and the heat index.\n    # The constant 42.37 comes from an equation that assumes a constant wind speed of 42 mph.\n    # The constant 11.12 comes from a formula for the heat index that assumes a heat capacity of 11.12 J/kg/K.\n    #\n    # The formula is applied to the temperature and wind speed, and the result is rounded to the nearest integer.\n    #\n\n    c = 11.12  # Constant for heat index calculation\n    r = 0.6215  # Constant for wind chill index calculation\n    g = 0.2246  # Constant for wind chill index calculation\n    h = 42.37  # Constant for wind chill index calculation\n\n    s = round((c * (v / 100) + r * (t / 237.3) + g * (math.sqrt(v) / 10) - h) / 10)\n\n    if s < -40:\n        return -40\n    elif s > 100:\n        return 100\n    else:\n        return s"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    celsius_to_fahrenheit = 1.8\n    wind_speed_in_mph = v*2.237\n    wind_speed_in_kph = v*3.6\n    wind_speed_in_ms = v*1609.34\n    wind_speed_in_mph_to_kph = 0.621371\n    wind_speed_in_ms_to_kph = 0.44704\n\n    wind_speed_in_kph = round(wind_speed_in_mph*wind_speed_in_mph_to_kph)\n    wind_speed_in_ms = round(wind_speed_in_mph*wind_speed_in_ms_to_kph)\n\n    if wind_speed_in_kph <= 0:\n        wind_speed_in_ms = 0\n\n    if t < 0:\n        t = 0\n\n    if t >= 20:\n        t = 20\n\n    if wind_speed_in_kph >= 15:\n        # Formula for wind chill index\n        index = round(237.3 + (0.6215*wind_speed_in_kph) + ((-7.357*t)+(0.00689*t*t))*math.exp((-11.37*t)/(237.3+t)))\n    elif wind_speed_in_kph >= 5:\n        # Formula for wind chill index\n        index = round(13.12 + (0.3965*wind_speed_in_kph) + ((-0.115*t)+(0.00122*t*t))*math.exp((-0.794*t)/(237.3+t)))\n    else:\n        # Formula for wind chill index\n        index = round(35.74 + (0.114*wind_speed_in_kph) + ((-0.00588*t)+(0.00001*t*t))*math.exp((-0.0000239*t)/(237.3+t)))\n\n    # Convert the temperature in celsius to fahrenheit\n    if t < 0:\n        t = 0\n\n    # Temperature in celsius\n    celsius = t\n\n    # Convert the temperature in fahrenheit to celsius\n    fahrenheit = celsius*celsius_to_fahrenheit\n\n    # Calculate the wind chill in fahrenheit\n    wind_chill_in_fahrenheit = index\n\n    # Round the wind chill to the nearest integer\n    wind_chill_in_fahrenheit = round(wind_chill_in_fahrenheit)\n\n    return wind_chill_in_fahrenheit"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    c = 20  # reference temperature in celsius\n    w = 11.14  # coefficient of thermal expansion in m^2/(kg*K)\n    alpha = 0.0531  # coefficient of diffusion in K/(m^2*K)\n    s = 6.61  # coefficient of special energy function in J/(kg*K)\n\n    # calculate the thermal conductivity in W/m/K\n    k = 0.424 + 0.176 * math.exp(0.0065 * (t - c))\n\n    # calculate the wind chill index\n    wci = math.round(237.3 + 0.6215 * v + 17.62 * math.log(t) - 0.3965 * (t - c) + 0.0288 * v * (t - c))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity and temperature.\n    '''\n    wind_speed = math.sqrt(2*v*t)\n    wind_speed_knots = v/1.943844\n    wind_chill_index = 35.74 + 0.6215*wind_speed - 35.75*math.exp((17.625*wind_speed)/(wind_speed_knots+13.123))\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wct = 35.74 + 0.6215*t - 35.75*math.pow(t,2) + 0.4275*math.pow(t,3)\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215*t - 35.75*math.pow(t,2) + 0.4275*math.pow(t,3) / (13.12 + 0.6215*t + 10*math.pow(t,2) - 0.7629*math.pow(t,3))\n    # Round the wind chill index to the nearest integer\n    wci_int = math.floor(wci+0.5)\n    # Return the wind chill index rounded to the nearest integer\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # calculate wind chill index\n    c = 13.12 + 0.6215 * v - 11.37 * math.log(t_f) + 0.3965 * (v**2) + 5.379 * (t_f - 32) - 2.737 * (v * t_f) + 0.0068 * (v**2) * (t_f - 32)\n\n    # calculate rounded wind chill index\n    wc = int(c + 0.5)\n\n    return wc\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def wind_chill(v,t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934  # convert to m/s\n    wind_chill_index = 237.3 + (0.6215 * (t - 273.15)) - (0.4275 * (wind_speed**0.16))\n    wind_chill_index = math.ceil(wind_chill_index)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index for a given wind velocity and temperature in celsius.\n    \"\"\"\n\n    # Calculate the wind chill temperature using the formula:\n    # Wc = 35.74 + 0.6215T - 35.75 * log(10) + 0.4275T^2\n    wc_temp = 35.74 + 0.6215 * t - 35.75 * math.log10(10) + 0.4275 * t**2\n\n    # Calculate the wind chill index using the formula:\n    # Wci = 4.5 * (Wc - 32) / 9\n    wc_index = 4.5 * (wc_temp - 32) / 9\n\n    # Round the wind chill index to the nearest integer\n    wc_index_rounded = round(wc_index)\n\n    return wc_index_rounded"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Creating an empty list to store the names that do not start with a lowercase letter\n    result = []\n    # Iterating through the given list of names\n    for name in sample_names:\n        # Checking if the name starts with a lowercase letter\n        if name[0].islower():\n            # Appending the name to the result list if it does not start with a lowercase letter\n            result.append(name)\n    # Summing the lengths of the names in the result list\n    return sum([len(name) for name in result])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to 0\n    total_length = 0\n\n    # iterate over each name in the list\n    for name in sample_names:\n        # check if the first character of the name is a lowercase letter\n        if name[0].islower():\n            # skip this name and move on to the next one\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n    \n    # return the total length of the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if not name.startswith(name[0].upper()):\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    total_length = sum(len(name) for name in names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the non-lowercase names\n    names = []\n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # check if the first letter of the name is a lowercase letter\n        if name[0].islower():\n            # if it is, append it to the names list\n            names.append(name)\n        # if the name doesn't start with a lowercase letter, sum its length and append it to the names list\n        else:\n            # convert the name to lowercase and sum its length\n            name_length = len(name.lower())\n            names.append(name_length)\n    # sum the lengths of the non-lowercase names and return the result\n    return sum(names)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^)]*)\\)'\n    for item in items:\n        items[items.index(item)] = re.sub(pattern, '', item)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Replace all the parenthesis with a space\n    items = re.sub(r'\\([^()]+\\)','', items)\n    # Split the string into words\n    words = items.split()\n    # Loop through each word\n    for i, word in enumerate(words):\n        # If the word is a parenthesis, remove it and add it to the next word\n        if word == '(':\n            if i + 1 < len(words):\n                next_word = words[i+1]\n                words[i] = next_word\n                words.remove(word)\n                i -= 1\n        elif word == ')':\n            if i - 1 >= 0:\n                prev_word = words[i-1]\n                words[i] = prev_word\n                words.remove(word)\n                i -= 1\n    # Join the words back into a string\n    items =''.join(words)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = r'(\\(.*?\\))' # regular expression pattern to match parenthesis\n    items = re.sub(pattern, '', items) # removing parenthesis from the string using re.sub()\n    return items # returning the modified string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove any parenthesis\n    items = re.sub('\\(.*?\\)', '', items)\n    # remove any double quotes\n    items = re.sub('\"', '', items)\n    # remove any other characters that might be inside parenthesis\n    items = re.sub('[a-zA-Z0-9\\s]+', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\(.*?\\))'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum variable\n    sum = 0\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of squares of all the even numbers from 2 to i-1\n        sum += i**2\n    # return the sum\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the number of squares needed to reach the nth nonagonal number\n    squares_needed = (n * (n - 1)) // 2\n    # Loop over all squares and calculate the corresponding nonagonal number\n    for i in range(1, squares_needed + 1):\n        square = i * i\n        nonagonal = square * (square + 1) // 2\n        if nonagonal == n:\n            return square\n    # If we reach this point, there is no nonagonal number that equals n\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(2, n + 1):\n        if i % 2 == 1:\n            return False\n    return True\n\ndef nth_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n + 1):\n        if not is_nonagonal(i):\n            return i\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    count = 0\n    nonagonal = 1\n    \n    # Calculate the nth nonagonal number\n    while count < n:\n        nonagonal += 2 * count + 1\n        count += 1\n    \n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n+1):\n        nonagonal_numbers.append(i * (i-1) // 2)\n    return nonagonal_numbers[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Define the first nonagonal number\n    first_nonagonal = 1\n\n    # Find the nth nonagonal number\n    nonagonal_number = first_nonagonal + (n - 1)\n\n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize the counter and sum variables\n    counter = 1\n    sum = 1\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # if the counter is odd, multiply by 2\n        if counter % 2!= 0:\n            sum += counter\n        \n        # increment the counter\n        counter += 1\n\n    # return the sum of the first n even terms\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*[z][^z]*\\b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    # Define the regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'(?<=\\b|^)(z)(?=\\b|$)'\n\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # If a match is found, return True\n    if result:\n        return True\n    # If no match is found, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?:z(?!.*\\b))\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\b'\n    matches = re.findall(pattern, text)\n    return True if len(matches) > 0 else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Loop through the words\n    for word in words:\n        # Check if the word starts with 'z' and ends with 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If so, return True\n            return True\n    # If no word meets the criteria, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regex pattern to match 'z' at the start and end of word except at the middle\n    pattern = r'(?<!\\w)z(?!\\w)'\n    # Use re.search() to search for pattern in text\n    match = re.search(pattern, text)\n    # If match found, return True\n    if match:\n        return True\n    # If no match found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)\\b(z)\\b(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[A-Za-z]+\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            if match[0]!= 'z' and match[-1]!= 'z':\n                return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]\\w{2,}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    length = len(input)\n    # Find the position of the kth element (k-1)\n    k_position = k - 1\n    # Initialize the start and end pointers\n    start = 0\n    end = length - 1\n    # Reverse the array from the start to k-1\n    while start < k_position:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    # Reverse the array from k to the end\n    while start <= end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input) \n    # Find the index of the position where the array needs to be reversed\n    if k > n//2: \n        k = n - k - 1 \n    # Reverse the array upto the k-th element\n    for i in range(k, n): \n        input[i], input[k] = input[k], input[i] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k >= len(input):\n        return input\n    return input[:k] + input[k:][::-1] + input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Finding the length of the array\n    n = len(input)\n    \n    # Reverse the array upto the given position k\n    for i in range(k-1, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Convert input list to array\n    input = np.array(input)\n    # Reverse the first k elements\n    input[:k] = np.flip(input[:k])\n    # Reverse the remaining elements\n    input[k:] = np.flip(input[k:])\n    # Convert the array back to a list\n    output = input.tolist()\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Split the input array into two parts, the first k elements and the remaining elements\n    first_half = input[:k]\n    second_half = input[k:]\n    \n    # Reverse the first half of the array using slicing\n    first_half = first_half[::-1]\n    \n    # Combine the reversed first half and the second half of the array\n    result = first_half + second_half\n    \n    # Return the reversed array\n    return result"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input) \n    for i in range(0, k): \n        input[i], input[n-i-1] = input[n-i-1], input[i] \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the pointer and loop variables\n    left = 0\n    right = len(input)-1\n\n    # Swap the elements upto k\n    while left < k-1:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Reverse the remaining elements\n    while left <= right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n-k):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tup = (test_tup + tuple(test_dict.items()))\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples, where each tuple has two elements: key and value\n    dict_list = list(test_dict.items())\n    # Concatenate the tuple with the list of tuples to create a new tuple\n    new_tup = tuple(test_tup + dict_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    new_list = [(k, v) for k, v in test_dict.items()]\n    \n    # concatenate the tuple with the list of tuples\n    return test_tup + tuple(new_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    list_of_tuples = list(test_dict.items())\n    # Add the list of tuples to the tuple\n    return tuple(test_tup + list_of_tuples)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_tup += (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    return tuple(test_tup + new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = (test_tup, key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_dict = {**test_dict}\n    return test_tup + (new_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[i][-1] = cost[i][-1]\n        \n    for j in range(1, N):\n        dp[0][j] = cost[0][j]\n        dp[-1][j] = cost[N-1][j]\n        \n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            if cost[i][j] > cost[i][j-1] and cost[i][j] > cost[i-1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] += dp[i][j-1]\n            elif j == 0:\n                dp[i][j] += dp[i-1][j]\n            max_avg = max(max_avg, dp[i][j]/(i+j+1))\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_avg = 0\n    curr_avg = 0\n    max_path = []\n    curr_path = []\n    curr_cost = 0\n    visited = set()\n\n    # Traverse the matrix and calculate the maximum average path\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if the current cell is visited or not\n            if (i,j) not in visited:\n                # Add the current cell to the current path and calculate the cost\n                curr_path.append((i,j))\n                curr_cost = curr_cost + cost[i][j]\n\n                # Check if the current path has reached the bottom right cell\n                if i == len(cost)-1 and j == len(cost[0])-1:\n                    curr_avg = curr_cost / (len(curr_path) + 1)\n                    if curr_avg > max_avg:\n                        max_avg = curr_avg\n                        max_path = curr_path.copy()\n\n                # Check if the current path has reached the bottom right cell\n                else:\n                    # Calculate the average of the next two cells\n                    if i < len(cost)-1:\n                        if (i+1,j) not in visited:\n                            next_avg = (curr_cost + cost[i+1][j]) / 2\n                            visited.add((i+1,j))\n                            curr_avg = (curr_avg + next_avg) / 2\n                        else:\n                            curr_avg = (curr_avg + cost[i+1][j]) / 2\n                    if j < len(cost[0])-1:\n                        if (i,j+1) not in visited:\n                            next_avg = (curr_cost + cost[i][j+1]) / 2\n                            visited.add((i,j+1))\n                            curr_avg = (curr_avg + next_avg) / 2\n                        else:\n                            curr_avg = (curr_avg + cost[i][j+1]) / 2\n\n                # Remove the current cell from the current path\n                curr_path.pop()\n                curr_cost = curr_cost - cost[i][j]\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[0][0]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1] + cost[i][j], dp[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1] + cost[i][j], dp[i-1][j] + cost[i][j])\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                pass\n            elif i == 0:\n                max_avg = max(max_avg, dp[i][j])\n            elif j == 0:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j])\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    paths = [[0 for i in range(N)] for j in range(N)]\n\n    # initializing the paths with all possible paths\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths[i][j] = cost[i][j]\n            elif i == 0:\n                paths[i][j] = paths[i][j-1] + cost[i][j]\n            elif j == 0:\n                paths[i][j] = paths[i-1][j] + cost[i][j]\n            else:\n                paths[i][j] = max(paths[i-1][j], paths[i][j-1]) + cost[i][j]\n\n    # finding the maximum average over all existing paths\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            avg = paths[i][j] / (i+j+1)\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables to store the maximum average and the path with maximum average\n    max_avg = float('-inf')\n    max_path = []\n\n    # Traverse through all possible paths and check their average cost\n    for i in range(N):\n        for j in range(N):\n            # Base case for the last cell\n            if i == N-1 and j == N-1:\n                continue\n\n            # Get the cost of each cell\n            left_cost = float('-inf')\n            if i > 0:\n                left_cost = cost[i-1][j]\n            up_cost = float('-inf')\n            if j > 0:\n                up_cost = cost[i][j-1]\n            right_cost = float('-inf')\n            if i < N-1:\n                right_cost = cost[i+1][j]\n            down_cost = float('-inf')\n            if j < N-1:\n                down_cost = cost[i][j+1]\n\n            # Calculate the average cost of the path\n            total_cost = left_cost + up_cost + right_cost + down_cost\n            avg_cost = total_cost / 4\n\n            # Update the maximum average and the path if the current average is greater than the previous maximum average\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = [(i, j)]\n                continue\n\n            # If the current average is equal to the previous maximum average, add the current cell to the path if it is not already in the path\n            if avg_cost == max_avg and (i, j) not in max_path:\n                max_path.append((i, j))\n\n    # Return the maximum average and the path with maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables for the maximum average and total cost\n    max_avg = 0\n    total_cost = 0\n\n    # Iterate through all possible paths of length N\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell is a leaf node or a boundary cell\n            if i == N-1 and j == N-1:\n                # If it is a leaf node, calculate the average and update the maximum average\n                avg = total_cost / (i+1)\n                if avg > max_avg:\n                    max_avg = avg\n\n                # Initialize variables for the next path\n                i = 0\n                j = 0\n                total_cost = 0\n                continue\n\n            # Calculate the cost of the next cell and update the total cost\n            cost_next = cost[i][j] + min(cost[i+1][j], cost[i][j+1])\n            total_cost += cost_next\n\n    # Return the maximum average of all paths\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def max_average(matrix, i, j, m, n):\n        if i == m - 1 and j == n - 1:\n            return matrix[i][j]\n        \n        if i > m - 1:\n            return float('-inf')\n        \n        if j > n - 1:\n            return float('-inf')\n        \n        if i == m - 1:\n            return max(matrix[i][j], matrix[i][j + 1])\n        \n        if j == n - 1:\n            return max(matrix[i][j], matrix[i + 1][j])\n        \n        return max(matrix[i][j], max_average(matrix, i + 1, j, m, n), max_average(matrix, i, j + 1, m, n))\n    \n    return max_average(cost, 0, 0, len(cost), len(cost[0]))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]+cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]+cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    max_avg = float('-inf')\n    for k in range(N):\n        for l in range(N):\n            if k == 0 and l == 0:\n                max_avg = max(max_avg, dp[k][l])\n            elif k == 0:\n                max_avg = max(max_avg, dp[k][l]+dp[k][l-1])\n            elif l == 0:\n                max_avg = max(max_avg, dp[k][l]+dp[k-1][l])\n            else:\n                max_avg = max(max_avg, dp[k][l]+dp[k-1][l]+dp[k][l-1])\n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = set()\n    max_avg = 0\n    for i in range(N):\n        visited.add(i)\n        current_cost = sum(cost[i][j] for j in visited)\n        current_avg = current_cost / len(visited)\n        if current_avg > max_avg:\n            max_avg = current_avg\n        for j in range(N):\n            if (i,j) not in visited and (i+j) % 2 == 0:\n                visited.add((i,j))\n                current_cost = sum(cost[i][j] for j in visited)\n                current_avg = current_cost / len(visited)\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                visited.remove((i,j))\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_count += 1\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n\n    # Check if the lists are the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists are not the same length.\"\n\n    # Count the number of pairs where the values are the same\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    def base_to_num(base):\n        \"\"\"\n        Convert a base-10 number to its base-16 equivalent.\n        \"\"\"\n        if base == 0:\n            return '0'\n        num = ''\n        while base > 0:\n            digit = base % 16\n            if digit < 10:\n                num = str(digit) + num\n            else:\n                num = chr(digit + 55) + num\n            base //= 16\n        return num\n\n    def num_to_base(num, base):\n        \"\"\"\n        Convert a number from base-10 to base-16.\n        \"\"\"\n        if num == 0:\n            return 0\n        result = 0\n        while num > 0:\n            result += (num % base) * (base ** len(num_to_base(num, base) - 1))\n            num //= base\n        return result\n\n    base_num = base_to_num(base)\n    base_sum = 0\n    for _ in range(power):\n        base_sum += int(base_num[-1])\n        base_num = base_num[:-1]\n    return num_to_base(base_sum, 16)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize sum to zero\n    sum_digits = 0\n    \n    # Convert base to string and split it into a list of digits\n    digits = [int(d) for d in str(base)]\n    \n    # Calculate the sum of all digits raised to the specified power\n    for i in range(power):\n        sum_digits += digits[i] ** power\n    \n    return sum_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit\n        power -= 1\n        base //= 10\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum to 0\n    sum_digits = 0\n\n    # Iterate through the digits of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the digit raised to the power to the sum\n        sum_digits += digit_int ** power\n\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize sum variable to 0\n    sum_digits = 0\n    \n    # loop through each digit of the base\n    for digit in str(base):\n        # convert the digit to integer\n        digit_int = int(digit)\n        # add the integer power of the digit to the sum_digits variable\n        sum_digits += digit_int ** power\n    \n    # return the sum of all digits raised to the specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        base = base // 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    total = 0\n    \n    # loop through the digits of the base\n    for digit in str(base):\n        # convert the digit to an integer and calculate the power of 10 raised to the power of the current digit\n        digit_power = int(digit) ** power\n        \n        # add the digit raised to the power to the total\n        total += digit_power\n        \n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes a base and power as arguments and calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_digits = 0\n    base_digits = []\n    while base > 0:\n        base_digits.append(base % 10)\n        base //= 10\n    for digit in base_digits:\n        sum_digits += digit ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # convert base to a string\n    base_str = str(base)\n    # initialize sum to 0\n    sum_digits = 0\n    # loop through all digits of the base and calculate the sum\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\".*?\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n\n    Parameters:\n    text (str): The given string.\n\n    Returns:\n    list: A list of all values between quotation marks.\n    \"\"\"\n\n    # Create a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n\n    # Use the regular expression pattern to find all matches in the string\n    matches = re.findall(pattern, text)\n\n    # Return the list of all matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<!\\\\)\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks \" \".\n    '''\n    # Use a regular expression to match any quotation marks \" \" in the given string\n    pattern = r'\"[^\"]*\"'\n    # Use re.findall() to find all the matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # Create an empty list to store the values\n    values = []\n    # Loop through each match and remove the quotation marks \" \"\n    for match in matches:\n        values.append(match[1:-1])\n    # Return the list of values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = re.compile(r'(?<=\")(.*?)(?=\")')\n    matches = pattern.findall(text1)\n    # Convert list of matches to a single string separated by spaces\n    quotation =''.join(matches)\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern for matching quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # use the re.findall() function to extract all non-overlapping matches of the pattern in text1\n    matches = re.findall(pattern, text1)\n    # concatenate all the matches into a single string and return it\n    return \" \".join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = (test_tup[0] * test_tup[N+1], test_tup[1] * test_tup[N], test_tup[2] * test_tup[N-1], test_tup[3] * test_tup[N-2])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    return tuple(x*y for x in test_tup for y in test_tup[1:])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # Add the product of the current element and the next element to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty list to store the multiplied elements\n    result_list = []\n    \n    # loop through the input tuple and append the product to the result list\n    for i in range(len(test_tup)-1):\n        result_list.append(test_tup[i] * test_tup[i+1])\n    \n    # add the last element to the result list\n    result_list.append(test_tup[-1])\n    \n    # return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup) - 1\n    # Initialize the result tuple with the first element of the original tuple\n    result_tup = (test_tup[0],)\n    # Multiply each element of the original tuple with the next one and append it to the result tuple\n    for i in range(N):\n        result_tup += (test_tup[i+1] * result_tup[-1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the result tuple\n    result = ()\n    # loop through the input tuple\n    for i in range(len(test_tup)-1):\n        # add the product of the current element and the next element to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    # return the result tuple\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key == nums[0]:\n            result.append(key)\n        elif nums[0] + 1 == key:\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)\n    for group in grouped_nums:\n        if group:\n            yield from group[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = None\n    result = []\n    for num in nums:\n        if prev is not None and prev == num:\n            continue\n        result.append(num)\n        prev = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(nums)\n    return [num for group, num in groups if not group]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 2:\n        return nums\n\n    grouped_nums = groupby(nums)\n    result = []\n    for key, group in grouped_nums:\n        result.extend(group)\n        if key[0] == key[-1]:\n            result.pop()\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or nums[i]!= nums[i-1]:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    # Using itertools.groupby()\n    # This function groups the elements of a list by a common key\n    # Then, we iterate through the groups and keep the first element of each group\n    # If a group has only one element, we keep it\n    return list(groupby(sorted(nums), key=lambda x: x)[1])"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby() to group consecutive duplicates together\n    grouped_nums = groupby(nums)\n    # Use itertools.chain() to flatten the grouped_nums generator\n    return list(itertools.chain.from_iterable(grouped_nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*r*math.tan(math.pi/4)  # surface area of the base\n    sl = 2*r*(math.cos(math.pi/4)-1)  # surface area of the cone side\n    return s+sl+2*r*h  # total surface area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function finds the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula:\n    # A = pi/2 * r^2 * (h/2)^2\n    area = math.pi / 2 * r**2 * (h / 2)**2\n    \n    # Return the lateral surface area of the cone\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*r*h/3\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone with a given radius r and height h.\n    '''\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r ** 2 * h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*h*r"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r ** 2\n    B = math.pi * (r ** 2 + h ** 2)\n    C = math.pi * (r ** 2 + h ** 2)\n    s = 0.5 * (A + B + C)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * (r**2) + 2 * math.pi * r * h + math.pi * (r**2)\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = ',. '\n    pattern = re.compile(r'[' + re.escape(special_chars) + r']')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-word characters except spaces\n    text = text.replace(',', ':') # replace commas with colons\n    text = text.replace('.', ':') # replace dots with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to replace spaces with colon\n    pattern = r'\\s'\n    # replace all occurrences of spaces with colon\n    text = re.sub(pattern, ':', text)\n    # define regex pattern to replace commas with colon\n    pattern = r','\n    # replace all occurrences of commas with colon\n    text = re.sub(pattern, ':', text)\n    # define regex pattern to replace dots with colon\n    pattern = r'\\.'\n    # replace all occurrences of dots with colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to match any special character\n    pattern = re.compile(r\"[^\\w\\s]\")\n    # replace all special characters with a colon\n    return pattern.sub(\":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', '', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9\\s]+', '', text)\n    text = re.sub(r'[^\\w\\s]+', '', text)\n    text = text.replace('.', ':')\n    text = text.replace(',', ':')\n    text = text.replace(' ', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the index variable to -1\n    index = -1\n\n    # Iterate through the array\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the element is found, set the index to i\n            index = i\n            break\n\n    # Return the index of the first occurrence of the given number\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted list of numbers.\n    x (int): A number to find the index of the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    first_occurrence_index = 0\n    while first_occurrence_index < len(A) and A[first_occurrence_index] < x:\n        first_occurrence_index += 1\n    if first_occurrence_index == len(A) or A[first_occurrence_index]!= x:\n        return -1\n    else:\n        return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left pointer and the right pointer\n    left = 0\n    right = len(A) - 1\n    \n    # Loop through the array until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to the target element, return the middle index\n        if A[mid] == x:\n            return mid\n        \n        # If the middle element is greater than the target element, update the right pointer to mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n            \n        # If the middle element is less than the target element, update the left pointer to mid + 1\n        else:\n            right = mid - 1\n    \n    # If the target element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize index to -1\n    index = -1\n    # initialize count to 0\n    count = 0\n    # loop through the array\n    for i in range(len(A)):\n        # if the current element is equal to the given number\n        if A[i] == x:\n            # increment count\n            count += 1\n            # if count is equal to 1\n            if count == 1:\n                # set index to current index\n                index = i\n        # if the count becomes greater than 1, then it means the given number is not in the array\n        if count > 1:\n            break\n    # return the index of the first occurrence of the given number in the array\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the leftmost occurrence of x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # if x is not present in A, return -1\n    if i == len(A) or A[i]!= x:\n        return -1\n    # find the first occurrence of x in A[i+1:]\n    j = i + 1\n    while j < len(A) and A[j] == x:\n        j += 1\n    # if x is not present in A[i+1:], return -1\n    if j == len(A) or A[j]!= x:\n        return -1\n    # return the index of x in A[i+1:j]\n    return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 1000000007\n    prefix_sum = [0] * (n + 1)\n    product = 1\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            product = (product * (prefix_sum[j] - prefix_sum[i - 1])) % MOD\n            if i!= j:\n                product = (product * (prefix_sum[j] - prefix_sum[i - 1])) % MOD\n\n    return product\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # function to calculate sum of products of sublists\n    def sum_of_subarray_prod(arr, i, j):\n        total = 1\n        for k in range(i, j+1):\n            total *= arr[k]\n        return total\n\n    # function to find sum of products of all possible sublists of given list\n    def sum_of_all_subarray_prods(arr):\n        n = len(arr)\n        total = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                total += sum_of_subarray_prod(arr, i, j)\n        return total\n\n    return sum_of_all_subarray_prods(arr)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[1] = arr[0]\n    \n    for i in range(1, n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n    \n    product_sum = 0\n    max_sum = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            product_sum += arr[j] * prefix_sum[j]\n            if product_sum > max_sum:\n                max_sum = product_sum\n    \n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    sum_of_subarrays = 0\n    \n    # Create a list of all possible sublists\n    sublists = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            sublists.append(arr[j:j+i])\n    \n    # Calculate the products of all sublists\n    product_sum = 0\n    for sublist in sublists:\n        product_sum += 1\n        for i in range(len(sublist)):\n            product_sum *= sublist[i]\n    \n    # Calculate the sum of products of all subarrays\n    for sublist in sublists:\n        sum_of_subarrays += len(sublist) * sublist.index(max(sublist))\n    \n    return sum_of_subarrays"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Finding the maximum length of subarray\n    max_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_len += 1\n    # Generating all possible sublists of length max_len\n    sublists = []\n    for i in range(1, n):\n        for j in range(i, n-max_len+1):\n            sublists.append(arr[j:j+max_len])\n    # Calculating the sum of products of all sublists\n    sublist_prod_sum = 0\n    for sublist in sublists:\n        prod = 1\n        for num in sublist:\n            prod *= num\n        sublist_prod_sum += prod\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    subarray_product = 1\n    total_sum = 0\n    \n    for i in range(len(arr)):\n        subarray_product *= arr[i]\n        for j in range(i+1, len(arr)+1):\n            total_sum += subarray_product\n            subarray_product *= arr[j-1]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n\n    Args:\n        arr (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists of the input list.\n    \"\"\"\n\n    n = len(arr)\n\n    # Initialize prefix sum array\n    prefix_sum = [0] * (n + 1)\n\n    # Initialize sum of products array\n    sum_prod = [0] * (n + 1)\n\n    # Traverse through the list\n    for i in range(n):\n        # Update prefix sum\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n        # Update sum of products\n        for j in range(i, n):\n            sum_prod[j + 1] = max(sum_prod[j + 1], prefix_sum[j + 1] * prefix_sum[i])\n\n    # Return sum of products of all sublists\n    return sum_prod[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            product = 1\n            for k in range(i, j + 1):\n                product *= arr[k - 1]\n            result += prefix_sum[j] - prefix_sum[i - 1] * product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum to 0\n    sum = 0\n    # Initialize a list to store products of subarrays\n    product_list = []\n    # Loop through all subarrays\n    for i in range(n):\n        # Calculate the product of the first i elements of the subarray\n        product = 1\n        for j in range(i):\n            product *= arr[j]\n        # Append the product to the product_list\n        product_list.append(product)\n        # Calculate the sum of products of subarrays\n        sum += product\n    # Return the sum of products of subarrays\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    prefix_prod = [1] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            prod = prefix_prod[j] - prefix_prod[i]\n            res += prod * arr[i]\n\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    # initialize the middle bits as 0\n    middle_bits = 0\n    \n    # loop through the binary representation of the number\n    for i in range(len(bin(n)) - 3):\n        middle_bits = middle_bits ^ (1 << i)\n    \n    # toggle the first and last bits\n    middle_bits = middle_bits ^ (1 << (len(bin(n)) - 2)) ^ (1 << (len(bin(n)) - 1))\n    \n    # return the number with middle bits toggled\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the first and last set bits\n    first_set_bit = n & -n\n    last_set_bit = n & (n - 1)\n\n    # Toggle the middle bits\n    middle_bits = n ^ first_set_bit ^ last_set_bit\n\n    # Return the result\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the first and last bit\n    bit_0 = n & 1\n    bit_N = n & (2 ** (len(bin(n)) - 2))\n    \n    # Toggle the middle bits\n    n ^= (bit_0 << 1) | (bit_N << (len(bin(n)) - 1))\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Initialize the last two bits as 1\n    n = n & 0x5555555555555555\n    n = n | 0xAAAAAAAAAAAAAAAA\n    \n    # Reverse the first and last two bits\n    n = n & 0x3333333333333333\n    n = n | 0xCCCCCCCCCCCCCCCC\n    \n    # Reverse the last two bits\n    n = n & 0x0F0F0F0F0F0F0F0F\n    n = n | 0xF0F0F0F0F0F0F0F0\n    \n    # Reverse the first and last two bits\n    n = n & 0x5555555555555555\n    n = n | 0x5555555555555555\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Using bitwise operators\n    mask1 = ~(1 << (n & 1)) & ~(1 << (n & ~1))\n    mask2 = ~(1 << ((n - 1) & 1)) & ~(1 << ((n - 1) & ~1))\n    return n ^ mask1 & mask2"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # count the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # extract the middle bits of the number\n    middle_bits = n & ((1 << (num_bits-2))-1)\n\n    # toggle the middle bits of the number\n    middle_bits = middle_bits ^ ((middle_bits ^ (middle_bits << 1)) & ((1 << num_bits)-1))\n\n    # insert the middle bits back into the original number\n    return (n & ((1 << num_bits)-1)) | middle_bits\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the first and last bit\n    first_bit = (n & 0b1000000000000000000000000000000) >> 63\n    last_bit = (n & 0b0100000000000000000000000000000000) >> 60\n\n    # Initialize the middle bits\n    middle_bits = (n & 0b111111111111111111111111111111111)\n\n    # Toggle the middle bits\n    middle_bits = middle_bits ^ (middle_bits << 1)\n\n    # Combine the first and last bit and the middle bits\n    result = first_bit << 63 | middle_bits | last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if n is a binary number\n    if not all(c in ['0', '1'] for c in bin(n)[2:]):\n        return \"Invalid input\"\n\n    # Initialize left and right pointers\n    left = 0\n    right = n\n\n    # Iterate until left and right pointers cross each other\n    while left < right:\n        # Calculate mid pointer\n        mid = (left + right) // 2\n\n        # Toggle bits except for the first and the last bit\n        mid_toggled = (mid & 1) ^ 1\n\n        # Update left and right pointers\n        if mid_toggled == 1:\n            right = mid\n        else:\n            left = mid + 1\n\n    # Return the final number with toggled bits except for the first and the last bit\n    return n ^ (1 << left) ^ (1 << (right - 1))"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # XOR the middle two bits with ones and shift them right by 1 bit to get the third bit.\n    first_bit = n & 1\n    second_bit = (n >> 1) & 1\n    third_bit = n ^ (first_bit ^ second_bit)\n    # XOR the middle two bits with ones and shift them left by 1 bit to get the second bit.\n    second_bit = third_bit & 1\n    first_bit = (third_bit >> 1) & 1\n    second_bit = third_bit ^ (first_bit ^ second_bit)\n    # XOR the first and second bits with ones to get the last bit.\n    last_bit = second_bit & 1\n    second_bit = (second_bit >> 1) & 1\n    last_bit = second_bit ^ (last_bit ^ last_bit)\n    # XOR the first bit with the last bit to get the final number.\n    final_number = n ^ (first_bit ^ last_bit)\n    return final_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Take the binary representation of the given number\n    binary = bin(n)[2:]\n    \n    # Check if the last bit is 0 or 1\n    last_bit = binary[-1]\n    \n    # Toggle the last bit\n    if last_bit == '0':\n        binary = '1' + binary[:-1]\n    else:\n        binary = '0' + binary[:-1]\n        \n    # Check if the first bit is 0 or 1\n    first_bit = binary[0]\n    \n    # Toggle the first bit\n    if first_bit == '0':\n        binary = first_bit + '1' + binary[1:]\n    else:\n        binary = '1' + binary[1:]\n        \n    # Convert the binary representation back to decimal\n    decimal = int(binary, 2)\n    \n    return decimal"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x and returns the left insertion point of x in a.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n    return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: A sorted list of integers.\n    :param x: An integer to be inserted into the list.\n    :return: The left insertion point index of x in the sorted list a.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        else:\n            return index + 1\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: List of sorted values.\n    :param x: Value to be inserted.\n    :return: The left insertion point for the specified value.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (1 - 1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def next_triangular_number(n):\n        i = 1\n        triangular_num = 0\n        while True:\n            triangular_num = i * (i + 1) // 2\n            if count_digits(triangular_num) == n:\n                return triangular_num\n            i += 1\n\n    return find_index(n)\n\ndef find_index(n):\n    triangular_num = next_triangular_number(n)\n    index = 0\n    while True:\n        triangular_num_len = count_digits(triangular_num)\n        if triangular_num_len == n:\n            return index\n        triangular_num += 1\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    def min_triangular_number(n):\n        \"\"\"Returns the smallest triangular number with n digits.\"\"\"\n        return int(\"\".join(map(str, [i for i in range(n+1)])))\n\n    def triangular_numbers(n):\n        \"\"\"Returns a list of n smallest triangular numbers.\"\"\"\n        nums = []\n        for i in range(1, n+1):\n            nums.append(min_triangular_number(i))\n        return nums\n\n    def triangular_numbers_with_digits(n):\n        \"\"\"Returns a list of triangular numbers with n digits.\"\"\"\n        nums = []\n        for triangular_num in triangular_numbers(n):\n            for digit in str(triangular_num):\n                if digit!= \"0\":\n                    nums.append(triangular_num)\n        return nums\n\n    triangular_nums = triangular_numbers_with_digits(n)\n    return min(triangular_nums)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_valid(n):\n        '''\n        Check if a given number is a valid triangular number.\n        '''\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_triangular_number(index):\n        '''\n        Return the triangular number with the given index.\n        '''\n        return index * (index + 1)\n\n    def get_max_digits(n):\n        '''\n        Return the maximum number of digits that can be represented by a triangular number with n digits.\n        '''\n        return math.ceil(math.log10(n * (n + 1)) + 1)\n\n    def get_next_triangular_number(n):\n        '''\n        Return the index of the next smallest triangular number with n digits.\n        '''\n        max_digits = get_max_digits(n)\n        current_triangular_number = get_triangular_number(1)\n        while current_triangular_number < 10 ** max_digits:\n            if is_valid(current_triangular_number):\n                return current_triangular_number\n            current_triangular_number += 1\n\n    return get_next_triangular_number(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function will find the index of the smallest triangular number with n digits.\n    '''\n    # Calculate the maximum possible value of a triangular number with n digits.\n    max_tri = 9*9*9*...*9\n    \n    # Starting from the largest triangular number with n digits, find the smallest triangular number.\n    for i in range(1, max_tri+1):\n        # Calculate the sum of the first n digits of the triangular number.\n        sum = sum([int(digit) for digit in str(i)])\n        \n        # If the sum is less than the maximum value, we have found the smallest triangular number with n digits.\n        if sum < max_tri:\n            return i\n    \n    # If we reach here, it means we have not found the smallest triangular number with n digits.\n    return None\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = [0] * (n+1) \n    triangular[1] = 1\n    for i in range(2, n+1): \n        triangular[i] = triangular[i-1] + triangular[i-2] \n        \n    index = 0\n    smallest_triangular = triangular[0]\n    while smallest_triangular <= math.pow(10, n): \n        if smallest_triangular < math.pow(10, n): \n            index += 1\n        smallest_triangular = triangular[index]\n        \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    triangular = []\n    triangular.append(1)\n    count = 1\n    while len(str(count)) < n:\n        count += 1\n        triangular.append(count)\n    \n    max_num = triangular[len(triangular) - 1]\n    min_num = triangular[0]\n    index = 0\n    \n    for i in range(1, len(triangular)):\n        if triangular[i] > max_num:\n            max_num = triangular[i]\n            index = i\n        elif triangular[i] < min_num:\n            min_num = triangular[i]\n            \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_Index(n):\n    triangular_numbers = [0]\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if is_prime(i - j) and i - j < n:\n                triangular_numbers.append(i - j)\n                break\n    return triangular_numbers[0]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 1 \n    else: \n        return math.ceil(math.log10(n)) * (math.log10(n) + 1) / 2 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    # Function to calculate the value of smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        for i in range(1, 10**(n-1)):\n            for j in range(i, 10**n):\n                k = (i**2 + j**2) ** 0.5\n                if k.is_integer() and k < 10**(n-1):\n                    return i, j, k\n        return None\n    \n    # Function to find the index of smallest triangular number with n digits\n    def find_index(n):\n        triangulars = []\n        for i in range(1, 10**(n-1)):\n            for j in range(i, 10**n):\n                k = (i**2 + j**2) ** 0.5\n                if k.is_integer() and k < 10**(n-1):\n                    triangulars.append(k)\n        if not triangulars:\n            return None\n        smallest = min(triangulars)\n        smallest_index = triangulars.index(smallest)\n        return smallest_index\n    \n    # Return the index of smallest triangular number with n digits\n    return find_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize a variable to store the number of digits\n    num_digits = 0\n    \n    # Calculate the number of digits of the smallest triangular number with n digits\n    while True:\n        num_digits += 1\n        triangular_num = int(\"1\" * num_digits)\n        \n        # Check if the number is a triangular number\n        if math.sqrt(triangular_num) == int(math.sqrt(triangular_num)):\n            break\n    \n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    index = 0\n    \n    # Loop through all triangular numbers with n digits\n    while True:\n        # Check if the current triangular number has n digits\n        if len(str(triangular_num)) == num_digits:\n            # Update the index if the current triangular number is smaller than the current smallest triangular number\n            if triangular_num < smallest_triangular_num:\n                index = num_digits - 1\n                smallest_triangular_num = triangular_num\n            triangular_num += 1\n        else:\n            # If the current triangular number has less than n digits, move on to the next triangular number\n            triangular_num += 1\n        # Exit the loop if there are no more triangular numbers with n digits\n        if triangular_num > int(\"1\" * num_digits):\n            break\n    \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n    return key_val_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n    return key_val_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    :param test_tup: The tuple to be converted.\n    :return: A dictionary with the key-value pairs of the given tuple.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The length of the tuple must be even.\")\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    my_dict = {}\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The tuple should have an even number of elements.\")\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary to store the key-value pairs\n    result_dict = {}\n    # loop through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple must have an even length\")\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            dict_obj[test_tup[i]] = test_tup[i+1]\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    if len(test_tup) % 2 == 1:\n        print(\"Length of tuple is odd, not a valid input.\")\n        return None\n    else:\n        result = {}\n        for i in range(0, len(test_tup), 2):\n            result[test_tup[i]] = test_tup[i+1]\n        return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    if s[0]!= s[1]:\n        return False\n    \n    return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set() #creating an empty set\n    for char in s: #iterating through each character of the string\n        char_set.add(char) #adding each character to the set\n    if len(char_set) == 1: #checking if the set has only one element\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a list\n    s = list(s)\n    # Check if all the characters in the list are same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # Check if the string has only one character\n    if len(s) == 1:\n        return True\n\n    # Check if all the characters are same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    # Function to check whether all characters are same or not\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2)/12\n    area = math.sqrt(s) * side\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    half_perimeter = side / 2\n    area = (half_perimeter * (half_perimeter + math.sqrt(3)) / 2) ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (s ** 2) * math.sqrt(2) / 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the base\n    base = side / 2\n\n    # calculate the height\n    height = math.sqrt(3) * base\n\n    # calculate the area\n    area = (1/3) * base * height\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron with given sides.\n\n    Args:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n\n    # Formula for the area of a tetrahedron\n    area = (1/6) * side ** 3\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2) / 3\n    a = math.sqrt(s)\n    return a * 4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side + math.sqrt(3)*side**2)**(1/2)\n\n    # calculate the area of the tetrahedron using Heron's formula\n    area = 1/6 * s * (s - side) * (s - 2*side) * (s - 3*side)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of tetrahedron: a^2 + b^2 + c^2 = 4 * (s^2 - a^2 - b^2 - c^2)\n    # where s is the semi-perimeter\n    s = (side + math.sqrt(3) * side) / 2\n    area = 4 * s * s * s\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m, n):\n        list[i-m] = list[i]\n    for i in range(n-m, m):\n        list[i] = None\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Function to rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst: A list of any type.\n    m: An integer value representing the number of items to rotate to the right direction.\n\n    Returns:\n    A new list with the specified number of items rotated to the right direction.\n    \"\"\"\n    # Check if list is empty or not\n    if len(lst) == 0:\n        return lst\n\n    # Check if m is less than zero or not\n    if m < 0:\n        m = len(lst) + m\n\n    # Check if m is equal to or greater than the length of the list\n    if m >= len(lst):\n        return lst\n\n    # Rotate the list by m items\n    lst = lst[-m:] + lst[:-m]\n\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Find the length of the list\n    n = len(list)\n    # Check if the rotation is done by m or n\n    if m == n:\n        return list\n    elif m < n:\n        m = m % n\n        # Move the last m items to the beginning of the list\n        list[-m:] = list[:-m]\n        # Move the first n-m items to the end of the list\n        list[:n-m] = list[m:]\n    else:\n        m = m % n\n        # Move the first m items to the end of the list\n        list[-m:] = list[:-m]\n        # Move the last n-m items to the beginning of the list\n        list[:n-m] = list[m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n\n    # If m is greater than the length of the list, return the list as it is\n    if m > n:\n        return list\n\n    # If m is 0, return the list as it is\n    if m == 0:\n        return list\n\n    # If m is less than or equal to n, perform the rotation\n    elif m <= n:\n        # Initialize an empty list to store the rotated elements\n        rotated_list = []\n\n        # Traverse through the list from the end to the beginning\n        for i in range(n - m, -1, -1):\n            # Append the element at the current index to the rotated_list\n            rotated_list.append(list[i])\n\n        # Traverse through the list from the beginning to the end\n        for i in range(n - m, n):\n            # Append the element at the current index to the rotated_list\n            rotated_list.append(list[i])\n\n        # Return the rotated list\n        return rotated_list\n\n    # If m is greater than n, perform the rotation in reverse direction\n    else:\n        # Initialize an empty list to store the rotated elements\n        rotated_list = []\n\n        # Traverse through the list from the end to the beginning\n        for i in range(n - m, -1, -1):\n            # Append the element at the current index to the rotated_list\n            rotated_list.append(list[i])\n\n        # Traverse through the list from the beginning to the end\n        for i in range(n - m, n):\n            # Append the element at the current index to the rotated_list\n            rotated_list.append(list[i])\n\n        # Reverse the rotated_list\n        rotated_list.reverse()\n\n        # Return the rotated list\n        return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[n-m:] + list[:n-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than the length of the list, then rotate by n-m items.\n    if m > n:\n        rotate_by = n - m\n    else:\n        rotate_by = m\n\n    # Create a temporary variable to store the last element of the rotated list.\n    last_element = list[-1]\n\n    # Reverse the first m elements of the list.\n    list = list[:m] + list[m:][::-1]\n\n    # Add the last element to the first m elements of the list.\n    list = [last_element] + list\n\n    # Return the rotated list.\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Calculate the total number of rotations required to bring the list to its original position.\n    rotations = n // m\n    # If the list has an odd number of items, we need to rotate the list to bring it to its original position.\n    if n % m!= 0:\n        rotations += 1\n    # Initialize a new list to store the rotated list.\n    new_list = []\n    # Traverse the original list and append the required number of elements to the new list.\n    for i in range(rotations):\n        new_list.append(list[0])\n        for j in range(m - 1):\n            new_list.append(list[j + 1])\n        # Move the first element to the end of the list.\n        list[0] = list[n - 1]\n        # Remove the last element from the list.\n        del list[n - 1]\n    # Copy the remaining elements of the original list to the new list.\n    for i in range(m, n):\n        new_list.append(list[i])\n    # Return the rotated list.\n    return new_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(value is None for value in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for element in test_tup:\n        if element is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        test_tup: A tuple containing values to be tested.\n\n    Returns:\n        True if the tuple has any none value, otherwise False.\n    \"\"\"\n    return any(elem is None for elem in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit in the number.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(d % d for d in digits)\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    # create a list of digits in each number\n    def digits(n):\n        return [int(d) for d in str(n)]\n    \n    # create a list of digits in the given range\n    digits_in_range = set(digits(num) for num in range(startnum, endnum+1))\n    \n    # create a lambda function to check if a number is divisible by every digit in digits_in_range\n    is_divisible = lambda x: all(int(d) in digits_in_range for d in str(x))\n    \n    # return the list of numbers within the given range that are divisible by every digit in digits_in_range\n    return [x for x in range(startnum, endnum+1) if is_divisible(x)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(int(d) == 0 or x % int(d) == 0 for d in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(i) % int(j) == 0 for i in str(x)) and len(str(x)) == len(set(str(x))), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by every digit it contains\n    is_divisible_by_digit = lambda num: all(int(digit) % num == 0 for digit in str(num))\n\n    # Use the lambda function to find all numbers within the given range that are divisible by every digit\n    result = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n\n    # Return the list of numbers that are divisible by every digit\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function that checks if a number is divisible by every digit in the number\n    is_divisible = lambda num: all(num % i == 0 for i in range(1, 10))\n\n    # Use a list comprehension to generate a list of all numbers within the given range where is_divisible() is True\n    divisible_numbers = [num for num in range(startnum, endnum+1) if is_divisible(num)]\n\n    return divisible_numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    # Calculate area of sector\n    area = math.pi * r**2 * a / 360\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # calculate the area of a sector\n    area = math.pi * r * r * math.sin(math.radians(a/2))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * (a/360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within 360 degrees\n    if a > 360:\n        return None\n\n    # Convert angle to radians\n    a = math.radians(a)\n\n    # Calculate area using formula for circular sector\n    area = math.pi * r * r * (1 - math.cos(a))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of longest common suffix\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # fill the table using dynamic programming approach\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k-1])\n\n    # print the LCS table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    print(\" \", end=\"\")\n                    print(X[i-1], end=\"\")\n                else:\n                    if L[i-1][j] >= L[i][j-1] and L[i-1][j] >= L[i-1][k-1]:\n                        print(X[i-1], end=\"\")\n                    elif L[i][j-1] >= L[i-1][j] and L[i][j-1] >= L[i-1][k-1]:\n                        print(Y[j-1], end=\"\")\n                    else:\n                        print(Z[k-1], end=\"\")\n        print()\n\n    return L[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    dp = [[0] * (p+1) for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return X[m-dp[m][p]:m], Y[n-dp[m][p]:n], Z[p-dp[m][p]:p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences as input and returns the longest common subsequence for them.\n    '''\n    # create a table to store the lengths of LCS\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0 for j in range(o+1)] for i in range(m+1)]\n    \n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    # print the table to see the LCS\n    # for i in range(len(dp)):\n    #     print(dp[i])\n    \n    # return the length of the LCS\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    # create a 2D table to store lengths of LCS for all prefixes of X,Y and Z\n    LCS = [[0] * (p+1) for i in range(m+1)]\n\n    # fill in the 2D table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    # backtrack to find the LCS\n    i, j = m, p\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a table to store the lengths of substrings\n    table = [[0] * (len(Y)+1) for _ in range(len(X)+1)]\n\n    # fill the table\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # return the length of the longest common subsequence\n    return table[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, l = len(X), len(Y), len(Z)\n    dp = [[0] * (l+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, l+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common suffixes of all prefixes of X, Y, and Z\n    L = [[[0] * (o + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, o + 1):\n                if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif X[j - 1] == Y[i - 1]:\n                    L[i][j][k] = L[i - 1][j][k]\n                elif Y[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i][j - 1][k]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # backtrack to find the longest common subsequence\n    i = n\n    j = m\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[j - 1] == Y[i - 1] and Y[i - 1] == Z[k - 1]:\n            lcs.append(X[j - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[j - 1] == Y[i - 1]:\n            i -= 1\n        elif Y[i - 1] == Z[k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS for subsequences of X, Y and Z\n    dp = [[0] * (p+1) for i in range(m+1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # backtrack from the table to find the LCS\n    i, j = m, p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Initialize a 2D table to store the length of the longest common subsequences of prefixes of X, Y, and Z\n    # starting from each character in X, Y, and Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    LCS = [[0 for j in range(o+1)] for i in range(m+1)]\n\n    # Step 2: Fill the 2D table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif Y[j-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # Step 3: Return the length of the longest common subsequence of prefixes of X, Y, and Z\n    return LCS[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of substrings\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # Fill in L[i][j] in bottom up fashion\n    for i in range(m+1):\n        for j in range(p+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print LCS\n    lcs = []\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match any word starting with a capital letter\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Use the pattern to find all words in the input string and replace them with spaces\n    words = re.findall(pattern, str1)\n    new_str =''.join(words)\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Capitalize each word starting with a capital letter and join them with spaces\n    result =''.join(word.capitalize() for word in words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern for matching words that start with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(string)\n\n    # Iterate over the matches and replace the capital letters with spaces before adding them to the output string\n    for match in matches:\n        string = string.replace(match, match.replace(match[0],'' + match[0]))\n\n    # Return the modified string with spaces inserted between words starting with capital letters\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphanumeric characters from the string\n    str1 = re.sub(r'\\W+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Add spaces between words starting with capital letters\n    words = [word.capitalize() if word[0].isupper() else word for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Capitalize the first letter of each word and join them with spaces\n    result =''.join(word.capitalize() for word in words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Create a list of words with spaces between capital letters\n    capitalized_words = [' '.join(word.split('_')) for word in words]\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = re.compile(r'\\b([A-Z])')\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        result.append(word.lower())\n        result.append(' ')\n    result.pop()\n    return ''.join(result).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase and split into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match words that start with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # Loop through each word and replace the first letter with a space\n    for i in range(len(words)):\n        words[i] ='' + words[i]\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    # Remove all non-numeric characters from the list of strings\n    nums_str = [num.replace(\",\", \"\").replace(\".\", \"\").replace(\" \", \"\") for num in nums_str]\n\n    # Convert all strings to numeric values\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the numeric values in ascending order\n    nums_float.sort()\n\n    # Convert the sorted numeric values back to strings\n    nums_sorted = [str(num) for num in nums_float]\n\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and returns a sorted list of strings of numbers.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # split the list of strings into a list of lists of digits\n    nums_list = [list(filter(str.isdigit, num)) for num in nums_str]\n    \n    # sort the list of lists of digits in numerical order\n    nums_list.sort(key=lambda x: int(''.join(x)))\n    \n    # join the sorted list of lists of digits into a single list of strings of numbers\n    nums_str = [''.join(str(digit)) for digit in nums_list[0]]\n    \n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [float(n) for n in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(float(num))\n    nums_list.sort()\n    nums_str.clear()\n    for num in nums_list:\n        nums_str.append(str(num))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda s: [int(c) for c in s if c.isdigit()])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list of str): A list of strings, where each string represents a number.\n\n    Returns:\n        list of str: The sorted list of strings, where each string represents a number.\n    \"\"\"\n    # Convert all strings to floats\n    nums = [float(n) for n in nums_str]\n\n    # Sort the floats numerically\n    nums.sort()\n\n    # Convert the sorted floats back to strings\n    sorted_nums = [str(n) for n in nums]\n\n    return sorted_nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if isinstance(i, tuple):\n            if i == test_tup:\n                test_list.append(test_tup)\n                return test_list\n        elif isinstance(i, list):\n            for j in i:\n                if isinstance(j, tuple):\n                    if j == test_tup:\n                        i.append(test_tup)\n                        return test_list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add the tuple to the list\n    test_list.append(test_tup)\n    # Print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the list to a set to remove any duplicates and then convert it back to a list.\n    test_list = list(set(test_list))\n    # Append the tuple to the list.\n    test_list.append(test_tup)\n    # Convert the list back to a tuple and return it.\n    return tuple(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i]) + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the input lists are of the same type\n    if type(test_list)!= type(test_tup):\n        raise TypeError(\"The input lists must be of the same type.\")\n\n    # Add the tuples\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[1] and arr[0] > arr[2]:\n        return False\n    if arr[1] > arr[2]:\n        return check_min_heap_helper(arr[1:], 0)\n    else:\n        return check_min_heap_helper(arr[2:], 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    smallest = i\n    \n    if left_child < len(arr) and arr[left_child] < arr[smallest]:\n        smallest = left_child\n    \n    if right_child < len(arr) and arr[right_child] < arr[smallest]:\n        smallest = right_child\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif i == len(arr) // 2:\n        return arr[i] >= arr[i // 2]\n    else:\n        return arr[i] >= arr[2 * i] and check_min_heap_helper(arr, 2 * i)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_min_heap(arr):\n    '''\n    Returns True if the given array represents a min heap, False otherwise.\n    '''\n    # Create a helper function to check if a subtree is a min heap or not.\n    def check_min_heap_helper(arr, i, n):\n        # Base case: if the current node is not a leaf node.\n        if i * 2 + 1 < n:\n            # Check if the left child of the current node is smaller than its right child.\n            if arr[i] > arr[i*2+1]:\n                return False\n            # Recursively check the left subtree.\n            if not check_min_heap_helper(arr, i*2+1, n):\n                return False\n        # Base case: if the current node is a leaf node.\n        if i * 2 + 1 == n:\n            return True\n        # Check if the right child of the current node is smaller than its parent.\n        if arr[i] > arr[i*2]:\n            return False\n        # Recursively check the right subtree.\n        if not check_min_heap_helper(arr, i*2, n):\n            return False\n        # If the current node is a leaf node and the right child is smaller than its parent,\n        # then the current node itself is not a min heap.\n        if i * 2 + 1 < n and arr[i] > arr[i*2+1]:\n            return False\n        # If the current node is a leaf node and the right child is larger than its parent,\n        # then the current node itself is not a min heap.\n        if i * 2 < n and arr[i] > arr[i*2]:\n            return False\n        # If all the above checks are successful, then the current node is a min heap.\n        return True\n    \n    # Check if the array is a complete binary tree.\n    n = len(arr)\n    if n == 0 or n == 1:\n        return True\n    # Check if the root node is smaller than its children.\n    if arr[0] > arr[1]:\n        return False\n    # Recursively check the root node and its subtrees.\n    return check_min_heap_helper(arr, 0, n)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap(arr):\n    '''\n    Returns True if the given array represents a min heap, else False.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap(arr):\n    \"\"\"\n    This function checks if a given array represents a min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if arr[i] > arr[i+1]:\n            return False\n    \n    for i in range(n//2, n):\n        if arr[i] < arr[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_heap = True\n\n    if left < len(arr) and arr[left] > arr[i]:\n        min_heap = False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        min_heap = False\n\n    return min_heap\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[0]:\n            arr[i], arr[0] = arr[0], arr[i]\n            check_min_heap_helper(arr, 0)\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 3, 1, 5, 6, 7]\n    print(\"Original Array: \", arr)\n    check_min_heap(arr)\n    print(\"Modified Array: \", arr)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    A binary heap is a complete binary tree where for each node,\n    the value stored in its left child is less than or equal to the value stored in its right child.\n    This property is called the min-heap property.\n\n    Args:\n    arr (list): A list of integers.\n    i (int): The current index in the list.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    if i >= len(arr) / 2:\n        # Base case: the last element is the root of the heap\n        return True\n\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    if left_child < len(arr) and arr[i] > arr[left_child]:\n        # Left child is greater than parent, heap property not satisfied\n        return False\n    if right_child < len(arr) and arr[i] > arr[right_child]:\n        # Right child is greater than parent, heap property not satisfied\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    j_num = 0\n    for i in range(1, n + 1):\n        j_num = (j_num * 3) % i\n    return j_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Find the total number of primes less than or equal to n\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    # Calculate the nth Jacobsthal number\n    nth_jac = (n-1) * ((count+1) // 2) + 1\n    return nth_jac\n\ndef is_prime(n):\n    '''\n    A simple function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. n should be a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        if n % 2 == 0:\n            return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n        else:\n            return jacobsthal_num(n//2) + jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    jacobsthal_list = [0, 1, 1]  # list of first 3 jacobsthal numbers\n    for i in range(2, n):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        for i in range(n):\n            num += i\n        return num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    jacobsthal_nums = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_nums.append(jacobsthal_nums[i-1] + jacobsthal_nums[i-2])\n    return jacobsthal_nums[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    # Initialize the list of jacobsthal numbers\n    jacobsthal_list = [0, 1]\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the next jacobsthal number\n        jacobsthal = jacobsthal_list[-1] + jacobsthal_list[-2]\n        # Add it to the list\n        jacobsthal_list.append(jacobsthal)\n    # Return the nth jacobsthal number\n    return jacobsthal_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    # Initialize the first two numbers in the sequence\n    j0, j1 = 0, 1\n    # Initialize the sequence with the first two numbers\n    sequence = [j0, j1]\n    # Loop through the rest of the sequence\n    for i in range(2, n + 1):\n        # Calculate the next number in the sequence\n        j = (2*j0**2 + j1**2)**0.5\n        # Add the next number to the sequence\n        sequence.append(j)\n        # Update the previous numbers\n        j0 = j1\n        j1 = j\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 0\n        i = 1\n        while i <= n:\n            j += 1\n            jacob = j * (2*j - 1)\n            i += 1\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return 1 + jacobsthal_num(n-1)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if len(test_list) < K:\n        return \"Error: Test list should have at least K records.\"\n    elif K < 1:\n        return \"Error: K should be a positive integer.\"\n    else:\n        min_list = sorted(test_list, key=lambda x: x[1])\n        min_list = [x for x in min_list if x[0] == min_list[0][0]]\n        if len(min_list) == K:\n            return min_list\n        else:\n            return \"Error: Test list should have at least K records.\""
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    The function takes a list of tuples as input and an integer K as input.\n    It returns a list of tuples containing the minimum k records from the input list.\n    If there are less than K records in the input list, the function returns the input list.\n    '''\n    if len(test_list) < K:\n        return test_list\n    \n    min_records = sorted(test_list)[:K]\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    :param test_list: list of tuples (key, value)\n    :param K: integer representing the number of minimum records required\n    :return: list of tuples of length K containing the minimum K records from the given tuple list\n    \"\"\"\n\n    # create a dictionary to store the counts of each key\n    count_dict = {}\n    for key, value in test_list:\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n\n    # sort the dictionary based on the values\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n\n    # create a new list to store the minimum K records\n    min_records = []\n\n    # add the K most frequent keys to the new list\n    for i in range(K):\n        if sorted_dict[i][0] not in min_records:\n            min_records.append(sorted_dict[i][0])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    This function takes a tuple list as input and K as an integer as input and returns the minimum k records from the list.\n    '''\n\n    # create an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # iterate through the list of tuples and update the count dictionary\n    for i in range(len(test_list)):\n        if test_list[i] not in count_dict:\n            count_dict[test_list[i]] = 1\n        else:\n            count_dict[test_list[i]] += 1\n\n    # sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # create an empty list to store the minimum k records\n    min_records = []\n\n    # iterate through the sorted dictionary and add the minimum k records to the list\n    for i in range(K):\n        if i < len(sorted_dict):\n            min_records.append(sorted_dict.keys()[i])\n        else:\n            break\n\n    # return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    test_list.sort()\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum number of records\n    min_count = K\n\n    # Initialize an empty list to store the records\n    result = []\n\n    # Iterate over the sorted list\n    for i in range(K):\n        # If the current record is less than the minimum count, add it to the result and decrement the minimum count\n        if i < min_count:\n            result.append(test_list[i])\n            min_count -= 1\n\n    # Return the result list\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[0])\n    min_sum = float('inf')\n    min_records = []\n    for i in range(len(test_list)):\n        if i >= K:\n            if sum(test_list[i-K:i]) < min_sum:\n                min_sum = sum(test_list[i-K:i])\n                min_records = test_list[i-K:i]\n        else:\n            if sum(test_list[i:i+K]) < min_sum:\n                min_sum = sum(test_list[i:i+K])\n                min_records = test_list[i:i+K]\n    return min_sum, min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])\n    minimum = []\n    for i in range(len(test_list)-K):\n        minimum.append(test_list[i])\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        count = test_list[i][1]\n        if count < K and (len(min_list) < K or test_list[min_list[0][0]][1] > count):\n            min_list.append((i, count))\n            if len(min_list) == K:\n                min_list.sort(key=lambda x: test_list[x[0]][1])\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to hold common elements\n    common_elements = []\n\n    # Loop through each index in the three lists\n    for i in range(len(l1)):\n\n        # If the element at this index is in all three lists, add it to the common elements list\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    # create an empty dictionary to store the common elements for each index\n    common_elements = {}\n    \n    # iterate over the first list and find common elements for each index\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements[i] = [l1[i]]\n        elif l1[i] in l2:\n            common_elements[i] = l2[l2.index(l1[i])].copy()\n        elif l1[i] in l3:\n            common_elements[i] = l3[l3.index(l1[i])].copy()\n    \n    # return the list of common elements for each index\n    result = []\n    for i in range(len(l1)):\n        if i in common_elements:\n            result.extend(common_elements[i])\n    \n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the number of occurrences of each element in each list\n    counts = {}\n    for i in range(len(l1)):\n        counts[l1[i]] = counts.get(l1[i], 0) + 1\n    for i in range(len(l2)):\n        counts[l2[i]] = counts.get(l2[i], 0) + 1\n    for i in range(len(l3)):\n        counts[l3[i]] = counts.get(l3[i], 0) + 1\n    \n    # Find the common elements by iterating over the dictionary and adding each element to the result list if it appears more than once\n    common = []\n    for element in counts:\n        if counts[element] == 3:\n            common.append(element)\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')  # initialize smallest to infinity\n    second_smallest = float('inf')  # initialize second smallest to infinity\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"List should have at least 2 numbers.\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number in the list\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.+b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Iterate through the list\n    for string in test_list:\n        # Reverse the string and check if it is already in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in count_dict:\n            # If it is, increment the count of the existing key\n            count_dict[reverse_string] += 1\n        else:\n            # Otherwise, add the key-value pair to the dictionary\n            count_dict[reverse_string] = 1\n\n    # Initialize the count of reverse pairs to zero\n    reverse_pairs = 0\n\n    # Iterate through the dictionary and count the pairs of reverse strings\n    for key, value in count_dict.items():\n        # If the value is greater than one, increment the count of reverse pairs\n        if value > 1:\n            reverse_pairs += value\n\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+2, len(string)+1):\n                if string[i:j] == string[j-1:i][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Create a dictionary to store the frequency of each character in the test_list\n    freq = {}\n    for char in test_list:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Count the number of pairs of reverse strings\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if freq[test_list[i]] == freq[test_list[j]]:\n                pairs += 1\n    \n    return pairs"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the counts of each tuple\n    counts = {}\n\n    # Iterate over all lists in the input list\n    for sublist in list1:\n\n        # Convert the list to a tuple and count its occurencies\n        count = len(list1.count(sublist))\n        counts[tuple(sublist)] = count\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list1 to set to remove duplicate elements\n    list1 = list(set(list1))\n    # Create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n    # Loop through each element in list1 and convert it to a tuple to count its occurencies in the original list\n    for element in list1:\n        sublist = tuple(element)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_dict:\n            sublist_dict[tuple_sublist] += 1\n        else:\n            sublist_dict[tuple_sublist] = 1\n    return sublist_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through the list1 to find unique sublists\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # convert sublists to tuples and add to the dictionary\n            tup = tuple(sorted(list1[i:j+1]))\n            if tup not in counts:\n                counts[tup] = 1\n            else:\n                counts[tup] += 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist = tuple(sublist)\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item in count_dict:\n                count_dict[tuple_item] += 1\n            else:\n                count_dict[tuple_item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Iterate over the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n            \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_count[tuple(sorted(sublist))] = sublist_count.get(tuple(sorted(sublist)), 0) + 1\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 2:\n        return False\n    elif len(num) == 2:\n        for char in num:\n            if not char.isdigit():\n                return False\n        if num[-1] == '.' or num[-1] == ',':\n            return False\n        elif '.' not in num:\n            return False\n    elif len(num) == 1:\n        if num!= '0':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the input string only contains digits and a dot (.)\n    if not num.replace('.', '').isdigit():\n        return False\n    \n    # Check if the string contains more than one dot\n    if '.' in num:\n        return False\n    \n    # Check if the string contains more than one digit after the dot\n    dot_index = num.index('.')\n    decimal_index = num.index('.', dot_index+1)\n    if dot_index < decimal_index:\n        return False\n    \n    # Check if the decimal part of the string has a precision of 2\n    decimal_part = num[dot_index+1:decimal_index]\n    if len(decimal_part) > 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '.')\n    if '.' not in num:\n        return False\n    digits = num.split('.')\n    int_part = digits[0]\n    if len(int_part) > 15:\n        return False\n    for digit in int_part:\n        if digit < '0' or digit > '9':\n            return False\n    if len(digits) == 1:\n        return True\n    frac_part = digits[1]\n    if len(frac_part) > 10:\n        return False\n    for digit in frac_part:\n        if digit < '0' or digit > '9':\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Convert the string to float, and check if it's a float with precision of 2\n    try:\n        float_num = float(num)\n        if float_num % 1 == 0 and str(float_num).split('.')[1].endswith('00'):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input is a valid number\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    \n    # Check if the number has a precision of 2\n    if abs(num - int(num)) >= 0.01:\n        return False\n    \n    # If the number is a valid decimal, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        decimal_num = float(num)\n        if decimal_num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    if not isinstance(num, str):\n        return False\n\n    num = num.replace(',', '')  # remove commas\n    num = num.replace('.', '')  # remove periods\n\n    parts = num.split('.')  # split the string into parts\n\n    if len(parts) > 2:\n        return False\n\n    for part in parts:\n        if not part.isdigit():\n            return False\n\n    decimal_part = parts[1] if len(parts) > 1 else '0'  # get the decimal part, or \"0\" if there is no decimal\n\n    if len(decimal_part) > 2:\n        return False\n\n    for digit in decimal_part:\n        if not digit.isdigit():\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # Check if the string contains only digits and a decimal point\n    if not num.isdigit() or '.' not in num:\n        return False\n\n    # Check if the string contains at most 3 digits before the decimal point\n    if len(num.split('.')[0]) > 3:\n        return False\n\n    # Check if the string contains only two digits after the decimal point\n    if len(num.split('.')[1]) > 2:\n        return False\n\n    # Check if the string contains a decimal point\n    if '.' not in num:\n        return False\n\n    # Check if the string contains only one decimal point\n    if num.count('.') > 1:\n        return False\n\n    # Check if the string is a valid decimal number with a precision of 2\n    try:\n        float(num)\n        if '.' in num:\n            if float(num).is_integer():\n                return False\n        else:\n            return False\n    except ValueError:\n        return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if i not in arr[:count]:\n            count += 1\n            if count == len(arr):\n                return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the elements of the array\n    unique_set = set(arr)\n    # If the length of the set is equal to 1, it means that there is only one distinct element in the array\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list has only one element\n    if len(arr) == 1:\n        return True\n\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        return True\n\n    # If the length of the unique set is less than the length of the list, then there is at least one element that appears more than once in the list\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list does not contain only one distinct element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_list = list(set(arr))\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"February has 28 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]: # April, June, September, November\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]: # January, March, May, July, August, October, December\n        return False\n    else:\n        print(\"Invalid month number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and (year % 100 == 0 and year % 400!= 0)):\n            if monthnum3 == 2 and day >= 29:\n                return True\n        else:\n            if monthnum3 == 2 and day >= 28:\n                return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 4 and day >= 30:\n            return True\n        else:\n            if monthnum3 == 6 and day >= 30:\n                return True\n            else:\n                if monthnum3 == 9 and day >= 30:\n                    return True\n                else:\n                    if monthnum3 == 11 and day >= 30:\n                        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1 and day >= 31:\n            return True\n        else:\n            if monthnum3 == 3 and day >= 31:\n                return True\n            else:\n                if monthnum3 == 5 and day >= 31:\n                    return True\n                else:\n                    if monthnum3 == 7 and day >= 31:\n                        return True\n                    else:\n                        if monthnum3 == 8 and day >= 31:\n                            return True\n                        else:\n                            if monthnum3 == 10 and day >= 31:\n                                return True\n                            else:\n                                if monthnum3 == 12 and day >= 31:\n                                    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum_dict = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum3 in monthnum_dict:\n        if monthnum3 in {4, 6, 9, 11}:\n            return True\n        elif monthnum3 in {1, 3, 5, 7, 8, 10, 12}:\n            return False\n        else:\n            return (monthnum_dict[monthnum3] % 7 == 0)\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n\n    # Find the maximum and minimum values in the array\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Calculate the sum of the differences between each element in the array\n    sum_diff = 0\n    for i in range(n):\n        diff = abs(max_val - arr[i]) + abs(min_val - arr[i])\n        sum_diff += diff\n\n    # Calculate the average difference and return it\n    avg_diff = sum_diff / (n * (n - 1))\n    return avg_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as 0\n    min_diff = 0\n\n    # Initialize left and right pointers for two pointers approach\n    left = 0\n    right = n - 1\n\n    # Traverse the array using two pointers approach\n    while left < right:\n        # Calculate the difference between current elements\n        diff = arr[right] - arr[left]\n\n        # If the difference is smaller than minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is greater than the difference between left and right pointers, move the left pointer to the right\n        elif diff > arr[right] - arr[left]:\n            left += 1\n\n        # If the difference is less than the difference between left and right pointers, move the right pointer to the left\n        else:\n            right -= 1\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two arguments:\n    arr: A list of integers\n    n: The size of the array\n\n    This function returns the minimum difference between any two elements in the array.\n    The difference is calculated by subtracting the minimum element from the maximum element.\n    '''\n\n    # Find the minimum and maximum elements in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Calculate the difference between the maximum and minimum elements\n    diff = max_val - min_val\n\n    # Initialize a variable to store the minimum difference\n    min_diff = diff\n\n    # Iterate through the array to find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the i-th and j-th elements\n            curr_diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the current difference is smaller\n            if curr_diff < min_diff:\n                min_diff = curr_diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort()\n\n    min_diff = float('inf')\n    min_elem = None\n    max_elem = None\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        if diff < min_diff:\n            min_diff = diff\n            min_elem = arr[i]\n            max_elem = arr[i + 1]\n        elif diff == min_diff:\n            min_elem = min(min_elem, arr[i])\n            max_elem = max(max_elem, arr[i + 1])\n\n    return min_diff, min_elem, max_elem"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n            min_index = i\n    return min_diff\n\narr = [2, 10, 4, 3, 1, 8, 7]\nn = len(arr)\nmin_diff = find_min_diff(arr,n)\nprint(\"Minimum difference between any two elements in the array: \",min_diff)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array 'arr' and the length of the array 'n' as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the first and last element of the sorted array\n    min_diff = abs(arr[n-1] - arr[0])\n\n    # Iterate over the array from the second element to the last element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the calculated difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference and minimum difference index\n    min_diff = float('inf')\n    min_diff_index = -1\n\n    # Traverse through the array\n    for i in range(n):\n        # If the difference between the current element and the next element is smaller\n        # than the current minimum difference, update the minimum difference and minimum difference index\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n            min_diff_index = i\n\n    # Return the minimum difference and minimum difference index\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a Python function to count the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the list to store the polite numbers\n    polite_numbers = []\n    \n    # Loop through all the odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # Check if the odd number is a polite number\n        if is_prime(i) and is_prime(i+2):\n            polite_numbers.append(i)\n        # Check if the odd number is a prime number\n        elif is_prime(i):\n            polite_numbers.append(i)\n    \n    # If the n-th polite number is not in the list, return False\n    if n not in polite_numbers:\n        return False\n    \n    # Otherwise, return the nth polite number\n    else:\n        return n\n    \ndef is_prime(n): \n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is divisible by any number less than its square root\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n\n    Returns:\n    The nth polite number.\n\n    Time Complexity: O(1)\n    \"\"\"\n    if n == 1:\n        return \"I\"\n    elif n == 2:\n        return \"II\"\n    elif n == 3:\n        return \"III\"\n    elif n == 4:\n        return \"IV\"\n    elif n == 5:\n        return \"V\"\n    elif n == 6:\n        return \"VI\"\n    elif n == 7:\n        return \"VII\"\n    elif n == 8:\n        return \"VIII\"\n    elif n == 9:\n        return \"IX\"\n    elif n == 10:\n        return \"X\"\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 14\n    elif n == 6:\n        return 17\n    elif n == 7:\n        return 20\n    elif n == 8:\n        return 23\n    elif n == 9:\n        return 26\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 32\n    elif n == 12:\n        return 35\n    elif n == 13:\n        return 38\n    elif n == 14:\n        return 41\n    elif n == 15:\n        return 44\n    elif n == 16:\n        return 47\n    elif n == 17:\n        return 50\n    elif n == 18:\n        return 53\n    elif n == 19:\n        return 56\n    elif n == 20:\n        return 59\n    elif n == 21:\n        return 62\n    elif n == 22:\n        return 65\n    elif n == 23:\n        return 68\n    elif n == 24:\n        return 71\n    elif n == 25:\n        return 74\n    elif n == 26:\n        return 77\n    elif n == 27:\n        return 80\n    elif n == 28:\n        return 83\n    elif n == 29:\n        return 86\n    elif n == 30:\n        return 89\n    elif n == 31:\n        return 92\n    elif n == 32:\n        return 95\n    elif n == 33:\n        return 98\n    elif n == 34:\n        return 101\n    elif n == 35:\n        return 104\n    elif n == 36:\n        return 107\n    elif n == 37:\n        return 110\n    elif n == 38:\n        return 113\n    elif n == 39:\n        return 116\n    elif n == 40:\n        return 119\n    elif n == 41:\n        return 122\n    elif n == 42:\n        return 125\n    elif n == 43:\n        return 128\n    elif n == 44:\n        return 131\n    elif n == 45:\n        return 134\n    elif n == 46:\n        return 137\n    elif n == 47:\n        return 140\n    elif n == 48:\n        return 143\n    elif n == 49:\n        return 146\n    elif n == 50:\n        return 149\n    elif n == 51:\n        return 152\n    elif n == 52:\n        return 155\n    elif n == 53:\n        return 158\n    elif n == 54:\n        return 161\n    elif n == 55:\n        return 164\n    elif n == 56:\n        return 167\n    elif n == 57:\n        return 170\n    elif n == 58:\n        return 173\n    elif n == 59:\n        return 176\n    elif n == 60:\n        return 179\n    elif n == 61:\n        return 182\n    elif n == 62:\n        return 185\n    elif n == 63:\n        return 188\n    elif n == 64:\n        return 191\n    elif n == 65:\n        return 194\n    elif n == 66:\n        return 197\n    elif n == 67:\n        return 200\n    elif n == 68:\n        return 203\n    elif n == 69:\n        return 206\n    elif n == 70:\n        return 209\n    elif n == 71:\n        return 212\n    elif n == 72:\n        return 215\n    elif n == 73:\n        return 218\n   "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Function to check if a number is a polite number or not. \n    Returns True if it is a polite number, False otherwise. \n    The polite number is defined as a number that is divisible by 5. \n    '''\n\n    # If n is not an integer, return False\n    if type(n)!= int:\n        return False\n\n    # Calculate the nth polite number\n    polite_num = 5 * n\n    if polite_num % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return \"1st\"\n    elif n == 2:\n        return \"2nd\"\n    elif n == 3:\n        return \"3rd\"\n    elif n == 4:\n        return \"4th\"\n    elif n == 5:\n        return \"5th\"\n    else:\n        polite_number = math.factorial(n)\n        polite_number //= math.factorial(n-2)\n        return str(polite_number) + \"th\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    if n % 2 == 1:\n        return is_polite(n-1)\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    else:\n        num = 5 * math.log2(n)\n        return int(num) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def nth_polite_number(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return 3 * nth_polite_number(n - 1) + 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    count = 1\n    polite_num = 1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                polite_num = i\n            else:\n                continue\n        else:\n            continue\n\n    if n % polite_num == 0:\n        return polite_num\n    else:\n        return is_polite(n+1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_not_prime(num):\n        return not is_prime(num)\n\n    def get_polite_num(n):\n        if n <= 0:\n            return None\n\n        if n == 1:\n            return 2\n\n        phi = (1 + math.sqrt(5)) / 2\n        i = 0\n        polite_num = 2\n        while True:\n            if is_prime(polite_num):\n                if i == n - 1:\n                    return polite_num\n                polite_num += 2 * phi\n                i += 1\n            else:\n                polite_num += 2\n                i = 0\n\n        return None\n\n    return get_polite_num(n)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list `l1` and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the sum provided.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    pairs = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n                count += 1\n\n    return count, pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    diff_list = []\n\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # initializing an empty list to store the difference\n    diff = []\n    # iterating through both lists and adding the elements that are not present in the second list to the difference list\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Initialize an empty list to store the difference\n    diff_list = []\n\n    # Iterate through the first list\n    for item in li1:\n        # Check if the item is not in the second list\n        if item not in li2:\n            # If it's not, add it to the difference list\n            diff_list.append(item)\n\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create a set of the common elements in both lists\n    common = set(li1) & set(li2)\n    # subtract the common elements from the first list and store the result in a new list\n    diff_list = list(set(li1) - common)\n    # sort the new list in ascending order\n    diff_list.sort()\n    # return the sorted list as the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as arguments and returns a new list that contains the elements of list1 that are not present in list2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns the difference between them.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1.symmetric_difference(set2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_pow = i**4\n        sum_of_powers += fourth_pow\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    # iterate n times\n    for i in range(n):\n        # get the current odd number\n        num = i + 1\n        # find the fourth power of the current number\n        fourth_pow = num ** 4\n        # add the fourth power to the sum variable\n        sum += fourth_pow\n    # return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            odd_sum += i ** 4\n        i += 1\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of fourth power of odd numbers\n    sum_of_fourth_powers = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the fourth power of the odd number to the sum\n        sum_of_fourth_powers += i ** 4\n    \n    # Return the sum of fourth power of odd numbers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(n):\n        num = i * (i+1) * (2*i+1)\n        if num % 2!= 0:\n            odd_sum += num\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        num = 2*i + 1\n        fourth_power = num**4\n        sum += fourth_power\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add fourth power of i to sum\n        sum += i ** 4\n\n    # return sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1):\n        sum_of_powers += i ** 4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ('(', '{', '['):\n            stack.append(exp[i])\n        elif exp[i] in (')', '}', ']'):\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif stack.pop()!= char:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char.isalnum() or char in ['+', '-', '*', '/', '(', ')']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == '(':\n                stack.pop()\n            elif char == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    \n    for char in exp:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or stack.pop()!= parentheses[char]:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append((i, c))\n        elif c == ')':\n            if not stack:\n                return False\n            paren_index, paren_char = stack.pop()\n            if paren_char == '(':\n                continue\n            if paren_char == ')':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n        elif stack and stack[-1] in ['(', '{', '[']:\n            if not stack.pop():\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            else:\n                j = stack.pop()\n                if i-j!= 1:\n                    return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the non-K-length words\n    non_K_words = []\n\n    # Loop through each word and check if its length is not K\n    for word in words:\n        if len(word)!= K:\n            non_K_words.append(word)\n\n    # Join the non-K-length words into a string and return it\n    return''.join(non_K_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)\n\ntest_str = \"This is a test string with some words and some other words\"\nK = 4\nresult = remove_length(test_str, K)\nprint(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize a list to store the words to keep\n    keep_words = []\n    \n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # If the word has K length, append it to the keep_words list\n            keep_words.append(word)\n    \n    # Join the words with spaces to form the final string\n    final_str =''.join(keep_words)\n    \n    # Return the final string\n    return final_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split() # Split the string into a list of words\n    \n    result = [] # Initialize an empty list to store the words with k length removed\n    \n    for word in test_str:\n        if len(word)!= K: # Check if the length of the word is not equal to K\n            result.append(word) # If the length is not equal to K, append the word to the result list\n        \n    return \" \".join(result) # Join the words in the result list with spaces and return the string"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        match_list = []\n        for match in matches:\n            match_list.append((match.group(), match.start(), match.end()))\n        return match_list\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Compile the pattern to find all occurrences\n    pattern_obj = re.compile(pattern)\n\n    # Find all occurrences of the pattern in the text\n    matches = pattern_obj.findall(text)\n\n    # If there are matches, return a list of tuples containing the match and its position in the text\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use regular expressions to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # check if there is at least one match\n    if matches:\n        # loop through the matches and find the position of each match in the text\n        for i, match in enumerate(matches):\n            match_position = text.find(match)\n            # return the match, its position, and the total number of matches\n            return (match, match_position, len(matches))\n    else:\n        # return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # Compile the regular expression pattern\n    pattern = re.compile(pattern)\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Check if there are any matches\n    if not matches:\n        return None\n\n    # Initialize a list to store the matches and their positions\n    result = []\n\n    # Iterate over the matches and add them to the result list\n    for match in matches:\n        # Store the match and its position in the result list\n        result.append((match.group(), match.start(), match.end()))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        # Search for pattern in the text and return its occurrences and positions\n        matches = re.finditer(pattern, text)\n        return [match.group() for match in matches], [match.start() for match in matches]\n    except:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(set(nums[i])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if any(num % 2!= 0 for num in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and i < len(nums):\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(0, n, 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if i is odd\n            if not all(nums[i] % 2 == 1 for j in range(i+1, len(nums))):  # check if every number in odd index is odd\n                return False  # if any number is not odd, return False\n\n    return True  # if all numbers are odd, return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if odd index\n            if nums[i] % 2 == 0: # check if odd number\n                return False # return False if odd number found in even index\n\n    return True # return True if no odd number found in even index"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i+k] % 2 == 0 for k in range(1, len(nums)//2+1)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if len(set([nums[j] for j in range(i, len(nums), 2)])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Convert the list to set to remove duplicates\n    arr = set(arr)\n    # Convert the set back to a list and sum it up\n    return sum(list(arr))"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their frequency\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # calculate the sum of non-repeated elements\n    total_sum = 0\n    for i in arr:\n        if freq[i] == 1:\n            total_sum += i\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set to keep track of the elements\n    unique_elements = set(arr)\n    # finding the sum of the unique elements\n    sum_unique = sum(unique_elements)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their counts\n    freq_dict = {}\n\n    # Iterate through the list and count the frequency of each element\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the sum of non-repeated elements\n    sum_non_repeat = 0\n    for num in freq_dict:\n        if freq_dict[num] == 1:\n            sum_non_repeat += num\n\n    return sum_non_repeat\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Use the sum() function to calculate the sum of unique elements\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements\n    unique_set = set()\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Iterate through the list\n    for num in arr:\n        # If the element is not in the set, add it to the set and add its value to the sum\n        if num not in unique_set:\n            unique_set.add(num)\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # Iterate over the list\n    for elem in arr:\n        # If the element is not in the count dictionary, add it with a count of 1\n        if elem not in count_dict:\n            count_dict[elem] = 1\n        # If the element is already in the count dictionary, increment its count by 1\n        else:\n            count_dict[elem] += 1\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeat = 0\n\n    # Iterate over the count dictionary to find the sum of non-repeated elements\n    for elem, count in count_dict.items():\n        if count == 1:\n            sum_non_repeat += elem\n\n    return sum_non_repeat"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # initialize the sum variable to zero\n    sum_non_repeated = 0\n    \n    # loop through the dictionary to find the sum of non-repeated elements\n    for num in count_dict:\n        if count_dict[num] == 1:\n            sum_non_repeated += num\n            \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # convert the set to a list\n    unique_list = list(unique_set)\n    # calculate the sum of unique elements\n    sum_unique = sum(unique_list)\n    # return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the non-repeated elements\n    set_arr = set(arr)\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through the set and add up the non-repeated elements\n    for num in set_arr:\n        total_sum += num\n    # Return the sum of non-repeated elements\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for item in groupby(list1):\n        group = list(item)\n        if len(group) > 1:\n            yield group[0], group[1:]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouper = lambda x: x\n    return [[list(group)] for key, group in groupby(list1, grouper)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            packed_list.append(list(group))\n        else:\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k, list(g)] for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    it = groupby(lst)\n    return [list(group) for key, group in it]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create an iterator of consecutive duplicates\n    iterator = groupby(list1, lambda x: x)\n\n    # create a list to store packed consecutive duplicates\n    packed_duplicates = []\n\n    # iterate over the iterator and pack consecutive duplicates into sublists\n    for key, group in iterator:\n        # if the group is a single element, pack it into a list\n        if len(list(group)) == 1:\n            packed_duplicates.append(list(group))\n        # if the group is a sequence of more than one element, append it as is\n        else:\n            packed_duplicates.append(list(group))\n\n    # return the packed list of consecutive duplicates\n    return packed_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Define a function to check if two elements are consecutive duplicates\n    def is_consecutive_duplicate(a, b):\n        if a == b+1:\n            return True\n        elif a == b-1:\n            return True\n        else:\n            return False\n    \n    # Iterate through the list using the groupby function to group the elements\n    # by their indices and group them based on consecutive duplicates\n    grouped_list = list(groupby(enumerate(list1), key=lambda x: x[1]-x[0]))\n    \n    # Define a function to pack consecutive duplicates into sublists\n    def pack_duplicates(group):\n        # Get the first and last indices of the group\n        start, end = group[0]\n        \n        # Initialize an empty list to store the consecutive duplicates\n        consec_duplicates = []\n        \n        # Iterate through the group to find consecutive duplicates\n        for i in range(start+1, end):\n            if is_consecutive_duplicate(list1[start], list1[i]):\n                consec_duplicates.append(list1[i])\n        \n        # If there are consecutive duplicates, append them as a sublist\n        if consec_duplicates:\n            return [list1[start]] + consec_duplicates\n        else:\n            # If there are no consecutive duplicates, append the entire group as a sublist\n            return [list1[start:end+1]]\n    \n    # Iterate through the grouped list and pack consecutive duplicates into sublists\n    packed_list = [pack_duplicates(group) for name, group in grouped_list]\n    \n    # Return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby to group the list elements by their values\n    grouped_list = groupby(list1)\n    # Create an empty list to store the sublists\n    sublists = []\n    # Iterate over the grouped list\n    for key, group in grouped_list:\n        # If the key is the same as the previous one, add it to the sublist\n        if key == list1[0]:\n            sublists[-1].append(list(group))\n        # If the key is different, create a new sublist and append it to the list\n        else:\n            sublists.append(list(group))\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a list elements into sublists.\n    \"\"\"\n    # split the list into groups of consecutive duplicates\n    grouped = groupby(lst)\n    # extract the groups of consecutive duplicates\n    grouped_duplicates = [g for k, g in grouped if len(list(g)) > 1]\n    # create a sublist for each group of consecutive duplicates\n    sublists = [list(g) for g in grouped_duplicates]\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # loop through each element in the list1\n    for element in list1:\n        # if the element is a list, convert it to a tuple and check if it already exists in the count_dict\n        if isinstance(element, list):\n            if tuple(element) in count_dict:\n                # increment the count by 1 for the tuple\n                count_dict[tuple(element)] += 1\n            else:\n                # otherwise, add the tuple to the count_dict with a count of 1\n                count_dict[tuple(element)] = 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) in count:\n            count[tuple(i)] += 1\n        else:\n            count[tuple(i)] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in list1:\n        if type(item) == tuple:\n            if item not in counts:\n                counts[item] = 0\n            counts[item] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Define an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through the lists in the list1\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist = tuple(sublist)\n\n        # Check if the tuple exists in the dictionary\n        if sublist in counts:\n            # If it does, increment the count by 1\n            counts[sublist] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            counts[sublist] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Creating a dictionary to store the count of unique sublists\n    sublist_count = {}\n    \n    # Looping through all the elements of the list\n    for i in range(len(list1)):\n        # Extracting the current element\n        current_element = list1[i]\n        \n        # Converting the current element to a tuple\n        current_element = tuple(current_element)\n        \n        # Checking if the current element is already in the dictionary\n        if current_element in sublist_count:\n            # Incrementing the count of the current element\n            sublist_count[current_element] += 1\n        else:\n            # Adding the current element to the dictionary with a count of 1\n            sublist_count[current_element] = 1\n    \n    # Returning the dictionary containing the count of unique sublists\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    \n    count = {}\n    for item in unique_list:\n        count[tuple(item)] = 0\n        \n    for item in list1:\n        if tuple(item) in count:\n            count[tuple(item)] += 1\n    \n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of lists\n    counts = {}\n    # iterate through each element in the list\n    for element in list1:\n        # check if the element is a list\n        if isinstance(element, list):\n            # turn the list into a tuple\n            tuple_element = tuple(element)\n            # check if the tuple is already in the dictionary\n            if tuple_element in counts:\n                # increment the count by 1\n                counts[tuple_element] += 1\n            else:\n                # add the tuple to the dictionary with a count of 1\n                counts[tuple_element] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    \n    # loop through each list in the input list\n    for sublist in list1:\n        # turn the list into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple already exists in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n            \n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = tuple(sorted(set(test_list[i])+set(test_list[j])))\n            combinations.append(comb)\n    return combinations\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(find_combinations(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total = sum(test_list)\n    for i in range(1, total+1):\n        for comb in combinations(test_list, i):\n            print(tuple(comb))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                yield tuple(sorted(test_list[i]+test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(1, total_sum + 1):\n        for combo in combinations(test_list, r=i):\n            if sum(combo) == i:\n                print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a dictionary to store the sum of a combination and its indices\n    sum_dict = {}\n    # iterate over all possible combinations of tuples\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            # compute the sum of the current combination\n            curr_sum = sum(comb)\n            # add the current combination and its indices to the dictionary\n            if curr_sum in sum_dict:\n                sum_dict[curr_sum].append(comb)\n            else:\n                sum_dict[curr_sum] = [comb]\n    # return the list of combinations with tuples\n    return sum_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns all the combinations of sums with tuples in the given list.\n    \"\"\"\n    n = len(test_list)\n    total = sum(test_list)\n    # Combinations of sums with tuples in the given list\n    result = list(combinations(test_list, n))\n    # Adding the combinations of sums with tuples from the list and the total sum\n    for comb in result:\n        if sum(comb) == total:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Remove duplicates from the test list\n    test_list = list(set(test_list))\n    # Sort the test list in ascending order\n    test_list.sort()\n\n    # Find all combinations of two elements in the test list\n    combinations_two = combinations(test_list, 2)\n\n    # Iterate through the combinations of two elements in the test list\n    for combination in combinations_two:\n        # Calculate the sum of the elements in the combination\n        sum_elements = sum(combination)\n        # Check if the sum of the elements is present in the test list\n        if sum_elements in test_list:\n            # Calculate the difference between the sum and the original sum of the elements\n            diff = sum_elements - sum(test_list)\n            # Check if the difference is present in the test list\n            if diff in test_list:\n                # If both conditions are true, print the combination\n                print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes in a tuple list and returns all the combinations of sums with tuples.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if i+j+k == n:\n                    for combo in combinations(test_list, i+j+k):\n                        print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            comb_list.append(tuple(sorted(test_list[k:l])))\n            k += 1\n            l = k + i\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Sort the given list of tuples\n    test_list.sort(key=lambda x: sum(x))\n\n    # Find all combinations of sums using itertools.combinations\n    for combination in combinations(test_list, r=len(test_list)):\n        if combination == tuple(sum(combination) for combination in combinations(test_list, r=len(test_list))):\n            # Print the combination\n            print(combination)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    even_divisors = [d for d in divisors if d % 2 == 0]\n    return len(even_divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 :\n            count += 1\n            \n    if count % 2 == 0 :\n        print(\"The count of divisors is even.\")\n    else :\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    if n == 1:\n        return True\n    divisors = [1]\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            divisors.append(divisor)\n            if n // divisor == divisor:\n                divisors.append(n // divisor)\n        divisor += 1\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n\n    # Check if the count of divisors is even\n    if divisor_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number as input and returns True if its count of divisors is even, otherwise False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    if n > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number.\n    '''\n    # Calculate the square root of the given number\n    sqrt_n = math.sqrt(n)\n\n    # Initialize variables to store count of divisors and sum of divisors\n    count = 0\n    sum_divisors = 0\n\n    # Loop through all integers from 1 to the square root of the given number\n    for i in range(1, int(sqrt_n) + 1):\n        # Check if the given number is divisible by the current integer\n        if n % i == 0:\n            # Add the current integer to the count of divisors\n            count += 1\n\n            # Add the current integer to the sum of divisors\n            sum_divisors += i\n\n            # If the current integer is greater than the square root of the given number,\n            # we can stop looping because we have checked all the integers from 1 to the square root of the given number\n            if i > sqrt_n:\n                break\n\n    # Return the count of divisors and the sum of divisors\n    return count, sum_divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a positive integer as input and returns True if the count of divisors is even, otherwise False. \n    The count of divisors is the number of integers from 1 to the square root of the input number, excluding the input number itself. \n    If the count of divisors is even, then the input number is prime. \n    '''\n    if n <= 1:\n        return False\n    # Calculate the square root of n\n    sqrt_n = int(math.sqrt(n))\n    # Count the divisors of n\n    count = 1\n    for i in range(2, sqrt_n+1):\n        if n % i == 0:\n            count += 1\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if count == 0:\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is a composite number\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return True\n            elif count == 2:\n                return False\n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes a positive integer as input and returns True if the count of divisors is even, else False.\n    '''\n    divisor_count = 0\n    num = n\n    while num > 1:\n        if num % 2 == 0:\n            divisor_count += 1\n        num //= 2\n    \n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the length of the current subarray is odd\n        if i % 2 == 1:\n            # Initialize a variable to hold the sum of the current subarray\n            subarray_sum = 0\n\n            # Loop through the current subarray and add each number to the sum\n            for j in range(i, len(arr)):\n                subarray_sum += arr[j]\n\n            # Add the sum of the current subarray to the overall sum\n            sum += subarray_sum\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    # Iterate through all possible subarrays of odd length\n    for i in range(1, n+1):\n        # Compute the sum of the subarray\n        subsum = sum(arr[j] for j in range(i, n) if j % 2!= 0)\n        # Check if the subarray is odd length and is not a repetitive subarray\n        if i % 2!= 0 and subsum not in result and subsum not in odd_length_sum(arr[i:]):\n            result.append(subsum)\n    \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize sum variable to zero\n    sum = 0\n\n    # Traverse through the array\n    for i in range(len(arr)):\n\n        # Initialize current subarray sum to zero\n        current_subarray_sum = 0\n\n        # Traverse through the array starting from index i\n        for j in range(i, len(arr)):\n\n            # Add the element to the current subarray sum\n            current_subarray_sum += arr[j]\n\n            # If the length of the current subarray is odd, add it to the sum\n            if len(arr[i:j+1]) % 2 == 1:\n                sum += current_subarray_sum\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        # iterate over all possible starting positions of odd-length subarrays\n        for j in range(i+1, n, 2):\n            # calculate the sum of the odd-length subarray\n            odd_subarray_sum = sum(arr[j:j+2])\n            # add it to the overall sum\n            sum += odd_subarray_sum\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        left = i\n        right = i\n\n        while left >= 0 and right < n and arr[left] % 2 == 0:\n            left -= 1\n\n        while left >= 0 and right < n and arr[right] % 2 == 1:\n            right += 1\n\n        if right - left - 1 % 2 == 0:\n            result += arr[left] + arr[right]\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of odd length subarrays\n    total_sum = 0\n\n    # Iterate through each element of the array\n    for i in range(len(arr)):\n        # Initialize a variable to store the current element\n        current_element = arr[i]\n        # Initialize a variable to store the sum of odd length subarrays ending at the current index\n        sum_odd = 0\n\n        # Iterate through the remaining elements of the array starting from the current index\n        for j in range(i+1, len(arr)):\n            # Check if the length of the current subarray is odd\n            if (j-i) % 2 == 1:\n                # Add the current element to the sum of odd length subarrays ending at the current index\n                sum_odd += current_element\n                # Add the sum of odd length subarrays ending at the current index to the total sum of odd length subarrays\n                total_sum += sum_odd\n            # Update the current element to the next element in the array\n            current_element = arr[j]\n\n    # Return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1%2!=0:\n                sum_of_odd_length_subarrays += sum(arr[i:j])\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Given a list of integers, return the sum of all odd-length subarrays.\n\n    :param arr: a list of integers\n    :return: the sum of all odd-length subarrays\n    \"\"\"\n    n = len(arr)\n    sum_odd_len = 0\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sum_odd_len += arr[j-2]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum_odd = 0\n\n    # Iterate through the array and check if the current index is an odd length\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            continue\n        else:\n            # Initialize the sum variable to zero for each odd length subarray\n            sum_odd = 0\n            # Iterate through the odd indices and add the values to the sum variable\n            for j in range(i, len(arr), 2):\n                sum_odd += arr[j]\n            # Add the sum variable to the overall sum variable\n            sum_total += sum_odd\n\n    return sum_total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        if i % 2!= 0:\n            sum += sum_odd_length_subarray(arr[i:i+2])\n    return sum\n\n\ndef sum_odd_length_subarray(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2!= 0:\n            sum += num\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # calculate the minimum, maximum, and difference values for the rgb color\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n    \n    # calculate the hue value by taking the angle of the color\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # calculate the saturation value by dividing the difference value by the maximum value\n    saturation = delta / max_val\n    \n    # calculate the value value by dividing the difference value by the maximum value\n    value = max_val\n    \n    # convert the hue value to degrees and correct it to be between 0 and 360\n    hue_deg = (hue * 60) % 360\n    \n    # return the values in a dictionary\n    return {'hue': hue_deg,'saturation': saturation, 'value': value}"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r, g, b from integers to floats\n    r = float(r)/255\n    g = float(g)/255\n    b = float(b)/255\n    \n    # Find the minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Find the hue\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta) + 120\n    else:\n        hue = 60 * ((r - g) / delta) + 240\n    \n    # Find the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Find the value\n    value = max_val\n    \n    # Convert the hue, saturation, and value to percentages\n    hue = hue / 360 * 100\n    saturation = saturation * 100\n    value = value * 100\n    \n    # Return the hsv color as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0, 0, max_val\n    \n    d = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / d)\n    elif max_val == g:\n        h = 60 * ((b - r) / d + 2)\n    else:\n        h = 60 * ((r - g) / d + 4)\n    \n    s = (max_val + min_val) / 2\n    \n    if max_val == 0:\n        v = 0\n    else:\n        v = max_val\n    \n    if s == 0:\n        h, s, v = 0, 0, max_val\n    \n    h, s, v = int(h), int(s * 255), int(v * 255)\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r = r/255\n    g = g/255\n    b = b/255\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_value\n    \n    if max_value!= 0:\n        s = (max_value - min_value) / max_value\n    \n    if max_value == min_value:\n        h = 0\n    else:\n        if r == max_value:\n            h = (g - b) / (max_value - min_value)\n        elif g == max_value:\n            h = 2 + (b - r) / (max_value - min_value)\n        else:\n            h = 4 + (r - g) / (max_value - min_value)\n        \n        h *= 60\n        if h < 0:\n            h += 360\n            \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in three integers representing the red, green, and blue values of a color and converts them to their corresponding HSV (hue, saturation, and value) color model.\n    \"\"\"\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0.0\n    s = 0.0\n    v = max_val\n\n    if max_val!= 0.0:\n        delta = max_val - min_val\n        s = delta / max_val\n\n    if delta == 0.0:\n        h = 0.0\n    else:\n        if max_val == r:\n            h = ((g - b) / delta) % 6.0\n        elif max_val == g:\n            h = (b - r) / delta + 2.0\n        else:\n            h = (r - g) / delta + 4.0\n\n        h = h / 6.0\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to HSV\n    h = None\n    s = None\n    v = None\n    \n    if r == g == b:\n        # Color is gray\n        h = s = v = 0\n    else:\n        max_val = max(r, g, b)\n        min_val = min(r, g, b)\n        d = max_val - min_val\n        \n        if max_val == r:\n            h = (g - b) / d\n        elif max_val == g:\n            h = 2 + (b - r) / d\n        else:\n            h = 4 + (r - g) / d\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n        \n        s = (max_val / 255)\n        \n        if s == 0:\n            v = 0\n        elif max_val == r:\n            v = (g - b) / d\n        elif max_val == g:\n            v = (b - r) / d\n        else:\n            v = (r - g) / d\n        \n        v = v / 255\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Convert an rgb color to hsv color using the following formula:\n    H = (max(r, g, b) + min(r, g, b))/2\n    S = if max(r, g, b) == 0: 0 else (max(r, g, b) - min(r, g, b))/max(r, g, b)\n    V = max(r, g, b)\n    '''\n    \n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    h = (max_rgb + min_rgb)/2.0\n    \n    if max_rgb == min_rgb:\n        # achromatic case\n        s = 0\n    else:\n        d = max_rgb - min_rgb\n        if max_rgb == r:\n            s = d/float(max_rgb + min_rgb)\n        elif max_rgb == g:\n            s = (d/float(max_rgb + min_rgb)) + (max_rgb-min_rgb)/float(max_rgb)\n        else:\n            s = (d/float(max_rgb + min_rgb)) + (max_rgb-min_rgb)/float(max_rgb)\n        \n        s = round(s*100.0)/100.0  # scale to 0-1 range\n        \n    v = max_rgb\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        h = 0\n    else:\n        if r == max_rgb:\n            h = (g - b) / delta\n        elif g == max_rgb:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = round(h * 60)\n        if h < 0:\n            h += 360\n    if max_rgb == 0:\n        s = 0\n    else:\n        s = delta / max_rgb\n    v = max_rgb\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three parameters r, g and b representing the red, green and blue color values respectively.\n    The function returns a tuple (h, s, v) representing the hue, saturation and value of the input color.\n    '''\n    \n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n        \n        if h < 0:\n            h += 1\n        \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n    \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red color component (0 to 255)\n    :param g: Green color component (0 to 255)\n    :param b: Blue color component (0 to 255)\n    :return: Hue, Saturation, Value components of the HSV color\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = round(h * 60) % 360\n    if h < 0:\n        h += 360\n    s = 0 if delta == 0 else delta / (1 - abs(2 * cmin - 1))\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return (even_count * 2) * (odd_count + 1)\n    else:\n        return (odd_count * 2) * (even_count + 1)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        product = even_count * odd_count\n\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    # Count the even and odd numbers in the list\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Check if there is at least one even and one odd number in the list\n    if even_count == 0 or odd_count == 0:\n        print(\"There is no even or odd number in the list\")\n        return\n    \n    # Find the product of the first even and first odd number in the list\n    result *= list1[0]\n    result *= list1[1]\n    \n    print(\"The product of the first even and first odd number is:\", result)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = [num for num in list1 if num % 2 == 0]\n    odd_num = [num for num in list1 if num % 2!= 0]\n    if even_num:\n        return sum(even_num) * sum(odd_num)\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return None\n    return (lst[0] * lst[2]) * (lst[1] * lst[3])"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n        return product\n    else:\n        return \"There are no even or odd numbers in the list.\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # create list to store integers\n    int_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n\n        # check if the character is an integer\n        if char.isdigit():\n            # if it is, add it to the integer list\n            int_list.append(int(char))\n        else:\n            # if it's not, skip it\n            continue\n\n    # convert integer list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of tuples, where each tuple contains one digit\n    digit_tuples = [tuple(digit) for digit in test_str]\n    # Convert each digit tuple to an integer using the int() function\n    digit_ints = [int(digit_tuple) for digit_tuple in digit_tuples]\n    # Combine the digit integers into an integer tuple using the tuple() function\n    int_tuple = tuple(digit_ints)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n    test_str (str): Tuple string to be converted to integer tuple.\n\n    Returns:\n    (int, int): Tuple of two integers.\n\n    Example:\n    tuple_str_int('(1, 2)') -> (1, 2)\n    \"\"\"\n    # Remove parenthesis and convert string to list\n    lst = test_str[1:-1].split(', ')\n    # Convert list to tuple and convert each element to integer\n    return tuple([int(x) for x in lst])"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Parameters:\n        test_str: str\n            A string representation of a tuple.\n\n    Returns:\n        int_tuple: tuple\n            An integer tuple representation of the given tuple string.\n    \"\"\"\n\n    # Split the string by commas\n    str_tuple = test_str.split(',')\n\n    # Convert each string to an integer\n    int_tuple = tuple([int(num) for num in str_tuple])\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by comma and space\n    tuple_str = test_str.split(\",\")\n    # create an empty list to store the integer values\n    int_list = []\n    # iterate through each element in the tuple string\n    for elem in tuple_str:\n        # try to convert the element to an integer\n        try:\n            int_val = int(elem)\n            # add the integer value to the list\n            int_list.append(int_val)\n        except ValueError:\n            # if the conversion fails, print an error message\n            print(\"Error: Unable to convert\", elem, \"to integer\")\n    # return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    lst = [str(x) for x in test_str]\n\n    # Convert the list of strings to a tuple of integers\n    t = tuple(int(x) for x in lst)\n\n    return t"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and convert each element to an integer\n    int_tuple = tuple([int(i) for i in test_str.split(',')])\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the function to convert tuple string to integer tuple\n    def tuple_to_int_tuple(tuple_str):\n        # Convert each string in the tuple to integer\n        int_tuple = tuple(map(int, tuple_str))\n        return int_tuple\n    \n    # Split the tuple string by the comma\n    tuple_str_list = test_str.split(',')\n    \n    # Convert each tuple string in the list to integer tuple\n    int_tuple_list = list(map(tuple_to_int_tuple, tuple_str_list))\n    \n    # Convert the list of integer tuples to a single integer tuple\n    int_tuple = tuple(int_tuple_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        try:\n            num = int(char)\n            result.append(num)\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the index where the value should be inserted\n    index = bisect.bisect_right(a, x)\n    # Return the index where the value should be inserted\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a: List of elements in sorted order.\n        x: The value to be inserted.\n\n    Returns:\n        Index of the right insertion point for the specified value.\n\n    Raises:\n        TypeError: If a is not a list.\n        ValueError: If a is empty.\n        ValueError: If x is not found in a.\n    \"\"\"\n    if not isinstance(a, list):\n        raise TypeError(\"a must be a list\")\n    if not a:\n        raise ValueError(\"a cannot be empty\")\n    if x not in a:\n        raise ValueError(\"x must be in a\")\n\n    # Use binary search to find the insertion point\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # Value not found in a, so return the insertion index\n        return i\n    elif x == a[i]:\n        # Value already exists at insertion index\n        return i\n    else:\n        # Value exists at insertion index + 1\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # use binary search to find the right insertion point\n    i = bisect.bisect_right(a, x)\n    # check if the right insertion point is already equal to the length of the list\n    if i == len(a):\n        # insert at the end of the list\n        return len(a)\n    # check if the value to insert is greater than the value at the right insertion point\n    elif a[i] > x:\n        # return the right insertion point\n        return i\n    else:\n        # insert at the next position to the right of the right insertion point\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    This function takes in a sorted list of numbers and a value to find the right insertion point for.\n    The function returns the index where the value should be inserted to maintain the sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    return bisect.bisect_left(a[i:], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    result = pattern.match(text)\n    if result:\n        print(\"The text contains the pattern a followed by three 'b'.\")\n    else:\n        print(\"The text does not contain the pattern a followed by three 'b'.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b{3}\"\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(?=b{3})')\n    matches = pattern.finditer(text)\n    return len(matches)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of integers.\n        test_str (str): A string of characters.\n\n    Returns:\n        tuple: A new tuple containing the elements of test_list and test_str.\n    \"\"\"\n    return tuple(test_list + [int(test_str)])"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into a single list\n    combined_list = test_list + [test_str]\n\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string into a single string\n    combined_str = test_str + \" \".join(test_list)\n    # Split the combined string into a list of words\n    words_list = combined_str.split()\n    # Create a new tuple from the list of words\n    new_tuple_obj = tuple(words_list)\n    return new_tuple_obj"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list + tuple(test_str))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((test_str, test_list))\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and string into a single tuple\n    combined_tuple = (test_str, *test_list)\n    return combined_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    :param test_list: A list of items.\n    :param test_str: A string of characters.\n    :return: A new tuple containing the concatenation of the string and list.\n    \"\"\"\n\n    return (test_str + ''.join(test_list))"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n    if count == 0:\n        return \"The given list contains no even numbers at even indices.\"\n    else:\n        return \"The given list contains even numbers at even indices.\""
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count = 0\n            for j in range(len(nums)):\n                if j % 2 == 0:\n                    if nums[j] == nums[i]:\n                        even_count += 1\n                        if even_count % 2 == 1:\n                            return False\n            if even_count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # initialize a boolean variable to check if all even indices contain even numbers\n    is_even = True\n    \n    # loop through the list and check if every even index contains an even number\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            is_even = False\n            break\n    \n    # return the boolean value of the is_even variable\n    return is_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count!= 0 and count % 2 == 1:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        count += nums[i]\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i+j] for j in range(0, len(nums), 2)]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            new_list.extend(remove_nested(i))\n        else:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for tup in test_tup for item in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        for item in test_tup:\n            if isinstance(item, tuple):\n                for nested_item in item:\n                    test_tup = remove_nested(nested_item)\n                test_tup = remove_nested(test_tup)\n        return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the non-nested tuples\n    non_nested_list = []\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is a tuple, recursively call the function on it\n        if isinstance(element, tuple):\n            non_nested_list += remove_nested(element)\n        else:\n            # If the element is not a tuple, add it to the non_nested_list\n            non_nested_list.append(element)\n    # Return the non-nested list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            nested_list.extend(item)\n        else:\n            if item not in nested_list:\n                nested_list.append(item)\n    return nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                flat_tup.append(sub_item)\n        else:\n            flat_tup.append(item)\n    return flat_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([x for tup in test_tup for x in tup])"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = tuple(item for sublist in test_tup for item in sublist)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_lists(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n            count += count_lists(element)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sub_list in input_list:\n        if isinstance(sub_list, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    :param arr: The sorted array in which the element needs to be searched.\n    :param x: The element to be searched.\n    :return: The last position of the element in the array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    i = bisect_left(arr, x)\n    # If x is not present in the array, return -1\n    if i == len(arr) or arr[i]!= x:\n        return -1\n    # If x is present, find the index of its last occurrence in the remaining part of the array\n    j = i + 1\n    while j < len(arr) and arr[j] == x:\n        j += 1\n    return j - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # find the leftmost element that is greater than or equal to x\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == x:\n            j = mid - 1\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    This function takes two arguments: the sorted array and the element whose position is to be found.\n    It returns the last position of the element in the array, or -1 if the element is not present in the array.\n    '''\n    # initialize a variable to keep track of the last index of the element\n    last_index = -1\n    # loop through the array from the beginning to the end\n    for i in range(len(arr)):\n        # if the current element is equal to the target element, update the last index\n        if arr[i] == x:\n            last_index = i\n            break\n    # return the last index of the element\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments:\n    arr: The sorted array in which we want to find the last occurrence of an element.\n    x: The element we want to find the last occurrence of.\n\n    This function returns the last occurrence of x in the sorted array arr.\n    If x is not found in arr, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr)-1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1] < x:\n                return mid\n            else:\n                right = mid-1\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n\n    return -1 # element not found in array\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n    x (any): An element to be searched for in the array.\n\n    Returns:\n    int: The index of the last occurrence of the element in the array. If the element is not found in the array, -1 is returned.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x. It then uses binary search to find the last position of x in the array.\n\n    Args:\n    arr (list): A sorted array.\n    x (any): An element to find the last position of.\n\n    Returns:\n    int: The last position of x in the array.\n\n    Raises:\n    ValueError: If x is not in arr.\n    \"\"\"\n\n    # Binary search to find the last position of x in the array\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left]!= x:\n        raise ValueError(f\"{x} is not in the array\")\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n    # Find the last occurrence of x in the array using binary search\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_pos"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'(?<=a)([^\\r\\n]*)(?=b)')\n    match = pattern.search(text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_starta_endb(text):\n    pattern = r'a(?P<anything>.*?)b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group('anything')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?P<rest>[^b]*)b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group('rest')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'(?<=a).*b(?=b)'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba.*b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum_value = 0\n    for value in dict.values():\n        sum_value += value\n    return sum_value"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dict.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes in a dictionary and returns the sum of all items in the dictionary.\n    '''\n    total_sum = 0\n    for key, value in dictionary.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    This function takes a single argument n, which represents the upper limit of the range.\n    It then iterates over all odd natural numbers from 1 to n (inclusive) and adds them to a variable called sum.\n    Finally, it returns the sum.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the lower and upper limits of the range: \").split())\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(l, r+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1  # starting range\n    r = n  # ending range\n    sum = 0  # initialize sum to 0\n    for i in range(l, r+1, 2):  # loop through odd numbers\n        sum += i  # add each odd number to the sum\n    return sum  # return the sum of all odd numbers in the range"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initializing variables\n    sum = 0\n    i = n\n\n    # loop to find the sum of odd natural numbers between l and r\n    while i >= 1:\n        if i % 2 == 1:\n            sum += i\n        i -= 1\n\n    # returning the sum of odd natural numbers between l and r\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer `n` and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for num in range(l, r + 1, 2):\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nprint(_sum([1, 2, 3, 4, 5]))  # Output: 15"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not isinstance(arr, list):\n        raise TypeError('Input must be a list.')\n    \n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift\n    shift_bits = d % 32\n    \n    # If d is less than 32, calculate the number of times we need to shift\n    if shift_bits < 32:\n        shift_count = shift_bits\n    else:\n        shift_count = shift_bits // 32 + 1\n        \n    # Extract the last shift_count bits\n    last_bits = n & ((1 << shift_count) - 1)\n    \n    # Shift the first shift_count bits to the left and OR the last shift_count bits\n    shifted_n = (n >> shift_count) | last_bits\n    \n    # Return the shifted number\n    return shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Check if d is a multiple of 32\n    if d % 32!= 0:\n        raise ValueError(\"d must be a multiple of 32\")\n\n    # Perform the rotation\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> 32 - d\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate by\n    num_bits = 32\n    d_bits = d % num_bits\n\n    # Perform the left rotation\n    rotated = (n << d_bits) | (n >> (num_bits - d_bits))\n\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & ((2**32)-1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary string\n    bin_num = bin(n)[2:]\n\n    # check if the number of bits is less than the number of rotations required\n    if len(bin_num) < d:\n        # add zeroes to the left of the binary string\n        bin_num = '0'*(d-len(bin_num)) + bin_num\n    \n    # rotate the binary string by d bits to the left\n    rotated_bin_num = bin_num[-d:] + bin_num[:-d]\n\n    # convert the rotated binary string to integer\n    rotated_num = int(rotated_bin_num, 2)\n\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # convert the given number to binary\n    binary_str = bin(n)[2:]\n    # calculate the number of bits to rotate\n    rotation_bits = d % 32\n    # calculate the rotation index\n    rotation_index = d // 32\n    # calculate the rotation mask\n    rotation_mask = (1 << rotation_bits) - 1\n    # perform the rotation\n    rotated_binary_str = (binary_str[rotation_index:] + binary_str[:rotation_index]) & rotation_mask\n    # convert the rotated binary string back to decimal and return the result\n    return int(rotated_binary_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 31) # maximum 32 bit number\n    while d > 0:\n        if d % 2 == 0:\n            n = (n << d) & mask\n            d = d >> 1\n        else:\n            n = (n << (d - 1)) | (n >> (31 - d))\n            d = d - 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n\n    # Pad the binary string with zeros\n    padded_binary = '0'*(32-len(binary)) + binary\n\n    # Get the rotation amount\n    amount = padded_binary[-d:]\n\n    # Get the shifted bits\n    shifted_bits = padded_binary[:-d]\n\n    # Combine the shifted and rotated bits\n    rotated_bits = rotated_bits + amount\n\n    # Convert the rotated bits back to decimal\n    rotated_number = int(rotated_bits, 2)\n\n    return rotated_number\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string using regular expressions.\n\n    Args:\n    text (str): A string containing whitespaces.\n\n    Returns:\n    str: A string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Regular expression pattern to match all whitespace characters\n    pattern = r'\\s+'\n    # Use the re.sub() method to replace all whitespace characters with a single space\n    return re.sub(pattern,'', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, x + 1):\n        for j in range(1, y + 1):\n            if i == x and j == y:\n                continue\n            for k in range(1, z + 1):\n                if i == x and j == y and k == z:\n                    continue\n                if i == x and j == k or i == y and j == k or i == x and j == y:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        for j in range(1, y+1):\n            for k in range(1, z+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    # check if all numbers are same\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers between them.\n    \"\"\"\n    count = 0\n    for i in range(len(str(x))+1):\n        if str(x)[i] == str(y)[i] == str(z)[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers in them.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y), max(x, y) + 1):\n        if i in [x, y, z]:\n            count += 1\n    for i in range(min(x, z), max(x, z) + 1):\n        if i in [x, y, z]:\n            count += 1\n    for i in range(min(y, z), max(y, z) + 1):\n        if i in [x, y, z]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    # First, we need to sort the input numbers\n    sorted_numbers = sorted([x, y, z])\n\n    # Then, we iterate over the sorted numbers and count the equal numbers\n    count = 0\n    for i in range(len(sorted_numbers)):\n        if sorted_numbers[i] == sorted_numbers[i + 1] == sorted_numbers[i + 2]:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    \n    count = 0\n    for i in range(n):\n        if arr[i]!= i:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Check if the array is already sorted\n    if is_sorted(arr):\n        return 0\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Loop through the array to find the first element that's not sorted\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            break\n\n    # If the loop completes without finding a pair of elements that are not sorted,\n    # then there is no need to perform any rotations to generate a sorted array.\n    if i == len(arr) - 1:\n        return count\n\n    # Find the position of the last element that's not sorted\n    j = i\n    while arr[j] < arr[i]:\n        j += 1\n\n    # Check if the last element is already sorted\n    if arr[j - 1] <= arr[i]:\n        return count\n\n    # Perform the required rotations\n    count += j - i - 1\n    arr[i], arr[j - 1] = arr[j - 1], arr[i]\n    return count + count_rotation(arr[:i] + arr[j:])"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # check if the array is already sorted in reverse order\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return 0\n    # check if the array is already sorted in reverse order with duplicates\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            if i == 0:\n                return 0\n            elif i == n-2:\n                return 0\n            else:\n                return 1\n    # check if the array is already sorted with duplicates in reverse order\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            if i == 0:\n                return 0\n            elif i == n-2:\n                return 0\n            else:\n                return 1\n    # sort the array and check if it is sorted again\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    # count the number of rotations required\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            return 0\n    return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n\n    # If array is already sorted, there is no rotation required.\n    if arr == sorted(arr):\n        return 0\n\n    # If array is already sorted in reverse, we need to reverse the array to find the rotation.\n    if arr == sorted(arr, reverse=True):\n        return n\n\n    # Find the pivot element.\n    pivot = arr[n // 2]\n\n    # Partition the array around the pivot element.\n    left = [x for x in arr if x < pivot]\n    equal = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    # If the pivot is at the left side of the array, we need to rotate the array.\n    if len(left) == n - len(equal):\n        return count_rotation(right) + 1\n\n    # If the pivot is at the right side of the array, we need to rotate the array.\n    if len(right) == len(equal):\n        return count_rotation(left) + 1\n\n    # If the pivot is in the middle of the array, we need to rotate the array.\n    return count_rotation(left) + count_rotation(right)"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # check for adjacent duplicates in the array\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            count += 1\n            \n    # if there are no adjacent duplicates, return 0\n    if count == 0:\n        return 0\n        \n    # sort the array in non-decreasing order\n    arr.sort(reverse=True)\n    \n    # initialize the left and right pointers to 0\n    left = 0\n    right = n-1\n    \n    # count the number of rotations required\n    while left < right:\n        if arr[left] > arr[right]:\n            count += 1\n            left += 1\n        else:\n            right -= 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Check if the array is already sorted\n    if sorted(arr) == arr:\n        return 0\n\n    # Check if the array is a single element array\n    if n == 1:\n        return 0\n\n    # Check if the array has only one rotation\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n\n    # Check if the array has multiple rotations\n    count = 0\n\n    # Traverse through all possible rotations\n    for i in range(n):\n        if arr[i] > arr[0]:\n            # If the element is greater than the first element, it must have a rotation\n            count += 1\n            # Reverse the remaining elements and check if the array is sorted\n            if arr[n-1] >= arr[0]:\n                return count\n            # If the array is not sorted, find the first element that is not greater than the current element\n            left = i + 1\n            right = n - 1\n            while left < right:\n                mid = (left + right) // 2\n                if arr[mid] >= arr[i]:\n                    left = mid + 1\n                else:\n                    right = mid\n            # Reverse the subarray from index i to index left-1\n            arr[i:left] = arr[i:left][::-1]\n            # Check if the array is sorted\n            if sorted(arr) == arr:\n                return count\n            # Reverse the subarray from index left to index n-1\n            arr[left:n] = arr[left:n][::-1]\n            # Check if the array is sorted\n            if sorted(arr) == arr:\n                return count\n            # If the array is not sorted, find the first element that is not greater than the current element\n            left = i + 1\n            right = n - 1\n            while left < right:\n                mid = (left + right) // 2\n                if arr[mid] >= arr[i]:\n                    left = mid + 1\n                else:\n                    right = mid\n            # Reverse the subarray from index i to index left-1\n            arr[i:left] = arr[i:left][::-1]\n            # Check if the array is sorted\n            if sorted(arr) == arr:\n                return count\n            # Reverse the subarray from index left to index n-1\n            arr[left:n] = arr[left:n][::-1]\n            # Check if the array is sorted\n            if sorted(arr) == arr:\n                return count\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    # Traverse the array from left to right\n    for i in range(n):\n        # Traverse the array from right to left\n        j = i\n        while j < n and arr[j] >= arr[j + 1]:\n            j += 1\n\n        # If the value at the index j is greater than the value at index i,\n        # then there is a rotation required to generate a sorted array.\n        if j < n and arr[j] < arr[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n-1 and arr[j] > arr[j+1]:\n            j += 1\n        if j!= i:\n            count += (n-i)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    # Sort the array\n    arr.sort()\n    # Traverse the array to count the number of rotations\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-1-i]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # if the array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n\n    # count number of swaps required to sort the array\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    # count number of rotations required to sort the array\n    count += n - count\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            j = i * i\n            while j <= n:\n                n -= j\n                j *= i\n            return n == 0\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using the formula for perfect squares\n    # https://www.wolframalpha.com/input/?i=sqrt(n)\n    x = int(n ** 0.5)\n    return x * x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return False\n\n    # check if the number is a perfect square\n    for i in range(int(n**0.5)+1):\n        if n%i == 0 and i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the given number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Initialize the count of digits of the square root of n\n    count = 0\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Iterate through the digits of the square root of n\n    while sqrt_n > 0:\n        count += 1\n        sqrt_n //= 10\n\n    # Check if the count of digits is equal to the number of digits in n\n    if count == len(str(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a number n as input and returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    # use the math.sqrt() function to find the square root of n\n    sqrt_n = int(n ** 0.5)\n    # check if the square of the square root is equal to n\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to check if a number is a perfect square or not\n    def isPerfectSquare(num):\n        # Initialize a variable to store the square root of the given number\n        sqrt_num = 0\n        # Initialize a variable to store the difference between the square root and the given number\n        diff = num\n\n        # Perform binary search to find the square root of the given number\n        while diff >= 0:\n            sqrt_num = num // 2\n            diff = num - sqrt_num**2\n\n            # If the square root is perfect, return True\n            if sqrt_num**2 == num:\n                return True\n\n            # If the square root is less than the given number, return False\n            elif sqrt_num**2 < num:\n                return False\n\n            # If the square root is greater than the given number, update the search range\n            else:\n                num = sqrt_num\n\n    # Check if the given number is a perfect square or not\n    if isPerfectSquare(n):\n        print(\"The given number is a perfect square\")\n    else:\n        print(\"The given number is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # function to check if a number is a perfect square\n    def is_perfect_square_helper(num):\n        \"\"\"\n        Helper function to check if a number is a perfect square.\n        \"\"\"\n        # base case: if num is 0 or 1, it is a perfect square\n        if num == 0 or num == 1:\n            return True\n        # recursive case: check if num is divisible by any odd number between 3 and sqrt(num)\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # check if the given number is a perfect square\n    if is_perfect_square_helper(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    def is_square(num):\n        return num == int(num ** 0.5 + 0.5) ** 2\n\n    # check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # check if the number is a perfect square\n    if is_square(n):\n        return True\n\n    # check if the number is less than 2 * the square root of the number\n    sqrt_n = int(n ** 0.5 + 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n\n    # check if the number is greater than 2 * the square root of the number\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n\n    # the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is less than 0\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n\n    # Check if n is less than 2\n    if n < 2:\n        return \"The number is less than 2.\"\n\n    # Get the square root of n using the binary search method\n    low = 2\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If the loop completes without finding the perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # convert the number to integer to check for perfect square\n    num = int(n)\n    # find the square root of the number using the math module\n    root = round(num ** 0.5)\n    # check if the square of the root is equal to the number\n    if num == root ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of all the numbers is even, else False.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_lists = [[lists[i]], [lists[j]]]\n            elif current_sum == max_sum:\n                max_lists.append([lists[i], lists[j]])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # Initialize the maximum sum to zero\n    max_sum = 0\n    \n    # Loop through each sub-list in the input list\n    for sub_list in lists:\n        \n        # Initialize the current sum to zero\n        current_sum = 0\n        \n        # Loop through each element in the sub-list\n        for element in sub_list:\n            \n            # Add the element to the current sum\n            current_sum += element\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                \n    # Create a list with the maximum sum\n    result = []\n    for i in range(len(max_sum)):\n        result.append(max_sum[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in lists:\n        for j in i:\n            if j > max_sum:\n                max_sum = j\n                max_list = [j]\n            elif j == max_sum:\n                max_list.append(j)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                current_sum = lists[i][j][k]\n                for l in range(i):\n                    current_sum -= lists[l][j][k]\n                for m in range(j):\n                    current_sum -= lists[i][m][k]\n                for n in range(k):\n                    current_sum -= lists[i][j][n]\n                if current_sum > max_sum:\n                    max_sum = current_sum\n                    max_lists = [[lists[i][j][k]]]\n                elif current_sum == max_sum:\n                    max_lists.append([lists[i][j][k]])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize max_sum to negative infinity\n    max_sum = float('-inf')\n\n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize current_sum to 0\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current_sum\n            current_sum += lists[i][j]\n\n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Create a new list containing the maximum sum list\n    max_sum_list = []\n\n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Initialize current_sum to 0\n        current_sum = 0\n\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current_sum\n            current_sum += lists[i][j]\n\n        # If the current_sum is equal to max_sum, add the current list to max_sum_list\n        if current_sum == max_sum:\n            max_sum_list.append(lists[i])\n\n    # Return the maximum sum list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        total = 0\n        for j in range(len(lists[i])):\n            total += lists[i][j]\n        if total > max_sum:\n            max_sum = total\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n        if char.isupper():\n            uppercase_count += 1\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run, uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 1\n    curr_run = 1\n    prev_char = test_str[0]\n\n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        curr_char = test_str[i]\n        if curr_char.isupper():\n            curr_run += 1\n        else:\n            curr_run = 1\n\n        if curr_run > max_run:\n            max_run = curr_run\n            prev_char = curr_char\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    char = None\n    \n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was lowercase or None,\n        # update the current run and set the character\n        if (test_str[i].isupper() and (not char or not char.isupper())):\n            current_run += 1\n            char = test_str[i]\n        # If the current character is not uppercase or the previous character was uppercase,\n        # update the maximum run if the current run is greater\n        elif (not test_str[i].isupper() or (test_str[i].isupper() and char.isupper())):\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            char = None\n    \n    # Update the maximum run if the last character is uppercase\n    if (not char or not char.isupper()):\n        if current_run > max_run:\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_count = 0\n    max_start = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            start = i + 1\n            count = 0\n    return max_count, test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    run_start = 0\n    uppercase_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n            uppercase_count += 1\n            if i == len(test_str) - 1 or not test_str[i+1].isupper():\n                if run_length > run_length:\n                    run_start = i - run_length + 1\n                    run_length = 0\n                elif run_length == run_length:\n                    if uppercase_count > run_length:\n                        run_start = i - run_length + 1\n                        run_length = 0\n        else:\n            run_length = 0\n            run_start = 0\n            uppercase_count = 0\n\n    return test_str[run_start:run_start+run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    current_char = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                current_char = char\n        else:\n            current_run = 0\n    return current_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if i == 0 or not test_str[i-1].isupper():\n                uppercase_run.append(i)\n    return max(uppercase_run, default=0)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list. If there are no odd numbers in the list, it will return None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0: # checks if the number is odd\n            return num # returns the first odd number found\n    return None # returns None if no odd number is found"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Loop through the list and find the first odd number\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of tuples and a number K as input and returns a boolean indicating whether the Kth occurrence of each tuple in the given tuple of tuples is present or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if the given tuple contains the k\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n\n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element in the second tuple is not smaller than the corresponding element in the first tuple.\")\n            return False\n\n    print(\"All elements in the second tuple are smaller than or equal to the corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple is smaller.\")\n            return True\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"The second tuple is smaller.\")\n            return False\n    print(\"Both tuples are equal.\")\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is not smaller than {test_tup2[i]}.\")\n            return\n    print(\"All elements of the second tuple are smaller than their corresponding elements in the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]