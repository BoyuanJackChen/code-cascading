[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Sort the tuples so that we can easily compare their elements\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n\n    # Iterate through the sorted tuples and compare their elements\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return shared_set"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # Find the intersection of the two lists\n    shared_elements = [x for x in test_list1 if x in test_list2]\n    # Return the shared elements as a tuple\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the elements that are present in both tuples.\n    '''\n    shared_elements = []\n    \n    # Loop through the first tuple and check if each element is present in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Get the common elements from both lists\n    common_elements = [element for element in test_tup1 if element in test_tup2]\n\n    # Return the common elements\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n            \n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # if the number is less than 2, it is not a prime number\n    if n < 2:\n        return False\n\n    # loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # if n is divisible by i, it is not a prime number\n        if n % i == 0:\n            return False\n\n    # if none of the numbers from 2 to the square root of n divide n, it is a prime number\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check if the number is less than 2\n    if n < 2:\n        return True\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # if none of the above conditions are met, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    # If none of the numbers between 2 and the square root of the number divide the number, it is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the number is not prime, else False.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    nums = hq.nlargest(n, nums)\n    # Convert the heap back to a list\n    largest_nums = list(nums)\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for _ in range(n-1, 0, -1):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n\n    # remove and return the n largest integers from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a min-heap of the first n numbers\n    hq.heapify(nums[:n])\n\n    # Iterate through the remaining numbers and add them to the heap\n    for i in range(n, len(nums)):\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], nums[i])\n\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap = nums[:n]\n    heapq.heapify(min_heap)\n\n    for i in range(n, len(nums)):\n        if nums[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, nums[i])\n\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to min heap\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, -num)\n    \n    # extract n largest integers from heap\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-heapq.heappop(min_heap))\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Use a min heap to keep track of the largest n integers\n    heap = hq.nsmallest(n, nums)\n\n    # Remove and return the largest n integers from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min-heap\n    heap = [-num for num in nums]\n    hq.heapify(heap)\n    \n    # Extract the n largest numbers and return them in descending order\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # bitwise AND operator with 1 to check whether the two numbers differ at one bit position only or not.\n    if (x & (x - 1))!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2 by checking if x & (x-1) == 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return is_Power_Of_Two(x >> 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Remove the sign bit of x\n    x = x & (-x)\n    # Count the number of 1's in x\n    count = 0\n    while x!= 0:\n        count += x & 1\n        x >>= 1\n    # Check if count is odd or even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    elif (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Calculate the number of bits in the binary representation of the number\n    n = len(bin(x)[2:])\n\n    # Check if the number of bits in the two numbers are different\n    if n!= len(bin(x ^ y)[2:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    return bin(x).count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x & (x-1)!= 0:\n        return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all the words in the string which are at least 4 characters long.\n    '''\n    # using regular expressions to find all words in the string that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # filtering the list to get only those words which are at least 4 characters long\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog runs away. The dog barks loudly.\"\nprint(find_char_long(text))"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into a list of words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words with less than 4 characters\n    words = [word for word in words if len(word) >= 4]\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Initialize an empty list to store the long words\n    long_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # Add the word to the list of long words\n            long_words.append(word)\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    freq_table = {}\n    for char in str:\n        freq_table[char] = freq_table.get(char, 0) + 1\n\n    # Find the rotations\n    min_rotations = float('inf')\n    for i in range(26):\n        freq_i = freq_table[chr(ord('a') + i)]\n        for j in range(i + 1):\n            freq_j = freq_table[chr(ord('a') + j)]\n            if freq_i!= freq_j:\n                min_rotations = min(min_rotations, freq_i + freq_j - 2 * freq_i * freq_j)\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    length = len(str)\n    for i in range(length): \n        for j in range(length-1): \n            if str[i]!= str[j]: \n                str = str[:j] + str[j+1:i] + str[i] + str[j:i] + str[i+1:]\n                break\n    count = 0\n    for i in range(length): \n        if str[i] == str[length-i-1]: \n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # check if the string is empty\n    if len(str) == 0:\n        return 0\n    \n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # sort the dictionary based on the frequency of characters\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n    \n    # iterate over each character in the string\n    for i in range(len(str)):\n        # if the frequency of the current character is 1, then the string has already been rotated\n        if freq[sorted_freq[i][0]] == 1:\n            break\n        \n        # if the frequency of the current character is greater than 1, then we need to rotate the string\n        if freq[sorted_freq[i][0]] > 1:\n            min_rotations += 1\n        \n        # update the frequency of the current character in the string\n        freq[sorted_freq[i][0]] -= 1\n        \n        # if the frequency of the current character is 0, then we need to rotate the string again\n        if freq[sorted_freq[i][0]] == 0:\n            min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # initialize variables to keep track of the current and previous characters\n    prev_char = str[0]\n    current_char = str[1]\n    # initialize variables to keep track of the minimum number of rotations required\n    min_rotations = 0\n\n    # loop through the string and compare each character with the previous character\n    for i in range(2, len(str)):\n        # if the current character is different than the previous character, increment the rotation count\n        if str[i]!= prev_char:\n            min_rotations += 1\n            # swap the current and previous characters\n            prev_char, current_char = current_char, prev_char\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    if len(str) == 1:\n        return 0\n    elif len(str) == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    else:\n        # Create a dictionary to store the count of characters in the string\n        char_count = {}\n        for char in str:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n        # Find the maximum count among the characters in the string\n        max_count = max(char_count.values())\n\n        # Find the count of characters that can be rotated to get the maximum count\n        rotations = 0\n        for count in char_count.values():\n            rotations += (count - max_count)\n\n        return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    freq = {} \n    for char in str: \n        if char in freq: \n            freq[char] += 1 \n        else: \n            freq[char] = 1 \n    max_char = max(freq, key=freq.get)\n    new_str = str + max_char\n    while new_str!= str:\n        str = new_str\n        max_char = max(freq, key=freq.get)\n        new_str = str + max_char\n    return freq[max_char]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            # if the characters are different, check if the sub-strings are the same\n            if str[i]!= str[j]:\n                if str[i:] == str[j:]:\n                    # if the sub-strings are the same, return the minimum number of rotations required\n                    return 1 + min(find_Rotations(str[:i]), find_Rotations(str[j+1:]))\n    # if no rotations are found, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # find the length of the string\n    n = len(str)\n\n    # loop through all possible rotations\n    for i in range(n//2):\n        # check if the reversed string is a palindrome\n        if str[i:n-i-1] == str[i:n-i-1][::-1]:\n            return i+1\n\n    # if the loop completes without finding a rotation, return the total length of the string\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    # Create a set to store unique characters in the string\n    unique_chars = set(str)\n    # If the length of the set is less than 2, then we need at least one rotation\n    if len(unique_chars) < 2:\n        return 1\n    # Initialize the result and current length to the length of the string\n    result = n\n    current_length = n\n    # While the current length is greater than 1\n    while current_length > 1:\n        # Calculate the next rotation length\n        next_length = (current_length + 1) // 2\n        # Iterate through the first n characters of the string and check if they are unique\n        for i in range(n):\n            if unique_chars.issubset(set(str[:i] + str[i+next_length:i+next_length*2] + str[i+next_length*2:])):\n                # If they are unique, we can rotate the string by the next length\n                result = min(result, n-i)\n                # Remove the characters we rotated from the unique set\n                unique_chars.remove(str[i])\n                unique_chars.remove(str[i+next_length])\n                unique_chars.remove(str[i+next_length*2])\n        # Update the current length to the next length and continue the loop\n        current_length = next_length\n    # If the unique set contains only one character, then there is no rotation required\n    if len(unique_chars) == 1:\n        return 0\n    # Return the minimum number of rotations required\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n\n    # Convert the string to a list of characters\n    str_list = list(str)\n\n    # Initialize two pointers - one at the start and the other at the end of the list\n    start = 0\n    end = len(str_list) - 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Keep rotating the list until they meet in the middle\n    while start!= end:\n\n        # Calculate the middle index of the current sublist\n        mid = (start + end) // 2\n\n        # Check if the characters at the start and end indices are equal\n        if str_list[start]!= str_list[end]:\n\n            # If not, update the minimum number of rotations required\n            if mid - start > end - mid:\n                min_rotations = mid - start\n            else:\n                min_rotations = end - mid\n\n            # Rotate the list until they meet in the middle\n            str_list[start], str_list[mid] = str_list[mid], str_list[start]\n            str_list[mid + 1:end + 1] = str_list[mid + 1:end + 1][::-1]\n\n            # Update the start and end indices\n            start = mid + 1\n            end = end + min_rotations\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        if s.count(ch) == 1:\n            s = s.replace(ch,'')\n        else:\n            s = s.replace(ch,ch)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.startswith(ch) or s.endswith(ch):\n        if s.startswith(ch):\n            return s[len(ch):]\n        elif s.endswith(ch):\n            return s[:-len(ch)]\n        else:\n            return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize first and last indices of the character to be removed\n    first_index = -1\n    last_index = -1\n\n    # loop through the string and find the index of the first occurrence of the character to be removed\n    for i in range(len(s)):\n        if s[i] == ch:\n            first_index = i\n            break\n\n    # loop through the string and find the index of the last occurrence of the character to be removed\n    for j in range(len(s)-1, first_index-1, -1):\n        if s[j] == ch:\n            last_index = j\n            break\n\n    # remove the first and last occurrences of the character from the string\n    if first_index!= -1:\n        s = s[:first_index] + s[first_index+1:]\n\n    if last_index!= -1:\n        s = s[:last_index] + s[last_index+1:]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # if the string contains only one occurrence of the character to be removed, return an empty string\n    if s.count(ch) == 1:\n        return \"\"\n    # initialize two pointers, one at the beginning and the other at the end of the string\n    i, j = 0, len(s) - 1\n    # keep track of the number of occurrences of the character in the string\n    count = s.count(ch)\n    # loop while i is less than j\n    while i < j:\n        # if the characters at the current positions are the same, increment i by 1\n        if s[i] == ch:\n            i += 1\n        # if the characters at the current positions are different, decrement j by 1\n        else:\n            j -= 1\n        # if the number of occurrences of the character in the string is less than 2, return the original string\n        if count < 2:\n            return s\n    # if the while loop completes without finding the second occurrence of the character, return the original string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1: \n        if s == ch: \n            return \"\" \n    s = s.replace(ch, \"\") \n    if len(s) == 1: \n        return \"\" \n    if s[0] == ch: \n        return remove_Occ(s[1:], ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1], ch) \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    if len(s) < 2:\n        return \"\"\n\n    if s[0] == ch:\n        s = s[1:]\n\n    if s[-1] == ch:\n        s = s[:-1]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    s = list(s)\n    index = -1\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n            index = i\n\n    if count == 1:\n        del s[index]\n        return ''.join(s)\n    else:\n        return 'No such character exists in the string.'"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Initialize variables to store the first and last occurrence of the character in the string\n    first = -1\n    last = -1\n\n    # Loop through the string and keep track of the first and last occurrence of the character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if first == -1:\n                first = i\n            last = i\n    \n    # If no occurrence of the character is found in the string, return the original string\n    if first == -1:\n        return s\n    \n    # Remove the first and last occurrence of the character from the string\n    s = s[:first] + s[last+1:]\n\n    # Return the updated string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence\n    s = s.replace(ch, \"\")\n    # Remove last occurrence\n    s = s.replace(s[::-1], \"\")[::-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by the row sums in ascending order\n    sorted_M = sorted(M, key=lambda row_sum: row_sum)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables\n    n = len(M)\n    count = 0\n\n    # Loop through the matrix and add up the rows\n    for i in range(n):\n        row_sum = sum(M[i])\n        count += row_sum\n\n    # Loop through the matrix again to sort it\n    sorted_M = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        row_indices = [j for j in range(n) if M[j][i] == row_sum]\n        row_indices.sort()\n        for j in row_indices:\n            sorted_M.append(M[i][j])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows in ascending order of their sums\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [[row[i] for row in sorted_rows] for i in range(len(sorted_rows[0]))]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # initialize row sums\n    row_sums = [sum(row) for row in M]\n    # sort matrix rows by row sums\n    row_indices = sorted(range(n), key=lambda i: row_sums[i])\n    # sort matrix rows using row indices\n    sorted_M = [M[i] for i in row_indices]\n    # return sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize the minimum element index as the current row index\n        min_index = i\n        # Loop through each element of the current row\n        for j in range(i+1, len(M[i])):\n            # If the element is smaller than the current minimum element, update the minimum element index\n            if M[i][j] < M[i][min_index]:\n                min_index = j\n        # Swap the elements of the current row with the minimum element in the row\n        M[i], M[min_index] = M[min_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sum of rows of the matrix as 0\n    row_sums = [0] * len(M[0])\n    for row in M:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Update the sum of rows with the current row sum\n        for i in range(len(row_sums)):\n            row_sums[i] += row[i]\n    # Sort the matrix according to the sum of rows\n    sorted_rows = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows by the sum in ascending order\n    sorted_rows = sorted(M, key=lambda x: sum(x))\n\n    # Combine the sorted rows into a single matrix\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_matrix.append(sorted_rows[i])\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows based on their sum in ascending order\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n\n    # Create a new matrix with the sorted rows\n    sorted_M = [[M[i][j] for i in sorted_rows] for j in range(len(M[0]))]\n\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the dimensions of a triangular prism as input and calculates its volume using Heron's formula.\n    '''\n    #calculate the semi-perimeter\n    s = (l+b+h)/2\n    #calculate the area\n    A = (s*(s-l)*(s-b)*(s-h))**0.5\n    #calculate the volume\n    V = A*h\n    #return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h)/12 \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Calculate the area of the triangle\n    area = (l*b*h)/2\n    \n    # Calculate the volume of the triangle\n    volume = area * l\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    s = (l + b + h) / 2\n    area = math.sqrt(s * (s - l) * (s - b) * (s - h))\n    volume = area * l\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n    \"\"\"\n    V = (1/3) * l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6.0\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes three parameters, length (l), width (b), and height (h),\n    representing the dimensions of a triangular prism. It calculates and returns\n    the volume of the prism.\n    \"\"\"\n    return l * b * h / 6"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    # Calculate the volume of the prism\n    V = 0.5 * l * b * h\n    \n    # Return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the lengths of the sides of a triangular prism and returns the volume of the prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r\"([a-z]+)_+\"\n\n    # Use the re.search() method to search for matches in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])[a-z](?=[A-Z])|_(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+_)+'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match a sequence of lowercase letters\n    pattern = r'[a-z]+(_[a-z]+)*'\n\n    # Use the re.search() function to search for matches in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]*[A-Z]+[a-z]*\\b'\n    result = re.match(pattern, text)\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])(?=[A-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])([a-z])(?![a-z])_\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!_)([a-z]+)(?=_)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![a-z])[a-z](?=[a-z])\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    \n    # Convert string to list\n    str_list = list(string)\n    \n    # Loop through the string list and remove characters from the first string which are present in the second string\n    for i in range(len(str_list)):\n        if str_list[i] in string:\n            str_list.remove(str_list[i])\n            \n    # Convert list back to string\n    result = ''.join(str_list)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the characters to be removed\n    chars_to_remove = []\n    \n    # Iterate through the string\n    for char in string:\n        # Check if the character is present in the second string\n        if char in second_string:\n            # If the character is present, add it to the list of characters to be removed\n            chars_to_remove.append(char)\n    \n    # Remove the characters from the first string\n    result = \"\"\n    for char in string:\n        # If the character is not present in the list of characters to be removed, add it to the result\n        if char not in chars_to_remove:\n            result += char\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    lst = list(string)\n\n    # Create a set of characters in the second string\n    set_of_chars = set(string)\n\n    # Initialize an empty list to store the characters in the first string which are not in the second string\n    result = []\n\n    # Iterate through the list of characters\n    for char in lst:\n        # If the character is not present in the second string, append it to the result list\n        if char not in set_of_chars:\n            result.append(char)\n\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_string = [0] * NO_OF_CHARS\n    index = 0\n    for char in string:\n        if char not in string[index:]:\n            list_string[char] = 1\n        index += 1\n    list_string = list_string[:index]\n    return list_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    char_set = set(string)\n\n    # Convert the given string to a list of characters\n    char_list = list(string)\n\n    # Iterate over the character set and remove characters from the character list\n    for char in char_set:\n        char_list.remove(char)\n\n    # Convert the character list back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    removed_chars = set()\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            removed_chars.add(chr(i))\n    return ''.join(removed_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string, no_of_chars=256):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string[:no_of_chars]\n    second_string = string[no_of_chars:]\n    return list(set(first_string) - set(second_string))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    first_list = list(string)\n    second_list = list(string)\n    second_list.sort()\n    for i in range(len(first_list)):\n        if first_list[i] in second_list:\n            first_list[i] = 0\n    return ''.join(chr(i) for i in first_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for char in range(NO_OF_CHARS):\n        if char not in char_set:\n            string = string.replace(chr(char), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create an empty list to store the final string\n    final_string = \"\"\n    \n    # Create a set to store the characters in the second string\n    set_of_chars = set(string)\n    \n    # Iterate through each character in the first string\n    for char in string:\n        \n        # If the character is not in the set of characters in the second string\n        if char not in set_of_chars:\n            \n            # Add the character to the final string\n            final_string += char\n    \n    # Return the final string\n    return final_string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the count of each element in the array\n    element_count = {}\n    # loop through the array and update the count for each element\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n    # loop through the dictionary and check if any element has a count greater than 1\n    for count in element_count.values():\n        if count > 1:\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the set has more than one element\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # loop through the array and add unique numbers to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # check if the set has any elements\n    if len(unique_nums) == len(arraynums):\n        return \"No duplicate elements found.\"\n    else:\n        return \"Duplicate elements found.\""
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a set to store unique values\n    unique_set = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a dictionary to store the elements of the array\n    dictnums = {}\n\n    # loop through the array and check if each element is already in the dictionary\n    for num in arraynums:\n        if num in dictnums:\n            return True  # if the element is already in the dictionary, return True\n        else:\n            dictnums[num] = True  # if the element is not in the dictionary, add it to the dictionary\n\n    return False  # if the loop completes without finding any duplicates, return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) < 2:\n        return False\n    \n    for i in range(len(arraynums)):\n        if i == 0:\n            continue\n        if arraynums[i] == arraynums[i-1]:\n            return True\n            \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create an empty set to store unique numbers\n    unique_numbers = set()\n\n    # Iterate through the array and add unique numbers to the set\n    for num in arraynums:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n        else:\n            return True\n\n    # If we get to this point, the array doesn't contain any duplicate elements\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 0 and x <= 99:\n        print(\"Woodball\")\n    elif x >= 100 and x <= 199:\n        print(\"Woodall\")\n    elif x >= 200 and x <= 299:\n        print(\"Woodie\")\n    elif x >= 300 and x <= 399:\n        print(\"Woodman\")\n    elif x >= 400 and x <= 499:\n        print(\"Woodpecker\")\n    elif x >= 500 and x <= 599:\n        print(\"Woodstock\")\n    elif x >= 600 and x <= 699:\n        print(\"Woodstove\")\n    elif x >= 700 and x <= 799:\n        print(\"Woodwink\")\n    elif x >= 800 and x <= 899:\n        print(\"Woodworker\")\n    elif x >= 900 and x <= 999:\n        print(\"Woodwright\")\n    else:\n        print(\"Not a woodball\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 3 == 0:\n        print(x, \"is a Woodall number\")\n    else:\n        print(x, \"is not a Woodall number\")\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 3:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return \"Not a Woodall number\"\n    elif x % 3 == 0:\n        return \"Woodall number\"\n    else:\n        return \"Not a Woodall number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2 or x == 3:\n        return True\n    elif x % 2 == 0 and x > 4 and x % 5!= 0:\n        return True\n    elif x % 2!= 0 and x % 3!= 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    if x == 2 or x == 5 or x == 10 or x == 20:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return is_woodall(x - 1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define a list of possible numbers to check for\n    possible_woodalls = [1, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    # Check if the given number is in the list of possible woodalls\n    if x in possible_woodalls:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 2000:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    return num == (rev_num - 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    # check if the reversed number is one less than twice the original number\n    return rev_num == (2 * num) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the number\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    if rev_num == 2 * num - 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    # Check if the reverse is one less than twice the original number\n    if rev_num == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    return num == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Initialize variables to store the sum of the digits and the digits themselves\n    sum_digits = 0\n    reversed_num = 0\n    # Loop through each digit in the number and add it to the sum_digits variable\n    for digit in num_str:\n        digit = int(digit)\n        sum_digits += digit\n    # Reverse the given number and convert it to an integer\n    reversed_num = int(num_str[::-1])\n    # Calculate the difference between the sum_digits and the reversed_num\n    diff = sum_digits - reversed_num\n    # Return True if the difference is one and False otherwise\n    return diff == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num - int(str(num)[::-1]) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = int(str(num)[::-1])\n    if reversed_num < 2*num:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == (rev_num * 2) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True) # sort the digits in descending order\n    \n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(len(arr)):\n            if j > i:\n                temp += arr[j]\n        max_num += (temp ** arr[i])\n    \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current digit is less than the current number, add it to the current number\n        if arr[i] < curr_num:\n            curr_num += arr[i]\n        # If the current digit is greater than the current number, update the maximum number\n        else:\n            max_num = max(max_num, curr_num)\n            curr_num = arr[i]\n\n    # Add the remaining digits to the maximum number\n    max_num = max(max_num, curr_num)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    \n    # check each digit from 0 to 9\n    for i in range(n):\n        digit = arr[i]\n        \n        # check if digit can be formed with remaining digits\n        for j in range(i+1, n):\n            sub_arr = arr[:j] + arr[j+1:]\n            if digit == sum(sub_arr):\n                # update max_num if needed\n                max_num = max(max_num, int(''.join(map(str, sub_arr))))\n                \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr)):\n            if j!= i:\n                num += arr[j]*(10**(len(arr)-j-1))\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num + (int(arr[i])**i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(len(arr) - i + 1):\n            max_num = max(max_num, int(''.join(arr[j:j+i])))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initialize max_num with the first element in the array\n    max_num = arr[0]\n\n    # loop through the remaining elements in the array\n    for i in range(1, len(arr)):\n        # calculate the current number by concatenating the current element with the max_num\n        current_num = arr[i] + max_num\n        # update max_num if the current number is larger than max_num\n        if current_num > max_num:\n            max_num = current_num\n\n    # return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            max_num = max(max_num, int(''.join(sorted(str(arr[i])+str(arr[j])))))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n\n    if x == 0 and y == 0: # If both numbers are zero, they have opposite signs\n        return True\n    elif x == 0: # If only the first number is zero, they have the opposite sign of the second number\n        return y < 0\n    elif y == 0: # If only the second number is zero, they have the opposite sign of the first number\n        return x < 0\n    else: # If both numbers are not zero, they have opposite signs\n        return x < 0!= y < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both positive numbers\"\n    elif x < 0 and y < 0:\n        return \"Both negative numbers\"\n    else:\n        return \"Both have the same sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n\n    Args:\n    x: An integer value.\n    y: An integer value.\n\n    Returns:\n    bool: Returns True if the given two integers have opposite sign, otherwise returns False.\n\n    Examples:\n    >>> opposite_Signs(5, 10)\n    False\n    >>> opposite_Signs(-5, 10)\n    True\n    \"\"\"\n    # Check if both numbers have the same sign (positive or negative)\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function checks whether the two integers have opposite sign or not.\n    \"\"\"\n    # If both x and y are negative, then their signs are opposite.\n    if x < 0 and y < 0:\n        return True\n    # If both x and y are positive, then their signs are opposite.\n    elif x > 0 and y > 0:\n        return True\n    # If one of the two is negative and the other is positive, then their signs are not opposite.\n    elif x < 0 and y > 0:\n        return False\n    # If one of the two is positive and the other is negative, then their signs are not opposite.\n    elif x > 0 and y < 0:\n        return False\n    else:\n        # If none of the above conditions are met, then their signs are not opposite.\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: # both positive\n        if x < 0 and y < 0: # both negative\n            return True\n        else: # one positive and one negative\n            return False\n    elif x < 0 and y < 0: # both negative\n        if x > 0 and y > 0: # both positive\n            return True\n        else: # one negative and one positive\n            return False\n    else: # one positive and one negative\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if x and y are of same sign\n    if x * y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    def is_square(x):\n        return x * x == n\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if is_square(i) or is_square(n - i):\n            return True\n    \n    return False\n\ndef nth_octagonal(n):\n    if not (1 <= n <= 100):\n        return \"Invalid input\"\n    \n    if is_octagonal(n):\n        return n\n    else:\n        return \"There is no nth octagonal number\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 0\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= i:\n            octagonal_num += i * j ** 2\n            j += 1\n        i += 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        num = (i ** 3) + 1\n        if num == n:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n    \n    def is_pentagonal(num):\n        return (3 * num * num) + 1\n    \n    def is_hexagonal(num):\n        return (2 * num * num) + 1\n    \n    octagonal_numbers = []\n    num = 1\n    while len(octagonal_numbers) < n:\n        if is_divisible(num, 1) and is_divisible(num, 2) and is_divisible(num, 5):\n            octagonal_numbers.append(num)\n        elif is_pentagonal(num):\n            octagonal_numbers.append(num)\n        elif is_hexagonal(num):\n            octagonal_numbers.append(num)\n        num += 1\n    \n    return octagonal_numbers"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    j = 1\n    octagonal_number = 1\n    while i <= n:\n        while j <= n:\n            octagonal_number += i + j - 1\n            j += 1\n        i += 1\n        j = 1\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define the number of rows\n    rows = int(n ** 0.5) + 1\n\n    # Initialize the list of octagonal numbers\n    octagonal_numbers = []\n\n    # Loop through each row\n    for i in range(1, rows + 1):\n        # Calculate the starting and ending numbers for each row\n        start = (i - 1) * (i - 1) + 1\n        end = start + (i * (2 * i - 1))\n\n        # Loop through each number in the row\n        for j in range(start, end + 1, 2):\n            # Append each octagonal number to the list\n            octagonal_numbers.append(j)\n\n    # Return the nth octagonal number\n    return octagonal_numbers[n - 1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case: n is 1\n    if n == 1:\n        return True\n\n    # base case: n is greater than 1\n    i = 1\n    while i <= n:\n        # calculate the nth octagonal number\n        octagonal = (n * (3 * i**2 - 1)) // 2\n\n        # check if the nth octagonal number is equal to n\n        if octagonal == n:\n            return True\n\n        # increment the index variable\n        i += 1\n\n    # if the loop completes without finding the nth octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (12 * n * n) - (13 * n) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 8 * n - 7\n    while a <= b:\n        c = 1\n        while a * a + c * c <= b:\n            if a * a + c * c == b:\n                return a * b / 2\n            c += 1\n        a += 1\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    def octagonal_helper(n, a=0, b=1, c=2):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        elif n == 3:\n            return c\n        else:\n            return octagonal_helper(n-3, a+b, b+c, a+c)\n    \n    return octagonal_helper(n)\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            sum_digits = sum(int(digit) for digit in substring)\n            count[sum_digits] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a defaultdict to store the frequency of each digit in the string\n    freq = defaultdict(int)\n    \n    # Iterate through the string and count the frequency of each digit\n    for char in s:\n        freq[int(char)] += 1\n    \n    # Initialize the count of substrings to 0\n    count = 0\n    \n    # Iterate through the frequency dictionary and for each digit,\n    # find the substrings with the sum of digits equal to their length\n    for num in freq:\n        if num == len(str(num)):\n            count += freq[num]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function takes a string as input and returns the count of all substrings\n    with the sum of digits equal to their length.\n    \"\"\"\n    # Initialize a dictionary to store the count of substrings with each length\n    counts = defaultdict(int)\n    \n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring\n            substr = s[i:j]\n            # Calculate the sum of digits\n            total = sum(int(digit) for digit in substr)\n            # If the total is equal to the length of the substring, increment the count\n            if total == len(substr):\n                counts[len(substr)] += 1\n    \n    # Return the count of all substrings with sum of digits equal to their length\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings for each digit length\n    digit_count = defaultdict(int)\n\n    # Iterate through the input string\n    for i in range(len(s)):\n        # Extract the substring ending at index i\n        substring = s[:i+1]\n\n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n\n        # Add 1 to the count of substrings with the specified digit count\n        digit_count[substring_sum] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i, c in enumerate(s):\n        digit_count[c] += 1\n\n    total_count = 0\n    for n in digit_count.values():\n        total_count += n**2\n\n    return total_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i == len(str(j-i)):\n                count_dict[j-i] += 1\n    \n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n    for length in range(1, len(s)+1):\n        for i in range(len(s)-length+1):\n            substring = s[i:i+length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Creating a dictionary to store the count of substrings with sum of digits equal to their length\n    digit_count = defaultdict(int)\n\n    # Iterating through the string and calculating the sum of digits of each substring\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            digit_count[sum_of_digits] += 1\n\n    # Returning the count of substrings with sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int) # count the frequency of each digit in the input string\n    for char in s:\n        digit_count[int(char)] += 1 # count the frequency of digits in the input string\n    \n    count = 0\n    for length in range(1, len(s)+1): # iterate through the substrings of length 1 to len(s)\n        sum_of_digits = sum(digit_count[int(s[i:i+length])] for i in range(len(s)-length+1)) # calculate the sum of digits in each substring\n        if sum_of_digits == length: # if the sum of digits is equal to the length of the substring, then count it\n            count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs, key=lambda x: x)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize max_diff and min_value variables to negative infinity\n    max_diff = float('-inf')\n    min_value = float('inf')\n\n    # Iterate over the tuple list and find the minimum and maximum values\n    for tup in test_list:\n        if tup[0] < min_value:\n            min_value = tup[0]\n        if tup[1] > max_diff:\n            max_diff = tup[1]\n\n    # Return the maximum difference between the minimum and maximum values\n    return max_diff - min_value"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    # Get the length of the list\n    length = len(test_list)\n\n    # Initialize variables for the maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Loop through the list and find the maximum difference\n    for i in range(length):\n        for j in range(i+1, length):\n            current_diff = test_list[j][1] - test_list[i][1]\n            if current_diff > max_diff:\n                max_diff = current_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # initialize two variables to store the maximum difference and the current difference\n    max_diff = test_list[1][0] - test_list[0][0]\n    cur_diff = test_list[1][0] - test_list[0][1]\n    # loop through the list from the second element onwards\n    for i in range(1, len(test_list)-1):\n        # calculate the difference between the current and next elements of the list\n        next_diff = test_list[i+1][0] - test_list[i][1]\n        # update the current difference if the next difference is greater\n        if next_diff > cur_diff:\n            cur_diff = next_diff\n        # update the maximum difference if the current difference is greater\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j+1 < n:\n                diff = test_list[j][0]-test_list[i][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n\n    max_diff = 0\n    prev_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        current_value = test_list[i][1]\n        diff = current_value - prev_value\n        if diff > max_diff:\n            max_diff = diff\n        prev_value = current_value\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables for the minimum and maximum differences\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    # Loop through the list of tuples\n    for pair in test_list:\n        # Calculate the difference between the first element and the second element\n        diff = pair[0] - pair[1]\n        # Update the minimum and maximum differences based on the calculated difference\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n    # Return the maximum difference between available pairs\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sorting the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Returning the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Print the sorted list\n    print(\"Sorted list of tuples: \")\n    for mark in sorted_marks:\n        print(mark)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element and the recursive call to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list, total=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return total\n    else:\n        return recursive_list_sum(data_list[1:], total + data_list[0])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n\n    # Recursive case: Sum the first element of the list and recursively call the function on the rest of the list\n    else:\n        # Get the first element of the list\n        head = data_list[0]\n\n        # Recursively call the function on the rest of the list\n        rest_sum = recursive_list_sum(data_list[1:])\n\n        # Return the sum of the first element and the recursive sum of the rest of the list\n        return head + rest_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Helper function to flatten a list.\n        '''\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    A function to count the number of positive numbers in a list.\n\n    Parameters:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n    \"\"\"\n\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a dictionary to store the count of ways to partition the set\n    ways = {}\n    \n    # Initialize the first Bell number to 0\n    bell_num = 0\n    \n    # Iterate over all values of n\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition the set of Bell numbers\n        ways[i] = 1\n        \n        # Iterate over all values of bell_num\n        for j in range(i):\n            # Calculate the number of ways to partition the set of Bell numbers\n            ways[i] *= ways[j]\n            ways[i] //= (i - j)\n        \n        # Increment bell_num\n        bell_num += 1\n    \n    # Return the count of ways to partition the set of Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The maximum number of partitions.\n\n    Returns:\n    (int): The number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n\n    # Loop through all possible partitions\n    for i in range(2, n+1):\n        # Check if i can be partitioned into even and odd numbers\n        if i % 2 == 0:\n            # If yes, add 1 to the count\n            count += 1\n        else:\n            # If no, add 2 to the count\n            count += 2\n\n    # Return the count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def helper(n, k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        elif k > 1:\n            return sum([helper(n, i) for i in range(1, min(k, n) + 1)])\n\n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    # Initialize variables\n    total_ways = 1\n    i = 2\n    \n    # Find the number of ways to partition the set of Bell numbers\n    while i * i <= n:\n        if n % i:\n            # If i is not a factor of n, increment the total_ways and divide n by i\n            total_ways += 1\n            n //= i\n        else:\n            # If i is a factor of n, divide n by i and increment i\n            n //= i\n            i += 1\n    \n    # Add the last Bell number to the total_ways\n    if n > 1:\n        total_ways += 1\n    \n    return total_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the number of ways to partition the set of Bell numbers\n    ways = [1] * (n + 1)\n\n    # Set the initial conditions for the partition\n    partition = [0] * n\n    partition[0] = 1\n    partition[1] = 1\n\n    # Loop through the remaining partitions\n    for i in range(2, n + 1):\n        # Loop through each combination of two partitions\n        for j in range(i - 1):\n            # Add the number of ways to combine the partitions to the total number of ways\n            ways[i] += partition[j] * partition[i - 1 - j]\n\n    # Return the total number of ways to partition the set of Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = (i+1) * dp[i-1]\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Function to calculate the number of ways to partition n into parts of length 2\n    def ways_to_partition_2(n):\n        # Initialize a dictionary to store the number of ways to partition n into parts of length 2\n        ways = {0: 1, 1: 1}\n        # Loop through all integers from 2 to n\n        for i in range(2, n+1):\n            # Calculate the number of ways to partition i into parts of length 2\n            ways[i] = ways[i-1] + ways[i-2]\n        return ways[n]\n\n    # Function to calculate the number of ways to partition n into parts of length 3\n    def ways_to_partition_3(n):\n        # Initialize a dictionary to store the number of ways to partition n into parts of length 3\n        ways = {0: 1, 1: 1, 2: 1}\n        # Loop through all integers from 3 to n\n        for i in range(3, n+1):\n            # Calculate the number of ways to partition i into parts of length 3\n            ways[i] = ways[i-1] + ways[i-2] + ways[i-3]\n        return ways[n]\n\n    # Calculate the number of ways to partition n into parts of length 2\n    ways_2 = ways_to_partition_2(n)\n\n    # Calculate the number of ways to partition n into parts of length 3\n    ways_3 = ways_to_partition_3(n)\n\n    # Return the sum of the two numbers of ways\n    return ways_2 + ways_3"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    def helper(i, j):\n        if i == j:\n            return 1\n        if i > j:\n            return 0\n        return helper(i + 1, j) + helper(i, j - 1)\n\n    return helper(1, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if all elements are the same\n    if A[0] == A[-1]:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[1] <= A[0]:\n        for i in range(len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    if A[0] <= A[1]: \n        return is_Monotonic(A[1:])\n    else: \n        return is_Monotonic(A[1:])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    if A[1] > A[0]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    elif A[1] < A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    elif n == 1:\n        return True if A[0] <= A[0] else False\n    elif n == 2:\n        return True if A[0] <= A[1] else False if A[1] <= A[0] else True\n    else:\n        for i in range(1, n-1):\n            if A[i-1] < A[i] and A[i] < A[i+1]:\n                return False\n            elif A[i-1] > A[i] and A[i] > A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    \n    return True\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True \n\n    if A[0] <= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i+1]: \n                return False \n        return True \n\n    if A[0] >= A[1]: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i+1]: \n                return False \n        return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is a monotonic increasing or decreasing array, and False otherwise.\n    A monotonic increasing or decreasing array is defined as an array where the elements are either all increasing or all decreasing.\n    '''\n\n    # check if all elements in the array are the same\n    if len(A) > 1 and A[0] == A[-1]:\n        return False\n\n    # check if all elements are increasing or all decreasing\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    if len(A) < 2: \n        return True\n    elif A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # Initialize variables to keep track of the direction of increase and decrease in the array\n    inc_dir = 1\n    dec_dir = 1\n    \n    # Iterate over the array and compare adjacent elements\n    for i in range(1, len(A)):\n        # If the element is less than the previous element, increment the increase direction counter\n        if A[i] < A[i-1]:\n            inc_dir += 1\n            # If the element is greater than the previous element, decrement the decrease direction counter\n            elif A[i] > A[i-1]:\n                dec_dir += 1\n        \n        # If the element is greater than the previous element, decrement the decrease direction counter\n        elif A[i] > A[i-1]:\n            dec_dir += 1\n            # If the element is less than the previous element, increment the increase direction counter\n            elif A[i] < A[i-1]:\n                inc_dir += 1\n    \n    # If both the increase and decrease direction counters are equal, the array is monotonic\n    if inc_dir == dec_dir:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    :param list l: The list to search in.\n    :param list s: The sublist to look for.\n    :return: True if s is a sublist of l, False otherwise.\n    :rtype: bool\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    elif len(s) == len(l):\n        return l == s\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if a list contains a sublist.\n\n    Args:\n        l (list): A list to check for sublist.\n        s (list): A sublist to check for in l.\n\n    Returns:\n        bool: True if s is a sublist of l, else False.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    elif l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        print(\"Input must be a list of tuples.\")\n        return False\n    \n    # Check if all the tuples have the same length\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup)!= length:\n            return False\n    \n    # If all tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Initialize a variable to keep track of whether all tuples have the same length or not\n    is_all_same_length = True\n    \n    # Loop through each tuple in the input list\n    for i in range(len(Input)):\n        # Loop through each tuple in the input list again to compare the length of each tuple\n        for j in range(i+1, len(Input)):\n            # If the lengths of the current two tuples are not equal, mark the variable as False\n            if len(Input[i])!= len(Input[j]):\n                is_all_same_length = False\n                break\n    \n    # Return the value of the variable indicating whether all tuples have equal length or not\n    return is_all_same_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        return find_equal_tuple(Input[1:])"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n-1\n    \n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        swapped = False\n        for i in range(end-1, start-1, -1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        \n        start += 1\n        end -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n                \n        gap = gap // 1.3\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n    The process continues until the list is sorted.\n\n    The time complexity of the algorithm is O(n^2) in the average case.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = gap // 1.3  # This formula is known as the \"comb sort\"\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            if nums[j] <= nums[j - gap]:\n                break\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    k = n // 2\n    while swapped:\n        swapped = False\n        for i in range(k):\n            if nums[i] > nums[i + k]:\n                nums[i], nums[i + k] = nums[i + k], nums[i]\n                swapped = True\n        k = min(k // 2, n - k)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        if swapped:\n            swapped = False\n        gap = 1\n        for i in range(1, gap):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap *= 10\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n        nums (list): A list of elements to be sorted.\n\n    Returns:\n        None: The sorted list will be stored in the original list.\n    '''\n\n    # Initialize the swapped flag to True\n    swapped = True\n\n    # Initialize the gap value to the length of the list\n    gap = len(nums)\n\n    # While the swapped flag is True, keep swapping the elements in the list\n    while swapped:\n        # Initialize the swapped flag to False\n        swapped = False\n\n        # Calculate the start index for the next iteration\n        start = 0\n\n        # While the start index is less than the gap value\n        while start < gap:\n            # Calculate the end index for the next iteration\n            end = start + gap\n\n            # If the end index is greater than or equal to the length of the list\n            if end >= len(nums):\n                # Set the end index to the length of the list\n                end = len(nums)\n\n            # If the start index and end index are not in the correct order\n            if nums[start] > nums[end]:\n                # Swap the elements at the start index and end index\n                nums[start], nums[end] = nums[end], nums[start]\n\n                # Set the swapped flag to True\n                swapped = True\n\n            # Increment the start index\n            start += 1\n\n        # Decrement the gap value\n        gap = int(gap / 1.3)\n\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n\n    This function uses the Comb Sort algorithm, which is an in-place comparison sort.\n\n    Args:\n        nums (list): A list of integers to sort.\n\n    Returns:\n        None: The sorted list is stored back in the input list.\n    \"\"\"\n\n    # Initialize the gap and swapping variables\n    gap = len(nums)\n    swapping = True\n\n    # Continue sorting until the gap is 1 or no more swaps are needed\n    while gap > 1 or swapping:\n        # Reset the swapping flag\n        swapping = False\n\n        # Calculate the new gap size for the next iteration\n        if gap % 2 == 0:\n            gap //= 2\n        else:\n            gap = (gap * 3) // 2\n\n        # Iterate over the list with the new gap size\n        for i in range(len(nums) - gap):\n            # If the elements are not in the correct order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapping = True\n\n        # If there was no swap in the last iteration, the gap is 1\n        if not swapping:\n            gap = 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if n//i == i:\n                return True\n            elif n//i > i:\n                return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n % (i**2) == 0:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is a positive integer\n    if type(n)!= int or n < 1: \n        return \"The given number is not a positive integer\"\n\n    # Check if the difference of the squares of two positive integers exists\n    i = 1\n    while True:\n        j = i\n        square_i = i * i\n        square_j = j * j\n        diff_square = square_i - square_j\n        if diff_square == n:\n            return True\n        elif diff_square > n:\n            break\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is divisible by 4\n    if n % 4 == 0:\n        return False\n    # check if n can be written as (a^2 + b^2) = c^2\n    a = int(n ** 0.5)\n    b = n - a ** 2\n    c = int(b ** 0.5)\n    if c * c == b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # if the given number is less than or equal to 0, it cannot be represented as the difference of two squares\n    if n <= 0: \n        return False\n    # otherwise, we check if the given number can be represented as the difference of two squares\n    else: \n        # initialize variables to store the square root of n and the square root of the difference of two squares\n        s = 0\n        d = 0\n        # check for the square root of n\n        while n > 0: \n            s += 1\n            n = n // 2\n        # check for the square root of the difference of two squares\n        while s > 0: \n            d += 1\n            s = s // 2\n        # if n and n-d have the same parity (i.e. if the sum of the digits of n and n-d is even or odd respectively), then the given number can be represented as the difference of two squares\n        if (n + d) % 2 == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if i**2 == n:\n            return True\n        elif i**2 > n:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 0:\n        a = n // 2\n        b = n - a\n        if b * b == a * a:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n == i*i or n == (n-i*i):\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        for i in range(int(n**0.5)+1):\n            if n%i == 0 and i*i!= n:\n                return True\n            elif n%i!= 0 and i*i == n:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is greater than 1000\n    if n > 1000:\n        return \"Number is greater than 1000\"\n\n    # Check if the number is a perfect square or not\n    square = int(n ** 0.5)\n    if square * square == n:\n        return \"The number is a perfect square\"\n\n    # Check if the number is a difference of two squares or not\n    for i in range(1, square + 1):\n        if n - i * i == i * i:\n            return \"The number can be represented as the difference of two squares\"\n    return \"The number cannot be represented as the difference of two squares\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    # Step 1: Count the number of occurrences of each pattern in the colors list\n    pattern_count = {}\n    for pattern in patterns:\n        pattern_count[pattern] = 0\n    for color in colors:\n        for pattern in pattern_count:\n            if pattern in color:\n                pattern_count[pattern] += 1\n\n    # Step 2: Check if each pattern is present in the correct number of positions in the colors list\n    for pattern in pattern_count:\n        if pattern_count[pattern] < 2:\n            return False\n\n    # Step 3: If all patterns are present in the correct positions, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # First, we need to check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Next, we need to check if there are any repeated patterns in the patterns array\n    for pattern in patterns:\n        if patterns.count(pattern) > 1:\n            return False\n\n    # Finally, we need to check if there is a pattern that repeats twice in the patterns array\n    for i in range(len(patterns)):\n        if patterns.count(patterns[i]) == 2:\n            return True\n\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the pattern of each color\n    pattern_dict = {}\n    for i in range(len(colors)):\n        pattern_dict[colors[i]] = patterns[i]\n    # Compare the pattern of each color with its previous color\n    for i in range(1, len(colors)):\n        if pattern_dict[colors[i]]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    def pattern_match(color):\n        if color in patterns:\n            return True\n        return False\n\n    def is_valid_sequence(pattern_sequence):\n        valid_pattern_sequence = []\n        for i in range(len(pattern_sequence)):\n            for j in range(i + 1, len(pattern_sequence) + 1):\n                if pattern_sequence[i:j] in patterns:\n                    valid_pattern_sequence.append(pattern_sequence[i:j])\n        return valid_pattern_sequence\n\n    for color in colors:\n        if pattern_match(color):\n            return False\n\n    for pattern in patterns:\n        if not is_valid_sequence(pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i+1] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Find the maximum value in the patterns array\n    max_pattern = max(patterns)\n\n    # Initialize the same pattern count to zero\n    same_pattern_count = 0\n\n    # Loop through the colors array\n    for color in colors:\n        # Check if the current color is the same as the previous color\n        if color == colors[same_pattern_count]:\n            # Increment the same pattern count\n            same_pattern_count += 1\n\n        # If the same pattern count equals the maximum value in the patterns array, the sequence is valid\n        if same_pattern_count == max_pattern:\n            return True\n\n    # If the sequence does not end with the maximum value in the patterns array, it is not valid\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Create a set to store the color combinations\n    color_combs = set()\n\n    # Traverse through each pattern in the patterns array\n    for pattern in patterns:\n        # Traverse through each color in the pattern\n        for color in pattern:\n            # Calculate the color combination by appending the color\n            color_combs.add(color)\n\n    # Check if the length of the set is equal to the number of colors in the patterns array\n    if len(color_combs) == len(colors):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors.sort()\n    patterns.sort()\n    if colors == patterns:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K and returns a list of tuples whose elements are all divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Define a new list to store the tuples with all elements divisible by K\n    result = []\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if all elements of the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 and test_list[j][k] % K == 0 for k in range(len(test_list[0]))):\n                count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through each tuple in the given list\n    for tup in test_list:\n        # loop through each element in the tuple\n        for elem in tup:\n            # check if the element is divisible by K\n            if elem % K == 0:\n                # if it is, add the tuple to the result list\n                result.append(tup)\n                # break out of the inner loop\n                break\n        # break out of the outer loop\n        if len(result) == len(test_list):\n            break\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a set to store all possible combinations of k elements\n    combinations = set()\n\n    # Loop through all the tuples in the list\n    for tuple1 in test_list:\n        for tuple2 in test_list:\n            # Check if the two tuples have all elements divisible by k\n            if tuple1[0] % K == 0 and tuple1[1] % K == 0 and tuple1[2] % K == 0 and \\\n               tuple2[0] % K == 0 and tuple2[1] % K == 0 and tuple2[2] % K == 0:\n                # Add the two tuples to the set of combinations\n                combinations.add((tuple1, tuple2))\n\n    # Convert the set to a list of tuples and return it\n    return list(combinations)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # create a list of tuples where each tuple contains all elements divisible by k from the original list\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            divisible_tuples.append(test_list[i])\n\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes in a list of tuples and a number k as input, and returns a list of tuples\n    which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Initialize an empty list to store the valid tuples\n    valid_tuples = []\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Initialize a boolean variable to store the condition for each tuple\n        condition = True\n\n        # Iterate over the elements in the tuple\n        for elem in tup:\n            # Check if the element is not divisible by k\n            if elem % K!= 0:\n                # If any element is not divisible by k, set the condition to False and break out of the loop\n                condition = False\n                break\n\n        # If the condition is True, the tuple is valid and should be added to the valid_tuples list\n        if condition:\n            valid_tuples.append(tup)\n\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the tuples\n    result = []\n    \n    # Iterate over the given list of tuples\n    for tup in test_list:\n        # Check if all elements of the tuple are divisible by k\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by k, append the tuple to the result list\n            result.append(tup)\n    \n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11,\n    False otherwise.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word, \"is even.\")\n        else:\n            print(word, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.strip() # remove leading and trailing whitespaces\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of the word '{word}' is even.\")\n        else:\n            print(f\"The length of the word '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower() # convert all characters to lowercase\n    words = s.split() # split the string into words\n    odd_word_count = 0\n    for word in words:\n        if len(word) % 2 == 1: # check if the length of the word is odd\n            odd_word_count += 1\n    if odd_word_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is odd length.\")\n        else:\n            print(word, \"is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"The length of {word} is odd.\")\n        else:\n            print(f\"The length of {word} is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length.\")\n        else:\n            print(f\"{word} is an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    \n    # Check the length of each word\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length.\")\n        else:\n            print(word, \"is an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string by space\n    words = s.split()\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is odd or even\n        if len(word) % 2!= 0:\n            # Print the word and its length\n            print(\"The word is\", word, \"with a length of\", len(word))\n            break\n    # If no odd length words were found, print a message\n    else:\n        print(\"No odd-length words found in the string\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    \n    tetrahedral_numbers = []\n    for i in range(n+1):\n        tetrahedral_numbers.append(4*i*i*i)\n    \n    return tetrahedral_numbers[n]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the variables\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n    \n    # Use a loop to calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        # Calculate the next term\n        next_term = a + b + c + d\n        \n        # Update the values for the next iteration\n        a = b\n        b = c\n        c = next_term\n        d = a + b + c\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    Args:\n    n (int): The index of the tetrahedral number to find.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    \"\"\"\n\n    # Initialize a counter variable\n    count = 0\n\n    # Initialize the first two tetrahedral numbers\n    num1 = 1\n    num2 = 1\n\n    # Loop through the rest of the tetrahedral numbers\n    for i in range(3, n+1):\n\n        # Calculate the next tetrahedral number\n        num3 = (4 * num1**2 + 3 * num2**2) / (2 * i + 1)\n\n        # Update the counter variable\n        count += 1\n\n        # Update the first two tetrahedral numbers\n        num1 = num2\n        num2 = num3\n\n    return count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: return 0 for n=0\n    if n == 0:\n        return 0\n    # Base case: return 1 for n=1\n    elif n == 1:\n        return 1\n    # Base case: return n for n>1\n    else:\n        return n + tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 4\n        c = 6\n        d = 12\n        t = 2\n        i = 2\n        while i < n:\n            a = b + 1\n            b = c + 2\n            c = d + 3\n            d = 12 * a + 6 * b + 4 * c + 2 * d\n            t += 1\n            i += 1\n        return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(1, n+1):\n        tetrahedral += 4 * (i * (i - 1)) // 2\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (n-1) * (4 * (n-1) * (n-2) + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1) * (n - 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return int(((n * (n + 1) * (2 * n + 1) * (3 * n - 1)) / 6) ** (1 / 3))\n\nn = int(input(\"Enter a number: \"))\nresult = tetrahedral_number(n)\nif result is None:\n    print(\"Invalid input\")\nelse:\n    print(\"The\", n, \"th tetrahedral number is:\", result)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r using the formula:\n    V = (4/3)\u03c0r^3\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with radius r.\n    '''\n\n    # Use the formula for the volume of a sphere\n    V = (4/3) * math.pi * (r ** 3)\n\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    \n    # Convert the string to a list of ASCII values\n    ascii_values = [ord(char) for char in strr]\n    \n    # Calculate the sum of the ASCII values modulo 26\n    result = sum(ascii_values) % 26\n    \n    # Convert the result to a character using chr() function\n    result_char = chr(result)\n    \n    return result_char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_code = ascii_sum % 26\n    return chr(char_code + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char = (char % 26) + ord('a')\n        char = chr(char)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = sum(ord(i) for i in strr) % 26\n    return chr(97 + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    # initialize a string to store the ASCII value of characters\n    ASCII_val = \"\"\n\n    # loop through each character in the string\n    for char in strr:\n        # convert each character to its ASCII value\n        ASCII = ord(char)\n        # add the ASCII value to the ASCII_val string\n        ASCII_val += str(ASCII)\n\n    # convert the ASCII_val string to an integer and add it to a new variable\n    char_val = int(ASCII_val)\n\n    # find the character made by adding the ASCII value of all the characters of the string modulo 26\n    char = chr((char_val - ASCII_val[0]) % 26 + ord('A'))\n\n    # return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for i in range(len(strr)):\n        ascii_value += ord(strr[i])\n    return ascii_value % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # converting the string into a list of characters\n    lst = list(strr)\n    # initializing the result variable to 0\n    result = 0\n    # looping through each character in the list\n    for i in range(len(lst)):\n        # adding the ASCII value of the character to the result variable\n        result += ord(lst[i])\n    # returning the result modulo 26\n    return result % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Traverse through each character of the string\n    for char in strr:\n        # Convert the character to ASCII value\n        ascii_value = ord(char)\n        # Add the ASCII value to the sum\n        sum = (sum + ascii_value) % 26\n    # Convert the sum to character using ASCII value\n    return chr(sum)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(b, end=' ')\n        a, b = b, a+b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n): \n        sequence.append(4 * sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with the first two numbers\n    sequence = [0, 1]\n\n    # Calculate the next number in the sequence\n    for i in range(2, n + 1):\n        # Check if the current number is in the sequence\n        if sequence[-1] % 2 == 0:\n            # If it is, add 2 to it\n            sequence.append(sequence[-1] + 2)\n        else:\n            # If it's odd, add 1 to it\n            sequence.append(sequence[-1] + 1)\n\n    # Return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]  # start with the second element of the sequence\n    for i in range(2, n):\n        if sequence[i-1] % 2 == 0:\n            sequence.append(sequence[i-1] * 2)\n        else:\n            sequence.append(sequence[i-1] + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0]\n    for i in range(n-1):\n        next_sequence = []\n        for j in range(len(sequence)-1):\n            if sequence[j] == 1:\n                next_sequence.append(sequence[j+1])\n            else:\n                next_sequence.append(0)\n        sequence = next_sequence\n    return sequence[-1]\n\nprint(sequence(10))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    seq = [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * (r ** 3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Calculate the surface area using the formula for the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    area = 4 * math.pi * (r**2)\n\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using Heron's formula\n    s = (4/3) * math.pi * r * r * r\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 8\n        else:\n            return 6 * centered_hexagonal(n-1) + 6 - 1\n    \n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Get the number of rows and columns in the centered hexagonal matrix\n    num_rows = (n // 3) + 1\n    num_cols = (2 * n - 1) // 2 + 1\n    \n    # Initialize the matrix with zeros\n    matrix = [[0] * num_cols for i in range(num_rows)]\n    \n    # Calculate the center of the matrix and the radius\n    center_row = int((num_rows - 1) / 2)\n    center_col = int((num_cols - 1) / 2)\n    radius = (num_rows - 1) // 2\n    \n    # Iterate through the matrix\n    for i in range(num_rows):\n        for j in range(num_cols):\n            # Determine the coordinates of the hexagonal number\n            row = i - center_row\n            col = (j - center_col) + radius\n            \n            # Check if the hexagonal number is within bounds and within the current matrix\n            if 0 <= row < num_rows and 0 <= col < num_cols:\n                matrix[i][j] = n - row - col\n    \n    # Return the matrix as a flattened list\n    return [num for row in matrix for num in row]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return centered_hexagonal_number(n // 2) + 2\n    else:\n        return centered_hexagonal_number((n // 2) + 1) + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += (2 * i - 1) ** 2\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n\n    # Loop n times\n    for i in range(n):\n        # Calculate centered hexagonal number\n        h = (a + b + c + d + e) / 2\n\n        # Update variables\n        a = b\n        b = c\n        c = d\n        d = e\n        e = h\n\n    # Return centered hexagonal number\n    return h"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the sum of the centered hexagonal numbers up to n\n    sum = (n * (n + 1)) // 2\n\n    # Add 1 to find the n-th centered hexagonal number\n    return sum + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        # Find the number of hexagons that can be fit into n rows.\n        num_rows = (n-1) // 2 + 1\n\n        # Find the number of hexagons that can be fit into (n+1) rows.\n        num_hexagons = n * (n+1) // 2 - (n-1) * (n-1) // 2\n\n        # Find the number of hexagons in the rows that are already filled.\n        filled_hexagons = (num_rows - 1) * num_hexagons // 2\n\n        # Return the number of hexagons in the last row plus the number of filled hexagons.\n        return num_hexagons - filled_hexagons"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 6\n    result = 0\n\n    # Calculate centered hexagonal number\n    for _ in range(n):\n        result += a\n        a += b\n        b += 2\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n, r):\n        if n == 0:\n            return r\n        else:\n            return centered_hexagonal_helper(n-1, r-1) + centered_hexagonal_helper(n-1, r+1)\n    \n    r = int(n/2)\n    return centered_hexagonal_helper(n, r)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.defaultdict(list)\n    for key in dict1:\n        merged_dict[key].append(dict1[key])\n    for key in dict2:\n        merged_dict[key].append(dict2[key])\n    for key in dict3:\n        merged_dict[key].append(dict3[key])\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Merge the first two dictionaries into a new dictionary\n    merged_dict = ct.ChainMap(dict1, dict2)\n\n    # Merge the merged dictionary with the third dictionary\n    merged_dict = ct.ChainMap(merged_dict, dict3)\n\n    # Convert the merged dictionary to a regular dictionary\n    merged_dict = dict(merged_dict)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create a new dictionary to store the merged values\n    merged_dict = {}\n    # loop through the keys in each dictionary\n    for key in dict1.keys() | dict2.keys() | dict3.keys():\n        # if the key is in both dictionaries, add the values together\n        if key in dict1 and key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        # if the key is only in one dictionary, add the value from that dictionary\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        # if the key is only in the third dictionary, add the value from that dictionary\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged data\n    merged_dict = {}\n    \n    # loop through each key in dict1 and add it to merged_dict\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    \n    # loop through each key in dict2 and add it to merged_dict\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    \n    # loop through each key in dict3 and add it to merged_dict\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    \n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Merge the first two dictionaries into a single dictionary.\n    merged_dict = {**dict1, **dict2}\n\n    # Merge the third dictionary into the merged dictionary.\n    merged_dict.update(dict3)\n\n    # Return the merged dictionary.\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): The first dictionary to merge.\n    dict2 (dict): The second dictionary to merge.\n    dict3 (dict): The third dictionary to merge.\n\n    Returns:\n    dict: A single dictionary containing all the key-value pairs from the input dictionaries.\n\n    Example usage:\n    >>> dict1 = {'a': 1, 'b': 2}\n    >>> dict2 = {'c': 3, 'd': 4}\n    >>> dict3 = {'e': 5, 'f': 6}\n    >>> merged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n    >>> print(merged_dict)\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and merges them into a single dictionary.\n    '''\n\n    # Merge the dictionaries using the update() method of the dictionary class\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def freq_count(list1):\n    # create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n    # iterate over each element in the list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq:\n            # if it is, increment its frequency by 1\n            freq[element] += 1\n        else:\n            # if it isn't, add it to the dictionary with a frequency of 1\n            freq[element] = 1\n    # return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N and returns the closest smaller number than N.\n    '''\n    n = 0\n    while n < N:\n        n += 1\n    return n - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    closest = n\n    \n    for i in range(1, N+1):\n        if abs(n-i) < abs(n-closest):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    closest = float('inf')\n    for i in range(1, N):\n        if i % 2 == 0:\n            smaller_num = i - 1\n        else:\n            smaller_num = i + 1\n        distance = abs(N - smaller_num)\n        if distance < closest:\n            closest = distance\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Find the smallest number greater than N\n    greater_num = N + 1\n\n    # Loop until we find a smaller number\n    while True:\n        # Find the midpoint of the current range\n        mid_num = (greater_num + N) // 2\n\n        # If the midpoint is smaller than N, update the range to the left\n        if mid_num < N:\n            greater_num = mid_num\n        # Otherwise, the midpoint is greater than or equal to N, so we have found the closest smaller number\n        else:\n            break\n\n    # Return the closest smaller number\n    return greater_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the largest number less than or equal to N\n    largest_less_than_N = N - 1\n    \n    # Find the closest smaller number than N\n    if N % 2 == 0:\n        closest_num = largest_less_than_N + 1\n    else:\n        closest_num = largest_less_than_N\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    if N == 1:\n        return 0\n\n    if N == 2:\n        return 1\n\n    if N % 2 == 0:\n        if N % 4 == 0:\n            return 2\n        else:\n            return 1\n\n    else:\n        if N % 4 == 0:\n            return 1\n        else:\n            return 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n\n    for num in range(1, N):\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 0\n    largest = 1000\n    closest = smallest\n    \n    for i in range(1, 1000):\n        mid = (smallest + largest) // 2\n        \n        if mid == N:\n            return N\n        elif mid < N:\n            smallest = mid + 1\n            closest = mid\n        else:\n            largest = mid - 1\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n    else:\n        return min(closest_num(N-1), N+1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    diff = float('inf')\n    closest = float('inf')\n    for i in range(1, N+1):\n        if i < N:\n            if abs(i - N) < diff:\n                diff = abs(i - N)\n                closest = i\n        elif i == N:\n            return N\n        else:\n            if abs(i - N) < closest:\n                closest = abs(i - N)\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to keep track of the length of the longest word found so far\n    longest_word = 0\n    \n    # Loop through each string in the list\n    for word in list1:\n        # Convert the string to lowercase and split it into words\n        words = word.lower().split()\n        \n        # Loop through each word in the list of words\n        for w in words:\n            # If the length of the word is greater than the current longest word, update the variable\n            if len(w) > longest_word:\n                longest_word = len(w)\n    \n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list as an input and returns the length of the longest word in the list.\n    \"\"\"\n    words = []\n    for sentence in list1:\n        words.extend(sentence.split())\n    longest_word = max(words, key=len)\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    \n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    \n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for value in str1:\n        if sub_str in value:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two parameters: a string and a substring. \n    It returns a boolean value indicating whether the given string is present as a substring in the list of substrings.\n    \"\"\"\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = ['apple', 'banana', 'cherry', 'date', 'elderberry']\n    for word in lst:\n        if sub_str in word:\n            print(f\"{sub_str} is present in {word}\")\n            break\n    else:\n        print(f\"{sub_str} is not present in any word in the list.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        sub_str_list = sub_str.split()\n        for s in str1.split():\n            if all(s in sub_str_list for sub_str_list in s.split()):\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # iterate over the list of strings and check if the substring is present\n    for string in str1:\n        if sub_str in string:\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Initialize a list to store the indices of the substrings in str1\n    indices = []\n    # Loop through all the indices of str1\n    for i in range(len(str1)):\n        # Check if the substring starts from the current index and has the same length as sub_str\n        if str1[i:i+len(sub_str)] == sub_str:\n            # If it does, add the starting index to the list of indices\n            indices.append(i)\n    # If the list of indices is not empty, return True\n    if indices:\n        return True\n    # If the list of indices is empty, return False\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return \"The number is not undulating.\"\n    elif n == 0:\n        return \"The number is undulating.\"\n    elif n > 0:\n        return \"The number is undulating.\"\n    else:\n        return \"The input is not a number.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # Define the number of steps it takes to reach the top of a mountain\n    steps = 2 * n - 1\n\n    # Check if the number of steps is odd or even\n    if steps % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if the number is even\n        return True # return True because even numbers are always undulating\n    else:\n        for i in range(1, n//2+1): # iterate from 1 to half the number\n            if n % i == 0: # check if the number is divisible by any number between 1 and half the number\n                return False # return False because odd numbers can be undulating if they are divisible by only 1 or by 2\n        return True # if no factors of 1 or 2 were found in the range from 1 to half the number, the number is undulating"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the input number to a string\n    n_str = str(n)\n    # Get the length of the string\n    n_length = len(n_str)\n    # Check if the length is odd or even\n    if n_length % 2 == 0:\n        # If the length is even, then the number is not undulating\n        return False\n    else:\n        # If the length is odd, then the number is undulating\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is even or not\n    if n % 2 == 0:\n        # If it's even, it's undulating\n        return True\n    # If the number is odd, it's not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a (float): The base number.\n        b (float): The exponent.\n\n    Returns:\n        float: The value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1.0\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = None\n    for index, value in enumerate(test_list):\n        if min_index is None or value[1] < min_value:\n            min_index = index\n            min_value = value[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    minimum_value = None\n    for index, value in enumerate(test_list):\n        if minimum_index is None or value[1] < minimum_value:\n            minimum_index = index\n            minimum_value = value[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in sorted() function to sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first value of the smallest tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: (x[1], x[0]))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # use the sorted function to sort the list by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sub_list in lst:  \n        if len(sub_list) < min_length:  \n            min_length = len(sub_list)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 999999999\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Check if the length of the current sublist is less than the current minimum\n        if len(sublist) < min_length:\n            # If it is, update the minimum length\n            min_length = len(sublist)\n    \n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') #initialize the minimum length to infinity\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i]) #update the minimum length if the length of the current list is smaller than the current minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes in a list of lists as input and returns the length of the smallest list.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize a variable to store the length of the smallest list\n    min_length = 10000\n\n    # loop through the list of lists\n    for sublist in lst:\n        # loop through the sublist\n        for element in sublist:\n            # check if the length of the current sublist is shorter than the current minimum length\n            if len(str(element)) < min_length:\n                # update the minimum length\n                min_length = len(str(element))\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        elif item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to store frequency of each element\n    freq_dict = {}\n    \n    # flatten the given list of lists\n    flatten_list = [item for sublist in list1 for item in sublist]\n    \n    # loop through each element in the flattened list\n    for element in flatten_list:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # increment the count of the element in the dictionary\n            freq_dict[element] += 1\n        else:\n            # add the element to the dictionary with count 1\n            freq_dict[element] = 1\n    \n    # return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element in the flattened list\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in flattened_list:\n        # Check if the element is already in the dictionary\n        if element in frequency_dict:\n            # If it is, increment its frequency by 1\n            frequency_dict[element] += 1\n        else:\n            # If it's not, add it to the dictionary with a frequency of 1\n            frequency_dict[element] = 1\n\n    # Return the dictionary of frequency of each element in the flattened list\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq = {}\n    # loop through each element in the list\n    for elem in list1:\n        # if the element is a list, recursively call the function on it\n        if isinstance(elem, list):\n            # recursively call the function on the list and add the result to the dictionary\n            freq.update(frequency_lists(elem))\n        # if the element is not a list, update its frequency in the dictionary\n        else:\n            freq[elem] = freq.get(elem, 0) + 1\n    # return the dictionary with frequency counts\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    \n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for elem in list1:\n        if isinstance(elem, list):\n            for subelem in elem:\n                if subelem not in result:\n                    result[subelem] = 1\n                else:\n                    result[subelem] += 1\n        else:\n            if elem not in result:\n                result[elem] = 1\n            else:\n                result[elem] += 1\n    return result"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for item in list1:\n        # check if the element is a list\n        if isinstance(item, list):\n            # flatten the list\n            flat_list = [x for sublist in item for x in sublist]\n            # add the flattened list to the dictionary\n            if flat_list not in freq_dict:\n                freq_dict[flat_list] = 1\n            else:\n                freq_dict[flat_list] += 1\n        # if the element is not a list, add it to the dictionary as a key with a value of 1\n        else:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    \n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for element in list1:\n\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        if not isinstance(element, list):\n            freq_dict[element] = 1\n\n        # If the element is a list, recursively call the function on the list and update the dictionary with the result\n        else:\n            sub_freq_dict = frequency_lists(element)\n            for key, value in sub_freq_dict.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list1\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the final dictionary containing the frequency of each element in list1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n\n    # Remove leading zeros\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using the bitwise operators\n    binary = bin(n)[2:]\n    # Remove leading zeros from the binary string\n    binary = binary.lstrip('0')\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to store the binary equivalent\n    binary_string = \"\"\n    \n    # Convert the decimal number to binary using a loop and append each digit to the string\n    while n > 0:\n        # Calculate the remainder of the division of n by 2\n        remainder = n % 2\n        \n        # Convert the remainder to a string and append it to the binary string\n        binary_string = str(remainder) + binary_string\n        \n        # Remove the last digit from the decimal number and repeat the process\n        n //= 2\n        \n    return binary_string"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # check if the reversed number is a palindrome\n    if is_palindrome(int(reversed_num)):\n        # if it is, return the original number\n        return num\n    # if the reversed number is not a palindrome, increment the first non-zero digit of the original number\n    while reversed_num[0] == '0':\n        reversed_num = str(int(num) + 1)[::-1]\n        if is_palindrome(int(reversed_num)):\n            return int(reversed_num)\n    # if we reach this point, there is no non-zero digit to increment, so return the reversed number\n    return int(reversed_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Function to check if a number is palindrome or not.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_square(num):\n    '''\n    Function to check if a number is a square or not.\n    '''\n    return num == int(num ** 0.5) ** 2\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer.\n    '''\n    for i in range(num, 1000000000, -1):\n        if is_palindrome(i) and is_square(i):\n            return i\n    return -1\n\nif __name__ == '__main__':\n    try:\n        num = int(input(\"Enter a number: \"))\n        print(\"Next smallest palindrome is:\", next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        # Check if the current number is a palindrome\n        if is_palindrome(num):\n            # If it is, return the next smallest number\n            if num % 2 == 0:\n                return num + 1\n            else:\n                return num - 1\n        # If the current number is not a palindrome, increment or decrement it until it is\n        if num % 2 == 0:\n            num += 1\n        else:\n            num -= 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and reverse it\n    num_str = str(num)[::-1]\n    # Loop through all possible palindromes\n    for i in range(999, 100, -1):\n        # Convert the integer to a string and reverse it\n        check_str = str(i)[::-1]\n        # Check if the reverse is a palindrome and the original number is less than the reverse\n        if check_str == check_str[::-1] and int(num_str) < int(check_str):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(n):\n    '''\n    Returns True if the given number is a palindrome, False otherwise.\n    '''\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    largest_palindrome = 0\n    for i in range(num+1):\n        temp = i * 10 + 1\n        while temp <= num:\n            temp_str = str(temp)\n            if is_palindrome(int(temp_str)):\n                if temp > largest_palindrome:\n                    largest_palindrome = temp\n            temp += 1\n    return largest_palindrome\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(f\"The next smallest palindrome of {num} is: {next_smallest_palindrome(num)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    smallest = 10**(n-1)\n    while True:\n        if is_palindrome(smallest) and smallest > 10**(n-1):\n            break\n        smallest += 1\n\n    return smallest\n\ndef is_palindrome(num):\n    '''\n    Determine if a specified number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize two variables, one for the original number and one for the reversed number\n    original = num\n    reversed_num = 0\n\n    # Convert the number to its reverse in reverse order\n    for i in range(len(str(original))):\n        reversed_num += int(str(original)[i]) * (10 ** (len(str(original)) - i - 1))\n\n    # Check if the original number is already a palindrome\n    if str(original) == str(original)[::-1]:\n        return original\n\n    # Increment the reversed number until it becomes a palindrome\n    while True:\n        reversed_num += 1\n        if str(reversed_num) == str(reversed_num)[::-1]:\n            break\n\n    # Calculate the next smallest palindrome by comparing the original number and the reversed number\n    next_palindrome = 0\n    if original > reversed_num:\n        next_palindrome = original\n    else:\n        next_palindrome = reversed_num\n\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # If the number is already a palindrome, then we simply return it.\n    if str(num) == str(num)[::-1]:\n        return num\n\n    # Find the digits of the number.\n    digits = [int(d) for d in str(num)]\n\n    # Find the length of the number.\n    length = len(digits)\n\n    # Find the largest possible palindrome of the form 10^i * 10^j.\n    max_palindrome = 1\n    for i in range(length):\n        max_palindrome = max(max_palindrome, 10**(i+1) * 10**(length-i-1))\n\n    # Find the smallest palindrome greater than the number.\n    for i in range(length):\n        for j in range(i+1, length):\n            palindrome = 10**(i+1) * 10**(j)\n            if palindrome > num and palindrome < max_palindrome:\n                return palindrome\n\n    # If the number is too large, then it can't be the next smallest palindrome.\n    if num > max_palindrome:\n        return None\n\n    # If the number is too small, then it can't be the next smallest palindrome either.\n    if num < 10**length:\n        return None\n\n    # If the number is between 10^length and max_palindrome, then we can't find the next smallest palindrome.\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Write a function to check if a given number is palindrome or not.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num+1):\n        return num+1\n    else:\n        return next_smallest_palindrome(num+1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input number to a string and reverse it\n    input_str = str(num)[::-1]\n    # Initialize the smallest palindrome to the input number\n    smallest_palindrome = input_str\n    # Check if the input number is already a palindrome\n    if input_str == input_str[::-1]:\n        # If it is, return it as is\n        return num\n    # Generate all possible palindromes of length 2n-1\n    for i in range(2, len(input_str) + 1):\n        # Generate all possible palindromes of length 2i-1\n        for j in range(2, len(input_str) - i + 1):\n            # Check if the palindrome is greater than the current smallest palindrome\n            if int(input_str[j:j+i]) > int(smallest_palindrome):\n                # If it is, update the smallest palindrome\n                smallest_palindrome = input_str[j:j+i]\n    # Convert the smallest palindrome to an integer and return it\n    return int(smallest_palindrome)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        raise ValueError(\"Array is empty\")\n    \n    # Check if the k is 1 or greater\n    if k < 1:\n        raise ValueError(\"k is less than 1\")\n    \n    # Initialize the index of the first element\n    left = 1\n    \n    # Initialize the index of the last element\n    right = len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the mid element is equal to k, return it\n        if arr[mid] == k:\n            return arr[mid]\n        \n        # If the mid element is greater than k, set the left index to mid + 1\n        elif arr[mid] < k:\n            left = mid + 1\n        \n        # If the mid element is smaller than k, set the right index to mid - 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[k-1] if k <= arr[0] else arr[1-k]\n    if k < n // 2:\n        return kth_element(arr[:n//2], k)\n    else:\n        return kth_element(arr[n//2:], n-k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        arr = arr[1:] # Removing the first element as it is not considered\n        return arr[k-1] # Returning the kth element"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Check if k is valid or not\n    if k < 1 or k > n:\n        raise ValueError(\"Invalid value of k\")\n    # Initialize the left and right pointers\n    left = 1\n    right = n\n    # Initialize the counter variable\n    count = 1\n    # Loop until we find the kth element\n    while left <= right:\n        # Find the mid index\n        mid = (left + right) // 2\n        # If the mid element is equal to k, we found the kth element\n        if arr[mid] == k:\n            return k\n        # If the mid element is greater than k, we update the left pointer\n        elif arr[mid] < k:\n            left = mid + 1\n        # If the mid element is less than k, we update the right pointer\n        else:\n            right = mid - 1\n        # Increment the count variable\n        count += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and k as input and returns the kth element of the array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    \n    # Check if k is valid\n    if k < 1 or k > n:\n        return \"Invalid index\"\n    \n    # Initialize the left and right pointers\n    left = 1\n    right = n\n    \n    # Initialize the count of elements found so far\n    count = 0\n    \n    # Find the kth element while traversing the array\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the mid element is the kth element, return it\n        if arr[mid] == k:\n            return arr[mid]\n        \n        # If the mid element is less than k, update left pointer to mid+1\n        elif arr[mid] < k:\n            count += mid - left + 1\n            left = mid + 1\n        \n        # If the mid element is greater than k, update right pointer to mid-1\n        else:\n            right = mid - 1\n    \n    # If the kth element is not found, return \"Element not found\"\n    return \"Element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the snake case word into words\n    words = word.split('_')\n    # Convert the first word to capital letter\n    words[0] = words[0].capitalize()\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    # Join the camel case words back to form the camel case string\n    return ''.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_string = ''\n    prev_char = ''\n    \n    for char in word:\n        if char.isupper():\n            if prev_char.isupper():\n                camel_case_string += '_' + char.lower()\n            else:\n                camel_case_string += char.lower()\n        else:\n            camel_case_string += char\n        prev_char = char\n    \n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.lower()\n        elif char.isupper():\n            result += \"_\" + char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word += word[i].upper()\n        elif word[i].isupper():\n            camel_case_word += word[i]\n        else:\n            camel_case_word += \"_\" + word[i].lower()\n    return camel_case_word.lstrip(\"_\")"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case =''.join(word.capitalize() for word in words)\n    # Convert the camel case string to a title case string\n    title_case = camel_case.title()\n    return title_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = []\n    for word in words:\n        camel_case_word = word.capitalize()\n        camel_case_words.append(camel_case_word)\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += '_' + word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].upper()\n        elif i == len(word) - 1:\n            result += word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n\n    # Splitting the word into a list of words\n    words = word.split('_')\n\n    # Converting the first word to lowercase and adding the rest of the words to a string\n    camel_case_word = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case_word += words[i]\n\n    return camel_case_word\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1 + m\n    else:\n        a = 1\n        b = 1 + m\n        for i in range(2, n + 1):\n            c = (a * b) % m\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    else:\n        return eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize variables\n    a = 0\n    \n    # Check if n is odd\n    if n % 2 == 1:\n        # Calculate the sum of the first n odd numbers\n        a = sum([2*i+1 for i in range(n)])\n        \n    # Check if m is odd\n    if m % 2 == 1:\n        # Calculate the sum of the first m odd numbers\n        a += sum([2*i+1 for i in range(m)])\n        \n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Create a list of the integers from 1 to n\n    nums = [i for i in range(1, n+1)]\n\n    # Initialize an empty list to store the Eulerian numbers\n    eulers = []\n\n    # Use a recursive function to generate Eulerian numbers\n    def generate_eulers(nums, eulers):\n        # If the list of numbers is empty, return the Eulerian numbers\n        if len(nums) == 0:\n            return eulers\n\n        # Choose the last number in the list and append it to the Eulerian numbers\n        eulers.append(nums[-1])\n\n        # Remove the last number from the list and recursively call the function with the remaining numbers\n        generate_eulers(nums[:-1], eulers)\n\n    # Call the recursive function with the initial list of numbers and an empty list\n    generate_eulers(nums, eulers)\n\n    # Use the Eulerian numbers to find the a(n, m) value\n    a = 0\n    for i in range(1, m+1):\n        a += eulers[i-1] * eulers[-i]\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is the number of paths that pass through a square grid of side length n and m, \n    such that every cell of the grid is accessible from every other cell.\n\n    For example, consider the grid with dimensions n=4 and m=4:\n\n    a(4, 4) = 48\n    a(4, 3) = 28\n    a(3, 4) = 14\n    a(3, 3) = 6\n\n    Note that a(n, m) is equal to the number of paths that can be drawn on the grid with a side length of n and m, \n    such that the paths can start and end anywhere within the grid.\n\n    This can be solved using dynamic programming. We can define a 2D array dp[i][j], where dp[i][j] represents the number of paths that can be drawn on the grid with side length n and m, where the bottom-left corner of the grid is at (i, j). We can fill in the values of dp[i][j] using the following recurrence relation:\n\n    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n\n    where MOD is a large prime number. This gives us the Eulerian number a(n, m).\n    \"\"\"\n\n    MOD = 1000000007\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD\n\n    return dp[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n == 1 or m == 1: \n        return 0\n    else: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Compute the Eulerian number a(n, m), where a(n, m) is the number of Euler paths in a graph of n nodes and m edges.\n    The Eulerian path is a path that starts and ends in a single node, and each edge in the path is a direct connection between the two nodes.\n    \"\"\"\n\n    # Initialize the number of edges in each node to 0\n    edges = [[0 for j in range(m)] for i in range(n)]\n\n    # Mark the first node as visited and add the first edge to it\n    visited = [False for _ in range(n)]\n    visited[0] = True\n    edges[0][0] = 1\n\n    # Compute the Eulerian number recursively\n    for i in range(1, n):\n        # Find the unvisited node with the maximum number of edges in the current path\n        max_edges = 0\n        max_node = -1\n        for j in range(n):\n            if not visited[j]:\n                max_edges = max(max_edges, edges[j][i-1])\n                max_node = j\n        if max_node == -1:\n            # No unvisited node found with maximum edges, so this is an even number of paths\n            return n * (n-1) // 2\n        # Mark the unvisited node as visited and add all its edges to the current path\n        visited[max_node] = True\n        for k in range(m):\n            edges[max_node][k] += edges[max_node][i-1]\n\n    # Return the number of paths with odd number of edges\n    return sum(sum(edges[i]) % 2 for i in range(n))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a = (a + m) % i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a matrix to store Eulerian numbers\n    e = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Set the value of Eulerian number a(1, 1) to 1\n    e[1][1] = 1\n\n    # Calculate Eulerian numbers using the relation: a(i, j) = a(i - 1, j) + a(i, j - 1)\n    # for i > 1 and j > 1, and a(1, 1) = 1\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            e[i][j] = e[i - 1][j] + e[i][j - 1]\n\n    # Return the value of the Eulerian number a(n, m)\n    return e[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 1\n    c = 2\n\n    # Calculate a(n, m)\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            a = (a * b) % c\n            b = (b * c) % c\n            c = (c * a) % c\n\n    return a\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in place using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the modified input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # loop through each sublist in the input list\n    for sublist in input_list:\n\n        # sort the sublist using the sorted() function\n        sublist.sort()\n\n        # print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list of lists\n    for sublist in input_list:\n        # Sort the sublist in-place using the sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list and a new tuple\n    new_list = list(test_list)\n    new_tup = tuple(test_tup)\n    # add the list to the tuple\n    new_tup = new_tup + new_list\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list and append the list to the tuple\n    new_tup = list(test_tup)\n    new_tup.extend(test_list)\n    return tuple(new_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_tup += tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists and the two tuples\n    result = test_list + test_tup\n    # Return the result as a new tuple\n    return tuple(result)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list of all the numbers to be merged\n    merge_list = num1 + num2 + num3\n    \n    # Sort the list using heap sort\n    heapq.heapify(merge_list)\n    \n    # Extract the sorted list and return it\n    return heapq.nsmallest(len(merge_list), merge_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n\n    # Convert the merged list back to a list of integers\n    sorted_list = [i for i in merged_list]\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists using heapq\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Merge the sorted lists into a single sorted list using heapq\n    result = []\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(result, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(result, heapq.heappop(num2))\n        else:\n            heapq.heappush(result, heapq.heappop(num3))\n\n    # If there are remaining elements in num1, num2, or num3, add them to result\n    if num1:\n        while num1:\n            heapq.heappush(result, heapq.heappop(num1))\n    if num2:\n        while num2:\n            heapq.heappush(result, heapq.heappop(num2))\n    if num3:\n        while num3:\n            heapq.heappush(result, heapq.heappop(num3))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Convert the merged list to a min heap\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract the sorted list from the min heap\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists\n    merged_list = []\n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                num1 = num1[1:]\n            else:\n                merged_list.append(num3[0])\n                num3 = num3[1:]\n        elif num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            num2 = num2[1:]\n        else:\n            merged_list.append(num3[0])\n            num3 = num3[1:]\n    # Add the remaining elements from the lists\n    merged_list += num1 + num2 + num3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the three lists into a single list\n    all_nums = num1 + num2 + num3\n\n    # Use a heap to sort the list in ascending order\n    min_heap = []\n    for num in all_nums:\n        heapq.heappush(min_heap, num)\n\n    # Combine the sorted list with the original three lists and return the result\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the three lists into one\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap from the merged list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n        \n    # Extract the minimum element from the heap and add it to a new list\n    result_list = []\n    while min_heap:\n        result_list.append(heapq.heappop(min_heap))\n        \n    return result_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    min_heap = [num1[0]]\n    \n    for i in range(1, len(num1)):\n        if num1[i] < min_heap[0]:\n            heapq.heappushpop(min_heap, num1[i])\n            \n    for num in num2:\n        if num < min_heap[0]:\n            heapq.heappushpop(min_heap, num)\n            \n    for num in num3:\n        if num < min_heap[0]:\n            heapq.heappushpop(min_heap, num)\n            \n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one list using heapq\n    heap = [num1[0]]\n    for i in range(1, len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(heap, num3[i])\n\n    # Extract the elements from the heap\n    merged_list = []\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Concatenate all three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap with the merged list\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n        \n    # Create a new sorted list by popping elements from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n        \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize a count variable to store the number of odd values\n    count = 0\n    \n    # Loop through each character in the binary string\n    for char in s:\n        # Convert the character to an integer\n        num = int(char)\n        \n        # If the integer is odd, increment the count variable\n        if num % 2!= 0:\n            count += 1\n    \n    # Return the count of odd values after rotating the binary string the given number of times\n    return (count + n) % 2"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        count += sum(int(i) for i in s)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Check if the binary string is valid\n    if len(s)!= len(bin(int(s, 2)+1)[2:]):\n        return \"Invalid binary string\"\n\n    # Calculate the total number of bits in the binary string\n    num_bits = len(s)\n\n    # Find the minimum number of rotations that will result in odd numbers\n    odd_rotations = 0\n    for i in range(n):\n        odd_rotations += num_bits\n\n    # Calculate the number of odd rotations that result in an odd number of ones in the binary string\n    odd_ones = 0\n    for i in range(num_bits):\n        if s[i] == '1':\n            odd_ones += 1\n\n    # Calculate the odd equivalent number of rotations\n    odd_equivalent = odd_rotations - (odd_ones // 2)\n\n    return odd_equivalent"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list of integers\n    binary_list = list(map(int, s))\n\n    # Count the number of odd numbers in the binary list\n    count = 0\n    for i in range(n):\n        for j in range(len(binary_list)):\n            if binary_list[j] % 2!= 0:\n                count += 1\n        binary_list = binary_list[1:] + [binary_list[0]]\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[0] == '1':\n            count += 1\n        s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the input string is valid\n    if not s.isalpha() or len(s) % 2!= 0:\n        return 'Invalid input'\n\n    # Check if the input number is valid\n    if not isinstance(n, int) or n < 1:\n        return 'Invalid input'\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate for n times\n    for i in range(n):\n        # Convert the string to a list of bits\n        bits = list(map(int, s))\n\n        # Rotate the bits by 1\n        bits.insert(0, bits.pop())\n\n        # Convert the list of bits back to a binary string\n        s = ''.join(map(str, bits))\n\n    # Iterate through the binary string and count the odd numbers\n    for bit in s:\n        if int(bit) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    - s: A binary string\n    - n: A positive integer\n\n    Returns:\n    - An integer representing the number of odd numbers in the rotated binary string after rotating n times.\n\n    \"\"\"\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Initialize the index variable to the length of the string\n    index = len(s)\n\n    # Loop n times\n    for i in range(n):\n\n        # Initialize the current character to the last character in the string\n        current = s[index-1]\n\n        # Loop through the string from the last character to the second last character\n        for j in range(index-2, -1, -1):\n\n            # If the current character is an odd number, increment the count variable\n            if int(current) % 2!= 0:\n                count += 1\n\n            # Update the current character to the next character in the string\n            current = s[j]\n\n        # Update the index variable to the second last character\n        index -= 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # split the binary string into a list of characters\n    bin_str = list(s)\n    \n    # iterate n times\n    for i in range(n):\n        \n        # reverse the list\n        bin_str.reverse()\n        \n        # if the first character is '0', append it to the end of the list\n        if bin_str[0] == '0':\n            bin_str.append(bin_str[0])\n        \n        # if the first character is '1', swap it with the second character and append the third character\n        elif bin_str[0] == '1':\n            bin_str[0], bin_str[1] = bin_str[1], bin_str[0]\n            bin_str.append(bin_str[2])\n    \n    # count the number of odd numbers in the list\n    count = 0\n    for i in bin_str:\n        if int(i) % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n        else:\n            s = s[1:] + s[0]\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Function to check if a binary string has an odd number of 1s\n    def count_odd(s):\n        count = 0\n        for i in s:\n            if i == '1':\n                count += 1\n        return count % 2\n\n    # Initialize variables to store the count and count of odd equivalents\n    count = 0\n    odd_count = 0\n\n    # Loop through the given number of rotations\n    for i in range(n):\n        # Check if the binary string is odd or even\n        if count_odd(s) == 0:\n            count += 1\n        else:\n            odd_count += 1\n\n        # Rotate the binary string\n        s = s[1:] + s[0]\n\n    # Return the count of odd equivalents\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Use a set to store unique elements in the first level of lists\n    set1 = set(nestedlist[0])\n\n    # Loop through the remaining levels of the nested list\n    for level in nestedlist[1:]:\n        # Use a set to store common elements in the current level\n        set2 = set()\n        for item in level:\n            if item in set1:\n                set2.add(item)\n        # Update the set1 with common elements\n        set1 = set2\n\n    # Return the common elements in the first level\n    return set1"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for item in nestedlist:\n        for subitem in item:\n            if subitem not in common_list:\n                common_list.append(subitem)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_set = set()\n\n    # Iterate over each nested list\n    for lst in nestedlist:\n        # Iterate over each element in the list\n        for elem in lst:\n            # Check if the element is already in the set\n            if elem in common_set:\n                # If it is, add it to the list of common elements\n                common_list.append(elem)\n            else:\n                # If it is not, add it to the set\n                common_set.add(elem)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for lst in nestedlist:\n        common_set.update(set(lst))\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store unique elements of all nested lists\n    unique_elements = set()\n    \n    # Iterate through all nested lists and add their elements to the set\n    for sublist in nestedlist:\n        unique_elements.update(sublist)\n    \n    # Convert the set back to a list and return it as the common elements\n    return list(unique_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the unique elements of the first list\n    unique_elements = set(nestedlist[0])\n    \n    # Iterate over the rest of the lists\n    for lst in nestedlist[1:]:\n        # Create a set to store the unique elements of the current list\n        current_elements = set(lst)\n        \n        # Find the intersection of the two sets\n        common_elements = current_elements.intersection(unique_elements)\n        \n        # Update the set of unique elements to be the intersection of the current and previous sets\n        unique_elements = common_elements\n    \n    # Convert the set back to a list\n    common_elements = list(unique_elements)\n    \n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty list to store common elements\n    common = []\n\n    # loop through the nested lists and compare each element\n    for i in nestedlist:\n        for j in i:\n            # if the element is already in the common list, skip it\n            if j in common:\n                continue\n            # if the element is not in the common list, append it\n            else:\n                common.append(j)\n\n    # return the common elements in the list\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    # remove any non-numeric characters from the input text\n    text = ''.join(c for c in text if c.isdigit())\n    # check if the text is a valid integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            for key in item:\n                if item[key]:\n                    return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Loop through each dictionary in the list\n    for dic in list1:\n        # If the dictionary is empty, return False\n        if not dic:\n            return False\n    # If all dictionaries are not empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    for d in list1:\n        if not d:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize a variable to store the sum of the list elements\n    total = 0\n    # Iterate through the list and add each element to the total variable\n    for num in nums_list:\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize the result to 0\n    result = 0\n    # loop through the tuple\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # add it to the result\n            result += num\n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty integer variable to store the sum\n    int_sum = 0\n    \n    # Iterate over each integer in the tuple\n    for num in nums:\n        # Convert the integer to a float and add it to the sum variable\n        int_sum += float(num)\n    \n    # Return the sum as an integer\n    return int(int_sum)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the tuple's elements\n    total = 0\n    # Loop through each element in the tuple\n    for num in nums:\n        # Add the current element to the total\n        total += num\n    # Return the total\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                if isinstance(test_list[i][j], (int, float)):\n                    test_list[i][j] = float(test_list[i][j])\n            except TypeError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Loop through each sub-list in the main list\n        for j in range(len(test_list[i])):\n            # Convert the element to a float if possible\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                sublist[sublist.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    for row in test_list:\n        for elem in row:\n            try:\n                elem = float(elem)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str) and element.strip().lower() in ['true', 'false']:\n                test_list.remove(sublist)\n                break"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n\n    Example:\n    test_list = [\n        ['1', '2', '3'],\n        [4, '5', 6.0],\n        ['7', '8', '9.1'],\n    ]\n    >>> list_to_float(test_list)\n    [\n        [1.0, 2.0, 3.0],\n        [4.0, 5.0, 6.0],\n        [7.0, 8.0, 9.1],\n    ]\n    \"\"\"\n    for inner_list in test_list:\n        for element in inner_list:\n            try:\n                element = float(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n            except ValueError:\n                try:\n                    float(str(item))\n                except ValueError:\n                    pass\n            else:\n                row[test_list.index(row)] = float(item)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        count = 1\n\n        # check if mid element is present more than once\n        for i in range(len(arr)):\n            if arr[i] == arr[mid]:\n                count += 1\n                if count == 2:\n                    return arr[mid]\n\n        # if element is present more than once, update the left pointer\n        if count == 1:\n            left = mid + 1\n        else:\n            right = mid\n\n    # if the element is not present in the array\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == arr[mid+1]:\n                left = mid + 2\n            elif arr[mid] < arr[mid+1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        # check if current element is equal to next element\n        if arr[i] == arr[i+1]:\n            # if it is, check if the next element appears only once\n            if i == n-2 or arr[i+2]!= arr[i+1]:\n                return arr[i]\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    # Initialize a dictionary to keep track of the count of each element in the array\n    count_dict = {}\n    \n    # Iterate through the array and update the count of each element in the dictionary\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Iterate through the array again and check if the count of each element is only 1\n    for num in arr:\n        if count_dict[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array and returns the element that appears only once.\n    '''\n    n = len(arr)\n    unique = arr[0]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == unique:\n            count += 1\n        else:\n            unique = arr[i]\n            count = 1\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Initialize two pointers, one starting from the first element and the other starting from the last element\n    i, j = 0, n-1\n    # Initialize a variable to store the element that appears only once in the sorted array\n    element = None\n    # Traverse the array from both the start and end until we find the element that appears only once\n    while i <= j:\n        # If the current element is equal to the previous element, we found the element that appears only once\n        if i < j and arr[i] == arr[j]:\n            # Check if the element that appears only once is the first or last element of the array\n            if i == 0:\n                # If the element that appears only once is the first element, we update the element variable to store it\n                element = arr[i]\n            elif j == n-1:\n                # If the element that appears only once is the last element, we update the element variable to store it\n                element = arr[j]\n            # We move the two pointers towards each other until we find the next element that appears only once\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            # If the current element is smaller than the next element, we move the pointer towards the end of the array\n            i += 1\n        else:\n            # If the current element is greater than the next element, we move the pointer towards the start of the array\n            j -= 1\n    # Return the element that appears only once in the sorted array\n    return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once\n    unique_element = None\n    \n    # Loop through the array\n    for num in arr:\n        # Check if the current element is already equal to the unique_element\n        if num == unique_element:\n            # If it is, return that element\n            return num\n        # If the current element is not equal to the unique_element, update unique_element to the current element\n        else:\n            unique_element = num\n    \n    # If the loop completes without finding the element that appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element\n    freq = {}\n    # iterate through the array\n    for element in arr:\n        # check if the element is already in the dictionary\n        if element in freq:\n            # if it is, decrement its frequency by 1\n            freq[element] -= 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[element] = 1\n    # iterate through the dictionary and return the first key-value pair where the frequency is 1\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            return arr[i]\n    return -1"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][1] - list1[j][1])\n            if diff > max_product:\n                max_product = diff\n                \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables for maximum product and minimum product\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Find the absolute difference between the product of the two numbers in the tuple and the maximum product so far\n        diff = abs(tup[0] * tup[1] - max_product)\n\n        # Update the maximum product and minimum product if the absolute difference is greater\n        if diff > max_product:\n            max_product = tup[0] * tup[1]\n            min_product = tup[0] * min(tup[1], 1)\n        elif diff > min_product:\n            min_product = min(tup[0], 1) * min(tup[1], 1)\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = -1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1] - list1[j][0]*list1[i][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i]*list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0]*list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_product = lst[i][0] * lst[j][1]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the maximum absolute product between numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = set()\n    for num in range(1, limit):\n        if num == sum_of_divisors(num):\n            amicable_numbers.add(num)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(num):\n    \"\"\"\n    Compute the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == sum(range(1, int(i**0.5)+1)):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(n):\n    sum_of_divisors = sum(i for i in range(1, int(n**0.5)+1) if n % i == 0)\n    return sum_of_divisors == n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize sum variable to 0\n    amicable_sum = 0\n\n    # iterate over all numbers from 1 to limit\n    for i in range(1, limit+1):\n\n        # check if number is amicable\n        if is_amicable(i):\n\n            # add to sum if number is amicable\n            amicable_sum += i\n\n    # return the sum of amicable numbers\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n\n    # initialize sum variable to 0\n    sum_of_squares = 0\n\n    # iterate over all numbers from 1 to the square root of num\n    for i in range(1, int(num**0.5)+1):\n\n        # check if num is divisible by i\n        if num % i == 0:\n\n            # if num is divisible by i, add the squares of both factors to sum_of_squares\n            sum_of_squares += i**2\n            sum_of_squares += num//i**2\n\n    # return True if num is amicable, False otherwise\n    return num == sum_of_squares"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    total = 0\n    # Check if the limit is odd\n    if limit % 2 == 1:\n        # Initialize the list of numbers that are amicable\n        amicable = []\n        # Check all numbers from 1 to the limit\n        for i in range(1, limit + 1):\n            # Check if the number is amicable\n            if i == amicable_number(i):\n                # Add the amicable number to the list\n                amicable.append(i)\n        # Sum up the amicable numbers\n        total = sum(amicable)\n    else:\n        # If the limit is even, sum up all odd numbers up to the limit\n        for i in range(1, limit + 1, 2):\n            total += i\n    return total\n\ndef amicable_number(num):\n    '''\n    Write a function to calculate the amicable number of a specified number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return None\n    # Initialize variables\n    result = 0\n    # Check all numbers from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is divisible by the current number\n        if num % i == 0:\n            # Check if the number is also divisible by the square root of the number\n            if i!= int(num ** 0.5) and num % int(num ** 0.5) == 0:\n                # Calculate the amicable number\n                result = num - i + i\n            # If the number is not divisible by both the current number and the square root of the number, check if the number is a perfect square\n            elif i * i == num:\n                # Calculate the amicable number\n                result = num + i\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_two_factors(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_two_factors(num):\n    \"\"\"\n    Calculate the sum of two factors of a given number.\n    \"\"\"\n    factors = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            factors.append(i)\n            factors.append(num//i)\n    return sum(factors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # list of all amicable numbers\n    amicable_numbers = []\n\n    # loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n\n        # check if the number is amicable\n        is_amicable = False\n\n        # loop through all numbers from 1 to i-1\n        for j in range(1, i):\n\n            # check if i and j form an amicable pair\n            if i == j + j:\n                is_amicable = True\n                break\n\n        # add the number to the amicable_numbers list if it is amicable\n        if is_amicable:\n            amicable_numbers.append(i)\n\n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    if num < 12:\n        return False\n    if num % 2 == 0:\n        return False\n    sum_of_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_of_divisors += i\n    return num == sum_of_divisors\n\ndef amicable_numbers_sum(limit):\n    count = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            count += num\n    return count"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            sum_amicable += i\n        # Check if the number is prime\n        elif is_prime(i):\n            sum_amicable += i\n        # Check if the number is composite\n        else:\n            pass\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    # Check if the number is divisible by any number from 1 to num-2\n    for i in range(1, num-1):\n        if (num % i == 0):\n            return False\n    return True\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit):\n        if i == 1:\n            continue\n        \n        if i == 2:\n            continue\n        \n        if i > 2:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    continue\n            elif i % 3 == 0:\n                continue\n            \n            if i > 2:\n                j = i\n                while j <= limit:\n                    if j == i:\n                        break\n                    elif j == 2 * i:\n                        amicable_sum += j\n                        break\n                    j += 1\n    \n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the modulus and the argument of the complex number\n    modulus = cmath.sqrt(a*a + b*b)\n    argument = cmath.phase(complex(a, b))\n    \n    # Calculate the angle in radians\n    angle_radians = argument / modulus\n    \n    return angle_radians"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    # Calculate the modulus and argument of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    argument = cmath.phase(a + b*1j)\n    \n    # Convert the argument to degrees\n    angle = argument / (2 * cmath.pi) * 360\n    \n    # Return the angle in degrees\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle*cmath.pi/180\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a.real**2 + a.imag**2)\n    \n    # Calculate the angle using the cmath module\n    angle_rad = cmath.phase(a/modulus)\n    \n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables to store the maximum difference and the current sub-string\n    max_diff = 0\n    sub_string = \"\"\n\n    # Iterate through each character in the binary string\n    for char in string: \n        # If the character is a 0, increment the count of 0s\n        if char == \"0\": \n            count = 0\n        # If the character is a 1, increment the count of 1s\n        else: \n            count = 1\n        # Calculate the difference between the current count and the count of 0s in the current sub-string\n        diff = abs(count - len(sub_string.count(\"0\")))\n        # Update the maximum difference if this difference is greater than the current maximum\n        if diff > max_diff: \n            max_diff = diff\n        # Add the current character to the sub-string\n        sub_string += char\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    # Initialize two counters for each sub-string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    # Iterate through the string and update the counters for each sub-string\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        # Calculate the difference between the counters and update the maximum difference if necessary\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n\n    # iterate through all possible sub-strings\n    for i in range(n):\n        for j in range(i, n):\n            # check if the length of the sub-string is at least 2\n            if j - i + 1 < 2:\n                continue\n\n            # count the number of 0s and 1s in the sub-string\n            count_0 = string[i:j+1].count('0')\n            count_1 = string[i:j+1].count('1')\n\n            # calculate the maximum difference between the number of 0s and 1s\n            diff = max(abs(count_0 - count_1), max_diff)\n\n            # update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize counters for 0s and 1s\n    count_0s = 0\n    count_1s = 0\n    \n    # Initialize maximum difference\n    max_diff = 0\n    \n    # Iterate over each character in the string\n    for char in string:\n        # Increment the counter for the current character\n        if char == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n            \n        # Update the maximum difference\n        diff = abs(count_0s - count_1s)\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        string (str): A binary string of length at most 10^6\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    \"\"\"\n    # Initialize variables to store the number of 0s and 1s in each sub-string\n    zero_count = []\n    one_count = []\n\n    # Iterate through each sub-string of the given binary string\n    for i in range(len(string) - 1):\n        # If the current sub-string has 0s and 1s, add it to the list of sub-strings\n        if string[i] == '0' and string[i+1] == '0':\n            zero_count.append(i)\n        elif string[i] == '1' and string[i+1] == '1':\n            one_count.append(i)\n\n    # Calculate the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string\n    max_diff = 0\n    for i in range(len(zero_count)):\n        for j in range(i+1, len(zero_count)):\n            # Calculate the difference between the number of 0s and number of 1s in the current sub-string\n            diff = abs(one_count[j] - one_count[i])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables to store the count of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through the string and count the number of 0s and 1s\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n    \n    # Initialize variables to store the maximum difference and the position of the maximum difference\n    max_diff = 0\n    max_index = 0\n    \n    # Loop through the string again to find the maximum difference between the count of 0s and 1s\n    for i in range(len(string)):\n        if i < len(string) - 1:\n            diff = 0\n            if string[i] == '0' and string[i+1] == '0':\n                diff += count_0\n            elif string[i] == '0' and string[i+1] == '1':\n                diff += count_0 + count_1\n            elif string[i] == '1' and string[i+1] == '0':\n                diff += count_1\n            else:\n                diff += count_1 + count_0\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i\n    \n    # Return the position of the maximum difference\n    return max_index"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = 1\n            while i+diff < length and string[i+diff] == '0':\n                diff += 1\n            while i+diff < length and string[i+diff] == '1':\n                diff += 1\n            max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev = None\n    curr = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            curr += 1\n        else:\n            curr = 0\n        if curr - prev > max_diff:\n            max_diff = curr - prev\n        prev = curr\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        ones = 0\n        zeros = 0\n\n        for j in range(i, n):\n            if string[j] == '1':\n                ones += 1\n            else:\n                zeros += 1\n\n            diff = ones - zeros\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a set of all possible divisors for a and b\n    divisors_a = set(divisor for divisor in range(1, a+1) if a % divisor == 0)\n    divisors_b = set(divisor for divisor in range(1, b+1) if b % divisor == 0)\n    # find the intersection of the two sets of divisors and return the sum\n    return sum(divisor for divisor in divisors_a if divisor in divisors_b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes in two numbers a and b, and returns their sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n\n    # Find all common divisors of a and b\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the GCD of the two numbers\n    gcd = abs(a*b)\n    # Finding the list of common divisors of the two numbers\n    divisors = []\n    for i in range(1, gcd):\n        if gcd % i == 0:\n            divisors.append(i)\n    # Finding the sum of common divisors\n    sum_divisors = 0\n    for i in range(1, b):\n        if b % i == 0 and a % i == 0:\n            sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    This function takes two integers as input and finds the sum of their common divisors.\n    '''\n    # This function uses the Euclidean algorithm to find the common divisors of two numbers.\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Using the gcd() function to find the common divisors of two numbers.\n    common_divisors = gcd(a, b)\n    if common_divisors == 1:\n        print(\"There are no common divisors.\")\n    else:\n        # Calculating the sum of the common divisors.\n        sum_of_common_divisors = sum(range(1, common_divisors + 1))\n        print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the list of common divisors of a and b\n    common_divisors = [d for d in range(1, min(a, b)+1) if a % d == 0 and b % d == 0]\n    # calculate the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, a):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Calculate the GCD of a and b\n    gcd = find_gcd(a, b)\n\n    # Initialize a variable to store the sum of common divisors of a and b\n    sum_of_common_divisors = 0\n\n    # Loop through all the numbers from 1 to the GCD and check if any of them divide both a and b evenly\n    for i in range(1, gcd+1):\n        if i % a == 0 and i % b == 0:\n            # If a divisor of both a and b is found, add it to the sum of common divisors\n            sum_of_common_divisors += i\n\n    return sum_of_common_divisors\n\n\ndef find_gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two given numbers using the Euclidean algorithm.\n    \"\"\"\n    # If b is zero, return a as the GCD\n    if b == 0:\n        return a\n\n    # Recursively find the GCD of b and the remainder of a divided by b\n    gcd = find_gcd(b, a % b)\n\n    return gcd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the common divisors of a and b\n    common = [x for x in range(1, min(a, b) + 1) if a % x == 0 and b % x == 0]\n    # sum the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    The function uses a helper function to find the common divisors of the two numbers.\n    '''\n    def common_divisors(num):\n        '''\n        This function takes a number as input and returns a list of its common divisors.\n        '''\n        divisors = []\n        for i in range(1,num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    def sum_of_divisors(a,b):\n        '''\n        This function takes two numbers a and b as input and returns their sum of their common divisors.\n        '''\n        c = common_divisors(a)\n        c.sort()\n        for i in range(1,b+1):\n            if i in c:\n                a += i\n        return a\n    \n    return sum_of_divisors(a,b)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        remainder = x % y\n        x = y\n        y = remainder\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # Split the string into a list of words\n    result = [] # Initialize an empty list to store the long words\n    \n    for word in words:\n        if len(word) > n: # Check if the length of the word is greater than n\n            result.append(word) # Append the word to the result list if it meets the condition\n    \n    return result # Return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    This function takes in a string and a number n as input. It then loops through the list of words and checks if each word is longer than n characters. If a word is longer than n characters, it prints the word.\n    '''\n    words = str.split()\n    for word in words:\n        if len(word) > n:\n            print(word)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n\n    Args:\n        n (int): The maximum length of words to consider.\n        words (list): The list of words to search.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    # Check if the row and column sums are equal\n    if row_sums == col_sums:\n        # Calculate the sum of the elements in the diagonal\n        diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n        # Check if the diagonal sum is equal to the sum of the matrix\n        if diagonal_sum == sum(sum(row) for row in my_matrix):\n            return True\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n    \n    # Calculate the sum of the right-hand side elements of the matrix\n    rhs_sum = sum([my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix))])\n    \n    return diagonal_sum == rhs_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n**2!= sum(sum(row) for row in my_matrix):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        row = my_matrix[i]\n        col = [row[j] for j in range(n)]\n        diagonal = [row[i] for i in range(n)]\n        if all(x == row[i] for x in row) and all(x == col[i] for x in col) and all(x == diagonal[i] for x in diagonal):\n            return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # calculate the sum of the non-diagonal elements\n    non_diagonal_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))) - diagonal_sum\n\n    # return True if the sum of the non-diagonal elements is equal to the sum of the diagonal elements\n    return non_diagonal_sum == diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # calculate the sum of all elements in the matrix\n    total = sum([sum(row) for row in my_matrix])\n    \n    # check whether the total is equal to the sum of the cubes of its elements\n    cube_sum = sum([x**3 for row in my_matrix for x in row])\n    if total == cube_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all elements in the matrix are unique\n    if len(my_matrix)!= len(set(my_matrix)):\n        return False\n    \n    # Check if the matrix is a magic square\n    square_size = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n    for i in range(square_size):\n        for j in range(square_size):\n            if my_matrix[i][j] + my_matrix[j][i] + my_matrix[square_size-1-i][square_size-1-j]!= magic_sum:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] == 0:\n                return False # not a magic square\n            magic_sum += my_matrix[i][j]\n    if magic_sum!= n**2:\n        return False # not a magic square\n    else:\n        return True # a magic square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the matrix elements\n    matrix_sum = sum(sum(row) for row in my_matrix)\n\n    # check if the sum is equal to the number of elements in the matrix\n    if matrix_sum == len(my_matrix) * len(my_matrix[0]):\n        # check if the matrix is a magic square\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix)):\n                if not (i - j == abs(i // 2 - j // 2) or i + j == abs(i // 2 - j // 2) or i - j == abs(i // 2 + j // 2) or i + j == abs(i // 2 + j // 2)):\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all the elements in the matrix are unique\n    unique_elements = set(sum(my_matrix, ()))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n\n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the diagonal sum is equal to the sum of the matrix elements\n    if diagonal_sum!= sum(sum(element) for row in my_matrix for element in row):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if each row and column has the same number of elements\n    for row in my_matrix:\n        if len(row)!= 3:\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(3):\n        row = my_matrix[i]\n        for j in range(3):\n            if row[j]!= j + 1:\n                return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_num = num\n            break\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_count = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    \n    # Iterate through the list and count the frequency of each item\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency\n    max_num = max(freq, key=freq.get)\n    \n    # Return the item with maximum frequency\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_item = key\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    max_item = None\n    for item, freq in count.items():\n        if freq == max_count:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_item = None\n    for num, freq in freq.items():\n        if freq == max_freq:\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_key = [key for key, value in freq.items() if value == max_freq]\n    return max_key[0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over each item in the list and update the frequency of that item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq_dict.values())\n    for key, value in freq_dict.items():\n        if value == max_freq:\n            return key"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels and char not in vowel_indices:\n            vowel_indices.append(i)\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if i in vowel_indices:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    return str1[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_set = set(vowels)\n    vowel_list = list(vowel_set)\n    vowel_list.reverse()\n    vowel_str = \"\".join(vowel_list)\n    rev_str = \"\"\n    for char in str1:\n        if char in vowel_set:\n            rev_str += vowel_str[vowel_list.index(char)]\n        else:\n            rev_str += char\n    return rev_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    result = []\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    str1 = [char for char in str1 if char not in vowels]\n    str1 = ''.join(str1)\n    return str1[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = str1.lower()\n    str1_list = list(str1)\n    vowels_list = list(vowels)\n    result = \"\"\n    for i in range(len(str1_list)-1, -1, -1):\n        if str1_list[i] not in vowels_list:\n            result += str1_list[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str = char.lower() + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string and return it\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup1:\n        string += str(item)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # initialize an empty string to store the tuple elements\n    s = ''\n    # loop through each element in the tuple\n    for i in tup1:\n        # add the element to the string\n        s += str(i)\n    # return the converted string\n    return s"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers of a list of numbers.\n\n    :param nums: a list of numbers\n    :return: the sum of the negative numbers in the list\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 6*a\n    for i in range(2, n+1):\n        c = 6*b - 6*a + i\n        print(c)\n        a = b\n        b = c"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        return (2 * n - 1) * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n) - 1) ** 2 + (3 * n) - 2\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += i*6\n    return hex_num\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('Input must be a positive integer.')\n    hex_num = (n * (2*n - 1)) / 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n-1))//2 \n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1] * len(nums))\n    count_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count[count_zeroes] += 1\n            count_zeroes += 1\n            \n    count_non_zeroes = sum(count) - count_zeroes\n    \n    return count_zeroes / count_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an array of zeros to store the count of zeroes\n    zero_count_arr = array('i', [0] * len(nums))\n\n    # Loop through the array and count the number of zeroes\n    for num in nums:\n        if num == 0:\n            zero_count_arr.itemset(nums.index(num), 1)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    for i in range(len(zero_count_arr)):\n        if zero_count_arr[i]!= 0:\n            ratio += zero_count_arr[i]\n\n    # Divide the ratio by the length of the array to get the decimal value of the ratio\n    ratio = ratio / len(zero_count_arr)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = non_zero_count / zero_count\n    print(\"Ratio of zeroes to non-zeroes:\", ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeros = 0\n    count_ones = 0\n    for num in nums:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_ones += 1\n    \n    if count_zeros == 0:\n        return \"There are no zeroes in the array.\"\n    else:\n        return (count_zeros/count_ones)*100"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list for easier manipulation\n    nums = list(nums)\n\n    # Initialize two counters to keep track of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the list and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return the result\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize two counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Loop through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    if non_zero_count!= 0:\n        ratio = float(zero_count) / float(non_zero_count)\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return non_zeros / zeros if zeros > 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            ones += 1\n            \n    if zeros == 0:\n        return 0\n    else:\n        return ones/zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n\n    # Convert the array to a list so we can easily count the zeros\n    lst = nums.tolist()\n\n    # Initialize variables to keep track of the non-zeroes and zeros\n    non_zeros = 0\n    zeros = 0\n\n    # Iterate through the list and count the non-zeroes and zeros\n    for num in lst:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    # Calculate the ratio of zeros to non-zeros\n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n\n    # Return the ratio of zeros to non-zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the array to an array of characters\n    arr = array('i', nums)\n    \n    # count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    # calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    if non_zero_count!= 0:\n        ratio = float(zero_count) / non_zero_count\n    \n    # return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize the sum variable to zero\n    sum_of_powers = 0\n\n    # loop through each bit of the given number\n    for i in range(32):\n        # if the current bit is a 1, add 2^i to the sum\n        if n & (1 << i):\n            sum_of_powers += 2**i\n\n        # if the sum is equal to the given number, then the number can be represented as sum of non-zero powers of 2\n        if sum_of_powers == n:\n            return True\n\n    # if the loop completes without finding a valid combination of bits, then the number cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    \n    for i in range(1, n+1): \n        if n == 2**i: \n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize a boolean variable to store the result\n    result = False\n    # loop through the digits of the number\n    for digit in str(n):\n        # check if the digit is 0\n        if int(digit) == 0:\n            # if it is 0, check if the previous number in the sequence is also 0\n            if n % 2 == 0:\n                result = True\n                break\n            # if it is not 0, check if the next number in the sequence is also 0\n            else:\n                if (n//2) % 2 == 0:\n                    result = True\n                    break\n    # return the result\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return False\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n        if n % (2*i) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Finding the sum of powers of 2 from 0 to n-1\n    powers_of_2_sum = 0\n    while n > 0:\n        powers_of_2_sum += 2**n\n        n -= 1\n\n    # Checking whether the sum of powers of 2 is equal to n\n    if n == powers_of_2_sum:\n        print(\"The number can be represented as sum of non-zero powers of 2\")\n    else:\n        print(\"The number cannot be represented as sum of non-zero powers of 2\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    # Check if n is a power of 2\n    power = 1\n    while power < n:\n        power *= 2\n    \n    if power == n:\n        return True\n    \n    # Check if the sum of powers of 2 is a power of 2\n    power = 1\n    while power * 2 <= n:\n        if power * 2 == n:\n            return True\n        n -= power * 2\n        power *= 2\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        n = -n\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the given number is 0\n    if n == 0: \n        return True\n    \n    # Check if the given number is 1\n    if n == 1: \n        return True\n    \n    # Check if the given number is odd\n    if n % 2!= 0: \n        return False\n    \n    # Calculate the sum of powers of 2 using binary exponentiation\n    def binary_pow(a, b):\n        if b == 0:\n            return 1\n        elif b % 2 == 0:\n            return binary_pow(a, b//2) * binary_pow(a, b//2)\n        else:\n            return a * binary_pow(a, b-1)\n    \n    # Check if the sum of powers of 2 is a perfect square or not\n    def is_perfect_square(num):\n        return (num >= 0) and (num == int(num**0.5)**2)\n    \n    # Calculate the sum of powers of 2\n    sum_of_powers_of_2 = binary_pow(2, n//2) * binary_pow(2, n//2)\n    \n    # Check if the sum of powers of 2 is a perfect square or not\n    if is_perfect_square(sum_of_powers_of_2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        # Find the power of 2 that divides n\n        power_of_two = 1\n        while power_of_two < n:\n            power_of_two *= 2\n        # Check if the number can be represented as sum of non-zero powers of 2\n        while power_of_two > 0:\n            if n % power_of_two == 0:\n                return False\n            power_of_two //= 2\n        return True"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r  # 2\u03c0r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to store the flattened numbers\n    flat_set = set()\n\n    # Loop through each list in the test_list\n    for item in test_list:\n\n        # Check if the item is a list\n        if isinstance(item, list):\n\n            # Recursively flatten the nested list\n            flat_set.update(extract_singly(item))\n\n        # Check if the item is a number\n        elif isinstance(item, (int, float)):\n\n            # Add the number to the flat_set\n            flat_set.add(item)\n\n    # Return the flattened set\n    return flat_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            result.append(element)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Loop through the list of lists\n    for sublist in test_list:\n        # Loop through the sublist\n        for item in sublist:\n            # If the item is a number, add it to the set of numbers\n            if isinstance(item, (int, float)):\n                set_of_numbers.add(item)\n    return set_of_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for sub_item in item:\n            flattened_list.append(sub_item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # initialize the length of the array\n    n = len(nums)\n\n    # loop through each layer\n    for i in range(n):\n        # find the largest index in the current layer\n        max_index = i\n\n        # loop through the rest of the array to find the largest index\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # swap the largest index with the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Initialize two pointers - i and j\n    for i in range(n-1):\n        # Initialize max_index to current index i\n        max_index = i\n        # Traverse the list from index i+1 to n-1 and find the maximum element\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with nums[i]\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n\n    Args:\n        nums (list): A list of integers to be sorted.\n\n    Returns:\n        list: The sorted list of integers.\n    '''\n\n    # Reverse the list in place\n    nums.reverse()\n\n    # Initialize the length of the list\n    length = len(nums)\n\n    # While the list is not sorted\n    while length > 1:\n\n        # Find the maximum element in the list\n        max_index = 0\n        for i in range(1, length):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Swap the maximum element with the first element\n        nums[0], nums[max_index] = nums[max_index], nums[0]\n\n        # Decrease the length of the list\n        length -= 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_pancake(nums, k):\n        '''\n        Helper function to sort the given pancake.\n        '''\n        for i in range(k, len(nums)):\n            if nums[i] < nums[k]:\n                nums[i], nums[k] = nums[k], nums[i]\n                k = i\n\n    n = len(nums)\n    for k in range(n, 0, -1):\n        sort_pancake(nums, k)\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        '''\n        Helper function to swap two elements in a list.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def reverse(nums, start, end):\n        '''\n        Helper function to reverse a sublist in a list.\n        '''\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    def pancake_sort_inner(nums):\n        '''\n        Recursive function to sort a sublist of a list.\n        '''\n        n = len(nums)\n        if n <= 1:\n            return nums\n\n        # Choose a random pivot index\n        pivot_index = random.randint(0, n - 1)\n        pivot = nums[pivot_index]\n        nums[pivot_index], nums[-1] = nums[-1], nums[pivot_index]\n\n        # Partition the list into smaller and larger sublists\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n\n        # Sort the smaller sublist and merge it with the larger sublist\n        pancake_sort_inner(left)\n        pancake_sort_inner(right)\n        nums = left + middle + right\n\n        return nums\n\n    # Call the pancake sort function on the list\n    pancake_sort_inner(nums)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n\n    # Initialize the swaps variable to track the number of swaps made during sorting\n    swaps = 0\n\n    # Initialize the remaining variable to the length of the list minus one\n    remaining = len(nums) - 1\n\n    # While there are still elements to sort\n    while remaining > 0:\n\n        # Initialize the largest element to the first element of the list\n        largest = nums[0]\n\n        # Find the index of the largest element in the remaining elements\n        for i in range(1, remaining + 1):\n            if nums[i] > largest:\n                largest = nums[i]\n                # Update the index of the largest element to the current index\n                largest_index = i\n\n        # Swap the largest element with the element at the end of the list\n        nums[0], nums[largest_index] = nums[largest_index], nums[0]\n\n        # Increment the swaps variable\n        swaps += 1\n\n        # Decrement the remaining variable\n        remaining -= 1\n\n    # Print the number of swaps made during sorting\n    print(f'Number of swaps: {swaps}')\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start sorting from the largest element\n    for i in range(n - 1, 0, -1):\n        # Find the position of the next element to swap with\n        j = 0\n        while j < i:\n            if nums[j] < nums[j+1]:\n                break\n            j += 1\n        # Swap the elements if they are in the wrong order\n        if j < i:\n            nums[j], nums[i] = nums[i], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the pancake\n    pancake = list(range(len(nums), -1, -1))\n\n    # Bubble sort the list\n    for i in range(len(pancake) - 1):\n        for j in range(len(pancake) - 1 - i):\n            if nums[pancake[j]] > nums[pancake[j+1]]:\n                # Swap the elements in the pancake\n                nums[pancake[j]], nums[pancake[j+1]] = nums[pancake[j+1]], nums[pancake[j]]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # reverse the list to ensure pancake sort algorithm works correctly\n    nums = nums[::-1]\n    # use a while loop to iterate through the list and swap elements until the list is sorted\n    while True:\n        swapped = False\n        # use a for loop to iterate through the list and check if the list is already sorted\n        for i in range(len(nums)-1):\n            # if the current element is greater than the next element, swap them and set the swapped flag\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        # if no swaps were made, the list is already sorted and the while loop can exit\n        if not swapped:\n            break\n    # reverse the sorted list to get the original order\n    return nums[::-1]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    # loop through each list to compare each pair\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[i]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = abs(arr[i+1] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Returns the maximum absolute difference between any two elements in the given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = 0\n    for i in range(1, len(arr)):\n        max_diff = max(max_diff, abs(arr[i] - arr[i-1]))\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the real and imaginary parts of the solution\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n        # Return the tuple (x1, x2)\n        return (x1, x2)\n    # Check if the discriminant is zero\n    elif disc == 0:\n        # Calculate the real part of the solution\n        x1 = (-b) / (2*a)\n        # Return the tuple (x1, x1)\n        return (x1, x1)\n    # Discriminant is negative, so no solution exists\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # check if the equation is valid\n    if a*n + b*n!= n:\n        return None\n    \n    # calculate the x and y values using the quadratic formula\n    discriminant = b*b - 4*a*n\n    \n    if discriminant < 0:\n        return None\n    \n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    if root1 > root2:\n        root1, root2 = root2, root1\n    \n    # check if the roots are valid\n    if root1 < 0 or root2 < 0:\n        return None\n    \n    return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if a*(n//i) + b*i == n:\n            return (i, n//i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n    \n    # find x and y such that ax + by = n\n    x = (-b + math.sqrt(b**2 - 4*a*n))/(2*a)\n    y = (-b - math.sqrt(b**2 - 4*a*n))/(2*a)\n    \n    # check if both x and y are integers\n    if not all(isinstance(xi, int) for xi in [x, y]):\n        return None\n    \n    # return the solution as a tuple\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Solve the equation for x\n    x = -b/a\n    if x % 1!= 0:\n        return None\n    \n    # Solve the equation for y\n    y = -(a*x + b)\n    if y % 1!= 0:\n        return None\n    \n    # Check if the equation is valid\n    if x*y - n % 1 == 0:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        return None\n    x = -n // b\n    y = a * x\n    if y == n:\n        return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    for x in range(-n, n+1):\n        for y in range(-n, n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation has two solutions\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None, None\n    else:\n        # Get the discriminant\n        discriminant = b**2 - 4*a*n\n        # Check if the equation has no real solutions\n        if discriminant < 0:\n            return None\n        # Check if the equation has one real solution\n        elif discriminant == 0:\n            x = -b/2/a\n            return x, x\n        # Check if the equation has two real solutions\n        else:\n            # Calculate the two roots\n            root1 = (-b + discriminant**0.5)/(2*a)\n            root2 = (-b - discriminant**0.5)/(2*a)\n            # Check if the roots are integers\n            if root1.is_integer() and root2.is_integer():\n                return int(root1), int(root2)\n            # If not, return the two roots as floats\n            else:\n                return float(root1), float(root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If the discriminant is less than zero, there is no solution\n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Sort the solutions in ascending order\n    x1, x2 = sorted((x1, x2))\n    \n    # Return the solution as a tuple\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the given equation is valid (a, b, n must be integers and a and b must be non-zero)\n    if not all(isinstance(x, int) and isinstance(y, int) for x in (a, b, n) and all(isinstance(i, int) and i > 0 for i in (a, b))):\n        return None\n\n    # Initialize the first solution as (1, 1)\n    x = 1\n    y = 1\n\n    # Use a loop to find the other solutions\n    while True:\n        # Check if the solution satisfies the given equation\n        if a * x + b * y == n:\n            return (x, y)\n\n        # Try the next solution\n        x = x + 1\n        y = y + 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the unique elements of list1\n    unique_list = []\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is not present in list2\n        if element not in list2:\n            # If it is not present, append it to unique_list\n            unique_list.append(element)\n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    i = 0\n    while n - i >= 0:\n        total += (n - 2 * i)\n        i += 1\n    return total\n\nn = 10\nprint(sum_series(n))  # Output: 250"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n//2) + n - 2*n//2 + 2*(n//2) - n\n    else:\n        return sum_series(n//2) + n - 2*n//2 + 2*(n//2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2 + 1):\n        sum_val += n - 2 * i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4) +... + sum_series(n-n+1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    i = 0\n    while n - 2*i >= 0:\n        series.append(n - 2*i)\n        i += 1\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum_n = 0\n    i = 0\n    while n - 2 * i >= 0:\n        sum_n += n - 2 * i\n        i += 1\n\n    return sum_n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    semi_perimeter = (s * l) / (2 * pi)\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # calculate the circumference of the polygon\n    circumference = 2*pi*s\n    # calculate the area of each side of the polygon\n    side_area = circumference/(4*tan(pi/l))\n    # calculate the total area of the polygon\n    for i in range(l):\n        area += side_area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\ndef perimeter_polygon(n, s):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the number of sides and side length.\n    '''\n    perimeter = n * s\n    return perimeter\n\ndef main():\n    # Test case for area_polygon() function\n    print(area_polygon(3, 4)) # Output: 6\n\n    # Test case for perimeter_polygon() function\n    print(perimeter_polygon(5, 3)) # Output: 15"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2*pi/l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert length to radians\n    angle = 360/l\n    # Calculate the length of each side\n    side_lengths = [s*tan(angle*i*pi/180) for i in range(l)]\n    # Calculate the area using Heron's formula\n    area = 0.5 * s * (side_lengths[0] + side_lengths[l-1])\n    for i in range(l-1):\n        area += side_lengths[i] * side_lengths[i+1]\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the circumference of the polygon\n    circumference = 2 * s * tan(pi / l)\n    \n    # calculate the area of the polygon using Heron's formula\n    area = (s * circumference) / 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        r = s/tan(pi/l)\n        area += r * (i+1)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    theta = pi/l\n    for i in range(l):\n        area += s*tan(i*theta)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l*i\n        area += s*(tan(angle)**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) * (math.tan(math.pi / l) ** 2)\n    area /= 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_list.append(i)\n            if n // i!= i:\n                divisor_list.append(n//i)\n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            divisor_list.append(i)\n            if n // i!= i:\n                divisor_list.append(n//i)\n\n    return divisor_list"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n\n    # check if the sum of the divisors is the same\n    return sum(divs) == n * (len(divs) + 1)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the input number is equal to the input number, and False otherwise.\n    '''\n\n    # First, calculate the sum of all divisors of the input number\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # Then, check if the sum is equal to the input number\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors \n    sum_div = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i == 0: \n            sum_div += i \n    for i in range(int(math.sqrt(n))+1, n): \n        if n%i == 0: \n            sum_div += i \n    # compare the sum with the square of the given number \n    if sum_div**2 == n: \n        return True\n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n \n    div_sum = sum(set(int(i) for i in str(n))) \n    # Calculate the sum of the divisors of n-1 \n    div_sum_minus1 = sum(set(int(i) for i in str(n-1))) \n    # If the sum of divisors of n and n-1 are equal, return True, otherwise False \n    return div_sum == div_sum_minus1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 1: \n        return False \n    div_sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n            if i!= n//i: \n                div_sum += n//i \n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # determine the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n\n    # calculate the sum of divisors\n    div_sum = 0\n    for d in divisors:\n        div_sum += d\n\n    # compare the sum of divisors with the original n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i)\n    return sum(divisors) == n * (n+1) // 2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num = n\n    divisor_sum = 0\n\n    for i in range(1, int(math.sqrt(num))+1):\n        if num % i == 0:\n            divisor_sum += i + num // i\n\n    return divisor_sum == num"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of \n    the two integers are the same, else False.\n    '''\n    div1 = []\n    div2 = []\n\n    # Finding the divisors of the given integer\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            div1.append(i)\n    if n > 1:\n        div1.append(n)\n\n    i = n\n    while i * i <= 2 * n:\n        if 2 * n % i:\n            i += 1\n        else:\n            n //= i\n            div2.append(i)\n    if n > 1:\n        div2.append(n)\n\n    # Converting the list of divisors to a set and comparing the sum of the sets\n    div1_set = set(div1)\n    div2_set = set(div2)\n    if div1_set == div2_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make the comparison case-insensitive\n        char = char.lower()\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the count of each character in the dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary\n    char_position_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not an alphabet, skip it\n        if not char.isalpha():\n            continue\n\n        # Calculate the index of the character in the English alphabet\n        index = ord(char) - ord('a')\n\n        # If the index is not in the dictionary, add it with a value of 1\n        if index not in char_position_dict:\n            char_position_dict[index] = 1\n        # If the index is already in the dictionary, increment its value by 1\n        else:\n            char_position_dict[index] += 1\n\n    # Return the dictionary\n    return char_position_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = {}\n    for char in alphabet:\n        result[char] = 0\n    for char in str1:\n        char = char.lower()\n        if char in alphabet:\n            result[char] += 1\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(26):\n        char = chr(i+97)\n        if char in str1:\n            count += str1.count(char)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower()[i] == str(i+97).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    result = {}\n    for i in range(len(alpha)):\n        count = str1.lower().count(alpha[i].lower())\n        result[alpha[i]] = count\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(e for e in str1 if e.lower() in 'abcdefghijklmnopqrstuvwxyz')\n\n    # Initialize an empty dictionary to store the count of each character at the same position in the English alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for i in range(len(str1)):\n        # Get the lowercase version of the current character\n        char = str1[i].lower()\n\n        # Check if the character already exists in the dictionary\n        if char in char_count:\n            # If it does, increment its count by 1\n            char_count[char] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # Print the result as a formatted string\n    result = '\\n'.join(['{}: {}'.format(key, value) for key, value in char_count.items()])\n    print(result)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i, char in enumerate(str1):\n        if char.lower() in char_dict:\n            char_dict[char.lower()] += 1\n        else:\n            char_dict[char.lower()] = 1\n    return char_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if english_alphabet[i].lower() in str1.lower():\n            count += str1.lower().count(english_alphabet[i].lower())\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    \n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise operations to find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the next power of 2 using bitwise operations\n    while n & (n-1)!= 0:\n        n = n | (n-1)\n    # Return the result\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as an input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # loop through all powers of 2 up to n\n    for i in range(1, n+1):\n        # check if the power is greater than or equal to n\n        if i >= n:\n            return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return 2 * next_power_of_2(n // 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    # find the next power of 2\n    while True:\n        n = n + 1\n        if n & (n - 1) == 0:\n            return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1): # while the least significant bit is 1\n        n = n | (n - 1) # set the least significant bit to 0\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the exponent to 1 and keep incrementing it until we find a power of 2 greater than or equal to n\n    exponent = 1\n    while 2**exponent < n:\n        exponent += 1\n\n    # Return the exponent that we found\n    return exponent"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the binary representation of n\n    bin_str = bin(n)[2:]\n\n    # Pad the binary string with leading zeros\n    while len(bin_str) < 32:\n        bin_str = \"0\" + bin_str\n\n    # Convert the binary string to an integer and return it\n    return int(bin_str, 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n = n // 2\n    return 2**ceil(log2(n))\n\ndef log2(x): \n    '''\n    Calculate the logarithm base 2 of a number.\n    '''\n    return int(log(x, 2))\n\nprint(next_power_of_2(10)) # Output: 16\nprint(next_power_of_2(13)) # Output: 256"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        # n is already a power of 2\n        return n\n\n    # calculate the next power of 2\n    i = 1\n    while i < n:\n        i <<= 1\n\n    return i"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Calculate the sum of numbers in the range\n    sum_range = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_range += list1[i]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            continue\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-1]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a * math.sin(math.pi/5)\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Find the perimeter of the pentagon using the formula:\n    # 5*a^2 = 5*a*sin(5*a/6) = 5*a*cos(5*a/6)\n    # and use the fact that cos(5*a/6) = 2/3 * (1 + sqrt(5)/2 * cos(5*a/6))\n    # where sqrt(5)/2 = 1.618033988749894848204586\n\n    b = math.cos(5*a/6) / (2/3)\n    c = 5*a*b\n\n    # Multiply by 5 to get the perimeter of the pentagon\n    perimeter = c * 5\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of each side of the pentagon\n    s = 5 * a / 4\n    \n    # Calculate the perimeter using the formula: 5 * a\n    p = 5 * a\n    \n    # Return the calculated perimeter\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon\n    semi_perimeter = 5 * a / 4\n    \n    # Calculate the area of the pentagon using the formula\n    area = (5 * semi_perimeter ** 2) / (22 * math.tan(math.pi / 5))\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    # Return the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the length of the sides of the pentagon\n    side_length = math.sqrt(3) / 2 * a\n\n    # Calculate the perimeter of the pentagon using Heron's formula\n    perimeter = 5 * side_length\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert the given length of side to radians and use the formula of a right-angled triangle\n    # to find the semi-perimeter of the pentagon\n    semi_perimeter = math.sqrt(5) * a\n    # Multiplying semi-perimeter by 5 to get the length of the pentagon\n    length = 5 * semi_perimeter\n    # Round the length of the pentagon to the nearest integer\n    pentagon_length = round(length)\n    # Use the formula of a right-angled triangle to find the area of the pentagon\n    area = (5 * a**2) / 2\n    # Multiply the area of the pentagon by 5 to get the perimeter of the pentagon\n    perimeter = pentagon_length * 5\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    This function takes a string as input and returns the number of times the substring'std' appears in the string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    pattern = r'std'\n    count = re.findall(pattern, s).count('std')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0]) # get the data type of the first element of the tuple\n    for element in test_tuple:\n        if type(element)!= data_type: # if the element has a different data type than the first element\n            return False # return False since data types do not match\n    return True # return True since all elements have the same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for element in test_tuple:\n        if not isinstance(element, type(test_tuple[0])):\n            types.append(type(element).__name__)\n            break\n    return types"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set() # set to store unique data types\n    \n    for element in test_tuple:\n        types.add(type(element))\n    \n    return len(types) == 1 # return True if all elements have the same data type, False otherwise"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(x) for x in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a variable to store the first element's data type\n    data_type = type(test_tuple[0])\n\n    # iterate over the tuple and check if all the elements have same data type as the first element\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    # if all the elements have same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = [type(x) for x in test_tuple]\n    unique_data_types = list(set(data_types))\n\n    if len(unique_data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for item in test_tuple:\n        type_list.append(type(item))\n    return type_list.count(type_list[0]) == len(type_list)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Initialize a variable to store the data type of first element in tuple\n    data_type = type(test_tuple[0])\n    # Loop through all the elements in tuple and check if their data type is same as the initial data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a counter to 0\n    count = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Check if the current element is equal to the x element\n        if arr[i] == x:\n            # Increment the counter if the element is equal to the x element\n            count += 1\n\n    # Calculate the percentage of the array that contains the x element\n    percentage = count/n * 100\n\n    # Check if the percentage of the array that contains the x element is greater than or equal to 50%\n    if percentage >= 50:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables\n    count = 0\n    majority_count = 0\n\n    # Loop through array and count occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # Check if x is the majority element\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    majority_count = 0\n\n    for i in arr:\n        if i == x:\n            count += 1\n        elif i < x:\n            count -= 1\n        elif i > x:\n            count += 1\n\n        if count == 0:\n            majority_count = 0\n        elif count > 0:\n            majority_count += 1\n\n    return majority_count >= n/2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer input `n` and returns the number of set bits in `n`.\n    A set bit is a binary digit with a value of 1.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    # initialize count variable\n    count = 0\n\n    # loop through each digit in the number\n    while n > 0:\n        # get the last digit\n        digit = n % 10\n\n        # check if the digit is 1\n        if digit == 1:\n            # increment the count variable\n            count += 1\n\n        # shift the number to the left by one digit\n        n = n // 10\n\n    # return the count of set bits\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n: \n        n &= (n-1) \n        count += 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list\n    lst = list(str)\n    # Loop through the list and remove the odd index values\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.pop(i)\n    # Convert the list to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes characters from the given string that have odd index values.\n    \"\"\"\n    # Convert the string to a list of characters\n    characters = list(string)\n\n    # Create an empty string to store the odd characters\n    odd_string = \"\"\n\n    # Iterate through the characters\n    for i in range(len(characters)):\n        # Check if the index of the character is odd\n        if i % 2!= 0:\n            # If the character is odd, add it to the odd_string\n            odd_string += characters[i]\n\n    # Return the odd_string\n    return odd_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.append(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n\n    :param n: an integer, represents the number of bits in the range.\n    :param l: an integer, represents the starting position of the range.\n    :param r: an integer, represents the ending position of the range.\n\n    :return: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n\n    # Checking if the range is valid or not\n    if l > r:\n        return False\n\n    # Convert the starting position to binary and check if all bits are set to 1\n    binary_l = bin(l)[2:].zfill(n)\n    if binary_l!= binary_l.replace('1', '0', n):\n        return False\n\n    # Convert the ending position to binary and check if all bits are set to 1\n    binary_r = bin(r)[2:].zfill(n)\n    if binary_r!= binary_r.replace('1', '0', n):\n        return False\n\n    # Check if all the bits are unset in the range\n    for i in range(n):\n        binary_l[i] = '0'\n        binary_r[i] = '0'\n        binary_diff = binary_l + binary_r\n        if binary_diff[i] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables\n    set_bits = 0\n    unset_bits = 0\n\n    # Loop through all bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is set\n        if n & (1 << i):\n            set_bits += 1\n        else:\n            unset_bits += 1\n\n    # Check if all bits are unset in the given range\n    if set_bits == 0 and unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a counter variable to count the unset bits\n    unset_bits = 0\n\n    # Check if all bits in the given range are set\n    for i in range(l, r+1):\n        # Get the binary representation of the current integer\n        binary_representation = bin(n)[2:]\n        # Check if the current bit is unset in the binary representation\n        if binary_representation[i-l] == '0':\n            # Increment the unset bits counter\n            unset_bits += 1\n            # If the unset bits counter reaches 0, return True\n            if unset_bits == 0:\n                return True\n    # If the unset bits counter is still greater than 0, return False\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    It takes three arguments - n, l, and r, where n is the integer number to be checked,\n    l is the lower limit of the range and r is the upper limit of the range.\n    \"\"\"\n    count = 0\n    for i in range(l, r+1):\n        count += n & 1\n        n >>= 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a counter variable to count the number of unset bits in the range\n    unset_bits_count = 0\n    # Iterate over all the bits in the range [l, r] and count the number of unset bits\n    for i in range(l, r+1):\n        # If the current bit is set, increment the unset_bits_count by 1\n        if n & (1 << i):\n            unset_bits_count += 1\n    # If the unset_bits_count is equal to 0, then all the bits are set in the given range\n    if unset_bits_count == 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through all the bits in the range\n    for i in range(l, r + 1):\n        # Check if the bit is set or not\n        if (n >> i) & 1 == 1:\n            # If the bit is set, the result is false\n            result = False\n            break\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the count of unset bits in the given range\n    count = 0\n    # Loop through the given range\n    for i in range(l, r+1):\n        # Check whether the current bit is set or unset\n        if n & (1 << i):\n            count += 1\n        else:\n            pass\n    # Check whether all the bits are unset in the given range or not\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable 'count' to store the count of unset bits in the given range\n    count = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(l, r+1):\n        # Check if the current bit is set or not\n        if (n >> i) & 1:\n            # If the current bit is set, increment the 'count' variable by 1\n            count += 1\n\n    # Return whether all the bits are unset in the given range or not\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits_set = True\n    for i in range(l, r+1):\n        if (n & (1 << i))!= 0:  # check if bit is set in n at position i\n            all_bits_set = False  # if any bit is set, return false\n            break\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize the result variable to True\n    result = True\n    \n    # Iterate through all the bits in the given range\n    for i in range(l, r+1):\n        \n        # If the current bit is not set in the given range\n        if not(n & (1 << i)):\n            \n            # Set the result to False and break out of the loop\n            result = False\n            break\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables\n    positive = []\n    negative = []\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the element is positive\n        if arr[i] > 0:\n            positive.append(arr[i])\n        # If the element is negative\n        else:\n            negative.append(arr[i])\n    \n    # Concatenate the positive and negative arrays\n    result = negative + positive\n    \n    # Return the re-arranged array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize variables to store the count of negative and positive elements\n    negative_count = 0\n    positive_count = 0\n\n    # Iterate over the array and count the occurrences of negative and positive elements\n    for num in arr:\n        if num < 0:\n            negative_count += 1\n        elif num > 0:\n            positive_count += 1\n\n    # Initialize variables to store the index of the first positive and first negative elements\n    first_positive = 0\n    first_negative = 0\n\n    # Iterate over the array again and swap the elements to preserve the relative order of negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            # Swap the negative element with the first negative element\n            arr[i], arr[first_negative] = arr[first_negative], arr[i]\n            # Increment the index of the first negative element\n            first_negative += 1\n        elif arr[i] > 0:\n            # Swap the positive element with the first positive element\n            arr[i], arr[first_positive] = arr[first_positive], arr[i]\n            # Increment the index of the first positive element\n            first_positive += 1\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a new array to hold the re-arranged elements\n    re_arr = []\n\n    # Loop through the original array\n    for i in range(n):\n        # If the current element is negative, add it to the re-arranged array\n        if arr[i] < 0:\n            re_arr.append(arr[i])\n        # Otherwise, if the current element is positive, add it to the re-arranged array\n        elif arr[i] > 0:\n            re_arr.append(arr[i])\n        # If the current element is neither positive nor negative, it cannot affect the relative order of elements\n        else:\n            continue\n\n    # Add the remaining elements to the re-arranged array\n    for i in range(n, len(arr)):\n        re_arr.append(arr[i])\n\n    # Return the re-arranged array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    neg_end = 0\n    pos_start = 0\n    \n    # Count negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Move negative elements to beginning of array\n    for i in range(n-neg_count):\n        if arr[i] < 0:\n            arr[i], arr[neg_end] = arr[neg_end], arr[i]\n            neg_end += 1\n    \n    # Move positive elements to end of array\n    for i in range(n-neg_count, n):\n        if arr[i] >= 0:\n            arr[i], arr[pos_start] = arr[pos_start], arr[i]\n            pos_start += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n. It re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved. The function returns the modified array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize three variables to keep track of the negative and positive elements, as well as their indices\n    negative = [0]*n\n    positive = [0]*n\n    neg_index = n\n    pos_index = n\n    \n    # Iterate through the sorted array\n    for i in range(len(arr)):\n        # If the element is negative, add it to the negative list and increment the negative index\n        if arr[i] < 0:\n            negative[neg_index] = arr[i]\n            neg_index += 1\n        # If the element is positive, add it to the positive list and increment the positive index\n        elif arr[i] > 0:\n            positive[pos_index] = arr[i]\n            pos_index += 1\n    \n    # Concatenate the negative and positive lists\n    combined = negative + positive\n    \n    # Reverse the combined list if n is greater than the length of the combined list\n    if n > len(combined):\n        combined = combined[::-1]\n    \n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one for positive and one for negative elements\n    pos_ptr = 0\n    neg_ptr = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is negative, move the negative pointer forward\n            neg_ptr += 1\n            # Check if the negative pointer is at the end of the array\n            if neg_ptr == n:\n                # If it is, move the negative pointer back to the beginning\n                neg_ptr = 0\n                # Move the positive pointer forward\n                pos_ptr += 1\n        # If the element is positive, move the positive pointer forward\n        else:\n            pos_ptr += 1\n            # Check if the positive pointer is at the end of the array\n            if pos_ptr == n:\n                # If it is, move the positive pointer back to the beginning\n                pos_ptr = 0\n                # Move the negative pointer forward\n                neg_ptr += 1\n\n    # Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # loop through the array and add elements to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # loop through the negative list and re-arrange the elements\n    for i in range(n):\n        arr[i] = neg_list[i]\n    \n    # loop through the positive list and add the remaining elements to the array\n    for i in range(n, len(arr)):\n        arr[i] = pos_list[i-n]\n    \n    # print the final array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two lists to store the positive and negative elements\n    pos = []\n    neg = []\n\n    # Loop through the array and separate the elements\n    for num in arr:\n        if num >= 0:\n            pos.append(num)\n        else:\n            neg.append(num)\n\n    # Loop through the negative list and sort it in descending order\n    neg.sort(reverse=True)\n\n    # Loop through the positive list and sort it in ascending order\n    pos.sort()\n\n    # Merge the negative and positive lists\n    result = neg + pos\n\n    # If n is greater than the length of the result, return the whole array\n    if n > len(result):\n        return arr\n\n    # Return the first n elements of the result\n    return result[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Move the negative elements to the beginning of the array, and the positive elements to the end\n    negative_index = 0\n    for i in range(neg_count):\n        if arr[negative_index] < 0:\n            arr[i], arr[negative_index] = arr[negative_index], arr[i]\n            negative_index += 1\n    \n    positive_index = neg_count\n    for i in range(neg_count, n+neg_count):\n        if arr[positive_index] > 0:\n            arr[i], arr[positive_index] = arr[positive_index], arr[i]\n            positive_index += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    positive_count = 0\n    negative_count = 0\n    \n    # Count the number of positive and negative elements\n    for num in arr[:n]:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    # If there are an odd number of negative elements, move one of them to the end of the array\n    if negative_count % 2 == 1:\n        arr[n-1], arr[negative_count-1] = arr[negative_count-1], arr[n-1]\n    \n    # Rearrange the array so that all negative elements appear before positive ones\n    for i in range(n-1):\n        if arr[i] < 0:\n            if i < positive_count:\n                # Move positive element to the front of the array\n                arr[i], arr[positive_count] = arr[positive_count], arr[i]\n                positive_count -= 1\n            else:\n                # Move negative element to the end of the array\n                arr[i], arr[n-1] = arr[n-1], arr[i]\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n and fill it with the elements of the input list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # Extract the top n elements of the heap and add them to the output list\n    output = []\n    while len(heap) > 0:\n        output.append(heapq.heappop(heap))\n        if len(heap) < n:\n            for i in range(len(heap), n):\n                heapq.heappush(heap, list1[i])\n\n    return output"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    if len(list1) < n:\n        raise ValueError(\"The length of the list must be greater than or equal to the value of n\")\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    # create a min heap with the n largest elements\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # return the list of the n largest elements from the heap\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n to store the n largest items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # Extract the n largest items from the heap and append them to a new list\n    larg_nums = []\n    for i in range(n):\n        larg_nums.append(heapq.heappop(heap))\n\n    return larg_nums"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n        \n    # extract the n largest items from the heap and append them to a new list\n    larg_list = []\n    while len(min_heap) > 0:\n        larg_list.append(-heapq.heappop(min_heap))\n        \n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    #create a min heap of size n\n    min_heap = []\n\n    #loop through the list and add each element to the min heap\n    for num in list1:\n        heapq.heappush(min_heap,num)\n\n        #if the size of the heap is greater than n, remove the smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    #convert the heap to a list and return it\n    return [x[0] for x in min_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap with initial capacity n\n    min_heap = [0] * n\n    for i in range(n):\n        heapq.heappushpop(min_heap, list1[i])\n\n    # Return the min heap\n    return min_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    '''\n    area = (2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2)/12\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurface = 2*(r**2)*h\n    return lateralsurface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14159265359)*(r**2)*(h/3)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula A = pi*r^2\n    area = 3.14*r**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r: radius of the cylinder (float)\n    h: height of the cylinder (float)\n    \n    Returns:\n    area: lateral surface area of the cylinder (float)\n    \"\"\"\n\n    # calculate the surface area of the cylinder\n    area = 2 * r * h\n\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # returning the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        n &= (n - 1) # clears the least significant bit set to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            even_bits <<= 1\n        else:\n            even_bits |= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n    # Iterate over each bit in n\n    for i in range(8):\n        # Check if the ith bit is 1 (even bit)\n        if n & (1 << i):\n            # Append the ith bit to the even_bits list\n            even_bits.append(i)\n    # Return the even_bits list as an integer\n    return int(''.join(str(x) for x in even_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            result |= 1 << (len(bin(n)[2:]) - int(bit))\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the resultant number\n    result = 0\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            result = result | (2 ** (len(bin(n)[2:]) - int(bit)))\n        # If the current bit is odd, leave it unchanged\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result \n    result = 0\n    \n    # Loop through each bit of the number\n    for i in range(32):\n        # Check if the ith bit is even\n        if (n & (1 << i)):\n            # Set the ith bit to 1 in the result\n            result |= (1 << i)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of n\n    even_bits = 0\n    \n    # Iterate through each bit of n\n    for i in range(8):\n        # If the bit is even, set its value to 1\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    \n    # Return the even bits of n\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n ^ (n >> 1)\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n: \n        even_bits = (even_bits << 1) | (n & 1) \n        n >>= 1 \n    return even_bits "
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the frequency of each tuple in the list\n    count = Counter(test_list)\n    # Use a dictionary to store the unique tuples and their frequency counts\n    freq_dict = {}\n    # Iterate through the Counter object and store the unique tuples and their frequency counts in the freq_dict dictionary\n    for tup, freq in count.items():\n        if tup not in freq_dict:\n            freq_dict[tup] = 0\n        freq_dict[tup] += freq\n    # Return the freq_dict dictionary\n    return freq_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    counts = {}\n    # iterate through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup not in counts:\n            # if not, add it to the dictionary with a count of 1\n            counts[tup] = 1\n        else:\n            # if it is, increment the count by 1\n            counts[tup] += 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use Counter() function from collections module to count occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of occurrences of each tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for item in test_list:\n        # Check if the tuple is already in the dictionary\n        if item in count_dict:\n            # If it is, increment the count\n            count_dict[item] += 1\n        else:\n            # If not, add the tuple and its count to the dictionary\n            count_dict[item] = 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a set of unique tuples\n    unique_tuples = set(test_list)\n    # create a Counter object from the set of unique tuples\n    count_dict = Counter(unique_tuples)\n    # convert the Counter object to a dictionary\n    count_dict_dict = count_dict.items()\n    # return the dictionary of counts\n    return dict(count_dict_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n\n    # Create a dictionary to store the results\n    results = {}\n\n    # Iterate over the Counter object and add the tuples as keys and their counts as values to the results dictionary\n    for key, value in counter.items():\n        results[key] = value\n\n    return results"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count by 1\n            count_dict[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary of unique tuple counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i:j+1].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    # Initialize a count variable to 0\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each character in the string again\n        for j in range(i+1, len(str)+1):\n            # Check if the substring is non-empty\n            if str[i:j]!= \"\":\n                # Increment the count variable by 1\n                count += 1\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i >= 2 and str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m):\n        prev_num = 0\n        curr_num = 2\n        while curr_num <= m:\n            if curr_num <= prev_num + 2 and curr_num <= m:\n                total_sequences += 1\n            prev_num = curr_num\n            curr_num += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the counter to 0\n    count = 0\n    \n    # Initialize a dictionary to store the elements of the sequence\n    sequence = {}\n    \n    # Loop through the numbers from 1 to m\n    for i in range(1, m+1):\n        \n        # If the current number is not already in the sequence dictionary\n        if i not in sequence:\n            \n            # Loop through the numbers from 1 to i-1\n            for j in range(1, i+1):\n                \n                # Check if the current number is greater than or equal to twice the previous element but less than or equal to m\n                if j >= 2*i and j <= m:\n                    \n                    # If it is, add it to the sequence dictionary and increment the counter\n                    sequence[j] = True\n                    count += 1\n                    \n    # Return the count of possible sequences of length n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        for i in range(len(sequence)):\n            if sequence[i] >= 2 * sequence[i - 1] and sequence[i] <= m:\n                continue\n            else:\n                return False\n        return True\n    \n    def count_valid_sequences(n):\n        count = 0\n        for i in range(2, m + 1):\n            for j in range(1, i // 2 + 1):\n                if i % j == 0:\n                    break\n            else:\n                count += 1\n        return count\n    \n    count = count_valid_sequences(n)\n    for i in range(2, m + 1):\n        if is_valid_sequence([i]):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the number of possible sequences to 0\n    num_sequences = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(n):\n        # Initialize the previous element to be 0\n        prev_element = 0\n\n        # Loop through all possible elements of length n+1\n        for j in range(n+1):\n            # Check if the current element is within the given range\n            if prev_element+2 <= m and prev_element+2 <= j and prev_element+2 <= i:\n                # If it is, increment the number of sequences\n                num_sequences += 1\n            \n            # Update the previous element\n            prev_element = j\n    \n    # Return the number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m + 1):\n        for j in range(2, n + 1):\n            if i + j <= m:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n    \n    # Iterate from m to 2\n    for i in range(m, 2, -1):\n        # Initialize the current sequence to i\n        current_sequence = [i]\n        \n        # Iterate from 2 to n\n        for j in range(2, n+1):\n            # Check if the next element is between i and m\n            if i <= m:\n                # If it is, append the next element to the sequence and append it to the total count\n                current_sequence.append(i)\n                count += 1\n            # If the next element is greater than m, check if it is between the next previous element and m\n            elif i > 2 * current_sequence[-1] <= m:\n                # If it is, append the next element to the sequence and append it to the total count\n                current_sequence.append(i)\n                count += 1\n        \n        # Check if the current sequence is sorted in ascending order\n        if current_sequence == sorted(current_sequence):\n            # If it is, increment the count by 1\n            count += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += (m // i) * (n // i) * ((i - 1) * (i - 1) + (m // i - 1) * (m // i - 1))\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, j, count):\n        if i == 0 or j == 0:\n            count += 1\n        elif i % 2 == 0 and j % 2 == 0:\n            if i + j > m and i + j <= 2 * j:\n                count += helper(i - 1, j - 1, count)\n        elif i % 2 == 1 and j % 2 == 1:\n            if i + j <= m and i + j > 2 * j:\n                count += helper(i - 1, j - 1, count)\n        return count\n\n    count = 0\n    for i in range(1, m + 1, 2):\n        for j in range(1, n + 1, 2):\n            count += helper(i, j, count)\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def get_previous_element(lst, i):\n        return lst[i - 1] if i > 0 else None\n\n    def get_next_element(lst, i):\n        return lst[i + 1] if i < len(lst) - 1 else None\n\n    def is_valid_sequence(lst, i):\n        prev = get_previous_element(lst, i)\n        next_ = get_next_element(lst, i)\n        return (\n            prev is not None\n            and next_ is not None\n            and prev >= 2 * next_\n            and prev <= m\n        )\n\n    def count_valid_sequences(lst, i, count):\n        if i == len(lst):\n            return count\n        if is_valid_sequence(lst, i):\n            count += 1\n        return count_valid_sequences(lst, i + 1, count)\n\n    return count_valid_sequences([], 0, 0)\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    def helper(i, j, k, count, seq):\n        if j == n:\n            count += 1\n        if i > 0 and seq[i - 1] + 2 * seq[i - 1] >= seq[j]:\n            helper(i - 1, j + 1, k, count, seq)\n            return helper(i, j + 1, k, count, seq)\n        elif k < m:\n            helper(i, j + 1, k + 1, count, seq)\n        return count\n\n    count = 0\n    seq = [0] * n\n    return helper(n - 1, 0, 0, count, seq)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) == 0:\n        return list1\n    else:\n        list1[-1] = list2.pop(0)\n        return replace_list(list1, list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # append all the elements of the second list to the first list\n    list1.extend(list2)\n    # pop the last element of the first list\n    list1.pop()\n    # return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the list1\n    length = len(list1)\n    \n    # Replace the last element of the list1 with the elements of the list2\n    list1[length-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # get the length of the first list\n    length = len(list1)\n    \n    # set the last element of the first list to the elements of the second list\n    list1[-1] = list2\n    \n    # return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Create a new list to hold the modified elements\n    modified_list = []\n    # Loop through the first list and add each element to the new list\n    for element in list1:\n        modified_list.append(element)\n    # Loop through the second list and add each element to the new list\n    for element in list2:\n        modified_list.append(element)\n    # Remove the last element from the modified list\n    modified_list.pop()\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Loop through the list1 and add the last element of list2 to the first list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i].extend(list2[-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Reverse the second list\n    list2.reverse()\n    # Reverse the first list and join it with the second list\n    list1[-1] = list2.pop()\n    # Reverse the reversed first list\n    list1.reverse()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_square(n):\n        return n == int(n ** 0.5) ** 2\n\n    def next_square(n):\n        if is_prime(n):\n            return n\n        else:\n            while True:\n                n += 1\n                if is_square(n):\n                    return n\n\n    current_square = int(N ** 0.5) ** 2\n    if current_square == N:\n        return current_square\n\n    while True:\n        current_square += 1\n        if current_square > N:\n            return current_square\n        elif is_square(current_square):\n            return current_square\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N as input and returns the next perfect square greater than N.\n    \"\"\"\n    if N == 0:\n        return 1\n    \n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # If sqrt_N is an integer, then sqrt_N+1 is a perfect square\n    if sqrt_N.is_integer():\n        return int(sqrt_N) + 1\n    \n    # Otherwise, sqrt_N+1 is not a perfect square\n    else:\n        return int(math.ceil(sqrt_N+1))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert input number to integer\n    N = int(N)\n    # Initialize next perfect square\n    next_square = N * N\n    \n    # Loop until the next perfect square is greater than N\n    while next_square <= N:\n        # Check if the next perfect square is a perfect square\n        if math.isqrt(next_square) ** 2 == next_square:\n            # If it is, return the next perfect square\n            return next_square\n        # If not, increment the next perfect square by 1\n        next_square += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than the input number.\n    '''\n    sqrt_N = math.sqrt(N)\n    sqrt_N += 1\n    \n    if sqrt_N ** 2 == N:\n        return sqrt_N\n    \n    else:\n        return next_Perfect_Square(sqrt_N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 1:\n        return 1\n\n    sqrt_N = int(math.sqrt(N))\n    i = sqrt_N\n    while i * i < N:\n        i += 1\n\n    if i * i == N:\n        return i + 1\n\n    return i * i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n    \n    next_square = 1\n    while True:\n        if is_prime(next_square):\n            break\n        next_square += 1\n    \n    if is_prime(next_square):\n        return next_prime(next_square)\n    else:\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is already a perfect square\n    if N >= 0 and math.sqrt(N) == int(math.sqrt(N)):\n        # Find the next perfect square greater than N\n        next_sq = N\n        while next_sq < 0:\n            next_sq += 1\n        while math.sqrt(next_sq)!= int(math.sqrt(next_sq)):\n            next_sq += 1\n        return next_sq\n    else:\n        # Return the original number if it is not a perfect square\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_perfect_square(num):\n    return num == int(num**0.5) ** 2\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if is_perfect_square(N):\n        return N\n    else:\n        N += 1\n        while not is_perfect_square(N):\n            N += 1\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N < 1:\n        raise ValueError(\"Input must be greater than 0\")\n    \n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # Find the next integer greater than sqrt_N\n    next_int = sqrt_N + 1\n    \n    # Find the square of the next integer\n    next_int_squared = next_int**2\n    \n    # If the square of the next integer is greater than N, then the next perfect square is sqrt_N+1\n    if next_int_squared > N:\n        return sqrt_N+1\n    \n    # Otherwise, find the smallest integer greater than sqrt_N that is also a perfect square\n    while next_int**2 < N:\n        next_int += 1\n    \n    return next_int"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = int(math.sqrt(N))\n    while True:\n        n += 1\n        if math.isqrt(n * n) == math.isqrt(N):\n            return n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n    \n    # Initialize the maximum sum and variables for the subsequence\n    max_sum = arr[0]\n    start = 0\n    end = 1\n    \n    # Loop through the array, comparing the current element to the next element\n    for i in range(1, len(arr)-1):\n        if arr[i] < arr[i+1]:\n            # If the current element is less than the next element, swap them\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        elif arr[i] > arr[i+1]:\n            # If the current element is greater than the next element, update the maximum sum and move the start index\n            max_sum = max(max_sum, arr[i] + arr[i+1])\n            start = i + 1\n            end = i + 2\n            \n    # If the last element is less than the next element, swap them\n    if arr[-1] < arr[-2]:\n        arr[-1], arr[-2] = arr[-2], arr[-1]\n        \n    # Update the maximum sum and return it\n    max_sum = max(max_sum, arr[-1] + arr[-2])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array. \n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Check if the array is empty or has only one element\n    if n == 0 or n == 1:\n        return arr[0]\n    # Find the first increasing subsequence\n    increasing_subseq = find_increasing_subseq(arr)\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(len(increasing_subseq)-1):\n        subseq_sum = sum(increasing_subseq[i:i+2])\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n    return max_sum\n\ndef find_increasing_subseq(arr):\n    \"\"\"\n    This function finds the increasing subsequence of the given array.\n    \"\"\"\n    n = len(arr)\n    increasing_subseq = []\n    # Initialize the increasing subsequence with the first element\n    increasing_subseq.append(arr[0])\n    # Initialize the index of the first element in the increasing subsequence\n    first_index = 0\n    # Loop through the remaining elements in the array\n    for i in range(1, n):\n        # If the current element is greater than the last element in the increasing subsequence\n        if arr[i] > increasing_subseq[first_index]:\n            # Add the current element to the increasing subsequence\n            increasing_subseq.append(arr[i])\n            # Move the index of the first element in the increasing subsequence to the current index\n            first_index = i\n    return increasing_subseq"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Check if all the elements are increasing or decreasing\n    is_increasing = arr[1] < arr[0]\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            is_increasing = False\n            break\n        elif arr[i] > arr[i-1]:\n            is_increasing = True\n            break\n    \n    # If all the elements are increasing or decreasing, return 0\n    if is_increasing:\n        return 0\n    \n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = 0\n    start_decreasing = 0\n    for i in range(2, n):\n        if arr[i] < arr[i-1]:\n            if i - start_decreasing > 1:\n                max_sum_decreasing = max(max_sum_decreasing, arr[i] - arr[start_decreasing-1])\n            start_decreasing = i\n    \n    # Find the maximum sum of an increasing subsequence\n    max_sum_increasing = 0\n    start_increasing = 0\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            if i - start_increasing > 1:\n                max_sum_increasing = max(max_sum_increasing, arr[i] - arr[start_increasing-1])\n            start_increasing = i\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum_bitonic = max(max_sum_increasing, max_sum_decreasing)\n    \n    return max_sum_bitonic"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        raise ValueError(\"The array must have at least 3 elements\")\n\n    # Initialize variables to keep track of the maximum sum and the current subsequence\n    max_sum_so_far = arr[0]\n    current_sum = arr[0]\n\n    # Iterate through the array, starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is greater than the previous element, add it to the current_sum, otherwise subtract it from the current_sum\n        if arr[i] > arr[i - 1]:\n            current_sum += arr[i]\n        else:\n            current_sum -= arr[i - 1]\n\n        # Update the maximum sum if the current_sum becomes greater\n        if current_sum > max_sum_so_far:\n            max_sum_so_far = current_sum\n\n    return max_sum_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    sum_left = 0\n    sum_right = 0\n    max_sum = float('-inf')\n\n    # Iterate through the array\n    for num in arr:\n\n        # If the number is less than the leftmost element, it must be part of the increasing subsequence, so add it to the sum\n        if num < arr[0]:\n            sum_left += num\n\n        # If the number is greater than the rightmost element, it must be part of the decreasing subsequence, so subtract it from the sum\n        elif num > arr[-1]:\n            sum_right -= num\n\n        # If the number is between the leftmost and rightmost elements, it must be part of the increasing and decreasing subsequence, so add it to the sum\n        else:\n            sum_left += num\n            sum_right -= num\n\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\n        if sum_left > sum_right and sum_left > max_sum:\n            max_sum = sum_left\n\n        elif sum_right > sum_left and sum_right > max_sum:\n            max_sum = sum_right\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for the sum and the left sum\n    max_sum = arr[0]\n    left_sum = arr[0]\n\n    # Traverse through the array\n    for i in range(1, len(arr)):\n\n        # Check if the current element is decreasing\n        if arr[i] > arr[i-1]:\n\n            # If yes, update the left sum\n            left_sum += arr[i]\n\n            # If not, update the maximum sum\n            else:\n\n                # If the current left sum is greater than the maximum sum, update the maximum sum\n                if left_sum > max_sum:\n                    max_sum = left_sum\n\n                # Reset the left sum\n                left_sum = arr[i]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(n-i-1):\n            curr_sum = arr[j] + arr[j+i+1]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is decreasing, subtract it from the current sum\n        if arr[i] > arr[i-1]:\n            curr_sum -= arr[i-1]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + arr[i]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1])\n    return max(dp[n-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n\n    # Find the indices of the first and last elements of the subsequence\n    # that are increasing or decreasing\n    i = 0\n    while i < n and arr[i] <= arr[i + 1]:\n        i += 1\n    j = n - 1\n    while j >= 0 and arr[j] >= arr[j - 1]:\n        j -= 1\n\n    # If the subsequence is not bitonic, return 0\n    if i == j:\n        return 0\n\n    # Find the sum of the subsequence\n    sum_subseq = sum(arr[i:j + 1])\n\n    # Initialize the maximum sum of any subsequence\n    max_sum_subseq = sum_subseq\n\n    # Iterate over all possible subsequences of increasing length\n    for k in range(i, j + 1):\n        # Find the sum of the subsequence of length k\n        sum_subseq = sum(arr[i:i + k])\n\n        # If the sum of the subsequence is greater than the maximum sum of any subsequence, update the maximum sum\n        if sum_subseq > max_sum_subseq:\n            max_sum_subseq = sum_subseq\n\n    return max_sum_subseq"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1.0\n    prev_guess = 0.0\n    tolerance = 1.0e-6\n\n    while abs(guess*guess - number) > tolerance:\n        prev_guess = guess\n        guess = (guess + number/guess)/2.0\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    previous_guess = 0\n    iterations = 0\n    while abs(guess * guess - number) > 0.0001 and iterations < 100:\n        iterations += 1\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n    if iterations == 100:\n        raise ValueError(\"Maximum number of iterations exceeded.\")\n    else:\n        return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    # check if number is negative or zero\n    if number < 0 or number == 0:\n        return None\n    \n    # initialize variables\n    guess = 1\n    prev_guess = 0\n    i = 0\n    \n    # iterate until the difference between the guesses is less than or equal to a tolerance\n    while abs(guess*guess - number) > 0.001:\n        # update guess and previous guess\n        guess = (guess + number/guess) / 2\n        prev_guess = guess\n        \n        # increment iteration counter\n        i += 1\n    \n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_bound = 0\n    upper_bound = number\n    while True:\n        mid = (lower_bound + upper_bound) / 2\n        if mid**2 == number:\n            return mid\n        elif mid**2 < number:\n            lower_bound = mid\n        else:\n            upper_bound = mid"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    while low <= high:\n        mid = (low + high) // 2\n        guess = mid ** 2\n        if guess == number:\n            return mid\n        elif guess < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(guess - next_guess) < 0.0001:\n            return guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize a few variables\n    guess = number / 2\n    tolerance = 1e-6\n\n    # Main loop\n    while abs(guess**2 - number) > tolerance:\n        guess = (guess + number / guess) / 2\n\n    # Return the result\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    guess = (low + high) / 2\n    while abs(guess**2 - number) > 0.00001:\n        if guess**2 < number:\n            low = guess\n        else:\n            high = guess\n        guess = (low + high) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5\n    while True:\n        next_guess = guess - (guess**2 - number) / (2 * guess)\n        if abs(next_guess - guess) < 0.00001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10\n    current_guess = number / 2\n    while abs(current_guess**2 - number) > epsilon:\n        current_guess = (current_guess + number / current_guess) / 2\n    return current_guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Returns True if the given string is a palindrome, else False.\n    \"\"\"\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\ndef lps(str):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables\n    max_length = 1\n    start_index = 0\n\n    # Check for empty string\n    if not str:\n        return 0\n\n    # Check for single character string\n    if len(str) == 1:\n        return 1\n\n    # Initialize the table\n    table = [[0] * (len(str)) for i in range(len(str) + 1)]\n\n    # Fill the table\n    for i in range(len(str)):\n        if str[i] == str[i]:\n            table[i + 1][i] = 1\n        else:\n            table[i + 1][i] = 0\n\n    # Find the maximum length\n    for length in range(2, len(str) + 1):\n        for i in range(len(str) - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i + 1][j + 1] = table[i][j] + 2\n            else:\n                table[i + 1][j + 1] = max(table[i + 1][j], table[i][j + 1])\n\n            # Update the maximum length and start index\n            if table[i + 1][j + 1] > max_length:\n                max_length = table[i + 1][j + 1]\n                start_index = i\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    max_length = 1\n    start = 0\n    max_length_start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j] and (j - i + 1 > max_length):\n                max_length = j - i + 1\n                start = i\n                max_length_start = j\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            dp[i] = 2 + dp[i-1]\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n    return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    n = len(s)\n    # create a table to store the length of longest palindromic subsequence ending at each index\n    table = [0] * n\n    # initialize the length of the longest palindromic subsequence ending at index 0 as 1\n    table[0] = 1\n    # find the length of longest palindromic subsequence ending at index i\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            table[i] = 2 + table[i-2]\n        else:\n            table[i] = max(table[i-1], table[i-2])\n    # find the length of the longest palindromic subsequence ending at index n-1\n    max_len = table[n-1]\n    # find the starting index of the longest palindromic subsequence ending at index n-1\n    start_index = n-2\n    # traverse the table backwards to find the starting index of the longest palindromic subsequence\n    while start_index >= 0 and s[start_index]!= s[start_index+max_len]:\n        start_index -= 1\n    return max_len, start_index+1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize a 2D array to store the lengths of palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n    # Initialize all substrings of length 1 as palindromic\n    for i in range(n):\n        dp[i][i] = 1\n    # Iterate over all substrings of length 2 to n\n    for length in range(2, n + 1):\n        # Iterate over all substrings of length 'length'\n        for start in range(n - length + 1):\n            end = start + length - 1\n            # If the substring is a palindrome, check if its reverse is also a palindrome\n            if s[start] == s[end]:\n                dp[start][end] = 2 + dp[start + 1][end - 1]\n            # If the substring is not a palindrome, check if the substring around it is also a palindrome\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a dictionary to store the length of palindromic subsequences\n    palindrome_dict = {}\n\n    # Iterate through the string\n    for i in range(len(str)):\n        # For each character in the string, calculate the palindromic subsequences\n        # that can be formed by adding the character to both ends of the string\n        palindrome = str[i] + str[i+1:]\n        palindrome_dict[palindrome] = 2\n\n        # If the reversed palindrome exists in the dictionary, add 2 to the length of the palindromic subsequence\n        if palindrome[::-1] in palindrome_dict:\n            palindrome_dict[palindrome] += palindrome_dict[palindrome[::-1]]\n\n        # If the palindromic subsequence is longer than the current longest palindromic subsequence, update the value\n        if palindrome_dict[palindrome] > palindrome_dict[longest_palindrome]:\n            longest_palindrome = palindrome\n            longest_palindrome_length = palindrome_dict[palindrome]\n\n    return longest_palindrome_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Longest palindromic subsequence ending at index i\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    n = len(s)\n    # Initialize two variables for storing the lengths of longest palindromic subsequences for odd and even lengths respectively\n    lpsodd = [1] * n\n    lpseven = [1] * n\n\n    # Compute the length of longest palindromic subsequence for odd and even lengths respectively\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lpsodd[i] = lpsodd[i-1] + 2\n        else:\n            lpsodd[i] = max(lpsodd[i-1], lpsodd[i-2])\n\n    for i in range(n-2, -1, -1):\n        if i == n-1 or i == n-2 and s[i] == s[i+1]:\n            lpseven[i] = lpsodd[i] + 2\n        else:\n            lpseven[i] = max(lpseven[i+1], lpseven[i+2])\n\n    # Find the length of the longest palindromic subsequence in the given string\n    maxlps = max(lpsodd[0], lpseven[0])\n\n    # Return the length of the longest palindromic subsequence\n    return maxlps"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n\n    # Initialize two pointers, one starting from the beginning of the string and one starting from the end of the string\n    left, right = 0, len(s) - 1\n\n    # Initialize a variable to store the length of the longest palindromic subsequence found so far\n    max_len = 1\n\n    # Loop through each character of the string\n    while left < right:\n\n        # If the current character at the left pointer is the same as the current character at the right pointer,\n        # we have found a palindromic subsequence of length 2. Update the length of the longest palindromic subsequence found so far.\n        if s[left] == s[right]:\n            max_len = 2\n            left += 1\n            right -= 1\n\n        # If the current character at the left pointer is not the same as the current character at the right pointer,\n        # we have found a palindromic subsequence of length 1 or greater. Update the length of the longest palindromic subsequence found so far.\n        else:\n            # If the current character at the left pointer is greater than the current character at the right pointer,\n            # we can extend the left pointer to the right to form a longer palindromic subsequence.\n            if s[left] > s[right]:\n                max_len = max(max_len, right - left + 1)\n                left += 1\n\n            # If the current character at the left pointer is less than the current character at the right pointer,\n            # we can extend the right pointer to the left to form a longer palindromic subsequence.\n            else:\n                max_len = max(max_len, right - left + 1)\n                right -= 1\n\n    # Return the length of the longest palindromic subsequence found\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n+1):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the harmonic sum variable to 0\n    harmonic_sum = 0\n    # Loop through each number from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic sum of the current number\n        harmonic_sum += 1/i\n    # Return the harmonic sum of n-1\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1/i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/(i+1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set to store the common elements of the two arrays\n    common = set(array_nums1) & set(array_nums2)\n    # create an empty list to store the intersection of the two arrays\n    intersection = []\n    # iterate through the common elements of the two arrays\n    for element in common:\n        # if the element is present in both arrays, add it to the intersection list\n        if element in array_nums1 and element in array_nums2:\n            intersection.append(element)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store unique elements of the second array\n    unique_set = set(array_nums2)\n    \n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n    \n    # Iterate through the first array\n    for num in array_nums1:\n        # Check if the number is present in the unique set\n        if num in unique_set:\n            # Add the number to the intersection set\n            intersection.add(num)\n    \n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # Create two dictionaries to store the frequency of elements in the arrays\n    freq1 = {}\n    freq2 = {}\n\n    # Iterate through the first array and update the frequency dictionary\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Iterate through the second array and update the frequency dictionary\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Find the intersection of the two dictionaries by iterating through the first dictionary and checking if\n    # the corresponding key exists in the second dictionary\n    intersection = []\n    for key in freq1:\n        if key in freq2 and freq1[key] == freq2[key]:\n            intersection.append(key)\n\n    # Return the intersection as a sorted list\n    return sorted(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common_nums = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to eliminate duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input, and returns a new array that contains the elements that are present in both arrays.\n\n    Args:\n        array_nums1 (list): A list of integers.\n        array_nums2 (list): A list of integers.\n\n    Returns:\n        list: A new list containing the elements that are present in both arrays.\n    \"\"\"\n    # Create a set of the elements in array_nums2 to remove duplicates\n    array_nums2_set = set(array_nums2)\n    # Create a new empty list to store the intersection\n    intersection_list = []\n    # Iterate through array_nums1 and check if each element is also in array_nums2_set\n    for num in array_nums1:\n        if num in array_nums2_set:\n            intersection_list.append(num)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize empty sets for storing the intersection\n    intersection = set()\n    # Initialize two pointers for iterating over the arrays\n    i = j = 0\n    # Loop until one of the pointers reaches the end of the array\n    while i < len(array_nums1) and j < len(array_nums2):\n        # If the current element of array_nums1 is smaller than the current element of array_nums2\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        # If the current element of array_nums1 is greater than the current element of array_nums2\n        else:\n            j += 1\n        # If the current element of array_nums1 is equal to the current element of array_nums2\n        while i < len(array_nums1) and j < len(array_nums2) and array_nums1[i] == array_nums2[j]:\n            intersection.add(array_nums1[i])\n            i += 1\n            j += 1\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    count = 0\n    for elem in tup: \n        if elem == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n\n    # Create a new empty list to store the modified elements\n    modified_list = []\n\n    # Loop through each element in the original list\n    for item in list:\n        # Insert the modified element before the current item\n        modified_list.insert(0, item)\n\n    # Return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i, item in enumerate(list):\n        result.append(element)\n        result.append(item)\n    return result[::2]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Loop through each element in the list\n    for i in range(1, len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n\n    # Return the modified list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0,element)\n        new_list.extend(list[i:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mod = cmath.sqrt(real**2 + imag**2)\n        ang = cmath.phase(num)\n        result.append((mod,ang))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if num.imag == 0:\n            result.append((num.real, 0))\n        else:\n            result.append((num.real, cmath.phase(num)))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar_numbers.append((magnitude, angle))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(number)\n        polar.append((magnitude, phase))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        angle = cmath.phase(num) * 180 / cmath.pi\n        polar.append(str(angle) + '\u00b0'+ str(cmath.sqrt(real**2 + imag**2)) +'m')\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x = num.real\n        y = num.imag\n        r = cmath.sqrt(x**2 + y**2)\n        theta = cmath.phase(num)\n        print(f\"({r:.2f}, {theta:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        real = abs(num)\n        img = cmath.phase(num)\n        # Add the result to the list\n        result.append([real, img])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:  \n        try:  \n            # Convert the complex number to polar coordinates  \n            a = cmath.rect(num)  \n            r = a.real  \n            theta = cmath.phase(a)  \n  \n            # Print the polar coordinates of the complex number  \n            print(\"(%.2f,%.2f)\" % (r, theta))  \n        except ValueError:  \n            # Handle cases where the input is not a valid complex number  \n            print(\"Invalid input.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Input:\n        numbers: a list of complex numbers\n\n    Output:\n        a list of tuples containing the real and imaginary parts of the corresponding polar coordinates for each complex number in the input list.\n    '''\n    result = []\n    for number in numbers:\n        # calculate the magnitude and the angle of the complex number\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        angle = cmath.phase(number)\n        \n        # store the result in a tuple\n        result.append((magnitude, angle))\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            # Convert the complex number to polar coordinates\n            r, theta = cmath.polar(num)\n            # Add the polar coordinates to the result list\n            result.append((r, theta))\n        else:\n            # Non-complex number found, add it to the result list unchanged\n            result.append(num)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l)+1):\n        comb = combinations_with_replacement(l, i)\n        for c in comb:\n            result.append(tuple(c))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n):\n            combinations.append((i,)+j)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a list of all possible colors for each element in the list\n    colors = [i for i in range(1, n+1)]\n    # use combinations_with_replacement to generate all combinations with repetition of the list and colors\n    combinations = combinations_with_replacement(l, n)\n    # convert the combinations to a list of tuples and return it\n    return list(combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(l[i:j]) == n:\n                result.append(tuple(l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j == len(l):\n                result.append(tuple(l[i:]))\n            else:\n                result.append(tuple(l[i:j]))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\n    return list(combinations_with_replacement(colors, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    \"\"\"\n    A helper function to check if a given number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # initialize count to 0\n    count = 0\n    # initialize i to 2\n    i = 2\n    # loop while i is less than or equal to n\n    while i <= n:\n        # if i is prime, increment count and continue to next iteration\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n        i += 1\n    # return the count of prime numbers less than n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    # Initialize a variable to keep track of the number of prime numbers found\n    count = 0\n\n    # Iterate through each number from 2 to n-1\n    for i in range(2, n):\n\n        # Check if i is prime\n        is_prime = True\n\n        # Iterate through all the numbers from 2 to the square root of i\n        for j in range(2, int(i**0.5) + 1):\n\n            # If i is divisible by j, i is not prime\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # If i is prime, increment the count\n        if is_prime:\n            count += 1\n\n    # Return the number of prime numbers found\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Sort the tuples based on the first element\n        sorted_tup1 = sorted(test_tup1, key=lambda x: x[0])\n        sorted_tup2 = sorted(test_tup2, key=lambda x: x[0])\n        # Compare the maximum values in each tuple\n        max1 = sorted_tup1[-1]\n        max2 = sorted_tup2[-1]\n        if max1 > max2:\n            return test_tup1\n        else:\n            return test_tup2\n    else:\n        # If the length of the two tuples is not equal, the tuples cannot be maximized\n        return \"The tuples cannot be maximized.\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple\n    where all the elements are maximized from the given tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1)\n    if max_val == test_tup1[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup2) > len(test_tup1):\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # if the first tuple has more elements, swap them\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n        \n    # iterate through the tuple and compare the elements\n    max_element = test_tup1[0]\n    max_index = 0\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_element:\n            max_element = test_tup1[i]\n            max_index = i\n    \n    # swap the max element with the first element of the second tuple\n    test_tup2[0], test_tup2[max_index] = test_tup2[max_index], test_tup2[0]\n    \n    # return the maximized tuple\n    return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = max(test_tup1[0], test_tup2[0])\n    if test_tup1[1] > test_tup2[1]:\n        return (max_num, test_tup1[1])\n    elif test_tup1[1] < test_tup2[1]:\n        return (max_num, test_tup2[1])\n    else:\n        return (max_num, max(test_tup1[1], test_tup2[1]))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value in each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Find the indices of the maximum values in each tuple\n    max_idx1 = test_tup1.index(max_tup1)\n    max_idx2 = test_tup2.index(max_tup2)\n\n    # Combine the two tuples and return the result\n    return test_tup1[:max_idx1] + (max_tup1, max_tup2) + test_tup1[max_idx1+1:] + test_tup2[:max_idx2] + (max_tup2,) + test_tup2[max_idx2+1:]"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Initialize variables for the maximum values\n    max_val1, max_val2 = float('-inf'), float('-inf')\n\n    # Iterate through the tuples and find the maximum values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n\n    # Return the maximum values as a tuple\n    return max_val1, max_val2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        max_tup = test_tup2\n    if test_tup1[1] > test_tup2[1]:\n        max_tup = test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Find the length of the tuple with the maximum sum\n    max_len = max(len(list1), len(list2))\n    # Initialize the lists for the maximum sum\n    max_list1 = []\n    max_list2 = []\n    # Iterate through the lists of tuples\n    for i in range(max_len):\n        # Append the maximum value from either list to the other list\n        if i < len(list1):\n            if i < len(list2):\n                max_list1.append(list1[i])\n                max_list2.append(list2[i])\n            else:\n                max_list1.append(list1[i])\n                max_list2.append(list1[i])\n        else:\n            max_list1.append(list2[i])\n            max_list2.append(list2[i])\n    # Return the tuple with the maximum sum\n    return tuple(max_list1 + max_list2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize the count and list of primes\n    count = 0\n    primes = []\n\n    # Check all numbers between 2 and n-1\n    for i in range(2, n):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the number is prime, add it to the list and increment the count\n            primes.append(i)\n            count += 1\n            # If the count equals n, return the nth prime\n            if count == n:\n                return primes[-1]\n\n    # If the loop completes, it means n-th newman\u2013shanks\u2013williams prime number has not been found\n    return \"There is no {}th newman-shanks-williams prime number.\".format(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the counter variable\n    counter = 0\n    \n    # Initialize the list of primes\n    primes = []\n    \n    # Initialize the number 2 as the first prime number\n    prime = 2\n    \n    # Loop until the counter is equal to n\n    while counter < n:\n        # Check if the current prime number is prime\n        if is_prime(prime):\n            # Add the current prime number to the list of primes\n            primes.append(prime)\n            \n            # Increment the counter\n            counter += 1\n        # Increment the current prime number by 1\n        prime += 1\n    \n    # Return the nth prime number in the list of primes\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if all(p % i!= 0 for i in range(2, int(p**0.5)+1)):\n            if n == 1:\n                return p\n            elif n > 1:\n                n -= 1\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # initialize counter variable\n    count = 0\n    \n    # loop through numbers 2 to n-1\n    for i in range(2, n):\n        \n        # initialize flag variable\n        flag = True\n        \n        # loop through remaining numbers from i+1 to n-1\n        for j in range(i+1, n):\n            \n            # check if i divides j\n            if i % j == 0:\n                flag = False\n                break\n        \n        # if all remaining numbers divide i, i is a newman\u2013shanks\u2013williams prime\n        if flag:\n            count += 1\n        \n        # if we have found the nth newman\u2013shanks\u2013williams prime number, exit loop\n        if count == n-1:\n            break\n        \n    # return the nth newman\u2013shanks\u2013williams prime number\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n    return p\n\ndef is_prime(n): \n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return newman_prime(n-1) + newman_prime(n-1) - 1\n\nThe function checks if the input n is 0 or 1, in which case it returns the respective prime numbers. Otherwise, it recursively calls itself with n-1 and n-1 and returns the sum of the two prime numbers. \n\nThe time complexity of this function is O(log(n)), since each recursive call reduces the size of the input by 1."
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        '''\n        Helper function to find the next prime number after a given number.\n        '''\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    prime = next_prime(2)\n    count = 0\n    while count < n:\n        prime = next_prime(prime)\n        count += 1\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list of prime numbers\n    primes = [2, 3]\n\n    # Check each number up to sqrt(n) for primality\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            # If n is divisible by i, it's not prime\n            return None\n\n    # Keep adding 2 to the list until n is prime\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n + 2)\n        n += 2\n\n    return primes[n-2]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # Initialize variables\n    count = 0\n    curr_num = 2\n    \n    # Check if n is a prime number\n    while curr_num <= n:\n        if curr_num == 2:\n            count += 1\n            curr_num += 1\n        elif curr_num % 2 == 0:\n            curr_num += 1\n        else:\n            count += 1\n            curr_num += 2\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    if count == n:\n        return curr_num\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # First newman-shanks-williams prime is 2\n    if n == 1:\n        return 2\n\n    # If n is odd, the nth newman-shanks-williams prime is n+1\n    if n % 2!= 0:\n        return newman_prime(n+1)\n\n    # Initialize count of primes found so far\n    count = 0\n\n    # Initialize two variables for the next prime to check\n    num = 3\n    limit = 2*num\n\n    # Loop until we have found the nth newman-shanks-williams prime\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 2\n\n    return num"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i]/test_tup2[i],),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Input tuples must be of equal length\"\n    \n    # Perform element-wise division and return the result\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples have different lengths.\")\n        return\n    \n    # iterate through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # perform mathematical division operation element-wise\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    # return the resulting tuple\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Convert the tuples to lists for element-wise division\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Perform element-wise division\n    for i in range(len(list1)):\n        list1[i] /= list2[i]\n    \n    # Convert the lists back to tuples and return the result\n    result_tup = tuple(list1)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] / test_tup2[i]),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples must be of equal length\"\n\n    # Perform element-wise division operation\n    result_tup = tuple(a/b for a,b in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples must be the same.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n        test_tup1[i] /= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the given tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have same length.\")\n        return\n    \n    # create an empty result list\n    result_list = []\n    \n    # iterate over the tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            result_list.append(0)\n        else:\n            result_list.append(test_tup1[i] / test_tup2[i])\n            \n    # return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of the two tuples must be equal!\")\n        return\n    \n    # Perform element-wise division operation and store in a new tuple\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # Print the result tuple\n    print(\"Result tuple:\", result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    \n    # Perform element-wise division operation\n    result_tup = tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Get the first L elements of the list\n        first_part = list1[:L]\n        # Get the last L-L elements of the list\n        second_part = list1[L:]\n        # Return a tuple with the first and second parts\n        return (first_part, second_part)\n    else:\n        # If the length of the list is less than L, raise an error\n        raise ValueError(\"The length of the list must be greater than L\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        # even length list\n        n1 = L\n        n2 = len(list1) - L\n    else:\n        # odd length list\n        n1 = L + 1\n        n2 = len(list1) - L - 1\n        \n    # split the list\n    list1 = list1[:n1]\n    list2 = list1[n1:]\n    \n    # return the split lists as a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    L_half = L // 2\n\n    # Split the list into two parts\n    first_part = lst[:L_half]\n    second_part = lst[L_half:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Initialize two empty lists to store the first and second parts\n    part1 = []\n    part2 = []\n    \n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        \n        # Split the list into two parts with the desired length\n        part1 = list1[:L]\n        part2 = list1[L:]\n        \n        # Return the two parts as a tuple\n        return (part1, part2)\n    \n    # If the length of the list is less than or equal to L\n    else:\n        \n        # Return the list as a tuple\n        return (list1, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    Returns a tuple containing the two resulting lists.\n    '''\n    n = len(list1)\n    if n < L:\n        raise ValueError('Input list is too small to be split.')\n    mid = n//2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts of length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Determine the number of elements in the first part of the list\n    num_elements = L\n    \n    # Create a new list to hold the first part of the list\n    first_part = []\n    \n    # Loop through the list, adding elements to the first part until we have L elements\n    for i in range(L):\n        # If there are less than L elements left in the list, add all of them to the first part\n        if i < len(list1):\n            first_part.append(list1[i])\n        # Otherwise, break out of the loop because we have added L elements to the first part\n        else:\n            break\n    \n    # Create a new list to hold the second part of the list\n    second_part = []\n    \n    # Loop through the list, adding elements to the second part until we have L+1 elements (since we added one element to the first part)\n    for i in range(L, len(list1)):\n        # If there are less than L+1 elements left in the list, add all of them to the second part\n        if i < len(list1):\n            second_part.append(list1[i])\n        # Otherwise, break out of the loop because we have added L elements to the second part\n        else:\n            break\n    \n    # Return a tuple containing the two parts of the list\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2!= 0:\n        print(\"The length of the list should be even\")\n        return\n    \n    half = len(list1)//2\n    if L > half:\n        L = half\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if L <= 0:\n        raise ValueError(\"L should be a positive integer.\")\n    \n    # Split the list into two parts\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in years based on their height\n    dog_years = h_age / 12\n\n    # Return the dog's age in years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's age in dog's years based on their height in inches\n    dog_years = h_age / 70.7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dob = input(\"Enter your date of birth (dd/mm/yyyy): \")\n    dob_list = dob.split(\"/\")\n    dob_year = int(dob_list[2])\n    age = 2021 - dob_year\n    \n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = h_age * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(height_in_inches):\n    \"\"\"\n    Given the height of a dog in inches,\n    return the age of the dog in dog years.\n    \"\"\"\n    dog_years = height_in_inches * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    :param h_age: the height in inches (float) of the dog\n    :return: the age of the dog in dog's years (float)\n    \"\"\"\n    # convert the height to meters\n    m_height = h_age * 0.0254\n    # calculate the dog's age in dog's years\n    dog_age = 7 * m_height\n    # return the dog's age in dog's years\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(len(S), -1, -step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    # Initialize empty list to store split lists\n    split_lists = []\n\n    # Loop through the list and split every nth element\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lst = []\n    for i in range(0, len(S), step):\n        lst.append(S[i:i+step])\n    return lst"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer `step` as input, and returns a list of the resulting lists.\n\n    Parameters:\n    S (list): A list to split into sublists\n    step (int): An integer that indicates how many elements to split the list by\n\n    Returns:\n    list: A list of sublists, where each sublist contains every nth element of S.\n    \"\"\"\n    n = len(S)\n    new_list = []\n    for i in range(0, n, step):\n        new_list.append(S[i:i+step])\n    return new_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through each element in the input list\n    for i in range(len(S)):\n        # if the current element is the nth element in the list, split it and append the resulting list to the result list\n        if i % step == 0:\n            result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l # formula for lateral surface area of a cube\n    return area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_natural_numbers = 0\n    sum_of_squares = 0\n\n    for i in range(1, n+1, 2):\n        odd_natural_numbers += i\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum_of_squares = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the i-th odd number to the sum_of_squares\n        sum_of_squares += i**2\n\n    # return the sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count * count\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(n, 0, -2):\n        # add the square of the current odd natural number to the sum\n        sum += i**2\n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum of squares to 0\n    sum_of_squares = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # square the current number\n        square = i ** 2\n        # add it to the sum of squares\n        sum_of_squares += square\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1: \n        return None \n    else: \n        result = '' \n        for i in range(n): \n            result += '*' \n        return result "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n > 1:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize a variable to store the sum of the first n numbers\n    first_n_sum = 0\n\n    # Loop through the first n numbers and add them to the sum\n    for i in range(1, n+1):\n        first_n_sum += i\n\n    # Return the sum of the first n numbers\n    return first_n_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                result += \"*\"\n            else:\n                result += \" \"\n        result += \"\\n\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n < 1: \n        return 'Please enter a positive integer'\n\n    if n == 1: \n        return '1'\n\n    if n == 2: \n        return '1 * 1'\n\n    if n == 3: \n        return '1 * 1 * 1'\n\n    if n == 4: \n        return '1 * 1 * 1 * 1'\n\n    if n == 5: \n        return '1 * 1 * 1 * 1 * 1'\n\n    if n == 6: \n        return '1 * 1 * 1 * 1 * 1 * 1'\n\n    if n == 7: \n        return '1 * 1 * 1 * 1 * 1 * 1 * 1'\n\n    if n == 8: \n        return '1 * 1 * 1 * 1 * 1 * 1 * 1 * 1'\n\n    if n == 9: \n        return '1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1'\n\n    if n == 10: \n        return '1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1'\n\n    else: \n        return 'The n-th star number is greater than 10'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0: \n        raise ValueError(\"n must be a non-negative integer\")\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to store the sum of first n numbers\n    sum_first_n = 0\n    \n    # iterate over the first n numbers from 1 to n\n    for i in range(1, n+1): \n        # add i to the sum_first_n variable\n        sum_first_n += i\n        \n    # return the sum of the first n numbers\n    return sum_first_n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            temp = (i * (2 * i - 1)) // (2 * i)\n            if i == 2:\n                return temp\n            elif i == 3:\n                return (temp + 1)\n            else:\n                print(temp)\n                return temp"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    This function will return then'th star number.\n    '''\n    # Initialize a counter variable\n    count = 1\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Print a star for each number up to n\n        print('*' * count)\n        \n        # Increment the counter variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return find_star_num(n-1) + 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # ASCII value of a space character is 32\n    if k =='':\n        return 32\n    # ASCII value of any other character is its ASCII code\n    else:\n        return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n\n    :param k: A character.\n    :type k: str\n\n    :return: The ASCII value of the character.\n    :rtype: int\n\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ascii_value(k[1:]) + (ord(k[0]) - 64)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i): i for i in range(128)}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = k.encode('ascii')\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    ascii_val = ord(k)\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_sum = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index_sum += arr[i]\n    \n    return even_sum, even_index_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through the list\n    for i in range(len(arr)):\n\n        # Check if the current number is even\n        if arr[i] % 2 == 0:\n\n            # Check if the current index is even\n            if i % 2 == 0:\n\n                # Add the even number to the sum\n                sum += arr[i]\n\n    # Return the sum of even numbers at even positions\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            if i % 2 == 0:\n                print(sum_even, i)\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i * i\n    return sum_of_squares ** 5"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i * i * i * i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(2, n+1, 2):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        if i**5 % 2 == 0:\n            sum += i\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [i[1] for i in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        if len(item) == 2:\n            rear = item[1]\n            result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # iterate over the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n\n    # Initialize an empty list to hold the results\n    results = []\n\n    # Loop through each index of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the elements at the same index and add the result to the results list\n        results.append(test_tup1[i] - test_tup2[i])\n\n    # Return the results list\n    return results"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup = sub_tup + (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            even_sum += coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        even_binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial += even_binomial_coeff\n    return sum_even_binomial\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients\n    sum_even_binomial = 0\n    \n    # Loop through all the numbers from 0 to n\n    for i in range(n+1):\n        # Calculate the even index binomial coefficient\n        even_index_binomial = math.factorial(n) // (math.factorial(i) * math.factorial(n - i))\n        \n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum_even_binomial += even_index_binomial\n            \n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # calculate the binomial coefficients up to n^2\n    bin_coeffs = [math.comb(n, i) for i in range(n+1)]\n\n    # calculate the sum of even index binomial coefficients\n    even_sum = 0\n    for i in range(1, len(bin_coeffs), 2):\n        even_sum += bin_coeffs[i]\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize variables\n    binomial_coeff_sum = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(0, n+1, 2):\n        binomial_coeff_sum += math.comb(n, i)\n\n    return binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even-indexed binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # initialize variables for sum and counter\n    sum = 0\n    count = 0\n    \n    # calculate even-indexed binomial coefficients using formula:\n    # B(n,k) = C(n,k) * C(n,k-2) / (k-1)!\n    # where C(n,k) is the binomial coefficient and! is the factorial\n    for k in range(2, n+1, 2):\n        sum += math.factorial(n-k+1) / (math.factorial(k-1) * math.factorial(n-k))\n        count += 1\n    \n    # return sum of even-indexed binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_binomial_sum = 0\n\n    # Loop through all the even numbers from 0 to n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient of i and n-i\n        even_binomial_coeff = math.comb(n, i)\n        # Add the even index binomial coefficient to the sum\n        even_binomial_sum += even_binomial_coeff\n\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n    \n    # Calculate the number of even indices and check if it is greater than 0\n    if (n & 1) == 0:\n        # If it is greater than 0, calculate the sum of even index binomial coefficients\n        for i in range(1, n+1, 2):\n            sum += math.comb(n, i)\n            \n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and calculates the sum of the even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        binomial_coeff = math.comb(n, i-1)\n        sum += binomial_coeff\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume.\n    \"\"\"\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*r*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159265 * r * r * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return (1/3)*3.14*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14) * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14 * r ** 2 * h) / 3\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filter a dictionary to include only entries with values greater than or equal to n.\n\n    Args:\n    d (dict): Dictionary to filter\n    n (int): Minimum value for entries in the dictionary\n\n    Returns:\n    dict: Filtered dictionary with only entries with values greater than or equal to n\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and returns a new dictionary that contains only the entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key,value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] < test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i + 1]:\n                count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += 2 * i\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return False\n    \n    decagonal_num = 1\n    \n    for i in range(1, n+1):\n        decagonal_num = decagonal_num + (4*i*i - 6*i + 1)\n    \n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    elif n == 0:\n        return 1\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (2*i+1)**2\n        return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if it is a decagonal number, otherwise it returns False. \n    A decagonal number is a positive integer that is equal to the sum of the square of its positive integer part and the \n    sum of the cube of its positive integer part.\n    \"\"\"\n    def sum_of_squares(n):\n        return sum([i**2 for i in range(1, n+1)])\n    \n    def sum_of_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n    \n    def check_condition(n):\n        return sum_of_squares(n) == sum_of_cubes(n) + n\n    \n    if check_condition(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Calculate the number of rows needed to print the decagonal number\n    rows = n // 2\n    if n % 2 == 0:\n        rows += 1\n\n    # Print the decagonal number using nested loops\n    for i in range(1, rows+1):\n        for j in range(1, i+1):\n            print(end=' ')\n        for k in range(i, 0, -1):\n            print(end=k)\n        print()"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Define the array of decagonal numbers\n    dec_arr = [1, 12, 36, 84, 210, 462, 1002, 2170, 4662, 10092, 21972, 47752, 103352, 229176, 492968, 1087632, 2426888, 5124836, 11680424, 26023952, 53785484, 122359688, 278354368, 571128648, 1305008836, 3022277760, 6153878292, 13975713244, 32753013048, 66487884884, 149632585000, 354502785204, 725268943128, 1607722603612, 3836294536652, 7913131903896, 17376746821800, 41547455810772, 86891791550004, 188248058036496, 449743564295492, 953156734507208, 2048054109654380, 4872196605362676, 10492885047940372, 22317771913322308, 52774497553120000, 115377301128208804, 243978269947524240, 571128648000000000, 1272331718733039140, 2668641174831688360, 6171984444168482920, 14016145094442814120, 29158143478715808344, 66656700687498064004, 154841857237734190044, 318737171233880133164, 720075817160725405856, 1709584600223219746500, 3480353132193365373508, 7775435236931460398400, 18832198525111575417204, 37921818397498282345892, 83875304787607236515804, 206654277117233060631048, 41"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # initialize a counter variable for the decagonal number\n    decagonal_counter = 1\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the value of i to the decagonal counter\n        decagonal_counter += i\n    \n    # return the decagonal number\n    return decagonal_counter"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (3 * n - 1) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # initialize a counter variable for odd numbers\n    count = 1\n\n    # initialize a variable for the sum of odd numbers\n    odd_sum = 0\n\n    # loop through all odd numbers from 1 to n\n    for i in range(1, n+1):\n        # add the current odd number to the sum of odd numbers\n        odd_sum += i\n\n        # if the sum of odd numbers is equal to the sum of even numbers, then the nth decagonal number is found\n        if odd_sum == 2*count:\n            return True\n\n        # increment the counter variable for odd numbers\n        count += 2\n\n    # if the loop completes without finding the nth decagonal number, return False\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # iterate through the array and compare each element to the search element\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    # if the search element is not found, return False and -1\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, x in enumerate(dlist):\n        if x == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the list is empty\n    if len(test_list) == 0:\n        return True\n    \n    # Use a set to keep track of the elements we've seen so far\n    seen = set()\n    \n    # Iterate over the list and add each element to the set\n    for elem in test_list:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    \n    # If we make it through the entire loop without finding a duplicate, then all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(test_list) == len(unique_elements):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        print(\"All elements are unique.\")\n    else:\n        print(\"Some elements are not unique.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements are unique in the list, and False otherwise.\n    \"\"\"\n    # Create a set to store the elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all elements in the list are unique, otherwise it returns False.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in test_list:\n        if element in count_dict:\n            # If the element is already present in the dictionary, increment its count\n            count_dict[element] += 1\n        else:\n            # If the element is not present in the dictionary, add it with a count of 1\n            count_dict[element] = 1\n    # Check if all the counts are 1, which means all the elements are unique\n    all_unique = True\n    for count in count_dict.values():\n        if count!= 1:\n            all_unique = False\n            break\n    return all_unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the subtraction of their elements element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the elements of the first list\n    for i in range(len(nums1)):\n        # check if the element exists in the second list\n        if nums1[i] in nums2:\n            # if it does, subtract the element from the result list and append it\n            result.append(nums1[i] - nums2[nums2.index(nums1[i])])\n        # if the element doesn't exist in the second list, append the element to the result list\n        else:\n            result.append(nums1[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n        \n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must be of equal length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        print(\"Result: \", result)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create a list to store the frequency of each digit in the integer\n    freq = [0] * 10\n\n    # iterate over each digit in the integer\n    for i in range(len(str(n))): \n        # extract the current digit from the integer and convert it to an integer\n        digit = int(str(n)[i])\n\n        # increment the frequency of the current digit in the list\n        freq[digit] += 1\n\n        # if the frequency of the current digit is greater than the current digit itself, return False\n        if freq[digit] > digit: \n            return False\n\n    # if all the digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit has not been seen before, add it to the dictionary with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # otherwise, increment the frequency of the digit\n        else:\n            freq[digit] += 1\n    \n    # loop through the keys in the dictionary and check if the frequency of the digit is greater than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] >= int(digit):\n            print(f\"{digit} has a frequency of {freq[digit]} and should be less than or equal to itself.\")\n        else:\n            print(f\"{digit} has a frequency of {freq[digit]} and should be greater than or equal to itself.\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    freq = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n\n    while n > 0:\n        freq[n % 10] += 1\n        n //= 10\n\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    \n    for d in digits:\n        freq[d] += 1\n        \n    for d in freq:\n        if d > n:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in range(10):\n        count = 0\n        while n > 0:\n            if n % 10 == i:\n                count += 1\n            n //= 10\n        digits.append(count)\n\n    for digit in digits:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # iterate through the digits and check if the frequency is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    frequency = [0] * 10\n\n    # Count the frequency of each digit in the integer\n    for digit in str(n):\n        frequency[int(digit)] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in range(10):\n        if frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = {}\n    for digit in str(n):\n        count[digit] = count.get(digit, 0) + 1\n    \n    for digit in count:\n        if count[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    # iterate over each character in the string and update the frequency dictionary\n    for char in num_str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # iterate over the frequency dictionary and check if each digit has a frequency less than or equal to itself\n    for digit, freq_digit in freq.items():\n        if freq_digit > digit:\n            return False\n    # if all digits have frequency less than or equal to itself, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    if match:\n        print('String contains \"a\" followed by two or three \"b\" characters.')\n    else:\n        print('String does not contain \"a\" followed by two or three \"b\" characters.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b[bB]?[^a]*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    matches = pattern.findall(text)\n    if matches:\n        print('Found a match!')\n    else:\n        print('No match found.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_two_three(text)\nprint(result)  # Output: True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print('The string contains the pattern \"a[bB]{2,3}\".')\n    else:\n        print('The string does not contain the pattern \"a[bB]{2,3}\".')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(a){1}((b){2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum to the first element of the array\n    max_sum = a[0]\n    \n    # Initialize a list to store the sum of each repeated element\n    repeated_sum = [0] * k\n    \n    # Initialize the starting index of each repeated element\n    repeated_start_index = [0] * k\n    \n    # Initialize the ending index of each repeated element\n    repeated_end_index = [0] * k\n    \n    # Loop through the array and update the maximum sum and repeated sum\n    for i in range(1, n):\n        \n        # Add the current element to the maximum sum\n        max_sum = max(max_sum + a[i], a[i])\n        \n        # Check if the maximum sum is greater than the sum of the repeated elements\n        if max_sum > repeated_sum[0]:\n            \n            # Update the maximum sum and the repeated elements\n            max_sum = a[i]\n            \n            # Update the starting index, ending index, and sum of each repeated element\n            for j in range(k):\n                repeated_sum[j] = repeated_sum[j] + a[i]\n                repeated_start_index[j] = i - k + 1\n                repeated_end_index[j] = i\n                repeated_sum[j] = repeated_sum[j] - a[i - k + 1]\n    \n    # Return the maximum sum of a contiguous array formed by repeating the given array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # create a new array with k copies of the original array\n    modified_array = [i*k for i in a]\n    \n    # calculate the maximum sum subarray in the modified array\n    max_sum = max(modified_array)\n    \n    # remove the largest element from the modified array until it has only one element\n    while len(modified_array) > 1:\n        max_sum = max(max_sum, modified_array[-1])\n        modified_array.pop()\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Get the maximum sum of a non-repeated sub-array\n    max_non_repeated_sum = max(sum(a[:i]) for i in range(1, n+1))\n\n    # Initialize the maximum sum of a repeated sub-array\n    max_repeated_sum = max_non_repeated_sum\n\n    # Iterate through all possible indices i in the array\n    for i in range(n):\n        # Get the sum of the repeated sub-array from i to n-1\n        repeated_sum = sum(a[i:n])\n\n        # Update the maximum sum of the repeated sub-array\n        max_repeated_sum = max(max_repeated_sum, repeated_sum)\n\n    # Return the maximum sum of the repeated sub-array\n    return max_repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_sum_start = 0\n    count = 0\n\n    for i in range(n-k):\n        sub_array = a[i:i+k]\n        if sub_array.count(sub_array[0]) == k:\n            if sum(sub_array) > max_sum:\n                max_sum = sum(sub_array)\n                max_sum_start = i\n                count = 1\n            elif sum(sub_array) == max_sum:\n                count += 1\n\n    return max_sum, max_sum_start, count"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Calculate the sum of the previous k elements in the array\n        temp_sum = sum(a[i-k:i])\n        \n        # Update the max sum if the current sum is greater than the current max sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function takes in an array a, its length n, and the number k, where k is the number of times the original array should be repeated. \n    It then calculates the sum of the first k elements of the original array. \n    It then finds the largest sum of any contiguous array that can be formed by repeating the first k elements of the original array.\n    '''\n    original_sum = sum(a[:k])\n    max_sum = original_sum\n    for i in range(1, n-k+1):\n        # find the sum of the current array\n        current_sum = original_sum + sum(a[i:i+k])\n        # update the max_sum if necessary\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initializing the variables to store the current and previous sum\n    current_sum = 0\n    previous_sum = 0\n    \n    # Iterating through the array for k times\n    for i in range(k):\n        current_sum += a[i]\n        \n        # Updating the current_sum if it becomes negative\n        if current_sum < 0:\n            current_sum = 0\n        \n        # Updating the previous_sum with the current_sum if it's greater than it\n        if current_sum > previous_sum:\n            previous_sum = current_sum\n    \n    # Repeating the previous_sum k times to get the maximum sum\n    max_sum = previous_sum * k\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a list of arrays to store the modified sub-arrays\n    modified_arrays = []\n\n    # loop through all possible repeated sub-arrays\n    for i in range(n):\n        # create a new array from the given array and repeat it k times\n        new_array = a * k\n        # append the new array to the list of modified arrays\n        modified_arrays.append(new_array)\n\n    # initialize variables to keep track of the maximum sum and the indices of the sub-arrays with the maximum sum\n    max_sum = float('-inf')\n    max_indices = []\n\n    # loop through all possible sub-arrays and find the sum of their elements\n    for i in range(len(modified_arrays)):\n        for j in range(len(modified_arrays[i])):\n            # calculate the sum of the current sub-array\n            current_sum = modified_arrays[i][j] + modified_arrays[i][j] + modified_arrays[i][j] + modified_arrays[i][j]\n            # check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                # update the maximum sum and the indices of the sub-arrays with the maximum sum\n                max_sum = current_sum\n                max_indices = [i]\n            elif current_sum == max_sum:\n                # add the index of the current sub-array to the list of indices of the sub-arrays with the maximum sum\n                max_indices.append(i)\n\n    # return the indices of the sub-arrays with the maximum sum\n    return max_indices"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    sum_array = [0] * (n + 1)\n    \n    for i in range(k):\n        sum_array[0] += a[0]\n        for j in range(1, n + 1):\n            sum_array[j] = max(sum_array[j], sum_array[j - 1] + a[j])\n            \n    for i in range(n + 1):\n        if i == 0:\n            max_sum = max_sum + sum_array[i]\n        else:\n            max_sum = max(max_sum, sum_array[i] + sum_array[i - 1])\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        a: List of integers\n        n: Number of elements in the array\n        k: Number of times the array should be repeated\n\n    Returns:\n        The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize max_sum to be the first element of the array\n    max_sum = a[0]\n\n    # Loop through the array\n    for i in range(k):\n        # Add the original array to itself k times\n        repeated_array = a * k\n\n        # Calculate the sum of the repeated array\n        repeated_sum = sum(repeated_array)\n\n        # Update max_sum if the repeated sum is greater\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    while i < n:\n        i += 1\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = count * 2\n        sum += num * num\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(2, n+1, 2):\n        sum += i**2\n\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    \n    while count < n:\n        sum_of_squares += count**2\n        count += 2\n        \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum of squares\n        sum_of_squares += i*i\n        \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 0\n    \n    while i < n:\n        if i % 2 == 0:\n            sum_of_squares += i**2\n            i += 1\n        else:\n            i += 1\n            \n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_length = 0\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of lists\n    containing the maximum length of each sublist in the input list.\n    '''\n\n    # initialize an empty list to store the maximum length of each sublist\n    max_lengths = []\n\n    # iterate over each sublist in the input list\n    for sublist in list1:\n\n        # initialize a variable to store the maximum length of the current sublist\n        current_max_length = 0\n\n        # iterate over each element in the current sublist\n        for elem in sublist:\n\n            # if the current element is longer than the current maximum length, update the maximum length\n            if len(str(elem)) > current_max_length:\n                current_max_length = len(str(elem))\n\n        # add the current maximum length to the max_lengths list\n        max_lengths.append(current_max_length)\n\n    # return the max_lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(sublist) for sublist in lst]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length in the input list.\n    '''\n\n    # initialize empty list to store the maximum length\n    max_lengths = []\n\n    # loop through each sublist in the input list\n    for sublist in list1:\n\n        # loop through each element in the sublist\n        for element in sublist:\n\n            # check if the element is longer than any element seen so far\n            if len(element) > len(max_lengths) or (len(element) == len(max_lengths) and element > max_lengths[0]):\n\n                # update the maximum length list\n                max_lengths = [element]\n            else:\n\n                # if the element is not longer than any element seen so far, append it to the list\n                max_lengths.append(element)\n\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = lst\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), len(max_lengths) and max(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the count of ways for each color \n    count = [[0 for x in range(k)] for y in range(n+1)]\n    \n    # Initialize the count of ways for each color \n    for i in range(k): \n        count[0][i] = 1\n        \n    # Fill the rest of the array using recursion \n    for i in range(1, n+1): \n        for j in range(k): \n            if i == 1: \n                count[i][j] = 1\n            else: \n                count[i][j] = count[i-1][(j+1)%k] + count[i-1][(j+2)%k]\n        \n    # Return the count of ways \n    return count[-1][0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[1] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1 if i % 2 == 0 else 0\n    for j in range(1, k + 1):\n        dp[0][j] = 1 if j % 2 == 0 else 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] * (j - 1) + dp[i - 1][j - 1] * (j - 1)\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def backtrack(i, j, count):\n        if count > 2:\n            return 0\n        if i >= n or j >= k:\n            return 1\n        if j == fence[i]:\n            return backtrack(i, j+1, count+1)\n        if fence[i] == fence[j]:\n            return backtrack(i+1, j+1, count)\n        return backtrack(i+1, j, count)\n        \n    fence = [i for i in range(1, k+1)]\n    return backtrack(0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    def count_subsets(arr):\n        count = [0] * (len(arr) + 1)\n        for i in range(1, len(arr) + 1):\n            for j in range(1, i + 1):\n                count[i] += count[j - 1]\n        return count\n\n    dp = [1] * (n + 1)\n    count = count_subsets(range(1, n + 1))\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i + j <= n and i + j > 0:\n                dp[i + j] += dp[i] * dp[k - j] * count[i + j - 1]\n\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a dictionary to store the count of ways\n    ways = {}\n\n    # If n is less than or equal to 0, return 0\n    if n <= 0: \n        return 0\n\n    # If n is equal to 1, then there is only one way of painting the fence\n    if n == 1: \n        ways[(0, 0)] = 1\n        return 1\n\n    # If n is greater than 1, then we need to calculate the number of ways to paint the fence\n    else:\n        # Initialize the first way to paint the fence\n        ways[(0, 0)] = 1\n\n        # Loop for each number from 1 to k\n        for i in range(1, k + 1):\n            # Calculate the count of ways to paint the fence with i colors using the previous ways\n            for j in range(1, n + 1):\n                ways[(j, i)] = ways.get((j - 1, i), 0) + ways.get((j, i - 1), 0)\n\n        # Return the count of ways to paint the fence with k colors\n        return ways[(n, k)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # To store the count of ways for each possible configuration of adjacent posts having different colors\n    count_ways = [[0 for j in range(k)] for i in range(n)]\n    \n    # Count the number of ways of painting the fence with a given number of adjacent posts having the same color\n    for i in range(n):\n        for j in range(k):\n            if i == 0 or j == 0 or i == n-1 or j == k-1:\n                count_ways[i][j] = 1\n            else:\n                count_ways[i][j] = count_ways[i-1][j-1] + count_ways[i-1][j]\n    \n    # Return the count of ways\n    return count_ways[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(i, count, color):\n        if i == n:\n            return 1\n        elif color == k:\n            return count_ways(i+1, count, color)\n        else:\n            return count_ways(i+1, count+1, color)\n\n    return count_ways(0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if k=2, there are 4 ways of painting the fence\n    if k == 2:\n        return 4**n\n    \n    # Base case: if n=0 or k=1, there is only one way to paint the fence\n    if n == 0 or k == 1:\n        return 1\n    \n    # If n=1, there is only one way to paint the fence\n    if n == 1:\n        return k\n    \n    # Initialize variables for fence post colors\n    colors = [0] * k\n    \n    # Initialize variables for ways to paint the fence\n    ways = [0] * (4**n)\n    \n    # Define base cases for ways to paint the fence\n    for i in range(4**n):\n        ways[i] = 1\n    \n    # Iterate through the fence post colors and count the ways to paint the fence\n    for color in range(k):\n        # Count the ways to paint the fence with the given color\n        for i in range(4**n):\n            if colors[color] > 0:\n                ways[i] += ways[i-1]\n            else:\n                ways[i] += ways[i]\n                \n        # Update the fence post colors\n        for i in range(k):\n            colors[i] = (colors[i] + 1) % 4\n    \n    return ways[4**n-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    # initialize a list to store the count of ways for each color combination\n    count_list = [[0 for i in range(k)] for j in range(n+1)]\n    count_list[0][0] = 1 # base case where all posts have the same color\n\n    # iterate over all color combinations\n    for j in range(1, k+1):\n        for i in range(n+1):\n            # check if the previous color combination is still valid\n            if count_list[i][j-1] == 0:\n                continue\n            # count the ways where the current color is the same as the previous color\n            count_list[i][j] = count_list[i-1][j] + count_list[i][j-1]\n\n    # return the final count of ways\n    return count_list[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an array to store the number of ways for each color\n    ways = [0] * k\n\n    # Base case: for a fence of length 1, there is only one way to paint it\n    if n == 1:\n        ways[0] = 1\n        return ways[0]\n\n    # Base case: for a fence of length 2, there are two ways to paint it\n    if n == 2:\n        ways[0] = 1\n        ways[1] = 1\n        return ways[0] + ways[1]\n\n    # Fill in the rest of the array using dynamic programming\n    for i in range(2, n):\n        for j in range(k):\n            # If the previous color is equal to the current color, there is only one way to paint the current post\n            if j == 0:\n                ways[j] = ways[j]\n            # If the previous color is different from the current color, there are two ways to paint the current post\n            elif j == k - 1:\n                ways[j] = ways[j] + ways[j - 1]\n            # If the previous color is neither the current color nor the last color, there are four ways to paint the current post\n            else:\n                ways[j] = ways[j] + ways[j - 1] + ways[j - 2] + ways[j + 1]\n\n    # Return the sum of the ways for the last color\n    return ways[k - 1]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m # integer division to find the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division to get quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division to get quotient\n    rounded_quotient = round(quotient)  # round the quotient to the nearest integer\n    return rounded_quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = n // m\n    if result == (n // m) * m:\n        return result\n    else:\n        return find(n, m - 1)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2)+(h**2))\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # finding the semi-perimeter of the right triangle\n    r = math.sqrt(w ** 2 + h ** 2)\n\n    # finding the area of the right triangle\n    area = math.sqrt(s ** 2 - r ** 2)\n\n    # finding the third side of the right triangle\n    third_side = area / 2\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function will take the length of the hypotenuse and the length of the other two sides of a right angled triangle\n    and will return the length of the third side.\n    '''\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_half_perimeter = (w + h) / 2\n    third_side = math.sqrt(w**2 + h**2 - 2 * w * h * side_half_perimeter)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5\n    s = math.sin(math.radians(60))\n    third_side = w * c * s\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # use Heron's formula to find the semi-perimeter\n    s = (w + h)**2 / (4*math.tan(math.pi/5))\n    # use the pythagorean theorem to find the square root of the semi-perimeter\n    c = math.sqrt(s)\n    # use the distance formula to find the length of the other side\n    return c * math.sin(math.pi/5)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"List is empty\")\n        return None\n\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize max variable with the first element of the list\n    max_val = listval[0]\n\n    # iterate through the rest of the list and compare each element with the max_val\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the maximum value in the list.\n    '''\n    if not listval:\n        raise ValueError(\"The input list is empty!\")\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(lst):\n    max_num = float('-inf') # initialize max_num with negative infinity\n    for i in lst:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of mixed data types and returns the maximum value in the list.\n    '''\n    max_val = listval[0] # initialize the maximum value to the first element of the list\n    for i in range(1, len(listval)):\n        if listval[i] > max_val: # if the current element is greater than the maximum value\n            max_val = listval[i] # update the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max_val to the first value in the list\n    max_val = listval[0]\n    # Loop through the remaining values in the list\n    for i in range(1, len(listval)):\n        # If the current value is greater than max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initializing a variable to store the sum of all divisors\n    div_sum = 0\n    # using a for loop to iterate through all numbers from 1 to the input number\n    for i in range(1, number+1):\n        # checking if the input number is divisible by i\n        if number % i == 0:\n            # if it is, then add i to the div_sum variable\n            div_sum += i\n    # returning the sum of all divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\nprint(sum_div(20))"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Calculate all divisors of the number\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of divisors\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of inversions\n    present in the array. The algorithm used to calculate the inversion count\n    is Merge Sort.\n    \"\"\"\n    # Base case\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Calculate the inversion count in each half recursively\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n    \n    # Merge the two halves and count the inversions in the merged array\n    inv_count_merge = 0\n    i = j = k = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count_merge += len(left) - i\n        k += 1\n    \n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n        \n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n        \n    return inv_count_left + inv_count_right + inv_count_merge"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n\n            while i < len(left_half) and j < len(right_half):\n                if left_half[i] <= right_half[j]:\n                    arr[k] = left_half[i]\n                    i += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    def merge(left, right, inv_count):\n        i = j = 0\n        k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n                inv_count += len(left) - i\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n        return inv_count\n\n    arr = sorted(arr)\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            inv_count = merge(arr[i], arr[j], inv_count)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    # Initialize a variable to keep track of the number of inversions\n    inv_count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Loop while the left pointer is less than the right pointer\n    while left < right:\n        # Find the middle index of the sub-array between the left and right pointers\n        mid = (left + right) // 2\n\n        # Count the number of inversions in the left sub-array\n        count_inv(arr, left, mid)\n\n        # Count the number of inversions in the right sub-array\n        count_inv(arr, mid + 1, right)\n\n        # Merge the two sub-arrays\n        merge_sort(arr, left, mid, right)\n\n        # Check if the merged array has any inversions\n        if inv_count!= 0:\n            # If there are inversions, increment the count of inversions\n            inv_count += merge_inv(arr, left, mid, right)\n\n        # Update the left and right pointers\n        left = mid + 1\n        right = right - 1\n\n    # Return the final count of inversions\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # Count the inversions using the merge sort method\n    inv_count = 0\n    for i in range(1, n):\n        left = 0\n        right = i - 1\n        middle = (left + right) // 2\n        inv_count += merge_sort(arr, left, middle, right)\n\n    # Count the inversions using the quick sort method\n    # inv_count += quick_sort(arr, 0, n-1)\n\n    return inv_count\n\n\ndef merge_sort(arr, left, middle, right):\n    '''\n    Write a function to merge two subarrays in the array and count the number of inversions.\n    '''\n    # If the subarrays are already sorted, return 0\n    if left >= middle:\n        return 0\n    if right <= middle:\n        return 0\n\n    # Merge the two subarrays\n    inv_count = 0\n    left_index = left\n    right_index = middle + 1\n    temp_arr = []\n    i = 0\n    j = 0\n\n    while i <= middle and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr.append(arr[i])\n            i += 1\n        else:\n            temp_arr.append(arr[j])\n            inv_count += middle - i + 1\n            j += 1\n\n    # Copy the remaining elements from the left subarray\n    while i <= middle:\n        temp_arr.append(arr[i])\n        i += 1\n\n    # Copy the remaining elements from the right subarray\n    while j <= right:\n        temp_arr.append(arr[j])\n        j += 1\n\n    # Copy the sorted subarray back to the original array\n    for k in range(left, right + 1):\n        arr[k] = temp_arr[k - left]\n\n    return inv_count\n\n\ndef quick_sort(arr, left, right):\n    '''\n    Write a function to sort the subarray using the quick sort method.\n    '''\n    # If the subarray is already sorted, return 0\n    if left >= right:\n        return 0\n\n    # Choose a pivot element\n    pivot = arr[right]\n    left_index = left - 1\n    i = left\n\n    # Sort the subarray using the partitioning method\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            left_index += 1\n            arr[left_index], arr[j] = arr[j], arr[left_index]\n\n    # Swap the pivot element with the last element of the subarray\n    arr[left_index + 1], arr[right] = arr[right], arr[left_index + 1]\n\n    # Count the number of inversions\n    inv_count = 0\n    if left_index + 1 > left:\n        inv_count += quick_sort(arr, left, left_index)\n    if right < left_index + 1:\n        inv_count += quick_sort(arr, right + 1, right)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    inv_count = 0 \n\n    # Sort the array \n    def merge_sort(arr): \n        if len(arr) > 1: \n            mid = len(arr) // 2 \n            L = arr[:mid] \n            R = arr[mid:] \n\n            # Sort first half \n            merge_sort(L) \n            merge_sort(R) \n\n            i = j = k = 0\n\n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i += 1\n                else: \n                    arr[k] = R[j] \n                    j += 1\n                    inv_count += len(L) - i \n                k += 1\n\n            while i < len(L): \n                arr[k] = L[i] \n                i += 1\n                k += 1\n\n            while j < len(R): \n                arr[k] = R[j] \n                j += 1\n                k += 1\n\n    merge_sort(arr) \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    inv_count = 0 # Initialize the variable to store the number of inversions\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the array and count the number of inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += len(arr) - j - i - 1 # Add the number of elements in the array except for the current elements\n    \n    return inv_count # Return the number of inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if arr[i] > arr[j]:\n                inv_count += n - j\n                arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Sort the array in ascending order\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                # Swap the elements\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += j - i # Count inversions\n                break\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Define a helper function to flatten a list of lists\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    # Call the flatten helper function and return the result\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as an argument and returns a flat list.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    flattened = []\n    for item in lst:\n        if type(item) == list:\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a list by recursively removing nested lists.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure by concatenating all its elements.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate\n    from the list.\n\n    The function first creates a defaultdict to store the frequency of each item in\n    the input list. The defaultdict is used to store the frequency of each item\n    in the input list, and the frequency of each item is used to calculate the maximum\n    aggregate.\n\n    Args:\n        stdata (list): A list of tuples, where each tuple contains an item and its frequency.\n\n    Returns:\n        int: The maximum aggregate from the input list.\n    '''\n\n    freq = defaultdict(int)\n    for item, freq in stdata:\n        freq = int(freq)\n        freq += 1  # To include the current item in the frequency count\n        freq = max(freq, 1)  # To handle the case where the frequency is 0\n        freq = min(freq, 1000000000)  # To handle the case where the frequency is too high\n        freq = 1 + (freq - 1) * 0.1  # To handle the case where the frequency is too low\n        if freq > 1000000000:\n            freq = 1000000000\n        if freq > 100000000:\n            freq = 100000000\n        if freq > 10000000:\n            freq = 10000000\n        if freq > 1000000:\n            freq = 1000000\n        if freq > 100000:\n            freq = 100000\n        if freq > 10000:\n            freq = 10000\n        if freq > 1000:\n            freq = 1000\n        if freq > 100:\n            freq = 100\n        if freq > 10:\n            freq = 10\n        if freq > 1:\n            freq = 1\n        freq = int(freq)\n        freq = max(freq, 1)  # To handle the case where the frequency is still 0\n\n        freq = max(freq, 1)  # To handle the case where the frequency is still 0\n        freq = min(freq, 1000000000)  # To handle the case where the frequency is still too high\n\n        freq = 1 + (freq - 1) * 0.1  # To handle the case where the frequency is still too low\n        if freq > 1000000000:\n            freq = 1000000000\n        if freq > 100000000:\n            freq = 100000000\n        if freq > 10000000:\n            freq = 10000000\n        if freq > 1000000:\n            freq = 1000000\n        if freq > 100000:\n            freq = 100000\n        if freq > 10000:\n            freq = 10000\n        if freq > 1000:\n            freq = 1000\n        if freq > 100:\n            freq = 100\n        if freq > 10:\n            freq = 10\n        if freq > 1:\n            freq = 1\n        freq = int(freq)\n        freq = max(freq, 1)  # To handle the case where the frequency is still 0\n        if freq > 1000000000:\n            freq = 1000000000\n        if freq > 100000000:\n            freq = 100000000\n        if freq > 10000000:\n            freq = 10000000\n        if freq > 1000000:\n            freq = 1000000\n        if freq > 100000:\n            freq = 100000\n        if freq > 10000:\n            freq = 10000\n        if freq > 1000:\n            freq = 1000\n        if freq > 100:\n            freq = 100\n        if freq > 10:\n            freq"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each group\n    max_agg = defaultdict(float)\n    for group, agg in stdata:\n        max_agg[group] = max(max_agg[group], agg)\n    # Find the maximum aggregate across all groups\n    max_agg_all = max(max_agg.values())\n    # Return the maximum aggregate across all groups\n    return max_agg_all"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each item\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for item, price in stdata:\n        # Update the maximum aggregate for the item\n        max_agg[item] = max(max_agg[item], price)\n\n    # Calculate the maximum aggregate from the dictionary\n    max_agg_sum = sum(max_agg.values())\n\n    return max_agg_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize an empty dictionary to store the maximum aggregate for each customer\n    max_agg_dict = defaultdict(int)\n\n    # loop through the list of tuples\n    for customer, aggregate in stdata:\n        # check if the current aggregate is greater than the maximum aggregate stored for the customer\n        if aggregate > max_agg_dict[customer]:\n            # update the maximum aggregate for the customer\n            max_agg_dict[customer] = aggregate\n\n    # return the maximum aggregate\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_agg_dict = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for cust_id, total_sales in stdata:\n        # Check if the current customer has already been processed\n        if cust_id not in max_agg_dict:\n            # If not, set the maximum aggregate to the current total sales\n            max_agg_dict[cust_id] = total_sales\n        # Check if the current customer's total sales are greater than their current maximum\n        elif max_agg_dict[cust_id] < total_sales:\n            # If so, update the maximum aggregate for the customer\n            max_agg_dict[cust_id] = total_sales\n\n    # Iterate through the dictionary and find the maximum aggregate\n    max_agg = 0\n    for val in max_agg_dict.values():\n        if val > max_agg:\n            max_agg = val\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    st_dict = defaultdict(int) #using defaultdict to store the count of each item\n    max_agg = 0 #initialize the maximum aggregate\n\n    #iterate over the list of tuples and update the count of each item\n    for tup in stdata:\n        st_dict[tup[0]] += tup[1]\n\n    #iterate over the dictionary and update the maximum aggregate if the count is greater than the current max\n    for key, value in st_dict.items():\n        if value > max_agg:\n            max_agg = value\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    max_profit = defaultdict(int)\n    for x, y in stdata:\n        max_sum[x] += y\n        max_profit[x] = max(max_profit[x], max_sum[x] - y)\n    return max(max_profit.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a defaultdict to store the maximum aggregate for each week\n    max_aggregate_by_week = defaultdict(int)\n    \n    # loop through the list of tuples and update the max_aggregate_by_week dictionary\n    for week, data in stdata:\n        max_aggregate_by_week[week] = max(max_aggregate_by_week[week], data)\n    \n    # return the maximum aggregate in the dictionary\n    return max(max_aggregate_by_week.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the current max aggregate and the current max unit\n    max_agg = defaultdict(int)\n    max_unit = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for t in stdata:\n        # Calculate the maximum aggregate and the maximum unit\n        agg = t[0]\n        unit = t[1]\n        max_agg[agg] = max(max_agg[agg], agg)\n        max_unit[unit] = max(max_unit[unit], unit)\n\n    # Find the maximum aggregate and the maximum unit\n    max_agg = max(max_agg.values())\n    max_unit = max(max_unit.values())\n\n    # Calculate the maximum total\n    max_total = max_agg * max_unit\n\n    return max_total"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for _, item in stdata:\n        max_dict[item] += 1\n\n    max_agg = max(max_dict, key=max_dict.get)\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    # Initialize the sum of first n bits and last n bits to 0\n    first_sum = 0\n    last_sum = 0\n\n    # Initialize the count to 0\n    count = 0\n\n    # Loop over all possible binary strings of length 2n\n    for i in range(2 ** n):\n        # Convert the i-th binary string to an integer\n        binary_str = bin(i)[2:]\n\n        # If the binary string is of length 2n, check if the sum of the first n bits is equal to the sum of the last n bits\n        if len(binary_str) == 2 * n:\n            # Get the sum of the first n bits and the sum of the last n bits\n            first_sum = int(binary_str[:n])\n            last_sum = int(binary_str[-n:])\n\n            # If the sum of the first n bits is equal to the sum of the last n bits, increment the count\n            if first_sum == last_sum:\n                count += 1\n\n    # Return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count and sum variables\n    count = 0\n    sum_bits = 0\n\n    # Calculate the sum of the first n bits\n    for i in range(n):\n        sum_bits += 2 ** i\n\n    # Calculate the sum of the last n bits\n    for i in range(n-1, -1, -1):\n        sum_bits += 2 ** i\n\n    # Check if the sum of first n bits is same as sum of last n bits\n    if sum_bits == 2 ** n:\n        count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**n*2):\n        if i % 2 == 0:\n            sum_1 = sum(i//2**n % 2 for _ in range(n))\n            sum_2 = sum(i//2 % 2 for _ in range(n))\n        else:\n            sum_1 = sum(i//2**n % 2 for _ in range(n))\n            sum_2 = sum(i//2 % 2 for _ in range(n))\n        if sum_1 == sum_2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            sum1 += i % 2\n            i //= 2\n        for j in range(n):\n            sum2 += i % 2\n            i //= 2\n        if sum1 == sum2:\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of all binary sequences of length 2n is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        seq = bin(i)[2:]\n        if int(seq[:n]) + int(seq[-n:]) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        # Get the sum of first n bits \n        s = sum([int(i[j]) for j in range(n)]) \n        # Get the sum of last n bits \n        t = sum([int(i[j+n]) for j in range(n)]) \n        # Check if the sum of first n bits is same as sum of last n bits \n        if s == t: \n            count += 1 \n    return count \n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Initialize an empty list to store the binary sequences\n    binary_seq = []\n\n    # Initialize a counter variable to store the count of binary sequences\n    count = 0\n\n    # Loop through all possible binary sequences\n    for i in range(2 ** n):\n        # Convert the binary sequence to a list of bits\n        bits = [int(digit) for digit in bin(i)[2:]]\n\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum(bits[:n]) == sum(bits[-n:]):\n            # If yes, append the binary sequence to the list\n            binary_seq.append(bits)\n            # Increment the count of binary sequences\n            count += 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    total_sum = 0\n    \n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        # Get the first n bits\n        first_n = bin(i)[2:]\n        \n        # Get the last n bits\n        last_n = bin(i)[-n-2:][::-1]\n        \n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(first_n, 2) == int(last_n, 2):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2**n):\n        # convert integer to binary string\n        binary_str = bin(i)[2:].zfill(2*n)\n        # calculate sum of first n bits and last n bits\n        sum_first_n = int(binary_str[:n])\n        sum_last_n = int(binary_str[-n:])\n        # check if sum of first n bits and last n bits are same\n        if sum_first_n == sum_last_n:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        num = bin(i)[2:].zfill(2*n) \n        if sum(int(digit) for digit in num[:n]) == sum(int(digit) for digit in num[-n:]): \n            count += 1 \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n            depth = max(depth, dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        max_depth = 0\n        for value in d.values():\n            depth = dict_depth(value)\n            max_depth = max(max_depth, depth + 1)\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [(d, 0)]\n    while stack:\n        current, depth = stack.pop()\n        if isinstance(current, dict):\n            for key, value in current.items():\n                stack.append((value, depth + 1))\n        elif isinstance(current, list):\n            for item in current:\n                stack.append((item, depth + 1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    if isinstance(d, dict):\n        for key, value in d.items():\n            count += 1\n            if isinstance(value, (dict, list)):\n                count += dict_depth(value)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth = 1 + dict_depth(d[key])\n        else:\n            current_depth = 1\n        max_depth = max(max_depth, current_depth)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth of the dictionary\n    depth = 0\n    \n    # Recursively traverse the dictionary and increment the depth variable for each nested dictionary\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n            \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary d and returns the depth of the dictionary.\n    The depth of a dictionary is the maximum number of levels from the root to the leaf node(s).\n    \"\"\"\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Initialize a variable to keep track of the depth\n    depth = 0\n\n    # Recursively traverse the dictionary to find its depth\n    def traverse(d, level):\n        # Increment the depth by one for each level we traverse\n        depth += level\n\n        # Traverse the keys in the dictionary\n        for key in d.keys():\n            # Recursively traverse the value of the key if it is a dictionary\n            if isinstance(d[key], dict):\n                traverse(d[key], level + 1)\n\n    # Call the recursive function to traverse the dictionary\n    traverse(d, 1)\n\n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    count = 0\n    for _ in d.values():\n        count += 1\n    return count"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the number of rotations that need to be performed\n    num_rotations = len(rotations)\n    # Perform the number of rotations required\n    for i in range(num_rotations):\n        # Find the index of the current element after the rotation\n        new_index = (index + rotations[i]) % len(arr)\n        # Find the element at the new index\n        new_element = arr[new_index]\n        # Replace the current element in the array with the new element\n        arr[index] = new_element\n        index = new_index\n    # Return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, an array of ranges, and a number of rotations.\n    It then returns the element at the given index after the given number of rotations.\n    '''\n    n = len(arr)\n\n    # Iterate through all the rotations\n    for i in range(rotations):\n        # Create a new array to store the rotated array\n        rotated_arr = []\n\n        # Iterate through all the elements in the array\n        for j in range(n):\n            # Calculate the new index\n            new_index = (j + i) % n\n            # Add the element at the new index to the new array\n            rotated_arr.append(arr[new_index])\n\n        # Update the array to the new rotated array\n        arr = rotated_arr\n\n    # Find the element at the given index in the original array\n    for j in range(n):\n        # Calculate the new index\n        new_index = (j + index) % n\n        # If the new index is within the range, return the element\n        if new_index >= 0 and new_index < n:\n            return arr[new_index]\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    current_index = 0\n    rotation_index = 0\n    next_index = index\n\n    # Loop through all the elements in the array\n    while current_index < len(arr):\n        # Calculate the rotation index for the current element\n        rotation_index = (current_index + rotations) % len(arr)\n        # Calculate the next index after the rotation\n        next_index = (next_index + rotations) % len(arr)\n\n        # If the current index is equal to the rotation index, it means the element at the current index should be returned\n        if current_index == rotation_index:\n            return arr[index]\n\n        # Move to the next element\n        current_index = next_index + 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: A list of integers.\n    :param ranges: A list of two integers.\n    :param rotations: An integer.\n    :param index: An integer.\n    :return: The element at the given index after rotations.\n    \"\"\"\n\n    # Initialize the element to be searched\n    current_element = arr[index]\n\n    # Perform rotations\n    for i in range(rotations):\n        # Find the index of the smallest element in the current range\n        smallest_index = current_element\n        for j in range(ranges[0], ranges[1] + 1):\n            if arr[j] < arr[smallest_index]:\n                smallest_index = j\n\n        # Swap the current element with the smallest element in the current range\n        arr[index], arr[smallest_index] = arr[smallest_index], arr[index]\n\n        # Update the current element and range\n        current_element = arr[index]\n        ranges[0] = ranges[1]\n        ranges[1] = index\n\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the number of rotations required to find the element at the given index\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            rotations = i - 1\n            break\n\n    # Calculate the element at the new index\n    element = arr[index - rotations]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the total number of rotations needed\n    total_rotations = sum(ranges) + sum(rotations)\n    # Calculate the distance to travel from the start of the list to the given index\n    distance = total_rotations - index\n    # Find the element at the calculated distance after rotations\n    element = arr[distance % len(arr)]\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges of rotations and an index as input. \n    The array represents the elements that can be rotated, the ranges of rotations represent the \n    number of rotations for each element and the index represents the element for which we want to find the rotation count.\n    The function returns the element that needs to be rotated after the given index after the specified number of rotations.\n    '''\n    \n    # initialize variables\n    rotation = 0\n    current_index = 0\n    element = arr[0]\n    \n    # loop through the elements and check if the index matches the current element\n    while (current_index < index):\n        # increment the rotation count and update the current element\n        rotation += 1\n        current_index += ranges[current_index]\n        \n    # check if the element is already at the desired index after the required number of rotations\n    if (current_index == index):\n        return element\n    \n    # loop through the remaining elements and find the element after the desired index after the required number of rotations\n    while (current_index < index + rotations):\n        # check if the current element is already at the desired index after the required number of rotations\n        if (current_index + ranges[current_index] == index):\n            return element\n        \n        # increment the current element and update the rotation count\n        current_index += ranges[current_index]\n        rotation += 1\n        \n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges and a list of rotations, and an index.\n    The array is the list of integers, the list of ranges is a list of pairs of integers representing the\n    start and end index of the range, and the list of rotations is a list of integers representing the\n    number of rotations to be performed before finding the element at the given index.\n    The function returns the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Initialize variables\n    start_index = 0\n    end_index = len(arr) - 1\n    element = arr[index]\n\n    # Perform the specified rotations\n    for rotation in rotations:\n        start_index = start_index + rotation\n        end_index = end_index - rotation\n        temp = arr[start_index]\n        arr[start_index] = arr[end_index]\n        arr[end_index] = temp\n\n    # Find the element at the given index after the rotations\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if element == arr[mid_index]:\n            return arr[mid_index]\n        elif element < arr[mid_index]:\n            end_index = mid_index - 1\n        else:\n            start_index = mid_index + 1\n\n    return \"Element not found\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function will find the element at a given index after a certain number of rotations.\n    '''\n    result = arr[index]\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n        temp_index = index + (i*len(arr)) % len(arr)\n        if temp_index >= len(arr):\n            temp_index = temp_index - len(arr)\n        result = arr[temp_index]\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the element at the given index after rotations\n    for i in range(index+1,len(arr)+1) :\n        if i-1 in ranges or arr[i-1] in ranges :\n            break\n\n    # If the element is not found, return -1\n    if i-1 == len(arr)+1 :\n        return -1\n\n    # If the element is found, return its value\n    else :\n        return arr[i-1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expression to filter out words that don't start with 'p'\n    filtered_words = re.findall(r'\\b[Pp]\\w+\\b',''.join(words))\n    # Check if there are exactly two words that start with 'p'\n    if len(filtered_words)!= 2:\n        return \"There are not exactly two words starting with 'p' in the list.\"\n    # Return the two words as a string\n    else:\n        return f\"{filtered_words[0]} and {filtered_words[1]}\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the pattern to match words starting with 'p'\n    pattern = r'^p\\w*'\n    # Use the re.findall function to extract all words that match the pattern\n    matches = re.findall(pattern, words)\n    # Return the first two matches if they exist, otherwise return None\n    if len(matches) >= 2:\n        return matches[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = r'^\\w+p'\n    p_matches = re.findall(p_pattern, words)\n    return p_matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'^p\\w+', words)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.match('^p', words[i]):\n            return words[i:i+2]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # regular expression pattern for a word starting with 'p'\n    pattern = r'^p\\w+'\n    # list of words to search for 'p' words in\n    search_list = words\n    # list of 'p' words found in the search list\n    p_words = []\n    # loop through each word in the search list\n    for word in search_list:\n        # check if the word matches the pattern\n        if re.match(pattern, word):\n            # if it does, add it to the list of 'p' words found\n            p_words.append(word)\n            # if the length of the list of 'p' words found is equal to 2, return the two words\n            if len(p_words) == 2:\n                return p_words\n    # if no 'p' words were found, return an empty list\n    return p_words"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the sum of increasing subsequence till i\n    sums = [0] * (n+1)\n\n    # Initialize the maximum sum to be 0\n    max_sum = 0\n\n    # Initialize the maximum increasing subsequence to be 0\n    max_increasing_subseq = [0] * (n+1)\n\n    # Loop through all elements from 0 to n\n    for i in range(1, n+1):\n        # Calculate the sum of the previous increasing subsequence till i\n        if i > 1 and k > i:\n            sums[i] = sums[i-1] + a[k]\n        else:\n            sums[i] = a[i]\n\n        # Calculate the maximum sum of increasing subsequence till i\n        if i == index:\n            max_sum = sums[i]\n        elif sums[i] > sums[index] + a[i]:\n            max_sum = sums[i]\n            max_increasing_subseq[i] = 1\n        elif sums[i] == sums[index] + a[i]:\n            max_increasing_subseq[i] = max_increasing_subseq[index] + 1\n\n    # Return the maximum sum of increasing subsequence and its index\n    return max_sum, max_increasing_subseq[n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    if index == 0:\n        return max(0, a[0] - k)\n    \n    if index == 1:\n        return max(max(0, a[0] - k), max(max_sum_increasing_subseq(a, n, index - 1, k - 1), a[0] - k))\n    \n    return max(max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 2, k - 1)) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, n):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n        else:\n            dp[i] = max(dp[i], dp[index])\n            \n    max_sum = dp[index]\n    for i in range(index - 1, -1, -1):\n        if dp[i] + a[i] > max_sum:\n            max_sum = dp[i] + a[i]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # initialize maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # iterate over all subarrays from prefix to index\n    for i in range(index, k):\n        # update current sum\n        curr_sum += a[i]\n        \n        # update maximum sum if current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    \n    # return maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function calculates the maximum sum of increasing subsequence from prefix until index and including the kth element which is after index.\n    The function returns the maximum sum.\n    \"\"\"\n    if k > index:\n        return 0\n    elif k == index:\n        return a[k]\n    else:\n        max_sum = float('-inf')\n        for i in range(k, index+1):\n            current_sum = a[i] + max_sum_increasing_subseq(a, n, index, k-1)\n            max_sum = max(max_sum, current_sum)\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    def LIS(arr, n):\n        # Create a table to store LIS lengths and previous indices of subsequences\n        table = [[0] * n for _ in range(n)]\n\n        # Initialize LIS of all subsequences as 1\n        for i in range(n):\n            table[i][i] = 1\n\n        # Fill up the table in bottom up manner\n        for i in range(1, n):\n            for j in range(i):\n                if arr[i] > arr[j] and table[i - 1][j] + 1 > table[i][j]:\n                    table[i][j] = table[i - 1][j] + 1\n                    table[i][j] = max(table[i][j], table[i][j + 1])\n\n        # Return the maximum length LIS ending at index i\n        return table[n - 1][n - 1]\n\n    # Calculate LIS of the prefix up to index\n    lis = LIS(a[:index + 1], index + 1)\n\n    # Calculate LIS of the prefix up to k\n    k_lis = LIS(a[:k + 1], k + 1)\n\n    # Calculate the maximum sum of increasing subsequence starting from k\n    return max(lis, k_lis + a[k])\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k > index:\n        # If k is greater than index, then it's not possible to include kth element\n        # in the maximum increasing subsequence\n        return float('-inf')\n\n    # Initialize max_sum to 0 and sum to a[index]\n    max_sum = a[index]\n    sum_of_subseq = a[index]\n\n    # Check if index is not first index\n    if index > 0:\n        # Traverse through all subsequences from index-1 to 0\n        for i in range(index-1, -1, -1):\n            if a[i] < a[index] and a[i] + sum_of_subseq > max_sum:\n                max_sum = a[i] + sum_of_subseq\n                sum_of_subseq = max_sum\n\n    # Check if k is present in the subsequence\n    if a[k] < a[index] and k + max_sum > sum_of_subseq:\n        max_sum = k + sum_of_subseq\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    \n    for i in range(index, n):\n        dp[i + 1] = max(dp[i + 1], dp[i] + a[i])\n        \n        if i == k - 1:\n            max_sum = max(max_sum, dp[i + 1])\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = 0\n    max_ending_here = 0\n    i = 0\n\n    # Iterate through the array\n    while i < n:\n        # If the current element is greater than k, update max_ending_here and move to next element\n        if a[i] > k:\n            max_ending_here = max(a[i] + max_ending_here, max_ending_here)\n            i += 1\n        else:\n            # If the current element is not greater than k, update max_sum, max_ending_here and move to next element\n            if max_ending_here > max_sum:\n                max_sum = max_ending_here\n            max_ending_here = a[i]\n            i += 1\n\n    # If the last element is greater than k, update max_sum\n    if max_ending_here > max_sum:\n        max_sum = max_ending_here\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return float('-inf')\n    elif k == index:\n        return a[k]\n    else:\n        dp = [0] * n\n        dp[index] = a[index]\n        for i in range(index, -1, -1):\n            if i == k-1:\n                dp[i] = a[i] + dp[i+1]\n            elif i > k-1:\n                dp[i] = max(dp[i+1], a[i]+dp[i+1])\n        return dp[0]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(tuplex)\n    # iterate through the tuple and add the values to a new list\n    colon = []\n    for i in range(length):\n        # get the index of the element to add to the new colon\n        index = (i+1) // m\n        # add the element to the new colon\n        colon.append(new_tuplex[index])\n    # return the new colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append((deepcopy(tuplex[i][n]),))\n    return tuple(col)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # loop through the tuple\n    for i in range(m):\n        # loop through the elements in the tuple\n        for j in range(n):\n            # get the index of the element in the tuple to modify\n            index = i*n + j\n            # modify the element in the tuple\n            new_tuplex[index] = '*'\n    # return the modified tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(len(tuplex)-1):\n        result.append((tuplex[i], tuplex[i+1]))\n    if len(tuplex) < n:\n        for i in range(n-len(tuplex)):\n            result.append((' ',''))\n    result = deepcopy(result)\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple to avoid modifying the original\n    new_tuplex = deepcopy(tuplex)\n    # Get the number of elements in the input tuple\n    num_elements = len(new_tuplex)\n    # Get the last element in the tuple\n    last_element = new_tuplex[-1]\n    # Create an empty list to store the colon\n    colon = []\n    # Loop through the last element\n    for i in range(m):\n        # Append the i-th element of the tuple to the colon\n        colon.append(last_element[i])\n    # Reverse the colon to get the correct order\n    colon.reverse()\n    # Add the colon to the tuple\n    new_tuplex[-1] = colon\n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is empty\n    if len(tuplex) == 0:\n        return []\n    else:\n        # Check if the length of the tuple is equal to n\n        if len(tuplex) == n:\n            # Create a copy of the tuple\n            colon = deepcopy(tuplex)\n            # Reverse the order of the elements in the colon\n            colon.reverse()\n            # Return the colon\n            return colon\n        else:\n            # Split the tuple into two parts\n            left_part, right_part = tuplex[:m], tuplex[m:]\n            # Recursively call the function on the left part and the right part\n            left_colon, right_colon = colon_tuplex(left_part, m, n), colon_tuplex(right_part, m, n)\n            # Concatenate the colon of the left and right parts\n            return left_colon + right_colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp.append(deepcopy(tuplex[i*n+j]))\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # get the length of the tuple\n    tuplex_length = len(tuplex_copy)\n\n    # calculate the number of rows and columns\n    rows = tuplex_length // n\n    columns = n\n\n    # get the indices for the colon\n    indices = [x * columns + y for x in range(rows) for y in range(n)]\n\n    # create a new list with the colon indices\n    colon_indices = []\n    for i in indices:\n        colon_indices.append(tuplex_copy.pop(i))\n\n    # reverse the colon indices\n    colon_indices.reverse()\n\n    # create a new tuple from the colon indices\n    colon_tuplex = tuple(colon_indices)\n\n    # return the colon tuple\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[i],)\n    for i in range(m,n):\n        new_tuplex = (new_tuplex[i],) + (new_tuplex[i-m],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # find the length of the longest tuple in the input set\n    max_length = max([len(tuplex_copy[i]) for i in range(len(tuplex_copy))])\n\n    # iterate over the length of the colon to find the correct indices\n    for i in range(m):\n        for j in range(max_length):\n            # check if the current tuple contains the required number of elements\n            if j + i + 1 <= n:\n                # if the current tuple contains the required number of elements, find the indices and return them as a colon\n                for k in range(len(tuplex_copy)):\n                    if j + i + 1 <= len(tuplex_copy[k]):\n                        # check if the current tuple contains the required number of elements\n                        if j + i + 1 <= len(tuplex_copy[k]):\n                            colon = (k, j, j + i + 1)\n                            return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    :param nums1: List of integers.\n    :param nums2: List of integers.\n    :param N: Integer.\n    :return: A list of integers containing the N largest products from the two input lists.\n    \"\"\"\n\n    # Convert the lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n\n    # Find the common elements between the two lists\n    common_set = nums1_set & nums2_set\n\n    # Check if there are N common elements\n    if len(common_set) < N:\n        # If not, return an empty list\n        return []\n\n    # Sort the common elements in descending order\n    sorted_common = sorted(list(common_set), reverse=True)\n\n    # Compute the products of the largest N common elements\n    products = [sorted_common[i] * sorted_common[i+1] for i in range(len(sorted_common)-1)]\n\n    # Return the products as a list\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    # create a dictionary to store the products for each factor combination\n    products = {}\n    \n    # iterate through all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the factors and store it in the dictionary\n            products[(i, j)] = nums1[i] * nums2[j]\n    \n    # sort the dictionary by the value in descending order\n    sorted_products = sorted(products.items(), key=lambda x: x[1], reverse=True)\n    \n    # select the N largest products and return them as a list\n    result = [sorted_products[i][0] for i in range(N)]\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize the result list with zeros\n    result = [0] * N\n    \n    # Loop through all possible combinations of indices\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the corresponding factors\n            product = nums1[i] * nums2[j]\n            # Update the result list with the maximum value\n            result[i] = max(result[i], product)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Compute the maximum product of any two factors\n    max_product = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            product = nums1[i] * nums2[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to store the largest products and their indices\n    largest_product = float('-inf')\n    largest_product_idx1 = -1\n    largest_product_idx2 = -1\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product1 = nums1[0] * nums1[1]\n        product2 = nums2[0] * nums2[1]\n\n        # Update the largest_product and its indices\n        if product1 > largest_product:\n            largest_product = product1\n            largest_product_idx1 = 0\n            largest_product_idx2 = 0\n        elif product1 == largest_product and nums1[0] > nums1[largest_product_idx1]:\n            largest_product = product1\n            largest_product_idx1 = 0\n        elif product1 == largest_product and nums1[0] < nums1[largest_product_idx1]:\n            largest_product = product1\n            largest_product_idx1 = 1\n\n        if product2 > largest_product:\n            largest_product = product2\n            largest_product_idx2 = 0\n            largest_product_idx1 = 0\n        elif product2 == largest_product and nums2[0] > nums2[largest_product_idx2]:\n            largest_product = product2\n            largest_product_idx2 = 0\n        elif product2 == largest_product and nums2[0] < nums2[largest_product_idx2]:\n            largest_product = product2\n            largest_product_idx2 = 1\n\n    # Return the indices of the largest products and their products\n    return largest_product_idx1, largest_product_idx2, largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # calculate the product of the first N elements of the two sorted lists\n    product = nums1[0] * nums2[0]\n    \n    # loop through the remaining elements of the two sorted lists\n    for i in range(1, N):\n        # calculate the product of the next N-i elements of the two sorted lists\n        next_product = nums1[i] * nums2[i]\n        \n        # update the product if it's larger than the current largest product\n        if next_product > product:\n            product = next_product\n    \n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n\n    # loop through each list of numbers and compare the largest products\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # update the largest products if the current product is greater\n            if product > largest1:\n                largest1 = product\n            if product > largest2:\n                largest2 = product\n\n    # return the largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_products = []\n\n    # Loop through the given lists and find the largest products\n    for i in range(N):\n        # Multiply the two largest numbers in each list\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n\n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of the same length')\n\n    if N > len(nums1):\n        raise ValueError('N must be less than or equal to the length of the first list')\n\n    # Initialize variables for the largest products\n    largest_product_1 = 0\n    largest_product_2 = 0\n    largest_product_3 = 0\n\n    # Loop through each combination of two factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            for k in range(j+1, len(nums1)+1):\n                product_1 = nums1[i] * nums1[j] * nums1[k]\n                product_2 = nums2[i] * nums2[j] * nums2[k]\n                product_3 = product_1 * product_2\n\n                if product_3 > largest_product_1:\n                    largest_product_3 = largest_product_2\n                    largest_product_2 = largest_product_1\n                    largest_product_1 = product_3\n\n                elif product_3 > largest_product_2:\n                    largest_product_3 = largest_product_2\n                    largest_product_2 = product_3\n\n                elif product_3 > largest_product_3:\n                    largest_product_3 = product_3\n\n    return largest_product_1, largest_product_2, largest_product_3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        product = 1\n        for num in nums1:\n            product *= num\n        for num in nums2:\n            product *= num\n        max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers using the if-else statement.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of its characters.\n    \"\"\"\n    # Create an empty tuple\n    result = ()\n    # Loop through each character in the string\n    for char in str1:\n        # Append each character to the result tuple\n        result += (char,)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    tuple_str = ()\n    # iterate over each character in the string\n    for char in str1:\n        # append the character to the tuple\n        tuple_str += (char,)\n    # return the tuple of characters\n    return tuple_str"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a mask with all 1s\n    mask = 0xFFFFFFFF\n    # Set the least significant bit to 1\n    mask |= 1\n\n    # Shift the mask to the left by the number of unset bits in n\n    mask <<= n.bit_length() - n.bit_count() - 1\n\n    # Set the left most unset bit of n using the mask\n    n |= mask\n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:\n        n = n >> 1\n    return n + 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize count of unset bits to n\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    \n    # Set the left most unset bit to 1\n    return 1 << (count - 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize variable to keep track of unset bits\n    unset_bits = 0\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, unset_bits++\n        if bit == '0':\n            unset_bits += 1\n            # If unset_bits reaches the rightmost bit, set the leftmost unset bit to 1\n            if unset_bits == len(bin(n)[2:]):\n                return n | (1 << (unset_bits-1))\n    \n    # If no unset bits are found, return n unchanged\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 0x80000000 # 2^31\n    while bit & n:\n        bit >>= 1\n    \n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a number.\n    '''\n    # Initialize an empty string to hold the binary representation of n\n    binary_representation = ''\n\n    # Loop through each bit position in the binary representation of n\n    for i in range(32):\n        # Check if the bit at position i is set to 1\n        if (n >> i) & 1 == 1:\n            # If the bit is set to 1, set it to 0\n            n = n & ~(1 << i)\n            # Append the binary representation of n to the string\n            binary_representation += '1'\n        else:\n            # If the bit is set to 0, set it to 1\n            n = n | (1 << i)\n            # Append the binary representation of n to the string\n            binary_representation += '0'\n\n    # Convert the binary representation string to an integer\n    n = int(binary_representation, 2)\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # while there are even bits left\n        n >>= 1 # shift them one bit to the right\n    n |= 1 # set the left most bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # iterate over all set bits in binary representation of n\n    for bit in bin(n)[2:]:\n        # if bit is 0, set it to 1 and break out of the loop\n        if bit == '0':\n            n = n | (1 << int(bit))\n            break"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # loop until the leftmost bit is set\n        n = n >> 1 # shift right until the leftmost bit is set\n    return n << 1 # set the leftmost unset bit to 1"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r * r * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula V = 1/3 * \u03c0 * r^2 * h.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone with a given radius and height.\n    '''\n    # calculate the volume using the formula: V = 1/3 * \u03c0 * r^2 * h\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n    \"\"\"\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    '''\n    pi = math.pi\n    area = pi * r * r * h / 3\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone using the formula:\n    V = \u03c0 r\u00b2 h\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = 1/3 * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 found so far\n    highest_power = 0\n    \n    # loop through all powers of 2 from 1 to the square root of n\n    for power in range(1, int(n ** 0.5) + 1):\n        # check if this power of 2 is greater than or equal to n\n        if power * power <= n:\n            # if it is, update the highest power of 2 found so far\n            highest_power = power\n    \n    # return the highest power of 2 found so far\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n = n >> 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the maximum power of 2 to be one less than n\n    max_power = n - 1\n    # Iterate through all the powers of 2 from 1 to n-1\n    for power in range(1, n):\n        # If the power is less than the maximum power of 2, update the maximum power of 2\n        if power < max_power:\n            max_power = power\n    # Return the maximum power of 2\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n            highest += 1\n        else:\n            n -= 1\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    highest_power_of_2 = 1\n\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    \n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n\n    # check if n is a power of 2\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n: \n        if i >= 2**(i-1): \n            return i \n        i = i * 2 "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if i == n or n % i == 0:\n            return i\n        i <<= 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th lucas number.\n    \"\"\"\n    # initialize the first two lucas numbers\n    a, b = 2, 1\n    \n    # iterate through the remaining numbers\n    for i in range(2, n+1): \n        # calculate the next lucas number\n        c = a + b\n        # update the values of a and b\n        a = b\n        b = c\n    \n    # return the final value of a\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the list of primes to all ones\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    p = 2\n    while p * p <= n:\n        # If the current prime is marked, mark its multiples\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n\n    # Return the nth lucas number\n    return sum(range(2, n + 1)) if n == 0 else sum(range(2, n + 1)) if primes[n] else None"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the first term of the sequence as 2\n    lucas_term = 2\n    \n    # add the odd numbers up to 2n in increments of 2\n    for i in range(2, 2*n+1, 2): \n        lucas_term += i\n    \n    # return the nth term of the sequence\n    return lucas_term"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    lucas = [2]\n    for i in range(2, n):\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number using the closed-form expression.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (4 * find_lucas(n-1) - find_lucas(n-2)) // 2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1): \n            curr = prev_prev + prev \n            prev_prev = prev \n            prev = curr \n        return curr "
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # loop through the list and apply the format string to each element\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Convert a list of lists to a nested dictionary.\n    '''\n    if not lists:\n        raise ValueError('At least one list must be provided.')\n    \n    result = {}\n    for list in lists:\n        for item in list:\n            if item not in result:\n                result[item] = {}\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        for item in lst:\n            if isinstance(item, list):\n                key = f'list_{i}'\n                result[key] = convert_list_dictionary(*item)\n            elif isinstance(item, dict):\n                key = f'dict_{i}'\n                result[key] = item\n            else:\n                key = f'value_{i}'\n                result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key1, key2, key3 = l1[i], l2[i], l3[i]\n        if key1 not in result:\n            result[key1] = {}\n        if key2 not in result[key1]:\n            result[key1][key2] = {}\n        if key3 not in result[key1][key2]:\n            result[key1][key2][key3] = []\n        result[key1][key2][key3].append(l1[i])\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List of strings.\n    l2 (list): List of tuples.\n    l3 (list): List of lists.\n\n    Returns:\n    list: Nested dictionary containing the given lists as values.\n    '''\n\n    # Initialize an empty dictionary\n    nested_dict = {}\n\n    # Loop through each list\n    for lst in [l1, l2, l3]:\n        # Loop through each element of the list\n        for elem in lst:\n            # Check if the element is a tuple\n            if isinstance(elem, tuple):\n                # Loop through each element of the tuple\n                for subelem in elem:\n                    # If the subelement is a string, add it to the dictionary as a key\n                    if isinstance(subelem, str):\n                        nested_dict[subelem] = []\n            # If the element is a string, add it to the dictionary as a key\n            elif isinstance(elem, str):\n                nested_dict[elem] = []\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(args)):\n        for item in args[i]:\n            if isinstance(item, list):\n                for subitem in item:\n                    if isinstance(subitem, dict):\n                        result.update(subitem)\n                    else:\n                        result[i] = subitem\n            else:\n                result[i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # iterate over each list\n    for i in range(len(l1)):\n        # create a nested dictionary for the current list\n        nested_dict = {}\n\n        # iterate over each element in the list and add it to the nested dictionary\n        for j in range(len(l1[i])):\n            # add the element to the nested dictionary\n            nested_dict[l2[i][j]] = l3[i][j]\n\n        # add the nested dictionary to the result dictionary with the list index as the key\n        result[i] = nested_dict\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the nested dictionary\n    result = {}\n\n    # Iterate through the first list\n    for i in range(len(l1)):\n        # Create a new dictionary for each item in the first list\n        nested = {}\n        # Iterate through the second list and append each item to the new dictionary\n        for j in range(len(l2[i])):\n            nested[l2[i][j]] = l3[i][j]\n        # Add the new dictionary to the result dictionary\n        result[l1[i]] = nested\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, list_ in enumerate(lists):\n        for item in list_:\n            key = list(item.keys())[0]\n            value = list(item.values())[0]\n            if key not in result:\n                result[key] = {}\n            result[key][i] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # Create a dictionary with keys as l1, l2 and l3, and values as lists\n    nested_dict = {l1: l2, l2: l3}\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    elif n == 2:\n        return 4\n    \n    elif n == 3:\n        return 9\n    \n    elif n == 4:\n        return 16\n    \n    elif n == 5:\n        return 25\n    \n    else:\n        return n + max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    max_sum = 0\n    for i in range(1, n+1):\n        max_sum = max(max_sum, get_max_sum(n//i))\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n <= 1:\n        return n\n\n    if n == 2:\n        return 5\n\n    max_sum = n\n    if n % 2 == 0:\n        max_sum = max(max_sum, n // 2 + get_max_sum(n // 2))\n    if n % 3 == 0:\n        max_sum = max(max_sum, n // 3 + get_max_sum(n // 3))\n    if n % 4 == 0:\n        max_sum = max(max_sum, n // 4 + get_max_sum(n // 4))\n    if n % 5 == 0:\n        max_sum = max(max_sum, n // 5 + get_max_sum(n // 5))\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    max1 = get_max_sum(n//2)\n    max2 = get_max_sum(n//3)\n    max3 = get_max_sum(n//4)\n    max4 = get_max_sum(n//5)\n    \n    return max(max1 + max2 + max3 + max4, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Create an empty dictionary to store the length of each element in the list\n    lengths = {}\n    \n    # Loop through the input list and update the lengths dictionary\n    for item in input_list:\n        if item in lengths:\n            lengths[item] += 1\n        else:\n            lengths[item] = 1\n    \n    # Find the list with the maximum length in the dictionary\n    max_length = max(lengths, key=lengths.get)\n    \n    # Create a new list with only the elements that have the maximum length\n    output_list = [item for item in input_list if lengths[item] == lengths[max_length]]\n    \n    return output_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(sublist) for sublist in input_list]\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set of the tuple's elements to check for duplicates\n    set_of_elements = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(set_of_elements) == len(test_tup):\n        # if true, the tuple contains no duplicates\n        return True\n    else:\n        # if false, the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character by iterating through the dictionary and checking if the frequency is 1\n    for char, freq in freq.items():\n        if freq == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # iterate through the string and count the number of occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # iterate through the string again and find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    # if no character has count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first non-repeated character in the frequency dictionary\n    first_non_repeating = None\n    for char, freq in freq_dict.items():\n        if freq == 1:\n            first_non_repeating = char\n            break\n    \n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            # return the character if it has a count of 1\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create an empty dictionary to store the frequency of each character\n    freq_dict = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not in the dictionary, add it with a frequency of 1\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[char] += 1\n    \n    # Find the first character in the dictionary with a frequency of 1\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in it.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not isinstance(string, str):\n        return False\n\n    if re.match(regex, string):\n        return True\n\n    return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    This function takes a string as input and checks whether the string starts and ends with the same character or not.\n\n    Args:\n        string (str): A string to check for the start and end of the same character.\n\n    Returns:\n        bool: True if the string starts and ends with the same character, False otherwise.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the midpoint of the sorted list\n    midpoint = len(sorted_list) // 2\n    \n    # If the length of the list is even, the median is the average of the middle two numbers\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[midpoint - 1] + sorted_list[midpoint]) / 2\n    else:\n        median = sorted_list[midpoint]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        median = numbers[length // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the indices of the middle numbers\n    mid1 = len(numbers) // 2\n    mid2 = len(numbers) // 2\n    \n    # Return the median of the three numbers\n    if len(numbers) % 2 == 0:\n        return (numbers[mid1] + numbers[mid2]) / 2\n    else:\n        return numbers[mid1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n\n    # Find the middle element of the list\n    mid = len(num_list) // 2\n\n    # If the length of the list is odd, then the median is the middle element\n    if len(num_list) % 2!= 0:\n        return num_list[mid]\n\n    # If the length of the list is even, then the median is the average of the two middle elements\n    else:\n        return (num_list[mid-1] + num_list[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num_list = [a, b, c]\n    num_list.sort()\n    if len(num_list) % 2 == 0:\n        return (num_list[len(num_list)//2 - 1] + num_list[len(num_list)//2]) / 2\n    else:\n        return num_list[len(num_list)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n    \n    # Finding the median based on the length of the list\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2-1] + num_list[len(num_list)//2])/2\n    else:\n        median = num_list[len(num_list)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        mid = len(numbers) // 2\n        median = (numbers[mid-1] + numbers[mid]) / 2\n    else:\n        mid = len(numbers) // 2\n        median = numbers[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        return sorted_numbers[len(sorted_numbers) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    \n    # Calculate the median\n    median = sorted_list[len(sorted_list) // 2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    a, b, c = sorted([a, b, c])\n    # calculate the median\n    median = (a + b + c) / 3\n    # return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_of_digits += digit\n            num //= 10\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        num_digits = [int(digit) for digit in str(num)]\n        total_digits = sum(num_digits)\n        sum_of_digits.append(total_digits)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a list to store the sum of digits of each number\n    sums = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        num_str = str(num)\n        num_list = [int(x) for x in num_str]\n        \n        # Initialize a variable to store the sum of digits\n        num_sum = 0\n        \n        # Loop through each integer in the number's string and add its value to the sum\n        for digit in num_list:\n            num_sum += digit\n        \n        # Add the sum of digits to the list of sums\n        sums.append(num_sum)\n    \n    # Return the list of sums\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number in a given list.\n    \"\"\"\n    # Initialize an empty list to store the sum of digits of each number\n    sum_list = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string using the `str` function\n        num_str = str(num)\n        # Convert the string to a list of digits using the `list` function\n        num_list = list(num_str)\n        # Loop through each digit in the list and add it to the sum\n        total = 0\n        for digit in num_list:\n            total += int(digit)\n        # Add the sum to the `sum_list`\n        sum_list.append(total)\n\n    # Return the `sum_list` containing the sum of digits of each number\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = test_tup1 ^ test_tup2\n    print(\"The XOR result of the two tuples is:\", xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert the tuples to lists to perform the bitwise xor operation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # iterate through each element of the lists\n    for i in range(len(list1)):\n        # perform the bitwise xor operation\n        list1[i] = list1[i] ^ list2[i]\n\n    # convert the list back to a tuple and return it\n    return tuple(list1)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the result and carry values\n    result = 0\n    carry = 0\n\n    # Iterate through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        # Extract the current bits from the tuples and shift them to the right to simulate the bitwise xor operation\n        x = (test_tup1[i] >> 1) ^ (test_tup2[i] >> 1)\n        # Calculate the carry value\n        if (test_tup1[i] ^ test_tup2[i]) & 1:\n            carry = 1\n        else:\n            carry = 0\n        # Shift the carry value to the left to add it to the result\n        result = (result << 1) | carry\n\n    # Return the final result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables to store the result and the length of the tuples\n    result = 0\n    length = len(test_tup1)\n    \n    # loop through each element of the tuples\n    for i in range(length):\n        # perform the bitwise xor operation and store the result in the result variable\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n    \n    # return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples\n    tup1, tup2 = test_tup1, test_tup2\n    \n    # initialize the result tuple with the same length as the first tuple\n    result_tup = tuple([0] * len(tup1))\n    \n    # iterate over each element in the first tuple and xor it with the corresponding element in the second tuple\n    for i in range(len(tup1)):\n        result_tup[i] = tup1[i] ^ tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    unique_list = set()\n    for i in test_list:\n        if (i not in unique_list):\n            unique_list.add(i)\n            count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes in a list and returns the number of unique tuples\n    in the list.\n\n    Args:\n        test_list (list): List of tuples to extract the frequency of.\n\n    Returns:\n        int: Number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set of tuples from the list\n    unique_tuples = set(tuple(x) for x in test_list)\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n    \n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup not in freq_dict:\n            # If it's not, add it with a frequency of 1\n            freq_dict[tup] = 1\n        else:\n            # If it's already in the dictionary, increment its frequency\n            freq_dict[tup] += 1\n            \n    # Return the total frequency of each tuple in the dictionary\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    \n    for item in test_list:\n        if (item[0], item[1]) not in unique_freq:\n            unique_freq[(item[0], item[1])] = 1\n        else:\n            unique_freq[(item[0], item[1])] += 1\n    \n    return len(unique_freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result = []\n    # Iterate through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Iterate through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements of the two tuples and append the result to the result list\n            result.append(test_tup1[i] + test_tup2[i][j])\n    # Return the resultant tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= tuple or type(test_tup2[i])!= tuple:\n            raise TypeError(\"All elements in the two input tuples must be tuples.\")\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            raise ValueError(\"All elements in each nested tuple must have the same length.\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i])))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are not empty\n    if not any(test_tup1) and not any(test_tup2):\n        raise ValueError(\"Both input tuples are empty.\")\n    \n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples have different lengths.\")\n\n    # Initialize a new empty tuple to store the result\n    result_tup = ()\n\n    # Iterate over the elements of the first tuple and add them to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two nested tuples must have equal lengths.\")\n        return None\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs should be tuples\")\n    \n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    \n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples and append the result to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize a variable to store the current element of the first tuple\n        curr_elem1 = test_tup1[i]\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the current element of the first tuple with the current element of the second tuple at the same index\n            curr_elem2 = test_tup2[i][j]\n            # Append the result to the result list\n            result.append(curr_elem1 + curr_elem2)\n    # Return the final result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize a new empty tuple to store the sum\n    result_tup = ()\n    \n    # loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # add the corresponding elements of the two tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    # return the new tuple with sum of elements\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:   \n        return a   \n    else:   \n        return b   "
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns their minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            print(f\"{element} is present in tuple1\")\n            return True\n    print(\"Element not present in tuple1\")\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two parameters:\n    1. tuplex: tuple to search for element in\n    2. tuple1: tuple to search within\n\n    The function checks whether an element exists within the first tuple, and returns a boolean value indicating whether the element was found or not.\n\n    If the element is found within the first tuple, the function returns True, otherwise, it returns False.\n    '''\n\n    for tup in tuple1: \n        if tuplex == tup: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two parameters:\n    tuplex (tuple): The tuple that we want to check for the element.\n    tuple1 (tuple): The tuple containing the elements we want to check.\n\n    The function checks if the element exists within the tuple and returns a boolean value.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2==0:\n        print(\"The parity of\",x,\"is even\")\n    else:\n        print(\"The parity of\",x,\"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    parity = 0\n    if x < 0:\n        parity += 1\n    for i in range(1, int(x**0.5)+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    # check if x is odd or even\n    if x % 2 == 0:\n        # if x is even, parity is odd\n        return \"odd\"\n    else:\n        # if x is odd, parity is even\n        return \"even\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if x is odd and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize variables\n    original_digits = []\n    rearranged_digits = []\n    is_negative = False\n    \n    # Convert input number to list of digits\n    for digit in str(abs(n)):\n        original_digits.append(int(digit))\n    \n    # Reverse the original digits list\n    original_digits.reverse()\n    \n    # Iterate over digits and check if any digits are greater than 1\n    is_bigger = False\n    for digit in original_digits:\n        if digit > 1:\n            is_bigger = True\n            break\n    \n    # If no digits are greater than 1, the original number is already the next biggest number\n    if not is_bigger:\n        return str(abs(n))\n    \n    # Iterate over digits and add the first non-1 digit to the rearranged digits list\n    for digit in original_digits:\n        if digit!= 1:\n            rearranged_digits.append(digit)\n    \n    # If all the digits are 1, add the last non-1 digit to the rearranged digits list\n    if len(rearranged_digits) == len(original_digits):\n        rearranged_digits.append(rearranged_digits[-1])\n    \n    # Convert the rearranged digits list to a string\n    rearranged_digits_str = ''.join(str(digit) for digit in rearranged_digits)\n    \n    # If the original number was negative, add a negative sign to the rearranged digits string\n    if is_negative:\n        rearranged_digits_str = '-' + rearranged_digits_str\n    \n    # Return the rearranged digits string\n    return rearranged_digits_str"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    bigger = False\n    next_bigger = 0\n    temp = n\n    \n    # Convert number to list of digits\n    num_list = [int(x) for x in str(temp)]\n    \n    # Loop through digits of number\n    for i in range(len(num_list)):\n        # Check if current digit is greater than next digit\n        if num_list[i] > num_list[i+1]:\n            # Set bigger flag to True\n            bigger = True\n            # Calculate next bigger number by rearranging digits\n            next_bigger = num_list[i]*10 + num_list[i+1]\n            # Swap current and next digits\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n            # Exit loop\n            break\n    \n    # Convert list of digits back to number and return\n    return str(temp)[::-1] + str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # remove all non-digits from the number\n    n = ''.join(filter(str.isdigit, str(n)))\n    # convert the number to a list of digits\n    digits = list(map(int, n))\n    # create a new list with digits in reverse order\n    reversed_digits = digits[::-1]\n    # concatenate the reversed digits and the original number\n    big_number = ''.join(str(x) for x in reversed_digits + digits)\n    # convert the big number back to an integer and return it\n    return int(big_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n    # Find the last digit in the number\n    last_digit = int(num_list[-1])\n    # Create a new list where the last digit becomes the first digit in the number\n    new_num_list = [last_digit] + num_list[:-1]\n    # Convert the new list to an integer and return it\n    return int(''.join(str(x) for x in new_num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    num = str(n)\n    \n    # Create a list of digits in the number\n    digits = []\n    for digit in num:\n        digits.append(int(digit))\n    \n    # Rearrange the digits in non-descending order\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] > digits[j]:\n                digits[i], digits[j] = digits[j], digits[i]\n    \n    # Convert the rearranged digits back to a string and add it to the beginning of the number\n    new_num = ''.join(str(digit) for digit in digits)\n    return int(new_num + num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Split the given number into its digits\n    digits = [int(digit) for digit in str(n)]\n    # Reverse the digits\n    digits.reverse()\n    # Count the occurrences of each digit\n    count = {}\n    for digit in digits:\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    # Find the index of the smallest digit\n    min_digit = min(count, key=count.get)\n    # Find the index of the digit with the smallest occurrence\n    min_index = digits.index(min_digit)\n    # Reverse the digits from the min_index to the end\n    for i in range(min_index, len(digits)):\n        digits[i], digits[-1] = digits[-1], digits[i]\n    # Convert the reversed digits back to a number\n    next_bigger = int(''.join(str(digit) for digit in digits))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while True:\n        digits = [int(digit) for digit in str(n)]\n        digits.sort(reverse=True)\n        new_n = int(''.join(map(str, digits)))\n        if new_n > n:\n            return new_n\n        else:\n            n = new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # initialize the list of digits and the original number\n    digits = [int(d) for d in str(n)]\n    orig_n = n\n\n    # keep track of whether we need to swap digits or not\n    swap = False\n\n    # loop through the digits of the number and check if we need to swap them\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            # we need to swap digits, so set the flag and exit the loop\n            swap = True\n            break\n\n    # if we don't need to swap digits, we can simply increment the last digit\n    if not swap:\n        digits[-1] += 1\n\n    # create the new number by reversing the digits and joining them\n    new_n = int(''.join(str(d) for d in reversed(digits)))\n\n    # check if the new number is greater than the original number\n    if new_n > orig_n:\n        return new_n\n    else:\n        # if not, we need to repeat the process with the new number\n        return rearrange_bigger(new_n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string and split it into a list of digits\n    num_str = str(n)\n    num_list = list(num_str)\n\n    # reverse the list to get the digits in descending order\n    num_list.reverse()\n\n    # reverse the list again to get the digits in ascending order\n    num_list.reverse()\n\n    # join the digits back into a string and convert it back to an integer\n    next_bigger = int(''.join(num_list))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # reverse the digits list\n    digits.reverse()\n    # convert the list of digits back to an integer\n    new_n = int(\"\".join(map(str, digits)))\n    # add 1 to the new number and return the result\n    return new_n + 1"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the given array\n    nums1.sort()\n    nums2.sort()\n    \n    # initialize min_heap with the first element of the first array\n    min_heap = []\n    heapq.heappush(min_heap, [nums1[0], 0])\n    \n    # initialize result list\n    result = []\n    \n    # iterate through the second array\n    for i in range(len(nums2)):\n        # if the current element of the second array is greater than the minimum element of the heap, pop the minimum element and add it to the result list\n        while min_heap and nums2[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n        # if the size of the result list is equal to k, return the result list\n        if len(result) == k:\n            return result\n        # if the size of the result list is less than k, add the current element to the result list and push the element of the first array to the min_heap\n        if len(result) < k:\n            result.append([nums1[0], i])\n            heapq.heappush(min_heap, [nums1[0], i+1])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap of size k to store the smallest pairs found so far\n    min_heap = []\n    \n    # Iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Check if the current pair is smaller than the smallest pair in the heap\n            if len(min_heap) < k or num1+num2 < min_heap[0][0]+min_heap[0][1]:\n                heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n                \n            # If the heap has k elements, remove the smallest element from the heap\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k smallest pairs from the heap and return them as a list\n    pairs = []\n    while min_heap:\n        pairs.append(min_heap[0][1])\n        heapq.heappop(min_heap)\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if heapq.heappushpop(heap, (nums1[i] + nums2[j], (i,j))):\n                k -= 1\n                if k == 0:\n                    return heapq.nsmallest(k, heap)[::-1]\n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a min heap to keep track of the smallest elements\n    min_heap = []\n    \n    # create a dictionary to store the index of the element in nums1 and nums2\n    index_dict = {}\n    \n    # create a dictionary to store the count of each element in nums1 and nums2\n    count_dict = {}\n    \n    # loop through the first array and store the index and count of each element\n    for i in range(len(nums1)):\n        if nums1[i] not in index_dict:\n            index_dict[nums1[i]] = i\n            count_dict[nums1[i]] = 1\n        else:\n            count_dict[nums1[i]] += 1\n            \n    # loop through the second array and store the index and count of each element\n    for j in range(len(nums2)):\n        if nums2[j] not in index_dict:\n            index_dict[nums2[j]] = j\n            count_dict[nums2[j]] = 1\n        else:\n            count_dict[nums2[j]] += 1\n            \n    # loop through the first array again and add the smallest elements to the min_heap\n    for i in range(len(nums1)):\n        if count_dict[nums1[i]] > 0:\n            heapq.heappush(min_heap, (nums1[i], index_dict[nums1[i]], i))\n            \n    # loop through the second array again and add the smallest elements to the min_heap\n    for j in range(len(nums2)):\n        if count_dict[nums2[j]] > 0:\n            heapq.heappush(min_heap, (nums2[j], j, j))\n            \n    # find the k number of smallest pairs\n    result = []\n    for _ in range(k):\n        if len(result) == k:\n            break\n        if len(min_heap) == 0:\n            break\n        pair = heapq.heappop(min_heap)\n        if pair[0] not in result:\n            result.append(pair)\n            count_dict[pair[0]] -= 1\n            count_dict[pair[1]] -= 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists into a set of tuples to get the unique pairs\n    pairs = set(zip(nums1, nums2))\n    \n    # Use a heap to keep track of the k smallest pairs\n    heap = []\n    for pair in pairs:\n        # Check if we have reached the desired number of smallest pairs\n        if len(heap) == k:\n            # Remove the smallest pair from the heap\n            smallest = heapq.heappop(heap)\n            # If the first element of the pair is smaller than the smallest element in the heap, add the pair to the heap\n            if pair[0] < smallest[0]:\n                heapq.heappush(heap, pair)\n        else:\n            # If we haven't reached the desired number of smallest pairs, add the pair to the heap\n            heapq.heappush(heap, pair)\n    \n    # Return the smallest k pairs found\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n    # initialize the heap with the minimum element of each set\n    min_heap = [(min(num1, num2), (num1, num2)) for num1 in nums1 for num2 in nums2]\n    # sort the heap in ascending order\n    heapq.heapify(min_heap)\n    # initialize the result list and the count\n    result = []\n    count = 0\n    # iterate through the heap\n    while count < k:\n        # get the minimum value from the heap\n        value, pair = heapq.heappop(min_heap)\n        # add the pair to the result list and increment the count\n        result.append(pair)\n        # add the other pair to the heap with the minimum value\n        heapq.heappush(min_heap, (min(pair[0][0], pair[1][0]), (pair[0][1], pair[1][1])))\n        heapq.heappush(min_heap, (min(pair[0][1], pair[1][1]), (pair[0][0], pair[1][1])))\n        heapq.heappush(min_heap, (min(pair[1][0], pair[0][1]), (pair[0][0], pair[1][1])))\n        heapq.heappush(min_heap, (min(pair[1][1], pair[0][0]), (pair[0][0], pair[1][1])))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if (nums1[i] + nums2[j]) > heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], (i, j)))\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Create a min-heap of tuples (distance, (index1, index2))\n    pq = [(0, (0, 0))]\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the distance of this pair\n            distance = abs(nums1[i]) + abs(nums2[j])\n            # Add this pair to the heap if it's smaller than the smallest\n            if pq and distance < pq[0][0]:\n                heapq.heappushpop(pq, (distance, (i, j)))\n                if len(pq) > k:\n                    heapq.heappop(pq)\n    # Extract the k smallest pairs and return them as a list of tuples\n    return [(nums1[index1], nums2[index2]) for distance, (index1, index2) in pq]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num in nums1:\n        heapq.heappush(heap, (-num, len(nums1)-nums1.index(num), nums1.index(num), num))\n    while len(result) < k:\n        if len(heap) == 0:\n            break\n        neg, i, j, num = heapq.heappop(heap)\n        if len(result) == k-len(result):\n            result.append((neg, num))\n        if i+1 < len(nums1) and j+1 < len(nums2):\n            heapq.heappush(heap, (-neg, i+1, j+1, nums1[i+1]))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # create a list to store the pairs\n    pairs = []\n    \n    # create a min heap for storing the smallest elements\n    heap1 = []\n    heap2 = []\n    \n    # iterate through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # add the pair to the heap\n            heapq.heappush(heap1, num1)\n            heapq.heappush(heap2, num2)\n            \n            # if we have found k pairs, break\n            if len(pairs) == k:\n                break\n            \n            # if we have found the smallest pair, add it to the list\n            if len(pairs) < k:\n                pairs.append((heapq.heappop(heap1), heapq.heappop(heap2)))\n                \n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    min_tuple = None\n    product = 1\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        # Find the product of the tuple elements\n        for elem in tup:\n            product *= elem\n        \n        # If the product is less than the minimum product, update variables\n        if product < min_product:\n            min_product = product\n            min_tuple = tup\n        \n        # Reset the product\n        product = 1\n    \n    # Return the minimum product tuple\n    return min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, find the minimum product of any two tuples within the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a list to store the minimum products\n    min_products = []\n    \n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # loop through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # calculate the product of the current pair of tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # check if the product is less than the current minimum product\n            if product < min_products[0] or (product == min_products[0] and len(list1[i]) < len(list1[j])):\n                # add the new minimum product to the list\n                min_products = [product, list1[i], list1[j]]\n    \n    # return the minimum product\n    return min_products[0]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    current_product = 1\n\n    # Loop through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pairs of tuples\n            current_product = list1[i][0] * list1[j][1]\n            # Update the minimum product if necessary\n            if current_product < min_product:\n                min_product = current_product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = list1[0] * list1[-1]\n    for i in range(len(list1)-1):\n        min_product = min(min_product, list1[i] * list1[i+1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables to store minimum product and two tuples\n    min_prod = float('inf')\n    tuple1 = ()\n    tuple2 = ()\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            prod = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product and two tuples\n            if prod < min_prod:\n                min_prod = prod\n                tuple1 = list1[i]\n                tuple2 = list1[j]\n    \n    # Return the minimum product and two tuples\n    return min_prod, tuple1, tuple2"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to be the first element in the first tuple\n    min_product = list1[0][0]\n    # iterate through all pairs of tuples in the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the corresponding elements of the pairs and compare it to the current minimum\n            new_product = list1[i][1] * list1[j][1]\n            if new_product < min_product:\n                min_product = new_product\n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    list1.sort(key=lambda x: x[0] * x[1])\n    return list1[0][0] * list1[0][1]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for item in listval:\n        if min_val is None:\n            min_val = item\n        elif item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first value of the list\n    min_val = listval[0]\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Compare the current value with the minimum value\n        if listval[i] < min_val:\n            # If the current value is smaller than the minimum value, update the minimum value\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n\n    # Loop through each element in the list and update the minimum value if necessary\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and\n    returns the minimum value in the list.\n    '''\n    # initialize minimum value to be the first value in the list\n    min_val = listval[0]\n    \n    # iterate through the rest of the list\n    for val in listval[1:]:\n        # if the current value is smaller than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to be the first value in the list\n    min_value = listval[0]\n    # loop through the rest of the values in the list\n    for value in listval[1:]:\n        # if the current value is less than the minimum value, update the minimum value\n        if value < min_value:\n            min_value = value\n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to first element of the list\n    min_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # If current element is smaller than the minimum value, update minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    # Return minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the first character of the string to lowercase\n    first_char = word[0].lower()\n    # Remove the first character and the underscore from the string\n    rest_of_word = word[1:].replace('_', '')\n    # Convert the rest of the string to camel case\n    camel_case = first_char + rest_of_word\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into words using snake case pattern\n    words = re.findall(r\"(?<!^)(?=[A-Z])\", word)\n    \n    # Convert the first word to camel case\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    \n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_case = [word.title() for word in words]\n    # Join the camel case words together\n    result = ''.join(camel_case)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    :param word: A snake case string to convert to camel case.\n    :return: A camel case string.\n    \"\"\"\n\n    # Convert all words to lowercase\n    word = word.lower()\n\n    # Split the word into words separated by underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert each word to camel case and join them with underscores\n    camel_word = ''.join(word.capitalize() for word in words)\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    camel_case = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', camel_case)\n    return camel_case.lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace all underscores with spaces\n    word = re.sub('_','', word)\n    # split the word into words\n    words = word.split()\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all the words to lowercase\n    word = word.lower()\n    # Split the word into words\n    words = word.split('_')\n    # Convert the first word to uppercase\n    camel_word = words[0]\n    # Convert the rest of the words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i][0].upper() + words[i][1:]\n    # Return the camel case string\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    \n    # Capitalize the first letter of each word\n    words = [w.capitalize() for w in words]\n    \n    # Join the words back into a single string\n    camel_word = ''.join(words)\n    \n    return camel_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    This function removes odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Loop through the list and remove odd numbers\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            del l[i]\n    return l"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        raise ValueError(\"Index out of range\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # check if the list is not empty\n    if not list1:\n        print(\"List is empty.\")\n        return\n    \n    # initialize an empty list to store the elements of the list\n    elements = []\n    \n    # iterate over the list and append the elements to the list\n    for tup in list1:\n        elements.append(tup[n-1])\n    \n    # return the elements list\n    return elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is an integer or not\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    # Check if list1 is a list of tuples or not\n    if not all(isinstance(item, tuple) for item in list1):\n        raise TypeError('list1 must be a list of tuples')\n    # Check if n is valid or not\n    if n < 1 or n > len(list1):\n        raise IndexError('n must be a valid index')\n    # Extract the nth element\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list and False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any element in the first list that exists in the second list and vice versa. Otherwise, it returns False.\n    '''\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set from list1\n    set1 = set(list1)\n    # Loop through list2 and check if any value exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n    # If no values in list2 exist in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Initialize empty set to store the values present in both lists\n    set1 = set()\n    set2 = set()\n\n    # Add values from both lists to the set\n    for i in list1:\n        set1.add(i)\n    for i in list2:\n        set2.add(i)\n\n    # Check if any value is present in both lists\n    if len(set1 & set2) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1: sequence of elements\n    list2: sequence of elements\n\n    Returns:\n    True if any element of list1 exists in list2 or vice versa, False otherwise.\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there exists any overlapping values in them, else it returns False.\n    '''\n\n    # convert the two lists into sets so that duplicates are removed\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # check if the two sets have any overlapping values\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        if val in list2:\n            print(val)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, find the pair with the highest product.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        temp = max(max_product, min_product)\n        max_product = min(max_product, min_product * arr[i])\n        min_product = temp\n\n    return (arr[0], arr[1]) if max_product > min_product else (arr[1], arr[0])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1*max2\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    This function takes in an array of integers as input and returns a tuple with two integers, where\n    the first integer is the maximum product of any pair in the array and the second integer is the\n    second largest element in the array. If there are multiple pairs with the same highest product,\n    the function returns the pair with the smallest value in the array.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the maximum product of any pair in the array\n    max_product = arr[0]*arr[1]\n\n    # Find the second largest element in the array\n    second_largest = arr[1]\n\n    # Return the tuple with maximum product and second largest element\n    return (max_product, second_largest)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple of two integers representing the pair with the highest product.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    min_num = arr[0]\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for num in arr:\n        if num > max_num:\n            max_num = num\n            max_product = max_num * num\n        elif num < min_num:\n            min_num = num\n            min_product = min_num * num\n        else:\n            max_product = max(max_num * num, max_product)\n            min_product = min(min_num * num, min_product)\n    \n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n\n    return max_product * min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i])\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    # Find the maximum element in the array\n    max_val = arr[0]\n    # Find the minimum element in the array\n    min_val = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update max_val if the current element is greater than max_val\n        if arr[i] > max_val:\n            max_val = arr[i]\n        # Update min_val if the current element is less than min_val\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        # If the current element is between max_val and min_val, calculate its product and compare it with the current max_product\n        else:\n            current_product = arr[i] * max_val\n            if current_product > max_product:\n                max_product = current_product\n\n    return max_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store the count of elements in each tuple\n    count = {}\n    # initialize an empty list to store the common elements\n    common = []\n\n    # iterate through each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        element = tup[0]\n        # if the element is already in the count dictionary, increment its count\n        if element in count:\n            count[element] += 1\n        # if the element is not already in the count dictionary, add it with a count of 1\n        else:\n            count[element] = 1\n\n    # iterate through the count dictionary and find the common elements\n    for element, count in count.items():\n        # if the count of the element is greater than 1, add it to the common list\n        if count > 1:\n            common.append(element)\n\n    # return the common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of tuples containing only tuples with common first element.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i])\n                common_elements.append(Input[j])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    common_tuples = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_tuples.append((Input[i], Input[j]))\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of lists, where each inner list contains the common first elements found in the input list of tuples.\n    '''\n    result = []\n    common_elements = []\n\n    for tuple_ in Input:\n        if tuple_[0] in common_elements:\n            continue\n        else:\n            common_elements.append(tuple_[0])\n            result.append([elem for elem in tuple_ if elem == tuple_[0]])\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            common = set(Input[i]) & set(Input[j])\n            if len(common) > 0:\n                common_elements.add(common.pop())\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for item in Input:\n        if item[0] not in common_elements:\n            common_elements.append(item[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the first elements of the tuples and the values are lists of tuples with that first element.\n    '''\n    result = {}\n    for item in Input:\n        if item[0] in result:\n            result[item[0]].append(item)\n        else:\n            result[item[0]] = [item]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Iterate over each tuple in the list\n    for i in range(len(Input)):\n        # Initialize variables for common element and count of tuples with that element\n        common_elem = None\n        count = 0\n        \n        # Iterate over each tuple in the list again to count occurrences of common element\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                count += 1\n                if common_elem is None or Input[i][0] < common_elem:\n                    common_elem = Input[i][0]\n        \n        # If there are more tuples with the same common element, print it and its count\n        if count > 1:\n            print(common_elem, count)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_elements = []\n    for tup in Input:\n        common_first_elements.append(tup[0])\n    return list(set(common_first_elements))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the common elements and their counts\n    common_dict = {}\n\n    # Iterate through the list of tuples\n    for tuple in Input:\n        # Extract the first element from the tuple\n        first_element = tuple[0]\n        # If the first element is not already in the dictionary, add it with a count of 1\n        if first_element not in common_dict:\n            common_dict[first_element] = 1\n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            common_dict[first_element] += 1\n\n    # Initialize an empty list to store the common elements with their count\n    common_list = []\n\n    # Iterate through the dictionary and find the common elements with their count\n    for key, value in common_dict.items():\n        if value > 1:\n            common_list.append((key, value))\n\n    # Sort the list of common elements by the count in descending order\n    common_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the list of common elements with their count\n    return common_list"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    max_length = 0 \n    max_element = None \n\n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n\n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(x) for x in lst)\n    return max(x for x in lst if len(x) == max_len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_element = lst[0]\n    for i in range(len(lst)):\n        if len(str(lst[i])) > len(str(max_element)):\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_length = 0\n    # Initialize a variable to store the maximum element of the list\n    max_element = None\n    # Loop through each element of the list\n    for element in lst:\n        # Check if the length of the current element is greater than the maximum length\n        if len(element) > max_length:\n            # Update the maximum length and maximum element\n            max_length = len(element)\n            max_element = element\n    # Return the maximum element of the list\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        length = len(elem)\n        if length > max_length:\n            max_length = length\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    \n    while count < n:\n        sum_of_cubes += count**3\n        count += 1\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0 \n    for i in range(2, n+1, 2): \n        sum += i**3 \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i ** 3\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i*i\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the cube of the number\n        cube = i**3\n        # add the cube to the sum\n        sum += cube\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the cube sum of even natural numbers\n    cube_sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current even natural number\n        cube = i ** 3\n        \n        # Add the cube to the cube sum variable\n        cube_sum += cube\n    \n    # Return the cube sum of the first n even natural numbers\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of the tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='' # change this to the delimiter you want to use\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    concatenated_result = delimiter.join(result)\n    return concatenated_result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + '.'\n    return result[:-1] # Remove the trailing '.'"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    delimiter = \",\"\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): Tuple of any elements.\n    delimiter (str, optional): Delimiter to be used for concatenating elements. Defaults to \" \".\n\n    Returns:\n    str: Concatenated elements of tuple.\n    \"\"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # concatenate each element of the tuple using the delimiter\n    concatenated_string = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n    average = cube_sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(1, n+1):\n        average += i**3\n    return average/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    average_of_cubes = sum_cubes / n\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n\n\nn = 10\nprint(\"The average of cubes of first {} natural numbers is {}\".format(n, find_Average_Of_Cube(n)))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes_list = []\n    for i in range(1, n+1):\n        cube = i ** 3\n        cubes_list.append(cube)\n    average = sum(cubes_list) / len(cubes_list)\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1\n    for string in test_tuple:\n        rear_index -= 1\n        print(string[rear_index])"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted = []\n    for element in test_tuple:\n        try:\n            extracted.append(element[len(element)-1])\n        except IndexError:\n            pass\n    return extracted"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_elements = []\n    for i, string in enumerate(test_tuple):\n        extracted_elements.append(string[-1])\n    return extracted_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for element in test_tuple:\n        rear_tuple += (element[::-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes two parameters: \n    - list1: a list of sublists \n    - x: the element to be searched in each sublist\n    \n    It returns the number of sublists containing the element x. \n    '''\n    \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns a list of odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    if match:\n        # replace the matched groups with the desired date format\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        # if the input string does not match the pattern, return None\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the input string and extract the groups\n    match = re.match(pattern, dt)\n    # Convert the matched groups to a tuple of strings\n    date_parts = (match.group(3), match.group(2), match.group(1))\n    # Reverse the order of the date parts and join them with dashes\n    new_date = '-'.join(date_parts[::-1])\n    # Return the new date format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match groups in date format\n    match = re.match(pattern, dt)\n\n    # Convert date format to dd-mm-yyyy\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        print('Invalid date format.')\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    date_format = r'\\2-\\1-\\3'\n    return regex.sub(date_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search the given date string using the defined pattern\n    match = re.search(pattern, dt)\n\n    # If the pattern is found, extract the groups\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Format the date string as dd-mm-yyyy\n        return f'{day}-{month}-{year}'\n\n    # If the pattern is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regex pattern for matching the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # check if the input string matches the date format\n    if re.match(pattern, dt):\n        # extract the year, month, and day from the string\n        year, month, day = dt.split('-')\n        # format the date string as dd-mm-yyyy\n        new_date = f'{day}-{month}-{year}'\n        # return the new date string\n        return new_date\n    else:\n        # if the input string does not match the date format, raise an error\n        raise ValueError('Invalid date format. Please use yyyy-mm-dd format.')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.search() method to match the pattern in the date string\n    match = re.search(pattern, dt)\n    \n    # If the match is found, convert the matched string to dd-mm-yyyy format\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for matching dates in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for matches in the date string\n    matches = re.findall(pattern, dt)\n\n    # If there are matches, convert them to dd-mm-yyyy format and return the result\n    if matches:\n        year, month, day = matches[0]\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(regex, dt)\n    if match:\n        return match.group(3)+'-'+match.group(2)+'-'+match.group(1)\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest integer in the list\n    largest = my_list[0]\n    for i in my_list[1:]:\n        if i > largest:\n            largest = i\n\n    # Calculate the number of increments between each sub-list\n    increments = [largest] * len(my_list)\n\n    # Iterate through the list and calculate the number of increments for each sub-list\n    for i in range(len(my_list) - 1):\n        # Calculate the number of increments for the current sub-list\n        gap = increments[i]\n        while gap < len(my_list) - i - 1:\n            # Shift the elements to the right until the gap is found\n            j = gap\n            while j < len(my_list) - i - 1:\n                temp = my_list[j]\n                my_list[j] = my_list[j + gap]\n                my_list[j + gap] = temp\n                j += gap\n            # Reduce the gap size\n            gap = (gap * 3) // 2\n\n    # Sort the list by copying the sorted elements back into the original list\n    for i in range(len(increments)):\n        length = increments[i]\n        for j in range(length):\n            temp = my_list[i]\n            k = i\n            while k >= length and my_list[k - length] > temp:\n                my_list[k] = my_list[k - length]\n                k -= length\n            my_list[k] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n\n    # Define the increment sequence\n    inc = len(my_list) // 2\n    while inc > 0:\n        # Iterate over the array\n        for i in range(inc, len(my_list)):\n            # Compare the current element with its appropriate positions\n            for j in range(i - inc, 0, -inc):\n                if my_list[j] > my_list[j - inc]:\n                    # Swap the elements\n                    temp = my_list[j]\n                    my_list[j] = my_list[j - inc]\n                    my_list[j - inc] = temp\n        # Decrease the increment sequence\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and key < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2  # set gap to half of the length of the array\n    \n    while gap > 0:  # repeat until the gap is less than or equal to 1\n        for i in range(gap, len(my_list)):  # for each element starting from the gap\n            temp = my_list[i]  # get the element to be sorted\n            j = i  # set j to the current position\n            \n            while j >= gap and my_list[j-gap] > temp:  # while j is greater than the gap and the element at j-gap is greater than temp\n                my_list[j] = my_list[j-gap]  # shift the greater elements to the right\n                j -= gap  # decrement j by the gap\n            my_list[j] = temp  # put the element at the correct position\n            \n        gap //= 2  # reduce the gap by a factor of 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Do increments of n/2 to 1\n    for i in range(n//2):\n        # Start with an increment of 1\n        inc = 1\n        while inc < n:\n            # Compare each pair of elements and swap if they are out of order\n            for j in range(inc, n):\n                if my_list[j] < my_list[j-inc]:\n                    my_list[j], my_list[j-inc] = my_list[j-inc], my_list[j]\n            inc = inc * 3\n\n    # The array is now sorted\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n        test_tup1 (tuple): A tuple of integers.\n        test_tup2 (tuple): A tuple of integers.\n\n    Returns:\n        tuple: An elementwise and tuple of integers.\n    '''\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_tuple = []\n\n    # Loop through each element of the first tuple and each element of the second tuple\n    for i in range(len(test_tup1)):\n        # Extract the two integers from the two tuples\n        num1 = test_tup1[i]\n        num2 = test_tup2[i]\n\n        # Calculate the elementwise and of the two integers and append it to the list\n        and_num = num1 & num2\n        and_tuple.append(and_num)\n\n    # Return the elementwise and tuple\n    return tuple(and_tuple)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(zip(test_tup1, test_tup2))\n    for item in result_tup:\n        if item[0] and item[1]:\n            return item[0] and item[1]\n        else:\n            return False"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_tuple_list = []\n    \n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # Perform the elementwise and operation on the corresponding elements of the two tuples\n        and_tuple = test_tup1[i] & test_tup2[i]\n        \n        # Append the result to the and_tuple_list\n        and_tuple_list.append(and_tuple)\n    \n    # Return the and_tuple_list\n    return and_tuple_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    test_tup1 (tuple): A tuple containing elements.\n    test_tup2 (tuple): A tuple containing elements.\n\n    Returns:\n    tuple: A tuple containing the elementwise and of the two tuples.\n\n    Example:\n    >>> test_tup1 = (1, 2, 3)\n    >>> test_tup2 = (4, 5, 6)\n    >>> and_tuples(test_tup1, test_tup2)\n    (0, 0, 0)\n    \"\"\"\n    result = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2)) for test_tup1, test_tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    # Extract the elementwise and tuples from the two tuples\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the and_tup\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize a new empty tuple\n    new_tup = ()\n    # iterate through the tuples and append the element-wise and values to the new_tup\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] & test_tup2[i],)\n    # return the new_tup\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have equal length.'\n\n    # initialize an empty list to store the elementwise and tuples\n    result = []\n\n    # loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # extract the element at index i from both tuples and perform the elementwise and operation\n        elem_and_tup = (test_tup1[i] & test_tup2[i])\n\n        # append the result to the result list\n        result.append(elem_and_tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is between\", x1, \"and\", x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        print(\"The directrix is\", x)\n    else:\n        print(\"There is no real root for this parabola.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n        return directrix\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n        return directrix\n    else:\n        return \"The parabola does not have a unique directrix\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print(\"Error: the equation is not defined for y = c\")\n        return None\n\n    directrix = -b/2*a\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Formula for the directrix of a parabola\n    # y = ax^2 + bx + c\n    \n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n    \n    # If the discriminant is positive, the directrix exists\n    if discriminant > 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + (discriminant**0.5)) / (2*a)\n        root2 = (-b - (discriminant**0.5)) / (2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix\n        return roots\n    \n    # If the discriminant is zero, the directrix is tangent to the parabola\n    elif discriminant == 0:\n        return 0\n    \n    # If the discriminant is negative, the directrix does not exist\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix is between roots:\", root1, \"and\", root2)\n    else:\n        print(\"The directrix is not real.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b / (2 * a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n    \n    # Check if the discriminant is positive\n    if discriminant > 0: \n        # Calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Sort the roots in ascending order\n        if root1 > root2:\n            root1, root2 = root2, root1\n        \n        # Return the directrix\n        return root1\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0: \n        print(\"No real root\")\n    elif discriminant == 0: \n        print(\"Two real roots\")\n        x = (-b)/(2*a)\n        print(\"x1 =\", x)\n    else: \n        print(\"One real root\")\n        x1 = (-b)/(2*a)\n        x2 = (-b + discriminant**0.5)/(2*a)\n        print(\"x1 =\", x1)\n        print(\"x2 =\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola using the quadratic formula.\n    \"\"\"\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if the discriminant is zero\n    if disc == 0:\n        directrix = -b/(2*a)\n        return directrix\n    \n    # calculate the roots of the discriminant\n    root1 = (-b + disc**0.5)/(2*a)\n    root2 = (-b - disc**0.5)/(2*a)\n    \n    # sort the roots in ascending order\n    if root1 < root2:\n        roots = [root1, root2]\n    else:\n        roots = [root2, root1]\n    \n    # calculate the directrix using the quadratic formula\n    directrix = 0.5*roots[1] - 0.5*roots[0]\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create sets from the input lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # find the intersection of the sets\n    common_set = set1.intersection(set2)\n\n    # if there is at least one element in the intersection, return true\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set to store the unique elements of list1\n    set1 = set(list1)\n    # create a set to store the unique elements of list2\n    set2 = set(list2)\n    # check if the intersection of set1 and set2 is not empty\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert the input lists to sets to remove duplicates and avoid duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if there is any common element in the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from each list and find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    common = set1.intersection(set2)\n    \n    # check if the length of the intersection is greater than 0\n    if len(common) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    length1 = base1 * (area / base1)\n    length2 = base2 * (area / base2)\n\n    return (length1 + length2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median_area = area / 2\n    median_length = (median_area ** 0.5) * 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the height of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    if area <= 0:\n        return \"Invalid input: area cannot be negative.\"\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of each half of the trapezium\n    half_height = height / 2\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # Calculate the area of each half of the trapezium\n    area1 = half_base1 * half_height\n    area2 = half_base2 * half_height\n\n    # Calculate the sum of the areas of the halves\n    total_area = area1 + area2\n\n    # Calculate the middle area of the trapezium\n    middle_area = total_area / 2\n\n    # Calculate the height of the middle area\n    middle_height = math.sqrt(middle_area)\n\n    # Calculate the length of the half in the middle of the trapezium\n    middle_length = 2 * middle_height\n\n    # Calculate the length of the middle half of the trapezium\n    middle_length1 = middle_length - base1\n    middle_length2 = middle_length - base2\n\n    # Calculate the median length of the trapezium\n    median_length = (middle_length1 + middle_length2) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_area = 0.5 * base1 * height\n    base2_area = 0.5 * base2 * height\n    trapezium_area = base1_area + base2_area\n\n    return round(2 * base1_area * height + 2 * base2_area * height - trapezium_area, 2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base1 * height + 0.5 * base2 * height\n    # calculate the base of the trapezium\n    base = math.sqrt(area)\n    # calculate the length of the trapezium\n    length = (base1 + base2) / 2\n\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * (base1 + base2) * height\n    \n    if area % 1 == 0:\n        return base1 + base2\n    else:\n        return base1 + base2 + 0.5 * (0.5 * base1 * height + 0.5 * base2 * height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the base of the trapezium that is greater than the area of the trapezium\n    greater_base = (area - height) / (base1 * 2)\n\n    # Calculate the height of the trapezium that is greater than the area of the trapezium\n    greater_height = 0.5 * greater_base * (base1 + base2)\n\n    # Calculate the area of the trapezium that is greater than the area of the trapezium\n    greater_area = 0.5 * greater_base * greater_base * greater_height\n\n    # Return the median length of the trapezium\n    return greater_height"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium sides\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n    \n    # Calculate the lengths of the trapezium base and height\n    length1 = 0.5 * (side1 + side2)\n    length2 = 0.5 * height\n    \n    # Calculate the difference between the areas of the two halves of the trapezium\n    diff_area = area - 2 * area / 3\n    \n    # Calculate the angle of the base of the trapezium\n    base_angle = math.degrees(math.acos((diff_area ** 2 + area ** 2 - 2 * diff_area * area) / (2 * area ** 2)))\n    \n    # Calculate the lengths of the trapezium base and height in the base half\n    base_length1 = 0.5 * (side1 + side2) - 0.5 * base_angle\n    base_length2 = 0.5 * height - 0.5 * base_angle\n    \n    # Calculate the lengths of the trapezium base and height in the top half\n    top_length1 = 0.5 * (side1 + side2) - 0.5 * base_angle\n    top_length2 = 0.5 * height + 0.5 * base_angle\n    \n    # Calculate the length of the trapezium base\n    base_length = math.sqrt(base_length1 ** 2 + base_length2 ** 2)\n    \n    # Calculate the area of the trapezium in the base half\n    base_area = 0.5 * base_length1 * base_length2\n    \n    # Calculate the area of the trapezium in the top half\n    top_area = 0.5 * top_length1 * top_length2\n    \n    # Calculate the area of the trapezium in the whole trapezium\n    whole_area = area - base_area - top_area\n    \n    # Calculate the area of the trapezium in the central half\n    central_area = 2 * 0.5 * base_length * top_length\n    \n    # Calculate the fraction of the trapezium area that lies in the base half\n    base_fraction = base_area / whole_area\n    \n    # Calculate the fraction of the trapezium area that lies in the top half\n    top_fraction = top_area / whole_area\n    \n    # Calculate the fraction of the trapezium area that lies in the central half\n    central_fraction = central_area / whole_area\n    \n    # Calculate the length of the trapezium base in the base half\n    base_median = 0.5 * (base_length1 + base_length2)\n    \n    # Calculate the length of the trapezium base in the top half\n    top_median = 0.5 * (top_length1 + top_length2)\n    \n    # Calculate the length of the trapezium base in the central half\n    central_median = 0.5 * (base_median + top_median)\n    \n    # Calculate the median length of the trapezium\n    median_length = base_median + top_median + central_median\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium = base1 + base2 + height\n\n    # Sort the three sides of the trapezium in ascending order\n    sorted_sides = sorted([base1, base2, height])\n\n    # Calculate the indices of the two middle sides of the trapezium\n    middle_index = len(sorted_sides) // 2\n\n    # Calculate the median of the three sides and return the result\n    if len(sorted_sides) % 2 == 0:\n        return (sorted_sides[middle_index - 1] + sorted_sides[middle_index]) / 2\n    else:\n        return sorted_sides[middle_index]"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2.0\n\n    # Calculate the length of the top and bottom half of the trapezium\n    top_half = area / 2.0\n    bottom_half = area - top_half\n\n    # Find the length of the trapezium's third right angle\n    third_right = top_half / 2.0\n\n    # Find the length of the median of the trapezium's right and left halves\n    median_length = top_half - third_right\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number > num:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{element} is greater than {number}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element of the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\1*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a{1,}b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches[0] if matches else None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=[bB])')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.b+'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(f\"The string '{text}' has an a followed by one or more b's.\")\n    else:\n        print(f\"The string '{text}' does not have an a followed by one or more b's.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a list of all the matches that are found.\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Using integer division to extract the last digit\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    \n    # get the length of the number\n    num_len = len(num_str)\n    \n    # find the last digit of the number\n    last_digit = int(num_str[num_len-1])\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    '''\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of all negative numbers in a list\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    # Initialize an empty list to store the negative numbers\n    neg_list = []\n    \n    # Loop through each element in the input list\n    for num in list1:\n        # If the element is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    \n    # Return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes odd characters from a given string.\n    \"\"\"\n    odd_chars = ['1', '3', '5', '7', '9']\n    new_string = \"\"\n    for char in string:\n        if char not in odd_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if ord(char) % 2 == 0:\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters in the string.\n    \"\"\"\n    return ''.join(char for char in string if char.isdigit() or (int(char) % 2 == 0))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters from a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Initialize an empty list to store the even characters\n    even_chars = []\n    # Loop through the list of characters\n    for char in chars:\n        # If the character is odd, add it to the even_chars list\n        if char % 2 == 1:\n            even_chars.append(char)\n    # Convert the even_chars list to a string and return it\n    return ''.join(even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if char % 2!= 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha() and char.islower():\n                if ord(char) % 2 == 1:\n                    new_str += char\n            elif char.isalpha() and char.isupper():\n                if ord(char) % 2 == 1:\n                    new_str += char\n            elif char.isdigit():\n                if ord(char) % 2 == 1:\n                    new_str += char\n            else:\n                continue\n        else:\n            continue\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[:i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Loop through the remaining tuples in the list\n        for j in range(i+1, len(test_list)):\n            # Check if the two tuples are equal\n            if test_list[i] == test_list[j]:\n                # Increment the count\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list or (test_list[j][0], test_list[i][0]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the final number\n    final_num = ''\n    # Iterate over each element in the list\n    for num in L:\n        # Check if the current number is multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the final number and continue\n            final_num += str(num)\n            continue\n        # If the number is not a multiple of 10, add its last digit to the final number\n        final_num += str(num % 10)\n    # Return the final number as an integer\n    return int(final_num)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the digits of the number\n    digits = ''\n    # Loop through each element of the list\n    for num in L:\n        # Convert each element to a string and add its digits to the digits string\n        digits += str(num)\n    # Convert the digits string to an integer and return it\n    return int(digits)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adv\\b', text, flags=re.IGNORECASE)\n    \n    # Check if there are any adverbs\n    if not adverbs:\n        return None\n    \n    # Find the positions of the first adverb\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append(text.lower().index(adv))\n    \n    # Find the first adverb\n    first_adv = adverbs[positions.index(min(positions))]\n    \n    return first_adv, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"(?<![\\w\\s])([A-Z]+)(?=\\b|\\.|\\?|$)\"\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    adverbs = [match.lower() for match in matches]\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern for finding adverbs\n    pattern = r'(\\b\\w+\\s+)?(\\b(very|well|great|good|greatly|well[ed])\\b)'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # Create a dictionary to store the adverb and its positions\n    result = {}\n\n    # Iterate over the matches and create a dictionary with the adverb as the key and its position as the value\n    for match in matches:\n        if match[0]:\n            result[match[1].lower()] = match[0].lower() + len(match[0])\n        else:\n            result[match[1].lower()] = len(match[0])\n\n    # Return the dictionary with adverbs and their positions\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*\\'?[a-zA-Z]*[aeiouAEIOU]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]*\\'?\\b', text.lower())\n\n    # Initialize variables for the adverb and its position\n    first_adverb = None\n    first_adverb_position = None\n\n    # Loop through the adverbs and find their positions\n    for i, adverb in enumerate(adverbs):\n        if first_adverb is None:\n            first_adverb = adverb\n            first_adverb_position = i\n        else:\n            first_adverb_position = None\n            break\n\n    # Return the adverb and its position\n    return first_adverb, first_adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = re.compile(r'\\b(\\w+)ing\\b')\n\n    # Find all occurrences of the pattern in the given text\n    matches = pattern.finditer(text)\n\n    # Initialize an empty list to store adverbs and their positions\n    adverbs = []\n\n    # Loop through all matches and extract the adverb and its position\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        adverbs.append((adverb, position))\n\n    # Sort the adverbs by their positions and return the first adverb and its position\n    if adverbs:\n        return sorted(adverbs)[0]\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find the first adverb in the sentence\n    match = re.search(r'\\b\\w+ing\\b', text)\n    if match:\n        # Extract the adverb and its position from the match object\n        adverb = match.group()\n        position = match.start()\n\n        # Print the adverb and its position\n        print(f\"{adverb} found at position {position}\")\n\n    # If there is no adverb, print a message\n    else:\n        print(\"No adverb found in the sentence.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expressions for matching adverbs\n    adverb_pattern = re.compile(r'(?<!\\w)(?:(?:(?:\\d+[.])?\\d+|(?:\\d+[.]?)\\d+)|(?:\\d+[.]?)\\d+\\s*(?:cent|mili|micro|nano|pico|femto|atto|zepto|yocto)\\b))(?!\\w)', re.IGNORECASE)\n    # Find all adverbs in the sentence\n    adverbs = re.findall(adverb_pattern, text)\n    # Print the adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        print(f\"{i+1}. {adverb}\")\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b([A-Z][a-z]+\\b|[-.,\\?!]+\\b)'\n    # Use the re.findall() method to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Use the first match to extract the adverb and its position\n    adverb = matches[0]\n    position = re.search(pattern, text).start()\n    # Return a dictionary containing the adverb and its position\n    return {adverb: position}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['very', 'great', 'amazing', 'exceptional', 'amazingly', 'fantastic', 'excellent', 'outstanding']\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        adverb = match.group(1)\n        position = match.start()\n        print(f'{adverb} at position {position}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b([a-z]+\\b\\s*[-\u2013])\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        word = match.group()\n        print(\"Adverb:\", word)\n        print(\"Position:\", match.start())\n        print()"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l * l * l\n    surface_area = 6 * area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"The surface area of a cube of length\", l, \"is\", surface_area, \"square units.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of a cube using Heron's formula\n    s = (l ** 2) * 6\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l  # formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2 + 2 * l**3"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_arr = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    \n    pos_count = len(pos_arr)\n    total_count = len(nums)\n    \n    pos_ratio = pos_count / total_count\n    \n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    pos_sum = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n            pos_sum += num\n    \n    if pos_count == 0:\n        return 0.0\n    \n    return pos_sum / pos_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Args:\n    nums: A list of integers\n\n    Returns:\n    A float representing the ration of positive numbers in the input array\n    \"\"\"\n    # Initialize counters for positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate over each number in the input array\n    for num in nums:\n        # If the number is positive, increment the positive counter\n        if num > 0:\n            pos_count += 1\n        # If the number is negative, increment the negative counter\n        else:\n            neg_count += 1\n\n    # Return the ratio of positive numbers to total numbers\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store positive numbers\n    positive = array('i', [])\n\n    # Iterate through the input array and add positive numbers to the new array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # Calculate the ration of positive numbers\n    if len(positive) == 0:\n        ratio = 0\n    else:\n        ratio = len(positive) / len(nums)\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    \n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns a list containing the percentage of positive numbers in the array.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n    pos_percent = pos_count/len(arr) * 100\n    return pos_percent"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the count of positive numbers\n    counts = array('i', [0] * len(nums))\n    \n    # Iterate through the array\n    for num in nums:\n        # If the number is positive, increment its count\n        if num > 0:\n            counts[nums.index(num)] += 1\n    \n    # Calculate the ration of positive numbers\n    positive_ratio = sum(counts) / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    pos_nums = array('i')\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n            pos_count += 1\n    return pos_count / len(pos_nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to a list\n    nums_list = nums.tolist()\n\n    # initialize two variables to store the count of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # loop through the list and count the number of positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # calculate the ratio of positive numbers to total numbers\n    ratio = pos_count / (pos_count + neg_count)\n\n    return ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return max(neg_list)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf')  # initial value of largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes in a list of integers and returns the largest negative number.\n    \"\"\"\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    max_neg = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < 0 and lst[i] > max_neg:\n            max_neg = lst[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from the list.\n    '''\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] # initializing the largest negative number to the first element of the list\n    \n    for i in range(1, len(list1)): # iterating over the rest of the list\n        if list1[i] < 0 and list1[i] > largest: # if the current element is negative and greater than the current largest negative number\n            largest = list1[i] # update the largest negative number\n    \n    return largest # returning the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            result.append(test_list[i][:K])\n        else:\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # Remove the k elements from the tuple\n        trimmed_tuple = tup[:-K]\n        # Add the trimmed tuple to the list\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # Loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # Check if the length of the tuple is greater than k\n        if len(test_list[i]) > K:\n            # Truncate the tuple to k elements\n            test_list[i] = test_list[i][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Parameters:\n    -----------\n    test_list : list of tuples\n        A list of tuples, each of which is a list itself.\n\n    K : int\n        The number of elements to remove from each tuple.\n\n    Returns:\n    --------\n    list of tuples\n        A list of tuples, each of which has had k elements removed from it.\n\n    \"\"\"\n    result = []\n    for tuple_ in test_list:\n        if len(tuple_) <= K:\n            result.append(tuple_)\n        else:\n            result.append(tuple_[K:])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have same number of elements')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be equal.\")\n        return\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = [0] * len(test_tup1)\n    # Iterate over the first tuple and multiply each element with its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result_tup = ()\n    # Get the length of the first tuple\n    length1 = len(test_tup1)\n    # Get the length of the second tuple\n    length2 = len(test_tup2)\n    # Check if the two tuples have the same length\n    if length1!= length2:\n        raise ValueError(\"The two tuples must have the same length.\")\n    # Loop through the tuples and perform index wise multiplication\n    for i in range(length1):\n        # Add the product of the current elements of both tuples to the result tuple\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = {}\n    for i in count:\n        count_dict[i] = count[i]\n    count_lst = []\n    for i in lst:\n        count_lst.append(count_dict.get(i, 0))\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}  # to store the count of each element in list\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    for element in tup:\n        if element in count_dict:\n            count_dict[element] -= 1  # decrement the count of the element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter() \n    for x in tup: \n        count[x] += 1\n    for x in lst: \n        count[x] += 1\n    return count.most_common()"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count_dict = Counter(tup)  # Counter object to count the occurrence of all elements of tuple\n    count = 0\n    for i in lst:\n        if i in count_dict:\n            count += count_dict[i]\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a set to remove duplicates\n    tup = set(tup)\n\n    # Use Counter to count the occurence of each element in the list\n    count = Counter(lst)\n\n    # Find the intersection of the two sets and convert it back to a list\n    result = list(tup.intersection(count))\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    final_dict = {}\n    for key in count_dict:\n        count = count_dict[key]\n        if tup == key:\n            final_dict[key] = count\n        else:\n            final_dict[tup] = 0\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(tup) \n    return {k: v for k, v in counts.items() if k in lst} "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for i in lst: \n        count[i] += 1 \n    return count "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    count_tup = Counter(tup)\n    result_dict = dict(count_dict)\n    for key in result_dict:\n        if key in count_tup:\n            result_dict[key] += count_tup[key]\n    return result_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(n): \n        s += 1 / (i + 1) \n    return s "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (1/i) * (1/i)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize variables\n    count = 1\n    sum_count = 0\n\n    # loop through numbers from 1 to n\n    while count <= n:\n        # add the count to the sum count\n        sum_count += count\n        # add 1 to the count\n        count += 1\n\n    # return the sum count\n    return sum_count"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the Perrin numbers from 1 to n.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number\n        perrin_num = (3*i**2 - 1)/2\n\n        # add the perrin number to the sum\n        sum += perrin_num\n\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    sum_perrin = 0\n    perrin_num = 1\n\n    while perrin_num <= n:\n        sum_perrin += perrin_num\n        perrin_num += 2\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \n    Parameters:\n    n (int): the number of terms to calculate\n    \n    Returns:\n    int: the sum of the Perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (2*i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_perrin = 0\n    for num in perrin_numbers:\n        if num > n:\n            break\n        sum_perrin += num\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    :param str_list: A list of string values.\n    :param length: The size of the strings to be extracted.\n    :return: A list of extracted strings.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string[:length])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in l:\n        if len(s) == l[0]:\n            extracted_strings.append(s)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and extracts the specified size of strings from the list.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= size:\n            result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return l[::l.count(str)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a new list containing the specified size of strings from the original list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(l)):\n        if len(str) > l[i]:\n            extracted_list.append(l[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    count = 0\n    for i in l:\n        count += 1\n        if count == l.index(i):\n            result.append(i[:l[count-1]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the size of the desired strings and\n    returns a list of the desired size of strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a specified size as inputs.\n    The function then returns a new list of strings that contains all the strings in the original list that are of the specified size.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_list = []\n    # Loop through each string in the input list\n    for string in str_list:\n        # Check if the length of the string is equal to the specified size\n        if len(string) == size:\n            # If it is, add the string to the extracted list\n            extracted_list.append(string)\n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # remove all whitespaces from the given string\n    text2 = re.sub(r'\\s+','', text1)\n    # replace multiple spaces with a single space\n    text3 = re.sub(r'\\s','', text2)\n    # remove leading and trailing whitespaces\n    text4 = text3.strip()\n    # remove leading and trailing single spaces\n    text5 = re.sub(r'^\\s+', '', text4)\n    text6 = re.sub(r'\\s+$', '', text5)\n    # return the final string without whitespaces\n    return text6"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all spaces using regular expression\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    # remove all tabs using regular expression\n    pattern = r'\\t+'\n    text3 = re.sub(pattern, '', text2)\n    return text3"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss_amount = sale_amount - actual_cost \n        return loss_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount > 0:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0:\n        return 0\n    else:\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of its even factors.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    This function takes a number as input and returns the sum of its even factors. \n    \"\"\"\n    \n    # Initialize variables for sum and count of even factors \n    sum_even = 0 \n    count_even = 0\n    \n    # Loop through the number from 2 to n (inclusive) \n    for i in range(2, n+1): \n\n        # Check if i is even \n        if i % 2 == 0: \n\n            # Add i to sum if it is even \n            sum_even += i \n\n            # Increment count of even factors \n            count_even += 1\n    \n    # Calculate and return the sum of even factors \n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n): \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    count = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if i == n//i: \n                count += 1 \n    return count "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    even_factors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0 and n % (i+2) == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = [i for i in range(2, int(math.sqrt(n))+1, 2) if n % i == 0]\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    evenFactors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors.append(i)\n    return sum(evenFactors)\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of the even factors of the number.\n    '''\n\n    # Find the sum of the even factors of n\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n\n    return sum_of_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    pattern = r'\\w*[zZ]\\w*'\n\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        print(\"The word(s) containing 'z' are:\", matches)\n    else:\n        print(\"The word(s) containing 'z' are not found in the text.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text).group() if re.search(pattern, text) else None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b(z)\\w+\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern that matches a word containing 'z'\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    # Use the pattern to find all non-overlapping matches of the pattern in the text\n    matches = pattern.finditer(text)\n    # Return a list of all matched words\n    return [match.group() for match in matches]"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 10 == 0:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False\n    elif monthnum2 % 10 == 1:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    elif monthnum2 % 10 == 2:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 == 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days = 29\n        else:\n            days = 28\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        days = 30\n    else:\n        days = 31\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_list = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in month_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, else False.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        if monthnum2 in [4, 6, 9]:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return \"Invalid Month Number\"\n    elif monthnum2 == 2 and (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n        return \"31 days\"\n    elif monthnum2 == 2 and (year % 4!= 0 or year % 100 == 0 and year % 400!= 0):\n        return \"29 days\"\n    else:\n        return \"30 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0 and monthnum2 % 400 == 0:\n        return True\n    elif monthnum2 % 100 == 0 and monthnum2 % 4!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid Month Number\"\n    elif monthnum2 == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            return \"29 days\"\n        else:\n            return \"28 days\"\n    else:\n        return \"30 or 31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for s in stringlist:\n        result.append(s[::-1])\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i <= min_len:\n                continue\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist that has the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist with the minimum length in the given list.\n    '''\n\n    #initialize the minimum length\n    min_length = float('inf')\n\n    #initialize the minimum sublist\n    min_sublist = []\n\n    #iterate over the list\n    for i in range(len(lst)):\n        \n        #iterate over the sublists of length i+1\n        for j in range(i+1,len(lst)+1):\n\n            #if the current sublist has length less than the minimum length, update the minimum length and the minimum sublist\n            if j == i+1:\n                min_length = j\n                min_sublist = lst[i:j]\n    \n    #return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_len:\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_list = lst[i]\n    return min_list"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n\n    Parameters:\n    l (float): the length of the rectangle (in meters)\n    b (float): the width of the rectangle (in meters)\n\n    Returns:\n    float: the area of the rectangle (in square meters)\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1.upper())"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function will remove all uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'(?i)\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a pattern to match uppercase substrings\n    pattern = r'([A-Z]+)'\n    # Use the re.findall() function to find all uppercase substrings\n    uppercase_substrings = re.findall(pattern, str1)\n    # Remove all uppercase substrings from the original string\n    for uppercase_substring in uppercase_substrings:\n        str1 = re.sub(uppercase_substring, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Use regular expressions to find all uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    matches = re.findall(pattern, string)\n    # Replace each uppercase substring with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings.\n    '''\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n    \n    # Loop through each uppercase substring\n    for substring in uppercase_substrings:\n        # Replace the uppercase substring with an empty string\n        str1 = re.sub(substring, '', str1)\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z]\\w+\\b')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_lst = []\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Extract the first element from the sublist and append it to the extracted list\n        extracted_lst.append(sublist[0])\n    # Return the extracted list\n    return extracted_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            new_list.append(sublist[0])\n        else:\n            new_list.append(sublist)\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Loop through each sublist in the list\n    for sublist in lst: \n        # Extract the first element of the sublist\n        first_element = sublist[0] \n        # Print the first element of the sublist\n        print(first_element)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as an input and returns the number of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    result = []\n    def helper(start, path):\n        if len(path) == len(list1):\n            result.append(path[:])\n        else:\n            for i in range(start, len(list1)):\n                helper(i+1, path + [list1[i]])\n    helper(0, [])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(1, len(list1)+1):\n            if i!= j:\n                combinations.append(list1[i-1:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            combination = list1[j:j+i]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result.append(lst[i:j+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    '''\n    res = []\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)-i+1):\n            res.append(lst[j:j+i])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    result = []\n\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            subset = list1[j:j+i]\n            result.append(subset)\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            print(list1[i], list1[j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    combinations = []\n\n    # To find all possible combinations of length 1 to n-1\n    for i in range(n-1):\n        combinations.append((list1[i],))\n\n    # To find all possible combinations of length 2 to n-2\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            combinations.append((list1[i], list1[j]))\n\n    # To find all possible combinations of length 3 to n-3\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                combinations.append((list1[i], list1[j], list1[k]))\n\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        else:\n            min_ending_here *= arr[i]\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    # iterate through array\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here = min_ending_here\n            min_ending_here = 1\n        else:\n            max_ending_here = max(num, max_ending_here * num)\n            min_ending_here = min(num, min_ending_here * num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here*num)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(current_product*num, num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # check if the dictionary is empty\n    if len(dict) == 0:\n        return True\n\n    # initialize variables to store the first element of the dictionary\n    first_value = dict.values()[0]\n\n    # iterate through the dictionary and check if all values are same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values)!= 1 or values[0]!= n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if value == dict[list(dict.keys())[count]]:\n            count += 1\n        if count == n:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get all the values in the dictionary\n    values = list(dict.values())\n    \n    # Check if all the values are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n\n    for key, value in dict.items():\n        if key not in dict.values():\n            return False\n        if value!= dict[key]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = []\n    for key, value in dict.items():\n        values.append(value)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for i in range(n-1):\n        if dict[i]!= dict[i+1]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        count += 1\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            count += 1\n            break\n    if count == 0:\n        print(\"All values are same.\")\n    else:\n        print(\"Not all values are same.\")"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict1.items():\n        # If the value is an empty string, remove the key-value pair from the dictionary\n        if not value:\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n  # Initialize the first row with 1\n\n    # Fill the first row using the formula dp[i] = min(arr[i], arr[i+1])\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            dp[i] = min(arr[i], arr[i - 1])\n        else:\n            dp[i] = arr[i]\n\n    # Fill the remaining rows using the formula dp[i] = max(dp[i-1] * arr[i], dp[i-2] * arr[i])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1] * arr[i], dp[i - 2] * arr[i])\n\n    # Find the maximum product\n    max_product = max(dp[i] for i in range(n))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        elif arr[i] < max_product_ending_here:\n            max_product_ending_here = max(0, max_product_ending_here) * arr[i]\n\n        max_so_far = max(max_so_far, max_product_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        max_ending_here = max(max_ending_here, arr[i])\n\n        product = max_ending_here * min_ending_here\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n    else:\n        max_product_so_far = arr[0] * arr[1]\n        max_product_ending_here = arr[0] * arr[1]\n        for i in range(2, len(arr)):\n            max_product_ending_here = max(max_product_ending_here, arr[i] * arr[0])\n            max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = max_ending_here = float('-inf')\n    min_ending_here = float('inf')\n\n    for i in range(n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_product = float('-inf')\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                max_product = max(max_product, dp[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array of integers and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence of the input array.\n    \"\"\"\n\n    # First, we find the length of the subsequence that has the maximum product\n    max_product = -1\n    max_length = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            length = i\n            product = arr[i] * arr[i-1]\n            if product > max_product:\n                max_product = product\n                max_length = length\n        else:\n            length = i-1\n            product = arr[i] * arr[i-1]\n            if product > max_product:\n                max_product = product\n                max_length = length\n\n    # We then return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * min_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * max_ending_here)\n        \n    return max_ending_here"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_so_far = min(min_so_far, max_ending_here)\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_so_far = min(min_so_far, max_ending_here)\n\n    return max_ending_here * min_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to 0\n    total_sum = 0\n\n    # iterate through each element in the tuple\n    for i in range(len(test_tup) - 1):\n        # add the current element and the next element to get the sum\n        total_sum += test_tup[i] + test_tup[i+1]\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # create a new tuple with all the pairs of neighboring elements\n    pairs = [(test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1)]\n    # add up each pair to get the sum of the pairwise addition\n    result = sum(pairs)\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    This function takes a tuple as input and returns the sum of the pairwise addition of the neighboring elements.\n    '''\n    if len(test_tup) < 2:\n        print(\"The tuple should have at least two elements.\")\n        return\n    \n    # Define a variable to store the sum of pairwise additions\n    sum_pairwise = 0\n    \n    # Loop through the tuple and calculate the sum of pairwise additions\n    for i in range(len(test_tup)-1):\n        sum_pairwise += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of pairwise additions\n    return sum_pairwise"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the tuple and find the pairwise addition of the neighboring elements\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    return sum([test_tup[i] + test_tup[(i+1)%n] for i in range(n)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        total = 0\n        for i in range(len(test_tup)-1):\n            total += test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pair_sum = 0\n    for i in range(len(test_tup)-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple should have at least two elements.\")\n\n    # Loop through the tuple to find the pairwise addition\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize result variable to 0\n    result = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Multiply the current element with the current index\n        current_element = arr[i] * i\n        \n        # Add the current element to the result\n        result = (result + current_element) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number n as input, and returns the product of the array \n    multiplication modulo n. If there is no remainder after the multiplication, then the product \n    will be n. Otherwise, it will be the remainder.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product as 1\n    product = 1\n    \n    # Loop through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the product after the loop is complete\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i]\n        product %= n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1: \n            print(\"The list contains consecutive numbers.\")\n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] + 1:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n\n    It returns True if the list contains consecutive numbers and False otherwise.\n\n    Example:\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n\n    >>> check_Consecutive([1,2,4,6])\n    False\n\n    >>> check_Consecutive([1,2,3,3,4,5])\n    True\n    '''\n\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return \"List must contain at least two numbers.\"\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return \"The list contains consecutive numbers.\"\n    \n    return \"The list does not contain consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return True\n    elif l[0] == l[-1]:\n        return True\n    elif l[0] == l[1]:\n        for i in range(2, len(l)-1):\n            if l[i] == l[i-1] + 1:\n                continue\n            elif l[i]!= l[i-1] + 1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    # We will check if the first element of the list is the same as the last element of the list.\n    if l[0] == l[-1]: \n        # If yes, then we will check if the rest of the list has consecutive numbers.\n        for i in range(1, len(l)-1): \n            if l[i]!= l[i-1] + 1: \n                return False\n        # If the rest of the list has consecutive numbers, then we will return True.\n        return True\n    # If the first element is not the same as the last element, then we will return False.\n    else: \n        return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Convert the tuple list to a set to remove duplicates and then back to a list\n    set_list1 = list(set(test_list1))\n    set_list2 = list(set(test_list2))\n\n    # Create a set of tuples that contains the intersection of the two sets\n    set_intersection = set(tuple(t) for t in set_list1) & set(tuple(t) for t in set_list2)\n\n    # Convert the set of tuples back to a list and return it\n    return list(set_intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Remove duplicates from list1\n    list1 = list(set(test_list1))\n\n    # Create an empty list to store the intersection of list1 and list2\n    intersection_list = []\n\n    # Iterate through list2 and check if each element is present in list1\n    for element in test_list2:\n        if element in list1:\n            intersection_list.append(element)\n\n    # Return the intersection list\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty dictionary to store the elements of the tuple list\n    tuple_dict = {}\n    # Loop through the first tuple list and add each element to the dictionary\n    for element in test_list1:\n        if element not in tuple_dict:\n            tuple_dict[element] = 1\n    # Loop through the second tuple list and add each element to the dictionary\n    for element in test_list2:\n        if element not in tuple_dict:\n            tuple_dict[element] = 1\n    # Initialize an empty set to store the intersection of the two dictionaries\n    intersection_set = set()\n    # Loop through the dictionary and add the keys (elements) to the set if they have a value of 1 (meaning they exist in both dictionaries)\n    for key in tuple_dict:\n        if tuple_dict[key] == 1:\n            intersection_set.add(key)\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Merge the two lists in the required order.\n    merged_list = sorted(set(test_list1) & set(test_list2))\n    return merged_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the tuples in each list in ascending order\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    \n    # Initialize an empty set to store the common tuples\n    common_tuples = set()\n    \n    # Iterate over each tuple in the first list\n    for t1 in test_list1:\n        # Check if the tuple is in the second list\n        if t1 in test_list2:\n            # If it is, add it to the set of common tuples\n            common_tuples.add(t1)\n    \n    # Convert the set of common tuples to a list\n    common_tuples = list(common_tuples)\n    \n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store unique elements from both lists\n    unique_set = set(test_list1 + test_list2)\n    # Find the intersection of unique elements from both lists\n    intersection = list(set(test_list1) & set(test_list2))\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Flatten the given tuple lists\n    flat_list1 = [item for sublist in test_list1 for item in sublist]\n    flat_list2 = [item for sublist in test_list2 for item in sublist]\n\n    # Find the intersection using a set\n    intersection_set = set(flat_list1) & set(flat_list2)\n\n    # Convert the set back to tuple and return\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list1 + test_list2\n    \n    # Remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list to find the intersection\n    intersection = sorted(list(set.intersection(set(test_list1), set(test_list2))))\n    \n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes in a string `str1`, a character `ch` to be replaced, and a character `newch`\n    to replace it with. The function returns a new string where all instances of `ch` are replaced with `newch`.\n\n    For example:\n    replace_char(\"hello\", \"l\", \"!\") returns \"he!o\"\n    \"\"\"\n    # use the replace() method to replace all occurrences of ch with newch in str1\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #initialize a new string\n    new_str = \"\"\n    #iterate over each character in the original string\n    for char in str1:\n        #if the character is not equal to the character to be replaced, append it to the new string\n        if char!= ch:\n            new_str += char\n        #if the character is equal to the character to be replaced, append the new character to the new string\n        else:\n            new_str += newch\n    #return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # convert string to list of characters\n    str_list = list(str1)\n    # loop through the list and replace characters\n    for i in range(len(str_list)):\n        if str_list[i] == ch:\n            str_list[i] = newch\n    # convert the list of characters back to a string\n    new_str = ''.join(str_list)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Counter is used to count the frequency of each element in the dictionary\n    # Sorting by value is done using the sorted() function\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n\n    # Create a Counter object to count the occurrences of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with sorted values as keys\n    sorted_dict = {k: v for k, v in sorted_counter}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # Sort the counter by values in descending order\n    sorted_counter = counter.most_common(len(counter))\n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value using a Counter object.\n\n    Parameters:\n    dict1 (dict): A dictionary to sort.\n\n    Returns:\n    dict: A dictionary with its keys sorted by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the counter by values in descending order\n    sorted_counter = counter.most_common(None)\n    # create a new dictionary with keys and values of sorted_counter\n    sorted_dict = {key: value[1] for key, value in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    sorted_dict = {k: v for k, v in sorted(sorted_dict.items(), key=lambda item: item[1], reverse=True)}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as input and returns a dictionary sorted by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Define a variable to store the sum of the largest and smallest values\n    total = 0\n    \n    # Iterate through the array and find the largest and smallest values\n    for num in nums:\n        if num > total:\n            total = num\n        elif num < total:\n            total -= num\n    \n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initializing variables\n    largest = nums[0]\n    smallest = nums[0]\n    # iterating through the array\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # returning the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the sum of the largest and smallest value\n    sum_largest_smallest = nums[-1] + nums[0]\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest value in the array\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    \n    # find the smallest value in the array\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n\n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to hold the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the array to find the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    return string.lower()\n\ninput_string = input(\"Enter a string: \")\noutput_string = is_lower(input_string)\nprint(\"Lower case string:\", output_string)"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        print(f\"{string} is in lower case.\")\n    else:\n        print(f\"{string} is not in lower case.\")"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    lowercase_regex = re.compile(r'[a-z]+', re.IGNORECASE)\n    return lowercase_regex.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Split the string into lowercase and uppercase substrings\n    lower_substrings = re.findall(r'\\b\\w+\\b', string.lower())\n    # Combine the substrings into a single string\n    result =''.join(lower_substrings)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Convert the given string to lowercase\n    str1 = str1.lower()\n\n    # Split the string into substrings\n    substrings = re.findall(r'[a-z]+', str1)\n\n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        str1 = re.sub(r'\\b'+substring+r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Return a new string with all lowercase substrings removed\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a pattern to match lowercase substrings\n    pattern = re.compile(r'(?<=\\w)[a-z]+(?=\\w)')\n    \n    # replace all lowercase substrings with empty string\n    str2 = re.sub(pattern, '', str1)\n    \n    # return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression to match lowercase substrings\n    regex = re.compile(r'[a-z]+')\n    # use the findall() method to find all matches in the string\n    matches = regex.findall(str1)\n    # loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # convert the number to string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to integer\n    first_digit = int(first_char)\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Initialize a variable to store the first digit of the number\n    first_digit = \"\"\n    \n    # Loop through each digit of the number\n    for digit in str(n):\n        # Append the current digit to the first_digit variable\n        first_digit += digit\n    \n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return first_Digit(n // 10) + n % 10\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10 ** 0\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # initialize the first digit to None\n    first_digit = None\n    \n    # loop through the digits of the input number\n    for digit in str(n):\n        # if the current digit is the first one, update the first_digit variable\n        if digit == '1':\n            first_digit = digit\n    \n    # return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        while n!= 0:\n            n //= 10\n            return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and returns a new list containing only the odd ones from the given list.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers in the original list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!=0]\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    cube_sum = sum([i**3 for i in range(1, n+1)])\n    # Find the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    difference = cube_sum - sum_sum\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural += i\n    difference = sum_of_cubes - sum_of_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # Find the difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        \n    # Calculate sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n        \n    # Calculate the difference\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [(i*i*i) for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    diff = sum_cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    # sum of first n natural numbers\n    sum_natural = sum(range(1,n+1))\n    # difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(n):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    difference = abs(sum_cubes - sum_natural)\n    \n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n\n    # Initialize a dictionary to store the count of odd xor values\n    odd_xor_count = {}\n\n    # Iterate over all the elements in the array A\n    for i in range(N) : \n\n        # Calculate the xor value of the current element and all the other elements in the array A\n        xor_value = 0\n        for j in range(N) : \n            if i!= j : \n                xor_value = xor_value ^ A[j]\n\n        # Increment the count of the xor value in the dictionary\n        if xor_value % 2!= 0 : \n            if xor_value in odd_xor_count : \n                odd_xor_count[xor_value] += 1\n            else : \n                odd_xor_count[xor_value] = 1\n\n    # Return the count of odd xor values\n    return len(odd_xor_count)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    xor_values = []\n    for i in range(N):\n        xor_values.append(A[i] ^ A[i+1])\n\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            if xor_values[i] ^ xor_values[j] % 2 == 1:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through the list A\n    for i in range(N):\n        # Initialize the xor variable to 0\n        xor = 0\n\n        # Iterate through the list A\n        for j in range(N):\n            # Update the xor variable\n            xor = xor ^ A[j]\n\n        # Check if the xor value is odd\n        if xor % 2!= 0:\n            # Increment the count variable\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize variables\n    count = 0\n    xor_sum = 0\n\n    # Calculate the xor sum of all elements in the array A\n    for i in range(N):\n        xor_sum += A[i]\n\n    # Loop through the array A and count the number of pairs whose xor value is odd\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and an integer N as input and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n                if count == N:\n                    return True\n    return False"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_sum = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char.upper()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # initialize the result variable\n    result = 0\n\n    # loop through each digit in the two numbers\n    for i in range(len(str_n1)):\n        # find the difference between the corresponding digits\n        diff = int(str_n1[i]) - int(str_n2[i])\n\n        # add the difference to the result variable\n        result += diff\n\n    # return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    The function first calculates the difference between the two numbers and then adds the absolute value of each \n    digit to the result.\n    '''\n    diff = n1 - n2\n\n    # To calculate the absolute value of each digit, we need to convert it into a string and then convert it back to an integer.\n    # Then, we can get the absolute value by taking the absolute value of the integer.\n    result = 0\n    for digit in str(diff):\n        result += abs(int(digit))\n\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Compare the lengths of the strings\n    len_diff = len(n1_str) - len(n2_str)\n    \n    # If the length difference is even, add 0 to the longer string\n    if len_diff % 2 == 0:\n        n1_str = n1_str.zfill(max(len(n1_str), len(n2_str)))\n    else:\n        n1_str = n1_str.zfill(max(len(n1_str), len(n2_str))+1)\n        \n    # Convert the strings to lists of digits\n    n1_list = list(n1_str)\n    n2_list = list(n2_str)\n    \n    # Initialize the sum of digit differences to 0\n    digit_diff_sum = 0\n    \n    # Iterate through the digits of n1 and n2\n    for i in range(len(n1_list)):\n        digit_diff = n1_list[i] - n2_list[i]\n        digit_diff_sum += abs(digit_diff)\n    \n    # If the length difference is odd, add 0 to the shorter string\n    if len_diff % 2 == 1:\n        n2_str = n2_str.zfill(max(len(n1_str), len(n2_str))+1)\n        \n    # Return the sum of digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    # Loop through each digit of n1 and n2 and calculate the difference\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_diff += diff\n        # Divide n1 and n2 by 10 to remove the used digit\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the given integers into a string\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # Initialize the sum variable to 0\n    sum_diff = 0\n\n    # Iterate through each digit of both numbers\n    for i in range(len(num1)):\n        # Calculate the difference between the corresponding digits of the two numbers\n        diff = abs(ord(num1[i]) - ord(num2[i]))\n\n        # Add the difference to the sum variable\n        sum_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # base case\n    if n1 == 0 and n2 == 0:\n        return 0\n\n    # recursive case\n    else:\n        # get the last digit of n1 and n2\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n\n        # get the per-digit difference between n1 and n2\n        diff = digit1 - digit2\n\n        # recursively call the function with the new values\n        return diff + digit_distance_nums(n1 // 10, n2 // 10)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    per_digit_difference = difference // 9 * 9\n    sum_of_per_digit_differences = 0\n    for i in range(9):\n        sum_of_per_digit_differences += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return sum_of_per_digit_differences + per_digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_diff = 0\n    for i in range(len(str(n1))):\n        digit_diff += abs(n1 // 10**i - n2 // 10**i)\n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Find the difference between the two numbers in reverse order\n    difference = abs(str(n1)[::-1] - str(n2)[::-1])\n    # Convert the difference string to an integer\n    difference = int(difference)\n    # Calculate the sum of the per-digit differences\n    sum_of_differences = 0\n    for digit in str(difference):\n        sum_of_differences += int(digit)\n    # Return the sum of the per-digit differences\n    return sum_of_differences"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    end_index = 0\n    while end_index < len(a):\n        if current_sum <= 0:\n            current_sum = a[end_index]\n            start_index = end_index\n        else:\n            current_sum += a[end_index]\n        end_index += 1\n        if end_index - start_index == size:\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize two variables to store the current maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the list from the beginning to the end\n    for i in range(size):\n        # Add the current element to the current subarray sum\n        curr_sum += a[i]\n        \n        # If the current subarray sum is greater than the maximum subarray sum, update the maximum subarray sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        \n        # If the current subarray sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets to eliminate duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # find the union of the sets\n    union_set = set1 + set2\n\n    # convert the union set back to a list and sort it\n    union_list = sorted(list(union_set))\n\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Merge the two tuples into one sorted list\n    merged_list = sorted(test_tup1 + test_tup2)\n\n    # Extract the unique elements from the merged list and return them in sorted order\n    return sorted(set(merged_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty set to store unique elements\n    unique_set = set()\n    \n    # Add all elements from both tuples to the set\n    unique_set.update(test_tup1)\n    unique_set.update(test_tup2)\n    \n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(unique_set))\n    \n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    # Convert the input tuples to lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n    \n    # Union of the elements in the two lists\n    union_list = list(set(tup1_list).union(set(tup2_list)))\n    \n    # Sort the union list in ascending order\n    union_list.sort()\n    \n    # Convert the union list back to a tuple\n    union_tuple = tuple(union_list)\n    \n    return union_tuple"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    \n    # Use set() function to remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order\n    unique_list.sort()\n    \n    # Return the sorted list as the output\n    return unique_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples by using the + operator\n    union_tup = test_tup1 + test_tup2\n    # Sort the union tuple in ascending order\n    union_tup = sorted(union_tup)\n    # Output the sorted union tuple\n    print(\"Union of elements of the given tuples:\", union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Use the sorted() function to sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n    # Output the sorted list of unique elements\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the union set to a list and sort it\n    union_list = sorted(list(union_set))\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Use a set to find the unique elements in the list\n    unique_set = set(combined_list)\n\n    # Sort the elements of the set in ascending order\n    sorted_set = sorted(unique_set)\n\n    # Convert the set back into a tuple and return it\n    return tuple(sorted_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the union set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Output the sorted union\n    print(\"Union of the elements in the given tuples:\", sorted_union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables\n    max_length = 0\n    current_length = 0\n    current_sublist = []\n\n    # loop through the list\n    for i in range(len(lst)):\n        current_sublist.append(lst[i])\n        current_length += 1\n\n        # check if the current sublist is longer than the previous longest sublist\n        if current_length > max_length:\n            max_length = current_length\n\n        # check if the current sublist is longer than the next sublist\n        if i < len(lst)-1:\n            next_sublist = lst[i+1:]\n            next_sublist_length = len(next_sublist)\n            if next_sublist_length > current_length:\n                current_length = next_sublist_length\n                max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if max_length < len(sublist):\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i-1]!= lst[i]:\n            sub_lst = lst[i:i+10]\n            if len(sub_lst) > len(longest):\n                longest = sub_lst\n    return len(longest)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            current_length = 1\n        elif lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize the max_length to 0\n    max_length = 0\n    \n    # Iterate over the sublists of the list\n    for sublist in lst:\n        # Update max_length if the length of the sublist is greater than max_length\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            maxLength = max(maxLength, len(lst[j])-len(lst[i]))\n    return maxLength  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    This function takes a list of lists as input and returns the maximum length of any sublist.\n    \n    Args:\n    lst (list): a list of lists\n    \n    Returns:\n    int: the maximum length of any sublist in the input list\n    \n    \"\"\"\n    max_length = 0  \n    for sublist in lst:  \n        if len(sublist) > max_length:  \n            max_length = len(sublist)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):  \n        for j in range(i+1,len(lst)+1):  \n            curr_len = j-i\n            if curr_len > max_len:  \n                max_len = curr_len  \n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\")(?P<value>[^\"]+)(?<!\")'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match.group('value'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")([\\w\\s]+)(\"|\\s|$)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all occurrences of quotation marks\n    matches = re.findall(r'\"([^\"]*)\"', text)\n    # Iterate over matches and extract the values between quotation marks\n    extracted_values = []\n    for match in matches:\n        extracted_values.append(match.strip('\"'))\n    return extracted_values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'  # pattern to match values between quotes\n    matches = re.findall(pattern, text)  # find all matches in the text using the pattern\n    values = []  # empty list to store values\n    for match in matches:\n        value = match.strip('\"')  # remove quotation marks from the value\n        if value:  # skip empty values\n            values.append(value)  # add the value to the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\\b[^\\s]*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): A string containing text.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(\")(.*?)(?<!\\\\)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Dictionary to store count of pairs where both elements are unequal\n    pairs_dict = {}\n    # Loop through all possible pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1,n):\n            # Check if the sum of elements is equal to the current element in the pair\n            if arr[i] + arr[j] == arr[j]:\n                # If yes, add the pair to the dictionary and update its count\n                if (arr[i],arr[j]) not in pairs_dict:\n                    pairs_dict[(arr[i],arr[j])] = 1\n                else:\n                    pairs_dict[(arr[i],arr[j])] += 1\n    # Return the total count of pairs\n    return sum(pairs_dict.values())"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs\n    where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += arr[i] * arr[j]\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as an input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n\n    # Convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Iterate through each digit in the list and add it to the sum\n    for digit in digits:\n        sum_of_digits += digit\n\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its digits\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum to 0\n    total = 0\n    # Iterate through the digits and add them to the total\n    for digit in digits:\n        total += digit\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    s = str(n)\n    # initialize the sum variable to 0\n    total = 0\n    # iterate over each character in the string\n    for char in s:\n        # convert each character to its integer value\n        digit = int(char)\n        # add the integer value of the current digit to the total\n        total += digit\n    # return the total sum of digits\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string and then to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum up the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Get the digits of the number and convert them to integers\n    digits = [int(digit) for digit in str(n)]\n    \n    # Sum the digits of the number\n    total = sum(digits)\n    \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to loop through each digit\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    digit_sum = 0\n    # Loop through each digit and add it to the sum variable\n    for digit in num_str:\n        digit_sum += int(digit)\n    # Return the sum of the digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] > list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is sorted in ascending or descending order\n    if list1[0] <= list1[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    if len(lst) < 2:\n        return True\n    return lst[1:] == sorted(lst[:-1])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    This function takes in a list of lists and sorts each sublist of strings in the list.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the given list to set to remove duplicates\n    nums = set(nums)\n    # Convert the set back to a list and return it\n    return list(nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a list of unique numbers from the inner lists.\n    '''\n    unique_nums = []\n    for lst in nums:\n        for num in lst:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through each list in the input list\n    for num_list in nums:\n        # Iterate through each number in the list\n        for num in num_list:\n            # If the number is not already in the set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set from the input lists to remove duplicates\n    unique_nums = set(sum(nums, []))\n\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_set = set()\n    # loop through each list in the nums argument\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # add the number to the set if it is not already in it\n            if num not in unique_set:\n                unique_set.add(num)\n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # create an empty dictionary to store unique numbers\n    unique_nums = {}\n\n    # iterate through each list in the input list\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # check if the number is already in the dictionary\n            if num in unique_nums:\n                # remove the number from the list\n                num_list.remove(num)\n            # add the number to the dictionary\n            else:\n                unique_nums[num] = True\n\n    # return the modified lists\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n    \n    # Loop through each list in the given number of lists\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the current number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n    \n    # Create a new list with only the unique numbers from each list\n    unique_nums_list = []\n    for num in unique_nums:\n        unique_nums_list.append(num)\n    \n    # Return the new list of unique numbers\n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert the list to set to remove duplicates\n    unique_nums = set(nums)\n    # convert set back to list\n    unique_nums = list(unique_nums)\n    # return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers as input and removes any duplicates using a set.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to remove duplicates\n    product = 1 # initialize the product to 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data) # convert list to set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    # Remove duplicates from the list\n    unique_list = list(set(list_data))\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Convert the list to a set to remove duplicate elements\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    \n    product = 1\n    for num in unique_list:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h\n    print(\"The surface area of the cylinder is: \", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 3.14*r**2*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = math.pi * r * r\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder using the formula:\n\n    surface area = 2*\u03c0*r*h\n\n    \"\"\"\n    pi = 3.14159265359\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # calculate the surface area using formula: s = 2 * pi * r^2 + 2 * pi * h * r\n    s = (2 * math.pi * r**2) + (2 * math.pi * h * r)\n\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*h\n    print(\"The surface area of the cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Convert radius and height to a number\n    radius = float(r)\n    height = float(h)\n\n    # Calculate the surface area using the formula: 2*pi*r*h\n    surface_area = 2 * 3.14159 * radius * height\n\n    # Return the surface area as a string\n    return str(surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Finding the surface area of a cylinder\n    surface_area = math.pi*(r**2)*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2 + h**2)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if the length of B is greater than or equal to the length of A\n    if len(B) >= len(A): \n        # check if the first element of B is present in A\n        if B[0] in A: \n            # iterate through the list B from index 1 to len(B)-1\n            for i in range(1,len(B)): \n                # if the element at index i in B is not present in A, break out of the loop\n                if B[i] not in A: \n                    break\n            else: \n                # if the loop completes without a break, then all elements of B are present in A\n                return True\n        else: \n            # if the first element of B is not present in A, return False\n            return False\n    else: \n        # if the length of B is not greater than or equal to the length of A, return False\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A)<len(B): \n        return False \n\n    for i in range(len(B)): \n\n        if A[i]!=B[i]: \n\n            for j in range(i):\n\n                if A[j]==B[i]: \n\n                    if i-j+1==len(B): \n\n                        return True \n\n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n            \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n\n    Parameters:\n        A (list): list to be checked.\n        B (list): list to be checked if it's a sublist of A.\n\n    Returns:\n        bool: True if B is a sublist of A else False.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if all(A[j] == B[k] for j in range(len(B)) for k in range(len(B))):\n            return True\n            \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function checks whether a list A is a sublist of another list B.\n    '''\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n\n    return i == len(A)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer 'n' as input and returns the last digit in its factorial. \n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the last digit variable to 0\n    last_digit = 0\n    \n    # Initialize the factorial variable to the given number\n    factorial = n\n    \n    # Find the last digit of the factorial\n    while factorial > 0:\n        # Get the last digit of the factorial\n        last_digit = factorial % 10\n        \n        # Remove the last digit from the factorial\n        factorial //= 10\n        \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    last_digit = 0\n    for i in range(1, n+1):\n        last_digit += int(str(i)[-1])\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # take the last digit of factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial/10**len(str(n)))\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Using a while loop to calculate the factorial of n\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n\n    # Extracting the last digit from the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # initialize the last digit variable\n    last_digit = 0\n    \n    # loop until the number becomes 0\n    while n > 0: \n        # get the last digit of the number\n        last_digit = n % 10\n        \n        # calculate the factorial of the remaining number\n        n = (n // 10) * n\n        \n        # return the last digit of the factorial\n        return last_digit\n        \n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"All lists must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # Iterate through each list and add its elements to the interleaved list in their order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1: A list of integers.\n        list2: A list of integers.\n        list3: A list of integers.\n\n    Returns:\n        A list of integers that is the concatenation of the input lists.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Append the element at index i from list1 to interleaved_list\n        interleaved_list.append(list1[i])\n        # Append the element at index i from list2 to interleaved_list\n        interleaved_list.append(list2[i])\n        # Append the element at index i from list3 to interleaved_list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate the first two lists and the last list into a single list\n    interleaved_list = list1 + list2 + list3\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the first list\n    length1 = len(list1)\n\n    # Initialize a new empty list to store the interleaved lists\n    interleaved_list = []\n\n    # Iterate through the lists, adding elements to the interleaved_list\n    for i in range(length1):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the interleaved elements\n    interleaved_list = []\n    \n    # Iterate through each list and add its elements to the interleaved_list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length, and returns a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the final result\n    result = []\n    # Loop through each list in turn\n    for i in range(len(list1)):\n        # Add the first element from list1 to the result\n        result.append(list1[i])\n        # Add the second element from list2 to the result\n        result.append(list2[i])\n        # Add the third element from list3 to the result\n        result.append(list3[i])\n    # Return the final result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Ensure that all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    # Create a new list of length 3n where n is the length of the first list\n    result = list1.copy()\n    result.extend(list2)\n    result.extend(list3)\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    else:\n        interleaved_list = []\n        for i in range(len(list1)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the final result\n    result = []\n    \n    # iterate over each list and append its elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element at index i in the second tuple is equal to the element at index i in the first tuple\n        if test_tup2[i]!= test_tup1[i]:\n            # If the element is different, add it to the dissimilar list\n            dissimilar_list.append(test_tup2[i])\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a set of all the elements in the first tuple\n    set1 = set(test_tup1)\n    \n    # Create a set of all the elements in the second tuple\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Find the difference of the two sets (which are the elements not in the intersection)\n    difference = set1.difference(set2)\n    \n    # Find the elements in the intersection that are not in the first tuple\n    dissimilar1 = intersection.difference(set1)\n    \n    # Find the elements in the intersection that are not in the second tuple\n    dissimilar2 = intersection.difference(set2)\n    \n    # Return the dissimilar elements as a list\n    return [dissimilar1, dissimilar2]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list of elements that are present in test_tup1 but not in test_tup2.\n    '''\n    return [elem for elem in test_tup1 if elem not in test_tup2]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_list = []\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_elements = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n            \n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of the elements in both tuples\n    union_set = set(test_tup1 + test_tup2)\n\n    # Create a set of the elements in only one of the tuples\n    common_set = set(test_tup1).intersection(set(test_tup2))\n\n    # Return the elements that are in only one tuple but not the other\n    return list(union_set - common_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Define a list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Loop through each element in the first tuple\n    for elem1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if elem1 not in test_tup2:\n            # If the element is not in the second tuple, it is a dissimilar element\n            dissimilar_elements.append(elem1)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        elif isinstance(test_tuple[i], list):\n            test_tuple[i] = [even_fnc(j) for j in test_tuple[i]]\n        else:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Check if the nested mixed tuple is not empty\n    if test_tuple: \n\n        # Check if the nested mixed tuple contains only tuples\n        if all(isinstance(item, tuple) for item in test_tuple): \n\n            # Loop through each tuple in the nested mixed tuple\n            for i, item in enumerate(test_tuple): \n\n                # Check if the item is a tuple\n                if isinstance(item, tuple): \n                    # Check if the inner tuple is even\n                    if all(even_fnc(item)): \n                        # Remove the inner tuple from the mixed tuple\n                        del test_tuple[i]\n                else: \n                    # If the item is not a tuple, check if it is even\n                    if even_fnc(item): \n                        # Remove the item from the mixed tuple\n                        del test_tuple[i]\n\n    # Return the final mixed tuple\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if type(element) is tuple:\n            result.append(even_ele(element, even_fnc))\n        else:\n            result.append(even_fnc(element))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nresult = even_ele(test_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result\n\ndef even_fnc(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            new_tuple.append(even_fnc(item))\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        new_tuple.append(tuple(filter(even_fnc, tup)))\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_odd(num):\n        return num % 2 == 1\n\n    mixed_tuple = tuple(test_tuple)\n    even_list = list(filter(lambda x: even_fnc(x), mixed_tuple))\n    return tuple(even_list)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2)/2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculate the surface area of the base of the pyramid\n    base_area = (b**2)\n    \n    # Calculate the surface area of the top of the pyramid\n    top_area = (s * (s-b)) / 2\n    \n    # Add the two areas and return the result\n    return base_area + top_area "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Surface area of a square pyramid\n    area = (b * s * 2) + (s * s * 2) + (s * b * 2) + (b * b * 2) + (b * s * 2) + (s * b * 2) + (b * s * 2) + (s * s * 2) + (s * b * 2) + (b * b * 2) + (b * s * 2)\n\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the pyramid using the formula A = 2*(bh)\n    area = 2*(b*s)\n\n    # Return the surface area of the pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2 * b * s) + (b * b * 2 * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in two parameters, b for the base edge of the square pyramid and s for the height of the pyramid.\n    The function then calculates the area of the square pyramid by multiplying the base edge and the height, and returns the result.\n    '''\n    return b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of a square using Heron's formula\n    area = 0.5 * b * s * s\n    \n    # Calculate the area of the base of the pyramid using Heron's formula\n    base_area = 0.5 * b * b\n    \n    # Calculate the area of the upper half of the pyramid using Heron's formula\n    upper_half_area = 0.5 * b * s\n    \n    # Calculate the total surface area by adding the area of the base of the pyramid and the upper half of the pyramid\n    total_area = area + base_area + upper_half_area\n    \n    return total_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*s*b + 2*b*b - 3*b**2 - 3*s**2 - 3*b*s + 6*b*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the height of the pyramid\n    h = s / 2\n    \n    # calculate the surface area of the base and its four sides\n    area = (b**2) * h\n    \n    # add the surface area of the base to the surface area of its four sides\n    area += 2 * b * (h**2)\n    \n    # return the final surface area of the pyramid\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty!\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and returns True if it is empty and False otherwise.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        n1 = n - 1\n        n2 = 2 * n - 1\n        return catalan_number(n1) / catalan_number(n2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return (2*num - 1) * catalan_number(num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return (2*n-1) * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth catalan number.\n    '''\n    n += 1\n    return ((1 + 4*n) * (2*n + 1)) / (4**n * (n + 1) * (2*n + 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base case: 0, 1, 2, 3, 4\n    if num in [0, 1, 2, 3, 4]:\n        return 1\n    \n    # Recursive case: kth catalan number = (n-1)th catalan number + (n-k)th catalan number\n    # We have to calculate (n-k)th catalan number\n    n_minus_k_catalan = catalan_number(num-1)\n    \n    # Calculate the kth catalan number\n    k_catalan = n_minus_k_catalan * (2*num-1) / (num+1)\n    \n    return k_catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        catalan = 1\n        for i in range(1, n+1):\n            catalan = catalan * (n+1-i)/(i)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula:\n        C(n) = (2n)! / (n! * (n-1)!)\n    \n    This function accepts an integer as input and returns an integer as output.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input should be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize variables\n    catalan_num = 1\n    for i in range(1, num+1):\n        catalan_num *= (i * (num-i+1)) // i\n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2*catalan_number(num-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        num = [1] * (2*n + 1)\n        for i in range(2, 2*n+1):\n            for j in range(i):\n                num[i] += num[j] * num[i-j-1]\n        return num[2*n]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match the adverb ending with ly\n    pattern = r'\\b(really|actually|actinally|amazingly|amazingly|amazingly|awfully|awhile|awry|awryly|awrylyly|awrylylyly|awesomely|awesomeness|awesomenessly|awesomenesslyly|awesomenesslylyly|awesomenesss|awesomenesssly|awesomenessslyly|awesomenessslylyly|awful|awfully|awfully|awfulness|awfulnessly|awfulnesslyly|awfulnesslylyly|awhile|awkwardly|awkwarder|awkwardest|awkwardestly|awkwardestlyly|awkwardestlylyly|awry|awryly|awrylyly|awrylylyly|awrylylylyly|awrylylylylyly|awrylylylylylyly|awrylylylylylylylyly|awrylylylylylylylyly|awrylylylylylylylylylyly|awrylylylylylylylylylylyly|awrylylylylylylylylylylylylyly|awrylylylylylylylylylylylylylyly|awrylylylylylylylylylylylylylylylylylylyly|awrylylylylylylylylylylylylylylylylylylylylylylyly|awrylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding the adverb ending with ly\n    pattern = re.compile(r'(\\w+)(ed|ing|ly)$')\n    \n    # Use the pattern to find all the matches in the text\n    matches = pattern.findall(text)\n    \n    # Return the list of positions and the first adverb ending with ly\n    return [(pos, match[0]) for pos, match in enumerate(matches) if match[1] == 'ly']"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    This function finds the first adverb ending with 'ly' and its positions in a given string.\n    \"\"\"\n    # define the regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b(ly|lys|les)\\b'\n    \n    # use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # iterate over the matches and print out the adverb and its positions in the text\n    for i in range(len(matches)):\n        print(f\"Adverb found at position {i+1}: {matches[i]}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(text.find(match))\n    return positions\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the match object is not None, return the position of the match\n    if match:\n        return match.start()\n\n    # If the match object is None, return None\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create a list of tuples containing the first adverb ending with \"ly\" and its positions in the text\n    adverbs = []\n    for match in matches:\n        # Split the match into its constituent words and get the position of the first word\n        pos = text.index(match)\n        # Add the tuple to the adverbs list\n        adverbs.append((match, pos))\n    # Return the list of adverb tuples\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern to match the adverb ending with ly\n    pattern = r'\\b(?:st|nd|rd|th)\\s*ly\\b'\n\n    # find all the matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n\n    # if there are no matches, return None\n    if not matches:\n        return None\n\n    # otherwise, return a list of tuples, where each tuple contains the adverb ending with ly and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[aeiou].*[aeiou]ly\\b'\n    # Use the re.findall() method to find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb positions and values\n    adverbs = []\n    # Loop through each match and extract the position and value\n    for match in matches:\n        start, end = match.span()\n        adverb = text[start:end]\n        adverbs.append((start, adverb))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:ly|n\\'t|\\'t|\\'ve|\\'re|\\'d|er|est|ll|\\'s|\\'m|\\'ll|\\'re)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        text = text.replace(match, '', 1)\n    return matches, text\n\n\ntext = '''\nI love it when you fly with me. She doesn't even like it. She's not the best. It's a good day.\nShe is not a good person.\nShe doesn't want me. She doesn't care.\nI'm not going to work for her.\nShe doesn't care about me.\nShe is too busy to work.\nShe's not giving me the time.\nShe's not cheerful.\nShe's not always smiling.\nShe's not always laughing.\nShe's always looking out.\nShe's always pushing me away.\nShe's always trying to find me.\nShe's always wanting to find me.\nShe's always trying to be a good person.\nShe's always giving me the best.\nShe's always pushing me to do what I'm supposed to do.\nShe's always taking my time.\nShe's always making me laugh.\nShe's always showing me the way.\nShe's always looking for something to do.\nShe's always doing what I'm supposed to do.\nShe's always trying to make me happy.\nShe's always pushing me to do the best she can.\nShe's always enjoying the time I spend with her.\nShe's always making me smile.\nShe's always looking forward to being with me.\nShe's always keeping me coming back.\nShe's always making me happy.\nShe's always pushing me to be better than I am.\nShe's always trying to make me feel better.\nShe's always pushing me to do what I love.\nShe's always pushing me to be a better person.\nShe's always making me feel better.\nShe's always pushing me to be happier.\nShe's always pushing me to have a better future.\nShe's always pushing me to be the best version of herself.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the best version of herself.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to be the happiest person in the world.\nShe's always pushing me to"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # use re.finditer() method to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # iterate over the matches and print the position and the matched text\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb found at position {start} with text '{text[start:end]}'.\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    # Sort the items in descending order based on the value\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Take the first n items from the sorted list\n    expensive_items = sorted_items[:n]\n    \n    # Return the list of expensive items\n    return expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a positive integer n as input.\n    It returns a list of the n most expensive items in the input list.\n    '''\n\n    # Create a min heap of the first n items\n    min_heap = []\n    for item in items[:n]:\n        heapq.heappush(min_heap, item)\n\n    # Iterate over the remaining items and add them to the heap if they are cheaper\n    for item in items[n:]:\n        if item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n\n    # Return the list of n most expensive items in the input list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    # Iterate through the items in descending order of price\n    for item in sorted(items, key=lambda x: x[1], reverse=True):\n        # Add the item to the heap if the heap is not full yet\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # Otherwise, remove the item with the lowest price from the heap\n        else:\n            curr_price = item[1]\n            if heapq.heappop(min_heap)[1] > curr_price:\n                heapq.heappush(min_heap, item)\n    # Return the n most expensive items from the heap\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for cost, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item) # push negative price of item into heap\n        if len(heap) > n: # if heap size is greater than n, pop the largest item and continue\n            heapq.heappop(heap)\n    \n    return [-heap[0]] # return the n most expensive items in decreasing order"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(len(l)):\n        if i == n:\n            break\n        arr.append(l[i])\n    return arr + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return None\n    elif n >= len(l):\n        return None\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return 'Invalid input: n is greater than the length of the list'\n    if n == 1:\n        return [l[0]]\n    if n == len(l):\n        return l\n    if n < len(l):\n        return l[:n] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    \n    new_list = l[:n] + l[n+1:]\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List is too short to split at the nth element\")\n    else:\n        first_part = l[:n]\n        rest = l[n:]\n        l = first_part + rest\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"The value of n is greater than the length of the list\")\n        return\n    \n    # Split the list at the nth element\n    mid = len(l)//2\n    left_arr = l[:mid]\n    right_arr = l[mid+1:]\n    \n    # Add the first part to the end of the right array\n    right_arr.extend(left_arr)\n    \n    return right_arr"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List is too short\"\n    \n    for i in range(len(l)):\n        if i == n-1:\n            l.append(l[i])\n            break\n        elif i == n:\n            return \"Error: n is greater than the length of the list\"\n        else:\n            l.append(l[i])\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        raise ValueError(\"The nth element is out of range.\")\n    return [l[n:]] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    # check if list is empty\n    if len(l) == 0:\n        return []\n    \n    # if n is 0, return the list as it is\n    if n == 0:\n        return l\n    \n    # if n is greater than the length of the list, return the list as it is\n    if n > len(l):\n        return l\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n    \n    # recursively split the left part of the list\n    left = split_Arr(left, n)\n    \n    # add the left part to the right part\n    return right + left"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = list(l)\n    mid = len(arr) // 2\n    if n > mid:\n        arr.append(arr.pop(0))\n        arr.append(arr.pop(0))\n    else:\n        arr.insert(0, arr.pop(mid))\n        arr.insert(0, arr.pop(mid-1))\n    return arr"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list as an argument and returns the difference between the largest and smallest values in the list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    \n    # Return the difference between the largest and smallest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # loop through the list and update minimum and maximum values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    # calculate the difference between minimum and maximum values\n    diff = max_val - min_val\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize the variables for maximum and minimum values\n    max_num = float('-inf')\n    min_num = float('inf')\n\n    # Iterate through the list and find the maximum and minimum values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n\n    # Calculate the difference between maximum and minimum values\n    diff = max_num - min_num\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables\n    min_val = nums[0]\n    max_val = nums[0]\n    \n    # iterate over the list and update min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    # calculate the difference between max and min values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize min and max variables to the first element of the list\n    min_val = nums[0]\n    max_val = nums[0]\n    \n    # iterate through the rest of the list and update the min and max variables as needed\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # return the difference between max and min values\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize the variables to store the result\n    result = []\n    # Loop through the numbers from a to b\n    for i in range(a, b+1):\n        # Check if the square of the current number is greater than or equal to b\n        if i*i >= b:\n            break\n        # If the square is greater than or equal to the next number, add the current number to the result\n        elif i*i >= i+1:\n            result.append(i)\n    # Return the result\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store perfect squares\n    squares = []\n    # Loop through a to b\n    for i in range(a, b+1):\n        # Calculate the square root of i using the math.sqrt() function\n        square = int(round(math.sqrt(i)))\n        # Check if the square is already in the list\n        if square not in squares:\n            # If it's not, add it to the list\n            squares.append(square)\n    # Return the list of perfect squares between a and b\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b + 1):\n        for j in range(i, b + 1):\n            if i * i == j * j:\n                squares.append(i * i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_squares = []\n    for i in range(a, b + 1):\n        square = i * i\n        if square == i:\n            perfect_squares.append(square)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # loop through all numbers between a and b\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i * i == i:\n            # add i to the list if it is\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize variables to store the count of perfect squares\n    count = 0\n    current = a\n\n    # Loop until the current square is less than or equal to the second square\n    while current <= b:\n\n        # If the current square is a perfect square, increment the count\n        if current*current == current:\n            count += 1\n\n        # Increment the current square\n        current += 1\n\n    # Return the count of perfect squares\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the result\n    result = []\n\n    # Loop through each number in the range between a and b\n    for i in range(a, b+1):\n        # Check if the square root of i is an integer\n        if int(i**0.5) == i**0.5:\n            # If it is, add it to the result list\n            result.append(i**0.5)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == perfect_square(i):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize the list to store the perfect squares between a and b\n    perfect_squares_list = []\n    \n    # loop through the range of numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # calculate the square of the number\n        square = num ** 2\n        \n        # check if the square is a perfect square\n        if square == num:\n            perfect_squares_list.append(square)\n    \n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize two lists to store the perfect squares\n    perfect_squares_a = []\n    perfect_squares_b = []\n\n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the square of the number is equal to the number itself\n        if num ** 2 == num:\n            # If it is, add it to the list of perfect squares for the smaller number\n            if num < b:\n                perfect_squares_a.append(num ** 2)\n            else:\n                perfect_squares_b.append(num ** 2)\n\n    # Return the two lists of perfect squares\n    return perfect_squares_a, perfect_squares_b"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the polar coordinates of a point (r, theta) and returns the corresponding rectangular coordinates.\n\n    Parameters:\n    r (float): The radial distance of the point.\n    theta (complex): The angle of the point (in radians).\n\n    Returns:\n    (float, float): The rectangular coordinates of the point.\n    \"\"\"\n\n    # Convert theta to degrees\n    theta = theta * (180/cmath.pi)\n\n    # Calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, x.imag, y.real, y.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Convert polar coordinates (r, phi) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return (rect_x, rect_y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(complex(x,y))\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return (x_rect.real, x_rect.imag, y_rect.real, y_rect.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return \"List should have at least two elements to swap.\"\n    else:\n        # swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has less than 2 elements\n    if length < 2:\n        return newList\n    \n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # defining the list length\n    length = len(newList)\n\n    # checking if the length of the list is greater than 1\n    if length > 1:\n        # interchanging the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements to be swapped.\")\n    else:\n        # swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"Swapped list:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least 2 elements!\")\n        return None\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n\n    for i in range(1, k + 1):\n        coeff *= n - i + 1\n        coeff //= i\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    if n < k or n < 0 or k < 0:\n        return \"Invalid input. Please enter non-negative integers for n and k.\"\n    elif n == 0:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nresult = binomial_Coeff(n,k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    product = 1\n    sum = 0\n    for i in range(1,k+1):\n        product *= n-i+1\n        sum += product\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    # Function to calculate the binomial coefficient\n    def binomial(n, k):\n        # Base case\n        if k > n:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n    \n    # Function to find the sum of the product of consecutive binomial co-efficients\n    def sum_of_product(n, k):\n        # Base case\n        if k == 0:\n            return 1\n        else:\n            return binomial_Coeff(n, k-1) * (n-k+1)\n    \n    # Calculation of the sum of the product of consecutive binomial co-efficients\n    sum_prod = 0\n    for i in range(1, n+1):\n        sum_prod += sum_of_product(n, i)\n    \n    return sum_prod"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    prod = 1\n    for i in range(k, n+1):\n        prod *= i\n    return prod\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\nsum_of_products = binomial_Coeff(n,k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum_of_products)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum variable\n    sum_bin = 0\n\n    # Calculate the binomial coefficient of n choose k\n    bin_coeff = 1\n    for i in range(1, k+1):\n        bin_coeff *= n - i + 1\n        bin_coeff /= i\n\n    # Calculate the product of the first k consecutive binomial coefficients\n    for i in range(1, k+1):\n        sum_bin += bin_coeff\n\n    return sum_bin"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): Total number of terms in the binomial coefficient.\n    k (int): The number of terms to include in the sum.\n\n    Returns:\n    sum (int): The sum of the product of consecutive binomial co-efficients.\n\n    '''\n\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i*k**i)/(i*(n-i+1)**(k))\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    count = 0\n    while count <= n-k:\n        coeff *= (n-count)\n        count += 1\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n\n    # calculate the binomial coefficient\n    bin_coeff = (n+1)*binomial_Coeff(n-1,k-1)\n\n    # calculate the sum of products\n    for i in range(1,k+1):\n        sum_of_products += binomial_Coeff(n,i-1)*binomial_Coeff(n-1,k-i)\n\n    # return the sum of products\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    if k == 0 or k == n:\n        return 1\n    for i in range(1,k+1):\n        if i == 1:\n            sum += n\n        else:\n            sum += n*i\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+(?=\\d)', '', ip) # remove leading zeroes from the ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'^\\D+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n    \"\"\"\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return '.'.join(filter(lambda x: x!= '0', ip.split('.')))\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each octet\n    ip_parts = ip.split('.')\n    for i in range(len(ip_parts)):\n        ip_parts[i] = re.sub(r'^0+', '', ip_parts[i])\n    # Join the remaining parts with dots\n    new_ip = '.'.join(ip_parts)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes\n    ip = re.sub(r'^0+', '', ip)\n    # Remove leading dots\n    ip = re.sub(r'^\\[\\.]+', '', ip)\n    # Remove trailing dots\n    ip = re.sub(r'[\\.]+$', '', ip)\n    # Remove multiple dots\n    ip = re.sub(r'\\.+', '.', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(\\d+\\.\\d+\\.\\d+\\.\\d+)$')\n    match = pattern.match(ip)\n    if match:\n        return match.group(1)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d*(\\d)\\d*\\.\\d+', r'\\1.', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each octet of the ip address\n    ip_list = ip.split('.')\n    ip_list = [re.sub(r'^\\s+|\\s+$', '', octet) for octet in ip_list]\n\n    # Join the list of octets back together into a single string\n    ip = '.'.join(ip_list)\n\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = None\n    odd_first = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_first is None:\n                even_first = num\n            else:\n                break\n        elif num % 2!= 0:\n            if odd_first is None:\n                odd_first = num\n            else:\n                break\n    \n    if even_first is None or odd_first is None:\n        return None\n    \n    return even_first - odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"List should have at least two elements.\")\n        return\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        print(\"List should have at least one even and one odd number.\")\n        return\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = first_even - first_odd\n    print(\"The difference of the first even and first odd number is:\", diff)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initializing variables\n    even = 0\n    odd = 0\n    # Looping through the list and finding even and odd numbers\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    # Calculating the difference between the even and odd numbers\n    diff = even - odd\n    # Returning the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            count += 1\n        else:\n            odd_num = num\n            count += 1\n\n        if count == 2:\n            break\n\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # get the first even and first odd number of the list\n    first_even = list1[0]\n    first_odd = list1[1]\n    # calculate the difference between the first even and first odd number\n    diff = first_even - first_odd\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even and first odd numbers\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                raise ValueError(\"There are multiple even numbers in the list\")\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                raise ValueError(\"There are multiple odd numbers in the list\")\n\n    # Check if even_num and odd_num are not None\n    if even_num is None or odd_num is None:\n        raise ValueError(\"There are no even or odd numbers in the list\")\n\n    # Calculate the difference of the even and odd numbers\n    diff = even_num - odd_num\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n            break\n    \n    if even_index == 0:\n        even_index = 1\n    \n    if odd_index == 0:\n        odd_index = 1\n        \n    return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Get the first even and first odd number from the list\n    first_even = list1[0]\n    first_odd = list1[1]\n\n    # Get the difference between the first even and first odd number\n    diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n\n    if even % 2 == 0:\n        return abs(even - odd)\n    else:\n        return abs(odd - even)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = 0\n    first_odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            if first_even == 0:\n                first_even = num\n            elif first_even!= 0:\n                first_even = 0\n        elif num % 2!= 0:\n            if first_odd == 0:\n                first_odd = num\n            elif first_odd!= 0:\n                first_odd = 0\n    if first_even == 0:\n        return first_odd\n    elif first_odd == 0:\n        return first_even\n    else:\n        return first_even - first_odd"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize the variables to keep track of the number of swaps\n    swaps = 0\n    i = 0\n    j = len(str2) - 1\n\n    # Iterate over the digits of the two numbers and compare them\n    while i < j:\n        if num1 % 2 == num2 % 2:\n            i += 1\n            j -= 1\n        else:\n            # Swap the digits and increment the swap count\n            num1 = num1 ^ num2\n            num2 = num1 ^ num2\n            num1 = num1 ^ num2\n            swaps += 1\n\n    # If the remaining digits are not equal, the maximum number of swaps required is the difference between the lengths of the two binary strings\n    return swaps + abs(len(str1) - len(str2))"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # check if the lengths of the strings are same\n    if len(str1)!= len(str2):\n        return \"Input strings must be of equal length\"\n    \n    # initialize two counters for characters and bits\n    char_count = 0\n    bit_count = 0\n    \n    # loop through both strings\n    for i in range(len(str1)):\n        # compare the characters of the two strings\n        if str1[i]!= str2[i]:\n            # if they are not equal, swap the characters and increment the count of swaps\n            str1[i], str1[i+1] = str1[i+1], str1[i]\n            char_count += 1\n        else:\n            # if they are equal, increment the count of characters\n            char_count += 1\n        \n        # count the number of bits required for each string\n        if str1[i] == '1':\n            bit_count += 1\n    \n    # return the minimum number of swaps required\n    return min(char_count, bit_count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Strings must have equal length\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                count += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                count -= 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    diff = abs(n1 - n2)\n\n    if diff == 0:\n        return 0\n    elif diff > 0:\n        str1, str2 = str2, str1\n        diff = abs(n1 - n2)\n\n    min_swaps = 0\n    i = 0\n    j = 0\n\n    while i < n1 and j < n2:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            if str1[i] < str2[j]:\n                min_swaps += n1 - i\n                i += 1\n            else:\n                min_swaps += n2 - j\n                j += 1\n\n    while i < n1:\n        min_swaps += n1 - i\n        i += 1\n\n    while j < n2:\n        min_swaps += n2 - j\n        j += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize the two binary strings\n    binary1 = str1\n    binary2 = str2\n    \n    # Initialize the count of swaps required\n    swap_count = 0\n    \n    # Initialize the length of the strings\n    n = len(binary1)\n    \n    # Compare the two binary strings\n    for i in range(n):\n        # If the characters don't match, swap them\n        if binary1[i]!= binary2[i]:\n            # Increment the swap count\n            swap_count += 1\n            \n            # Change the characters of the two binary strings\n            temp1 = binary1[i]\n            temp2 = binary2[i]\n            \n            binary1 = binary1[:i] + binary2[i] + binary1[i+1:]\n            binary2 = binary2[:i] + temp1 + binary2[i+1:]\n            \n            # Check if the swapping gives the desired result\n            if int(binary1, 2) == int(binary2, 2):\n                return swap_count\n            \n            # If the swapping doesn't give the desired result, backtrack and swap the characters back to their original positions\n            binary1 = binary1[:i] + temp1 + binary1[i+1:]\n            binary2 = binary2[:i] + temp2 + binary2[i+1:]\n            swap_count -= 1\n            \n    # If the two binary strings are identical, return the minimum number of swaps required\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # If length of strings are not equal, return -1\n    if n1!= n2:\n        return -1\n\n    # Initialize two boolean arrays to store the last occurrence of each character in str1 and str2\n    last1 = [False] * 10\n    last2 = [False] * 10\n\n    # Iterate through str1 and check for last occurrence of each character\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            last1[int(str1[i])] = True\n            last2[int(str2[i])] = True\n\n    # Initialize a counter variable to count the minimum number of swaps required\n    count = 0\n\n    # Iterate through str2 and check for first occurrence of each character\n    for i in range(n2):\n        if str1[last2.index(True)]!= str2[i]:\n            count += 1\n\n    # Return the minimum number of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    # Initialize a table to store number of swaps required to convert str1 to str2\n    swap_table = [[0] * (2**n) for i in range(2**n)]\n\n    # Fill the swap table using dynamic programming approach\n    for i in range(2**n):\n        if i == 0:\n            swap_table[i][i] = 0\n        elif i == 1:\n            swap_table[i][i] = 1\n        else:\n            for j in range(i):\n                if str1[j] == str2[j]:\n                    swap_table[i][j] = swap_table[i-1][j]\n                else:\n                    swap_table[i][j] = min(swap_table[i-1][j], swap_table[i-1][j+1]) + 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swap_table[2**n-1][2**n-1]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # convert strings to binary\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n\n    # find common prefix\n    prefix = ''\n    while binary1[0] == binary2[0]:\n        prefix += binary1[0]\n        binary1 = binary1[1:]\n        binary2 = binary2[1:]\n\n    # count number of swaps\n    count = 0\n    for i in range(len(str1) - len(prefix)):\n        if str1[i]!= str2[i]:\n            count += 1\n\n    # add swaps for prefix\n    for i in range(len(prefix)):\n        if str1[i]!= str2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    if n!= len(str2):\n        raise ValueError(\"Both binary strings must have the same length.\")\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            if str1[i] == '1' and str2[i] == '0':\n                str1 = str1[:i] + '0' + str1[i+1:]\n                str2 = str2[:i] + '1' + str2[i+1:]\n                swaps += 1\n            elif str1[i] == '0' and str2[i] == '1':\n                str1 = str1[:i] + '1' + str1[i+1:]\n                str2 = str2[:i] + '0' + str2[i+1:]\n                swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to binary numbers\n    num1 = int(bin(int(str1,2))[2:],2)\n    num2 = int(bin(int(str2,2))[2:],2)\n    \n    # Initialize variables to store the count of swaps required for each binary number\n    swap_count = [0]*(num1+1)\n    swap_count[0] = 0\n    \n    # Loop through each binary digit and count the minimum number of swaps required\n    for i in range(1,num1+1):\n        for j in range(1,num2+1):\n            # Calculate the number of swaps required for each binary number\n            if num1 & (1<<i-1) == num2 & (1<<j-1):\n                swap_count[i] = min(swap_count[i],swap_count[j]+1)\n    \n    # Return the minimum number of swaps required\n    return swap_count[num1]"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of each element in the tuple\n    sizes = [sys.getsizeof(x) for x in tuple_list]\n    # Multiply the sizes and return the result\n    return sum(sizes)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of each element in the tuple\n    element_size = sys.getsizeof(tuple_list[0])\n    \n    # Calculate the size of the tuple\n    size = sys.getsizeof(tuple_list)\n    \n    # Return the size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as an argument and returns the \n    total size of all the tuples in bytes.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if n1 > n2:\n        arr1, arr2, n1, n2 = arr2, arr1, n2, n1\n    \n    i, j = 0, n1\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a target element k and returns the kth smallest element from the two arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The target element for the kth smallest element.\n\n    Returns:\n    int: The kth smallest element from the two sorted arrays.\n\n    \"\"\"\n\n    # Initialize variables for the pointers\n    i, j = 0, 0\n\n    # Initialize variables for the current and next elements\n    current, next_element = None, None\n\n    # Loop through both arrays until we find the kth smallest element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            current = arr1[i]\n            next_element = arr2[j]\n            i += 1\n        else:\n            current = arr2[j]\n            next_element = arr1[i]\n            j += 1\n\n        # Check if the current element is the kth smallest element\n        if current == k:\n            return next_element\n\n    # If we reach here, the kth smallest element was not found in either array\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(arr, l, m, r):\n    # Create temp arrays\n    n1 = m - l + 1\n    n2 = r - m\n    \n    temp1 = [0] * n1\n    temp2 = [0] * n2\n    \n    # Copy data to temp arrays\n    for i in range(0, n1):\n        temp1[i] = arr[l + i]\n    for j in range(0, n2):\n        temp2[j] = arr[m + 1 + j]\n    \n    # Merge the temp arrays back into arr[l..r]\n    i = 0  # Initial index of first subarray\n    j = 0  # Initial index of second subarray\n    k = l  # Initial index of merged subarray\n    \n    while i < n1 and j < n2:\n        if temp1[i] <= temp2[j]:\n            arr[k] = temp1[i]\n            i += 1\n        else:\n            arr[k] = temp2[j]\n            j += 1\n        k += 1\n    \n    while i < n1:\n        arr[k] = temp1[i]\n        i += 1\n        k += 1\n    \n    while j < n2:\n        arr[k] = temp2[j]\n        j += 1\n        k += 1\n\n\ndef merge_sort(arr, l, r):\n    if l < r:\n        m = l + (r - l) // 2\n        \n        # Sort first and second halves\n        merge_sort(arr, l, m)\n        merge_sort(arr, m + 1, r)\n        \n        # Merge the sorted halves\n        merge(arr, l, m, r)\n\n\ndef find_kth(arr1, arr2, k):\n    # Merge the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    merged_arr = [0] * (n1 + n2)\n    i = j = k = 0\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            merged_arr[k] = arr1[i]\n            i += 1\n        else:\n            merged_arr[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    # Copy the remaining elements of the first array\n    while i < n1:\n        merged_arr[k] = arr1[i]\n        i += 1\n        k += 1\n    \n    # Copy the remaining elements of the second array\n    while j < n2:\n        merged_arr[k] = arr2[j]\n        j += 1\n        k += 1\n    \n    # Sort the merged array\n    merge_sort(merged_arr, 0, len(merged_arr) - 1)\n    \n    # Return the kth element\n    return merged_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge the two sorted arrays into a single array\n    merged_arr = arr1 + arr2\n\n    # Find the middle index of the merged array\n    mid = len(merged_arr) // 2\n\n    # Initialize two pointers, one starting from the middle of the array and the other starting from the end\n    i = mid - 1\n    j = len(merged_arr) - 1\n\n    # Initialize a variable to keep track of the current element being considered\n    curr_elem = None\n\n    # Traverse the merged array and compare the elements at the two pointers\n    while i >= 0 and j >= 0:\n        if merged_arr[i] > merged_arr[j]:\n            curr_elem = merged_arr[i]\n            i -= 1\n        else:\n            curr_elem = merged_arr[j]\n            j -= 1\n\n    # If the current element is greater than k, it means the kth element is in the second array\n    if curr_elem > k:\n        return find_kth(arr1, arr2[k:], k)\n\n    # If the current element is less than or equal to k, it means the kth element is in the first array\n    return arr1[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # initialize pointers for both arrays\n    i, j = 0, 0\n    \n    # initialize kth element to -1\n    kth_element = -1\n    \n    # loop until k elements are found\n    while i < len(arr1) and j < len(arr2):\n        # compare the elements at the current indices\n        if arr1[i] < arr2[j]:\n            if k == 0:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 0:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            # if the elements are equal, compare the next elements\n            if i == len(arr1) - 1 and j == len(arr2) - 1:\n                # if both arrays are exhausted, return the kth element\n                return arr1[i]\n            elif i < len(arr1) - 1 and j == len(arr2) - 1:\n                # if array 1 is exhausted, return the element at index i\n                return arr1[i]\n            elif i == len(arr1) - 1 and j < len(arr2) - 1:\n                # if array 2 is exhausted, return the element at index j\n                return arr2[j]\n            else:\n                # if both arrays have elements, return the element at index i\n                return arr1[i]\n\n    # if the while loop is exited without finding k elements, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    kth = -1\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if kth == -1 or kth == i:\n                kth = i\n                k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if kth == -1 or kth == j:\n                kth = j\n                k -= 1\n            j += 1\n        else:\n            if kth == -1 or kth == (i + j) // 2:\n                kth = (i + j) // 2\n                k -= 1\n            i += 1\n            j += 1\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num = number\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit ** 3\n        num //= 10\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_length = len(num_str)\n    sum_of_squares = 0\n\n    for digit in num_str:\n        digit_square = int(digit)**num_length\n        sum_of_squares += digit_square\n\n    if sum_of_squares == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is armstrong\n    and False otherwise.\n    \"\"\"\n    sum = 0\n    num_str = str(num)\n    n = len(num_str)\n    for i in range(n):\n        power = n - i - 1\n        digit = int(num_str[i])\n        sum += digit**power\n    return sum == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an armstrong number, False otherwise.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        number_str = str(number)\n        sum = 0\n        for digit in number_str:\n            digit_int = int(digit)\n            sum += digit_int ** len(number_str)\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n\n    # Initialize the sum of the digits of the number\n    sum_digits = 0\n\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the digit to the sum of digits\n        sum_digits += digit_int ** len(number_str)\n\n    # Check if the sum of digits is equal to the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    Args:\n        number: an integer\n\n    Returns:\n        True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(number)\n    num_digits = len(num_str)\n    total = 0\n    power = num_digits\n\n    for digit in num_str:\n        total += int(digit) ** power\n        power -= 1\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n\n    Args:\n    number: an integer\n\n    Returns:\n    True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    number_str = str(number)\n    total = 0\n    power = len(number_str)\n\n    for digit in number_str:\n        total += int(digit) ** power\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function takes an integer number as input and returns True if the number is an Armstrong number and False otherwise.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    # Get the length of the string\n    length = len(number_str)\n    # Initialize a variable to store the sum of digits raised to the power of length\n    sum_digits = 0\n    # Iterate through each character in the string and add the power of its digit to the sum\n    for digit in number_str:\n        sum_digits += int(digit)**length\n    # Check if the sum equals the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    sum_of_powers = 0\n    power = len(num_str)\n\n    # Calculate the sum of the powers of the digits of the number\n    for digit in num_str:\n        power -= 1\n        sum_of_powers += int(digit) ** power\n\n    # Check if the sum of powers equals the original number\n    return sum_of_powers == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    A function to check whether a given number is Armstrong or not.\n    \"\"\"\n    return str(n) == str(sum(int(digit) ** len(str(n)) for digit in str(n)))\n\ndef armstrong_number(number):\n    \"\"\"\n    A function to check whether the given number is Armstrong or not.\n    \"\"\"\n    if is_armstrong(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through first n numbers\n    for i in range(1, number + 1):\n        # add i to sum\n        sum += i\n\n    # calculate the average by dividing sum by number\n    average = sum / number\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initializing the sum variable with zero\n    sum = 0\n    # iterating through the first n natural numbers\n    for i in range(1, number+1):\n        # adding the i-th number to the sum variable\n        sum += i\n    # calculating the average by dividing the sum by number\n    average = sum/number\n    # returning a tuple containing the sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum_n = 0\n    count = 0\n    # iterate over numbers from 1 to n\n    for i in range(1, n+1):\n        # add each number to sum and count\n        sum_n += i\n        count += 1\n    # find the average\n    average = sum_n / count\n    # return the sum and average\n    return sum_n, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    print(\"The sum of the first {} natural numbers is: {}\".format(number, sum))\n    print(\"The average of the first {} natural numbers is: {}\".format(number, avg))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as input and returns a tuple of two values,\n    the sum and the average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_val = 0\n    for i in range(number):\n        sum_val += i\n    avg_val = sum_val / number\n    return sum_val, avg_val\n\nn = int(input(\"Enter the number of natural numbers to find sum and average: \"))\nprint(\"Sum of first\", n, \"natural numbers is:\", sum_average(n)[0])\nprint(\"Average of first\", n, \"natural numbers is:\", sum_average(n)[1])"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum = 0\n    count = 0\n    average = 0\n\n    # loop through first n natural numbers and calculate sum and count\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    # calculate average\n    average = sum / count\n\n    # print result\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    print(f\"Sum of first {number} natural numbers is {total}.\")\n    print(f\"Average of first {number} natural numbers is {average}.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if the number is even and False if the number is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Check whether a given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    # check if n is a number\n    if not isinstance(n, (int, float)):\n        print(\"Error: Input must be a number.\")\n        return None\n\n    # check if n is even\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the character frequencies\n    freq = {}\n    # Traverse through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Find the first character that appears more than once\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    # If all characters appear only once, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in it.\n    '''\n    # initialize variables to keep track of the first and last index of the repeated character\n    first_index = -1\n    last_index = -1\n    # iterate over the string and keep track of the first and last index of the repeated character\n    for i in range(len(str1)):\n        if first_index == -1:\n            first_index = i\n            last_index = i\n        elif str1[i] == str1[first_index]:\n            last_index = i\n        else:\n            first_index = -1\n    # if the repeated character is not found, return None\n    if first_index == -1:\n        return None\n    # if the repeated character is found, return its index\n    else:\n        return first_index"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # create an empty dictionary to store character counts\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of characters in the string\n    freq = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # Initialize the first repeated character to None\n    first_rep = None\n    \n    # Iterate through each character in the string again\n    for char in str1:\n        # If the frequency of the character is greater than 1, set the first repeated character to the character and break the loop\n        if freq[char] > 1:\n            first_rep = char\n            break\n    \n    # Return the first repeated character or None if there is no repeated character in the string\n    return first_rep"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character.\n    If no repeated character is found, it returns None.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store character counts\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n            \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i**2 <= n:\n            ludic_numbers.append(i**2)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\n\ndef is_lucid(n):\n    '''\n    Check if a number is a lucid number.\n    '''\n    num = n\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3*num + 1\n    return num == 1"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        if all(int(digit)!= digit for digit in str(num)):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\nn = int(input(\"Enter a number: \"))\nprint(\"Lucid numbers smaller than or equal to\", n, \"are:\", get_ludic(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if i == 2:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        if sum(int(digit)**i for digit in str(i)) == i:\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 3 == 0 or i % 5 == 0:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if all(int(digit)**i % (10**(i-1)) == 1 for digit in str(i)):\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word[::-1]) # Reverse the characters in each word\n    return \" \".join(reversed_words) # Join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Splitting the string into words\n    words = s.split()\n    # Reversing the order of the words\n    words = words[::-1]\n    # Joining the words back into a string\n    s = \" \".join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    result =''.join(words[::-1])\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    \n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n        \n    # join the words back into a string\n    reversed_words =''.join(words)\n    \n    return reversed_words"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, else False.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number other than 1 and itself\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is less than or equal to its square root, it is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a number is prime or not\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n    # check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    # if the loop finishes without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n\nprint(radian_degree(45))"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180*degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], len(matches[0][0])\n    else:\n        return None, None, 0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        for match in matches:\n            return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = r\"the|lazy\"\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n + 1) * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell_numbers = [0]\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initializing the first two bell numbers\n    bell_num = 1\n    bell_num2 = 1\n    # iterating through the remaining n-2 bell numbers\n    for i in range(2, n):\n        # calculating the nth bell number\n        bell_num = bell_num2 * (n - i) // i\n        bell_num2 = bell_num\n        # printing the nth bell number\n        print(bell_num)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number.\n    '''\n\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        bell = 1\n        for i in range(3, n+1):\n            bell = bell * (i - 1) // i\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    This function will find the nth Bell number.\n    '''\n    # initialize the bell number\n    bell = 0\n    # loop through each value of n\n    for i in range(n+1):\n        # add the bell number to the total\n        bell += bell_number(i)\n    # return the total\n    return bell\n\ndef bell_number(n): \n    '''\n    This function will find the nth Bell number.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return 2*bell_number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first two bell numbers\n    bell_1 = 1\n    bell_2 = 1\n\n    # Loop for n-2 times\n    for i in range(2, n):\n        # Calculate the next bell number by adding the previous two\n        bell_i = bell_1 + bell_2\n\n        # Update the previous two bell numbers\n        bell_1 = bell_2\n        bell_2 = bell_i\n\n    # Return the nth bell number\n    return bell_i"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    count = 0\n    for i in range(n):\n        if list1[i]!= L:\n            count += 1\n            if count == L:\n                list1.pop(i)\n                return list1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    i = 0\n    while i < len(list1):\n        if i == k:\n            list1.pop(i)\n        else:\n            i += 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return []\n    elif L == 1:\n        return list1[:L]\n    elif L % 2 == 0:\n        return remove_kth_element(list1[1:], L//2) + [list1[0]]\n    else:\n        return remove_kth_element(list1[:-1], L//2) + [list1[-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # subtract 1 to get the index of the kth element\n    list1.pop(k) # remove the kth element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) > L:\n        return list1[:L]\n    else:\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        if i == L-1:\n            list1.pop(i)\n        elif i < L-1:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and L as input and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    k = L - 1\n    for i in range(len(list1)):\n        if i!= k:\n            list1[i], list1[k] = list1[k], list1[i]\n        k -= 1\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the maximum value of then'th column\n    max_value = float('-inf')\n    \n    # Iterate through the list of lists\n    for row in test_list:\n        # If the value of then'th column is greater than the current maximum value, update the maximum value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    # Return the maximum value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_list = []\n    for row in test_list:\n        max_list.append(max(row[N-1]))\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    if not test_list:  # empty list\n        return None\n    \n    max_value = float('-inf')\n    \n    # iterate through the rows of the matrix\n    for row in test_list:\n        value = row[N-1]  # get the value of then'th column\n        \n        # compare the value with the current maximum value\n        if value > max_value:\n            max_value = value\n            \n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize the max value\n    max_val = None\n    # iterate over each row in the matrix\n    for row in test_list:\n        # check if the value of then'th column is greater than the current max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        if i == 0:\n            max_num = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_num:\n                max_num = test_list[i][N-1]\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    # check if then'th column exists\n    if N >= num_cols:\n        raise ValueError(\"N is greater than or equal to the number of columns in the matrix\")\n    # initialize an empty list to store the max values\n    max_vals = []\n    # loop through each row of the matrix and add then'th column value to the max_vals list\n    for row in test_list:\n        max_vals.append(row[N-1])\n    # return the maximum value in max_vals\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the list of lists\n    rows = len(test_list)\n    # check if the Nth column is within the range of the matrix\n    if N > rows:\n        raise ValueError(\"The Nth column is greater than the number of rows in the matrix.\")\n    # find the maximum value in the Nth column\n    max_value = max([row[N-1] for row in test_list])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = 0\n        for j in range(len(test_list[0])):\n            if j == N-1:\n                if test_list[i][j] > max_val:\n                    max_val = test_list[i][j]\n        print(max_val)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    merged_lst = []  \n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])  \n    return merged_lst  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    for tup in test_list:\n        cum_sum.append(sum(tup))\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cumulative_sum(test_list):\n    '''\n    This function takes a list of numbers as input and returns a list of cumulative sums of all the values in the input list.\n    '''\n    cum_sum = [0]\n    for num in test_list:\n        cum_sum.append(cum_sum[-1] + num)\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # Loop through each tuple in the list\n    for item in test_list:\n        # If the item is a number, add it to the cumulative sum\n        if isinstance(item, (int, float)):\n            cumulative_sum += item\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i, tup in enumerate(test_list):\n        for j in range(i+1):\n            cum_sum += tup[j]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a list to store the cumulative sum\n    cum_sum_list = []\n\n    # Loop through the tuple list\n    for i, tup in enumerate(test_list):\n\n        # Extract the values from the tuple\n        values = tup\n\n        # Initialize a variable to keep track of the cumulative sum\n        cum_sum = 0\n\n        # Loop through the values and add them to the cumulative sum\n        for val in values:\n            cum_sum += val\n\n        # Add the cumulative sum to the cum_sum_list\n        cum_sum_list.append(cum_sum)\n\n    # Return the cum_sum_list\n    return cum_sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for num in tup:\n            total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cumulative_sum += val\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize cumulative sum to 0\n    cumulative_sum = 0\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # Check if the item is an integer\n        if isinstance(item, int):\n            # Add the integer to the cumulative sum\n            cumulative_sum += item\n        # If the item is not an integer, raise a TypeError\n        else:\n            raise TypeError(\"All elements in the list must be integers.\")\n            \n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a list to store the averages for each tuple in the input tuple\n    averages = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the sum of all the elements in the tuple\n        total = sum(tup)\n        # Divide the total by the number of elements in the tuple to get the average\n        average = total / len(tup)\n        # Add the average to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        temp_list = []\n        for j in range(len(nums[0])):\n            temp_list.append(nums[i][j])\n        avg_list.append(sum(temp_list)/len(temp_list))\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for i in nums:\n        # Calculate the average value for the current tuple and append it to the avg_list\n        avg_list.append(sum(i)/len(i))\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to hold the averages\n    averages = []\n    # Loop through each tuple in the input list\n    for tup in nums:\n        # Calculate the sum of the values in the tuple\n        total = sum(tup)\n        # Calculate the average by dividing the sum by the number of values\n        average = total / len(tup)\n        # Add the average to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for sublist in nums:\n        if len(sublist) > 0:\n            averages.append(sum(sublist) / len(sublist))\n        else:\n            averages.append(0)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Perform element-wise modulo\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(modulo_result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must be of the same length.\")\n        return\n    \n    # perform element wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    current_point = 0  # Current point (0, 0)\n    jumps = 0  # Number of jumps required\n    steps_taken = 0  # Steps taken\n    \n    # Loop until current point is (d, 0)\n    while current_point[1]!= d:\n        # Move one step in the current direction\n        if current_point[0] == 0:\n            current_point = (0, current_point[1] + 1)  # Move right\n        elif current_point[0] == 1:\n            current_point = (current_point[0], current_point[1] - 1)  # Move left\n        elif current_point[1] == 0:\n            current_point = (current_point[0] + 1, 0)  # Move down\n        else:\n            current_point = (current_point[0] - 1, current_point[1])  # Move up\n        \n        # Increment number of jumps and steps taken\n        jumps += 1\n        steps_taken += 1\n        \n        # Check if we've reached the end point\n        if steps_taken == steps:\n            return jumps\n    \n    # Return number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate the distance in each step\n    distance = 2 * d\n    # Initialize the number of jumps required\n    jumps = 0\n    # Initialize the step counter\n    step = 0\n    \n    while distance > 0 and step < steps:\n        # Calculate the distance left in the current step\n        left_distance = distance\n        # Check if the distance is greater than the distance in the next step\n        if left_distance > distance - 2 * d:\n            # If it is, increase the number of jumps\n            jumps += 1\n            # Reduce the distance in the current step by the distance in the next step\n            left_distance -= distance\n            # Check if there are any remaining steps\n            if step == steps - 1:\n                # If there are, set the distance to the remaining distance in the current step\n                distance = left_distance\n            else:\n                # If there aren't, set the distance to 0\n                distance = 0\n        else:\n            # If the distance is less than or equal to the distance in the next step, set the distance to 0\n            distance = 0\n        # Increment the step counter\n        step += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    min_jumps = 0\n    jumps = 1\n    curr_x = d\n    prev_x = curr_x - 1\n\n    # check if we can reach (d, 0) from origin\n    while curr_x > 0:\n        if curr_x < d:\n            jumps += 1\n            prev_x = curr_x\n            curr_x += steps\n        else:\n            curr_x = prev_x\n\n    # check if we can reach (d, 0) from origin without any jumps\n    if curr_x == 0:\n        return 1\n\n    # if we can't reach (d, 0) from origin, then check the number of jumps needed to reach (0, 0) from origin\n    while curr_x < 0:\n        min_jumps += 1\n        curr_x += steps\n        prev_x = curr_x - 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    def can_jump(start_index, end_index):\n        \"\"\"\n        Helper function to check if we can jump from start_index to end_index.\n        \"\"\"\n        if start_index == end_index:\n            return True\n        if start_index + 1 == end_index:\n            return abs(end_point[1]) <= d\n        return can_jump(start_index + 1, end_index) and can_jump(start_index + 2, end_index)\n\n    end_point = (steps, 0)\n    start_index = 0\n    end_index = 1\n\n    while end_point!= end_point:\n        if can_jump(start_index, end_index):\n            end_point = (end_point[0] - 1, end_point[1])\n            start_index += 1\n        else:\n            end_point = (end_point[0] - 2, end_point[1])\n            start_index += 2\n\n    return start_index // 2"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    if steps <= 0:\n        return -1\n    \n    dp = [0] * steps\n    dp[0] = 0\n    i = 1\n    while i < steps:\n        if dp[i] == 0:\n            dp[i] = steps - i\n            j = 1\n            while dp[i] == steps - i and j < i:\n                dp[i] += j\n                j += 1\n            if dp[i] == steps - i:\n                return i\n        i += 1\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function will return the minimum number of jumps required to reach (d, 0) from the origin in a 2D plane.\n    '''\n    # Initialize variables for the current position and remaining steps\n    curr_pos = (0, 0)\n    remaining_steps = steps\n    \n    # Initialize variables for the minimum jumps and the current jumps\n    min_jumps = remaining_steps\n    curr_jumps = 0\n    \n    # Iterate over each step and update the current position and remaining steps\n    while remaining_steps > 0:\n        # Update the current position based on the current jumps\n        if curr_jumps % 2 == 0:\n            curr_pos = (curr_pos[0], curr_pos[1] + 1)\n        else:\n            curr_pos = (curr_pos[0] + 1, curr_pos[1])\n            \n        # Decrement the remaining steps\n        remaining_steps -= 1\n        \n        # Update the minimum jumps if necessary\n        curr_jumps += 1\n        if curr_pos[1] == d:\n            min_jumps = min(min_jumps, curr_jumps)\n            \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # initialize variables\n    num_jumps = 0\n    curr_pos = [0, 0]\n    max_height = 0\n    visited = [[False for _ in range(steps)] for _ in range(steps)]\n    \n    # find maximum height\n    for i in range(steps):\n        for j in range(steps):\n            if curr_pos[0] == d and curr_pos[1] == 0:\n                max_height = max(max_height, i)\n            if not visited[i][j]:\n                visited[i][j] = True\n                new_pos = [curr_pos[0] + 1, curr_pos[1]]\n                if new_pos[0] < steps and not visited[i + 1][new_pos[1]]:\n                    visited[i + 1][new_pos[1]] = True\n                    curr_pos = new_pos\n                    num_jumps += 1\n                new_pos = [curr_pos[0], curr_pos[1] + 1]\n                if new_pos[1] < steps and not visited[i][new_pos[0]]:\n                    visited[i][new_pos[0]] = True\n                    curr_pos = new_pos\n                    num_jumps += 1\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables\n    n = len(steps)\n    count = 0\n    \n    # Iterate through the steps and check if the point of form (d, 0) is reached\n    for i in range(n):\n        if steps[i] == d and i > 0:\n            # Check if the point is reached by performing jumps\n            for j in range(i):\n                if j + 1 < i and steps[j] < steps[j + 1]:\n                    count += 1\n                    if count >= steps[i]:\n                        return steps[i]\n            # If the point is not reached by performing jumps, count it as a step\n            count += 1\n            \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # base case\n    if d == 0: \n        return 1\n    # recursive case\n    else: \n        return steps + min_Jumps(steps, d-1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0 or steps <= 0:\n        return 0\n\n    if d == 1 or steps == 1:\n        return 1\n\n    if d == 2 or steps == 2:\n        return 2\n\n    if d == 3 or steps == 3:\n        return 3\n\n    jumps = []\n    i = 1\n    while True:\n        next_d = i + d\n        if next_d <= 0:\n            i = max(0, i - 2)\n        elif next_d == 1:\n            i = 1\n        elif next_d == 2:\n            i = 2\n        elif next_d == 3:\n            i = 3\n        else:\n            i += 1\n        if i >= steps:\n            break\n        jumps.append(i)\n\n    return len(jumps)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each element in both lists\n    for i in range(len(nums1)):\n        # Perform element-wise division\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and divides the corresponding elements element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a list of their element-wise division.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        else:\n            if num_list:\n                for j in range(len(num_list)):\n                    test_str = test_str[:test_str.index(num_list[j])] + num_list[j] + test_str[test_str.index(num_list[j])+len(num_list[j]):]\n                num_list = []\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Initialize a variable to store the number of digits in the string\n    num_digits = 0\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Increment the number of digits\n            num_digits += 1\n        else:\n            break\n    # If there are no digits in the string, return the original string\n    if num_digits == 0:\n        return test_str\n    # Initialize a variable to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append the digit to the new string\n            new_str += char\n            # Move all the remaining digits to the end of the new string\n            for i in range(num_digits):\n                new_str += \"0\"\n        else:\n            # Append the character to the new string\n            new_str += char\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store the number and the string\n    num = ''\n    str_without_num = ''\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the num variable\n            num += char\n        else:\n            # add the character to the str_without_num variable\n            str_without_num += char\n    # concatenate the number and the string without the number\n    final_str = num + str_without_num\n    # return the final string with the numbers moved to the end\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a list to store the numbers\n    num_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # If the character is not a number, append it to the end of the string\n        else:\n            test_str = test_str + char\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    numbers = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the numbers list\n        if char.isdigit():\n            numbers.append(char)\n        # if the character is not a number, append it to the end of the string\n        else:\n            test_str = test_str + char\n    # join the numbers list into a string and return it\n    return ''.join(numbers) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    test_str = test_str.replace(num_str, '')\n    test_str += num_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    alpha_list = []\n\n    # Split the string into two lists of numbers and letters\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            alpha_list.append(char)\n\n    # Concatenate the two lists and return the result\n    return ''.join(alpha_list) + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            num_str += char\n    num_list.sort(reverse=True)\n    return ''.join(num_list) + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        test_str = ''.join(num_list) + test_str\n    else:\n        test_str = test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Find all the numbers in the string\n    num_list = [char for char in test_str if char.isdigit()]\n\n    # Sort the numbers in decreasing order\n    num_list.sort(reverse=True)\n\n    # Join the numbers back into the string\n    result_str = ''.join(num_list)\n\n    # Return the result string\n    return result_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the size of the largest subset for each element in the list\n    max_size = {x: 1 for x in a}\n    \n    # Find the maximum subset size for each element in the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Check if the current pair is divisible\n            if a[i] % a[j] == 0:\n                # If it is, update the maximum subset size\n                max_size[a[i]] = max(max_size[a[i]], max_size[a[j]] + 1)\n    \n    # Find the maximum subset size of the entire list\n    max_size = max(max_size.values())\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n\n    # Sort the input list in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables\n    max_subset_size = 1\n    current_subset_size = 1\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # If the next number is not divisible by the current number, add the current subset size to the max subset size\n        if a[i] % a[i+1]!= 0:\n            max_subset_size = max(max_subset_size, current_subset_size)\n            # Reset the current subset size\n            current_subset_size = 1\n        else:\n            # Increment the current subset size\n            current_subset_size += 1\n\n    # If there are any remaining numbers in the list, add the current subset size to the max subset size\n    if current_subset_size > 1:\n        max_subset_size = max(max_subset_size, current_subset_size)\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n    max_size = max(dp)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    \n    # Initialize the first element as 1\n    dp[0] = 1\n    \n    for i in range(1, n):\n        # Initialize the largest subset to be 1\n        largest = 1\n        \n        # Iterate through all the elements from i to n-1\n        for j in range(i):\n            # Calculate the current subset size\n            current = dp[j]\n            \n            # If the current element is not divisible by the jth element, update the current subset size to be 1\n            if a[i] % a[j]!= 0:\n                current = 1\n            \n            # Update the largest subset if the current subset is greater\n            if current > largest:\n                largest = current\n        \n        # Update the dp[i] with the largest subset size found so far\n        dp[i] = largest\n    \n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # sort the list in decreasing order\n    a.sort(reverse=True)\n    \n    # initialize variables\n    max_size = 0\n    current_size = 0\n    \n    # iterate over the sorted list\n    for num in a:\n        # if the current number is divisible by 2, we can add it to the current subset and increase the size\n        if num % 2 == 0:\n            current_size += 1\n            max_size = max(max_size, current_size)\n        # otherwise, we need to start a new subset\n        else:\n            current_size = 1\n    \n    # return the maximum size of any subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    This function takes a list of numbers as input and finds the size of the largest subset of numbers that are divisible by each other.\n    '''\n    # create a dictionary to store the count of every number in the input list\n    num_count = {}\n    for num in a:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # sort the numbers in the dictionary by their count in descending order\n    sorted_nums = sorted(num_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # initialize the maximum subset size to 1\n    max_size = 1\n    \n    # iterate through the sorted numbers and check if they are divisible by every other number in the list\n    for i in range(len(sorted_nums)):\n        for j in range(i+1, len(sorted_nums)):\n            if sorted_nums[i][0] % sorted_nums[j][0] == 0:\n                max_size = max(max_size, sorted_nums[i][1] + sorted_nums[j][1])\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a set of unique divisors for each number in the list\n    divisors = {}\n    for num in a:\n        divisors[num] = set(range(1, num+1))\n    \n    # Initialize variables for the largest subset size and current subset size\n    largest_size = 0\n    current_size = 0\n    \n    # Loop through each number in the list\n    for num in a:\n        # Get the divisors for this number\n        divs = divisors[num]\n        \n        # Check if every pair in the current subset has a divisor in common\n        for i in range(len(divs)):\n            for j in range(i+1, len(divs)):\n                # Check if the pair is divisible\n                if num % divs.intersection(divisors[divs.intersection(divs)[j]]):\n                    current_size += 1\n                else:\n                    current_size = 0\n                    \n        # Update the largest subset size if necessary\n        if current_size > largest_size:\n            largest_size = current_size\n    \n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables for the size and the maximum divisor\n    max_size = 0\n    max_divisor = 1\n\n    # iterate over all pairs of numbers and find the maximum subset size that satisfies every pair being divisible by the same divisor\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            divisor = gcd(a[i], a[j])\n            subset_size = (j - i + 1) // divisor\n            if subset_size > max_size:\n                max_size = subset_size\n                max_divisor = divisor\n\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Initialize variables\n    subset_size = 0\n    divisible_pairs = 0\n    \n    # Loop through the list of numbers\n    for i in range(len(a)):\n        # Loop through the remaining numbers in the list\n        for j in range(i+1, len(a)):\n            # Check if the pair is divisible\n            if a[i] % a[j] == 0:\n                divisible_pairs += 1\n                \n                # Update the subset size if necessary\n                if j - i + 1 > subset_size:\n                    subset_size = j - i + 1\n    \n    # Return the subset size and the number of divisible pairs\n    return subset_size, divisible_pairs"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Check if the lists have equal size\n    if n!= len(arr1) or n!= len(arr2):\n        print(\"Error: Lists must have equal size.\")\n        return None\n    \n    # Merge the two sorted lists into one sorted list\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged list\n    merged_arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = merged_arr[n//2 - 1]\n    else:\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three arguments: the first two sorted lists of same size,\n    and the size of each list. It returns the median of the two lists.\n    '''\n    \n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(arr1, arr2):\n    merged_arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n    merged_arr.extend(arr1[i:])\n    merged_arr.extend(arr2[j:])\n    return merged_arr\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef get_median(arr1, arr2, n):\n    merged_arr = merge_sort(arr1) + merge_sort(arr2)\n    mid = len(merged_arr) // 2\n    if n % 2 == 0:\n        return (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        return merged_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # calculate the indices of the middle elements\n    mid1 = n // 2\n    mid2 = mid1 + n % 2\n    \n    # calculate the median of both arrays\n    median1 = arr1[mid1] if n % 2 == 1 else (arr1[mid1-1] + arr1[mid1]) / 2\n    median2 = arr2[mid2] if n % 2 == 1 else (arr2[mid2-1] + arr2[mid2]) / 2\n    \n    # return the median\n    return median1, median2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median index\n    if n % 2 == 0:\n        median_index = n // 2\n    else:\n        median_index = (n + 1) // 2\n    \n    # Return the median value\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # check if both arrays have the same length\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays should have the same length.\")\n\n    # sort the arrays\n    arr1.sort()\n    arr2.sort()\n\n    # get the middle indices of the arrays\n    mid1 = n // 2\n    mid2 = (n - 1) // 2\n\n    # calculate the median\n    if n % 2 == 0:\n        # return the average of the middle elements\n        return (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # return the middle element\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    # Check if the array size is odd or even\n    if n % 2 == 1:\n        # Return the middle element\n        return sorted_arr[n // 2]\n    else:\n        # Return the average of the middle two elements\n        return (sorted_arr[n // 2] + sorted_arr[n // 2 - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists into a single list\n    combined_list = arr1 + arr2\n    \n    # sort the combined list\n    combined_list.sort()\n    \n    # find the middle index of the combined list\n    mid = n // 2\n    \n    # if the combined list has an odd number of elements,\n    # the median is the middle element\n    if n % 2 == 1:\n        return combined_list[mid]\n    \n    # if the combined list has an even number of elements,\n    # the median is the average of the two middle elements\n    else:\n        # calculate the first middle element\n        first_mid = mid - 1\n        \n        # calculate the second middle element\n        second_mid = mid\n        \n        # find the median of the first and second middle elements\n        median1 = combined_list[first_mid]\n        median2 = combined_list[second_mid]\n        \n        # calculate the median\n        median = (median1 + median2) / 2\n        \n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Create a copy of the first list\n    arr = arr1.copy()\n    # Concatenate the second list to the end of the first list\n    arr += arr2\n    # Sort the array in ascending order\n    arr.sort()\n    # Find the length of the array\n    length = len(arr)\n    # Calculate the median\n    if length % 2 == 0:\n        median = (arr[length//2-1] + arr[length//2]) / 2\n    else:\n        median = arr[length//2]\n    # Return the median\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as inputs and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Accessing the first and last element of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # Interchanging the elements\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    else:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list is empty\n    if length == 0:\n        return \"Error: List is empty\"\n    # Check if the list has only one element\n    elif length == 1:\n        return \"Error: List has only one element\"\n    # Check if the list has more than two elements\n    elif length > 2:\n        # Get the first element\n        firstElement = newList[0]\n        # Get the last element\n        lastElement = newList[length-1]\n        # Interchange the first and last elements\n        newList[0] = lastElement\n        newList[length-1] = firstElement\n        # Return the updated list\n        return newList\n    else:\n        return \"Error: Invalid input\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 2:\n        newList[0], newList[1] = newList[1], newList[0]\n        print(\"First and last element swapped\")\n    else:\n        print(\"List must have at least two elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and swaps the first and last element of the list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[-1]\n    \n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # initialize variables\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    # swap the first and last element\n    newList[0] = last\n    newList[length-1] = first\n    # print the new list\n    print(newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    a = 1  # semi-circle radius\n    b = r * math.sqrt(3)  # semi-circle height\n    c = r  # triangle base\n    \n    # Using Heron's formula to calculate the area of the triangle\n    s = (a**2 + b**2 - c**2) / (2 * b)  # semi-perimeter\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c)) / 2  # area of the largest triangle\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Convert radius to radians\n    radius = r * (2 * 3.14159265)\n    \n    # Calculate the semi-perimeter of the largest triangle inscribed in the semicircle\n    s = 0.5 * radius * (1 + 2 * 3.14159265 ** 2 / radius ** 2) ** 0.5\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * radius * radius * s\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # find the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n    \n    # find the area of the largest triangle inscribed in the semicircle\n    a = math.sqrt(s * (s - math.sqrt(s ** 2 - 4 * r ** 2))) / 2\n    \n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculating the area of a triangle using Heron's formula\n    s = (3 * math.sqrt(3) * r**2) / 4\n    area = math.sqrt(s * (s - r) * (s - 2*r) * (s - 3*r))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a triangle given its base and height\n    def area_triangle(base, height):\n        return 0.5 * base * height\n\n    # calculate the area of a semicircle given its radius\n    def area_semicircle(r):\n        return math.pi * r * r\n\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    def largest_triangle_area(r):\n        area = 0\n        sides = [0, r, r**2]\n        sides.sort(reverse=True)\n\n        for i in range(len(sides)-2):\n            area = max(area, area_triangle(sides[i], sides[i+1]))\n\n        return area\n\n    return largest_triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula for the area of a triangle with sides of length a, b, and c:\n    # area = 1/2 * base * height\n    # where base = sqrt(s(s-a)(s-b)(s-c))\n    # and height = (s-a)(s-b) / 2\n    # where s is the semicircle radius\n    s = 2 * r\n    base = 2 * r\n    height = (s - base) / 2\n    area = 0.5 * base * height\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of a circle with the given radius\n    perimeter = 2 * math.pi * r\n\n    # Calculate the area of a triangle with base r and height sqrt(3)/2\n    area_base_r = r * math.sqrt(3)/2\n\n    # Calculate the area of the largest triangle inscribed in a semicircle\n    area_largest_triangle = perimeter * area_base_r / 3\n\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    This function takes a radius r and calculates the area of the largest triangle that can be inscribed in a semicircle.\n    The triangle is defined as the triangle that can be formed by a point (0,0) and two sides of the semicircle: the length of the semicircle and the radius.\n    The formula to find the area of a triangle is given as:\n    A = (1/2) * base * height\n    where A is the area of the triangle, base is the length of one of the sides of the triangle, and height is the length of the other side.\n    \"\"\"\n    # Find the length of one of the sides of the triangle\n    base = 2 * r\n    \n    # Find the length of the other side of the triangle\n    height = 2 * r\n    \n    # Calculate the area of the triangle\n    area = (1/2) * base * height\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculating the area of a triangle using Heron's formula\n    def heron_formula(a, b, c):\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # Calculating the area of a triangle given its base and height\n    def triangle_area_from_base_height(a, b):\n        return 0.5 * a * b\n    \n    # Finding the semi-circle center given the radius and angle\n    def semi_circle_center(r, angle):\n        return (r * cos(angle), r * sin(angle))\n    \n    # Function to find the angle between two vectors\n    def angle_between_vectors(a, b):\n        return acos(dot(a, b) / (norm(a) * norm(b)))\n    \n    # Function to find the dot product of two vectors\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n    \n    # Function to find the magnitude of a vector\n    def norm(a):\n        return sqrt(a[0] ** 2 + a[1] ** 2)\n    \n    # Initializing the variables\n    x = 0\n    y = 1\n    angle = pi / 3\n    \n    # Finding the area of the largest triangle inscribed in the semicircle\n    while True:\n        # Finding the coordinates of the point on the semi-circle that is perpendicular to (x, y) and normal to (1, 0)\n        p = (r * x - y, r * y + x)\n        # Finding the coordinates of the point on the triangle that is perpendicular to p and normal to (0, -1)\n        q = (p[0] - x, p[1] + y)\n        # Finding the coordinates of the point on the triangle that is perpendicular to q and normal to (1, 0)\n        r = (q[0] - x, q[1] - y)\n        # Finding the area of the triangle\n        a = norm(cross(r, p))\n        b = norm(cross(r, q))\n        c = norm(cross(r, r))\n        area = heron_formula(a, b, c)\n        # Checking if the area is greater than the area of the largest triangle found so far\n        if area > max_area:\n            max_area = area\n            max_triangle = r\n        # Checking if the area is less than the area of the triangle inscribed in the semicircle\n        if area < r[0] * r[0] + r[1] * r[1]:\n            break\n        # Updating the variables for the next iteration\n        angle += pi / 6\n        x = cos(angle)\n        y = sin(angle)\n    \n    # Calculating the area of the maximum triangle\n    max_triangle_area = triangle_area_from_base_height(max_triangle[0], max_triangle[1])\n    \n    # Returning the maximum triangle area\n    return max_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    area = 0.5 * r**2 * pi**2\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i] == array[i+1]:\n            return i+1\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for num in range(start, end + 1):\n        if num!= array[num]:\n            return num\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not array:\n        return None\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    \n    while start <= end:\n        mid = (start+end)//2\n        \n        if array[mid] == mid:\n            start = mid+1\n        else:\n            end = mid-1\n            \n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for num in range(start, end + 1):\n        if array[num]!= num + 1:\n            return num + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    \"\"\"\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            continue\n        elif i < array[i]:\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Find the maximum value in the list\n    max_val = max(array)\n    # Check if the end value is specified\n    if end is None:\n        end = max_val\n    # Initialize the missing number to the minimum value\n    missing_num = start\n    # Loop through the list of numbers and find the missing number\n    while missing_num <= end:\n        if missing_num not in array:\n            break\n        missing_num += 1\n    # Return the missing number\n    return missing_num"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst): \n    '''\n    This function takes a list of numbers and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in lst: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the adjacent coordinates using the modulo operator\n    x, y = ele\n    dx, dy = (x+1, y), (x-1, y), (x, y+1), (x, y-1)\n    # Append the adjacent coordinates to the sublist\n    sub.extend(dx + dy)\n    # Return the sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    if len(ele) == 2:\n        for i in range(max(0, ele[0] - 1), min(ele[0] + 2, len(sub))):\n            for j in range(max(0, ele[1] - 1), min(ele[1] + 2, len(sub[0]))):\n                if (i, j) not in sub and (i, j)!= ele:\n                    adj.append((i, j))\n    elif len(ele) == 3:\n        for i in range(max(0, ele[0] - 1), min(ele[0] + 2, len(sub))):\n            for j in range(max(0, ele[1] - 1), min(ele[1] + 2, len(sub[0]))):\n                for k in range(max(0, ele[2] - 1), min(ele[2] + 2, len(sub[0][0]))):\n                    if (i, j, k) not in sub and (i, j, k)!= ele:\n                        adj.append((i, j, k))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0:\n        sub.append((x - 1, y))\n    if x < 999:\n        sub.append((x + 1, y))\n    if y > 0:\n        sub.append((x, y - 1))\n    if y < 999:\n        sub.append((x, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # If the sublist is not provided, initialize it\n    if sub is None:\n        sub = []\n\n    # Get the adjacent coordinates of the element and append them to the sublist\n    for neighbor in [(ele[0] - 1, ele[1]), (ele[0] + 1, ele[1]), (ele[0], ele[1] - 1), (ele[0], ele[1] + 1)]:\n        if 0 <= neighbor[0] < 10 and 0 <= neighbor[1] < 10:\n            sub.append(neighbor)\n\n    # Return the sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x+dx, y+dy) for dx,dy in sub]\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    sub.append(adj)\n    for i in adj:\n        if (i[0] >= 0 and i[0] < 100) and (i[1] >= 0 and i[1] < 100):\n            adjac(i, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj = []\n    x, y = ele\n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        x1, y1 = x + dx, y + dy\n        if 0 <= x1 < len(sub) and 0 <= y1 < len(sub[x1]):\n            adj.append((x1, y1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple and returns a list of all adjacent coordinates\n    by adding or subtracting the element tuple from itself and adding or subtracting (0,0) from it.\n\n    Example:\n    For the input coordinate (0,0), the output will be [(1,0), (-1,0), (0,1), (0,-1)]\n\n    Parameters:\n    ele: coordinate tuple\n    sub: list of tuples to be subtracted\n\n    Returns:\n    list of adjacent coordinate tuples\n    '''\n    x, y = ele\n    adj = []\n    adj.append((x+1, y))  # right\n    adj.append((x-1, y))  # left\n    adj.append((x, y+1))  # up\n    adj.append((x, y-1))  # down\n    adj = [tuple(map(lambda x: x-sub[i], y)) for i, y in enumerate(adj)]  # subtracting sub[i] from y\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if x > 0: \n        sub.append((x-1, y)) \n    if x < len(map)-1: \n        sub.append((x+1, y)) \n    if y > 0: \n        sub.append((x, y-1)) \n    if y < len(map[0])-1: \n        sub.append((x, y+1)) \n    return sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Function to replace spaces with underscores\n    def replace_spaces_underscore(text):\n        return text.replace(\" \", \"_\")\n\n    # Function to replace underscores with spaces\n    def replace_underscore_spaces(text):\n        return text.replace(\"_\", \" \")\n\n    # Call the appropriate function based on the input\n    if text.replace(\" \", \"\").replace(\"_\", \"\"):\n        return replace_spaces_underscore(text)\n    else:\n        return replace_underscore_spaces(text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(text)):\n        # check if the character is a whitespace\n        if text[i].isspace():\n            # if it is a whitespace, replace it with an underscore\n            text = text[:i] + \"_\" + text[i+1:]\n        # check if the character is an underscore\n        elif text[i] == \"_\":\n            # if it is an underscore, replace it with a whitespace\n            text = text[:i] + \" \" + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # split the string into words\n    words = text.split()\n    # loop through each word\n    for i in range(len(words)):\n        # check if the word contains whitespace\n        if'' in words[i]:\n            # replace the whitespace with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # check if the word contains an underscore\n        if '_' in words[i]:\n            # replace the underscore with a whitespace\n            words[i] = words[i].replace('_','')\n    # join the words with underscores and spaces\n    new_text =''.join(words)\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n\n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the word contains only whitespace characters\n        if words[i].isspace():\n            # Replace the whitespace with an underscore\n            words[i] = '_'\n        # Check if the word contains only non-whitespace characters\n        elif not words[i].isspace():\n            # Replace the non-whitespace character with a space\n            words[i] =''\n\n    # Join the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list[len(num_list)-1], num_list[zero_index] = num_list[zero_index], num_list[len(num_list)-1]\n        move_zero(num_list[1:])\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for the beginning of the list and one for the end of the list.\n    i = 0\n    j = len(num_list) - 1\n    \n    # While the pointers i and j are not equal, swap the elements at the pointers.\n    while i < j:\n        if num_list[i] == 0:\n            # Move the pointer i to the next element.\n            i += 1\n        elif num_list[j] == 0:\n            # Move the pointer j to the previous element.\n            j -= 1\n        else:\n            # If the elements are not equal, swap them.\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n    \n    # Return the modified list.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    n = len(num_list)\n    for i in range(n - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[n - 1] = num_list[n - 1], num_list[i]\n            n -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # Initialize two pointers i and j\n    i = 0\n    j = 0\n\n    # Traverse the list from left to right\n    while j < len(num_list):\n        # If the element at index j is not zero, increment j\n        if num_list[j]!= 0:\n            i += 1\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n        j += 1\n\n    # Traverse the list from right to left\n    while i < j:\n        # If the element at index i is zero, increment i\n        if num_list[i] == 0:\n            i += 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store the non-zero numbers\n    non_zero_list = []\n    \n    # loop through the given list\n    for num in num_list:\n        # if the number is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # add all zeroes to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(0)\n    \n    # replace the original list with the non_zero_list\n    num_list = non_zero_list\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Using two pointers, one for iterating through the list and another for iterating through the zeroes\n    zero_pointer = 0\n    non_zero_pointer = 0\n\n    while non_zero_pointer < len(num_list):\n        if num_list[non_zero_pointer]!= 0:\n            num_list[zero_pointer], num_list[non_zero_pointer] = num_list[non_zero_pointer], num_list[zero_pointer]\n            zero_pointer += 1\n        non_zero_pointer += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # Create a new list to store the non-zero numbers\n    new_list = []\n    # Loop through each number in the input list\n    for num in num_list:\n        # If the number is not zero, add it to the new list\n        if num!= 0:\n            new_list.append(num)\n    # Append all the zeroes to the end of the new list\n    for i in range(len(num_list) - len(new_list)):\n        new_list.append(0)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - i and j - to iterate through the list\n    i = 0\n    j = 0\n\n    # Iterate through the list\n    while j < len(num_list):\n        # Check if the element at j is non-zero\n        if num_list[j]!= 0:\n            # If the element is not zero, swap it with the element at i\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Increment i and j\n            i += 1\n            j += 1\n        else:\n            # If the element is zero, increment j\n            j += 1\n\n    # Return the updated list\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Finding xor of all pairs of elements in the list\n    xor_sum = sum(map(lambda x, y: x ^ y, arr, arr[1:]))\n\n    # Printing the result\n    print(\"Sum of XOR of all pairs of numbers:\", xor_sum)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # calculate xor of all pairs of elements in the array\n    xor_sum = sum([x^y for x in arr for y in arr])\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n\n    sum_xor = 0\n\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a heap\n    hq.heapify(iterable)\n    # Extract items from the heap until it is empty\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap using hq.heapify\n    hq.heapify(iterable)\n\n    # Sort the list using heapify and heapreplace\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable.pop())\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Convert list to heap\n    hq.heapify(iterable)\n    # Sort heap\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n    return list(iterable)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappop(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappush(iterable, hq.heappop(iterable))\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n    \n    # define a custom comparison function\n    def compare(x, y):\n        return x > y\n    \n    # create a max-heap from the list\n    hq.heapify(lst, compare)\n    \n    # sort the list using the heap sort algorithm\n    while len(lst) > 1:\n        # remove the maximum element from the heap\n        max_elem = hq.heappop(lst)\n        \n        # add the maximum element to the end of the list\n        lst.append(max_elem)\n    \n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    # convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, value in enumerate(iterable):\n        heap[i] = value\n        hq.heapify(heap)\n\n    # extract the sorted values from the heap\n    sorted_values = []\n    while len(heap) > 0:\n        sorted_values.append(heapq.heappop(heap))\n\n    return sorted_values"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list to a min heap\n    min_heap = hq.heapify(iterable)\n    # Create a new list to store the sorted elements\n    sorted_list = []\n    # Iterate until the heap is empty\n    while min_heap:\n        # Append the minimum element from the heap to the sorted list\n        sorted_list.append(hq.heappop(min_heap))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        print(\"Yes, the amount has no profit and no loss.\")\n    else: \n        print(\"No, the amount has a profit or a loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return noprofit_noloss(actual_cost, sale_amount-actual_cost)\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # calculate the profit and loss of the sale\n    profit = sale_amount - actual_cost\n    \n    # check if the sale has a profit of zero or a loss of zero\n    if profit == 0 or profit == sale_amount:\n        print(\"Sale has a no profit or no loss\")\n    else:\n        print(\"Sale has a profit of\", profit, \"and a loss of\", profit - sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    elif actual_cost - sale_amount >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check for no profit and no loss\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of \", profit, \" and a loss of \", loss)\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The sale amount\n    \n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the temperature in Kelvin\n    k = 273.15 + t\n\n    # Calculate the heat index\n    if v < 10:\n        hi = 0.01 * k * (v / 10)**1.5\n    elif v >= 10 and v < 15:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.09 * k\n    elif v >= 15 and v < 20:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.1 * k\n    elif v >= 20 and v < 25:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.11 * k\n    elif v >= 25 and v < 30:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.12 * k\n    elif v >= 30 and v < 35:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.13 * k\n    elif v >= 35 and v < 40:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.14 * k\n    elif v >= 40 and v < 45:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.15 * k\n    elif v >= 45 and v < 50:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.16 * k\n    elif v >= 50 and v < 55:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.17 * k\n    elif v >= 55 and v < 60:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.18 * k\n    elif v >= 60 and v < 65:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.19 * k\n    elif v >= 65 and v < 70:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.2 * k\n    elif v >= 70 and v < 75:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.21 * k\n    elif v >= 75 and v < 80:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.22 * k\n    elif v >= 80 and v < 85:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.23 * k\n    elif v >= 85 and v < 90:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.24 * k\n    elif v >= 90 and v < 95:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.25 * k\n    elif v >= 95 and v < 100:\n        hi = 0.01 * k * (v / 10)**1.5 + 0.26 * k\n    else:\n        hi = 100\n\n    # Calculate the wind chill index\n    wci = int((hi - 32) * 5 / 9)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    kelvin = t + 273.15\n    \n    # Calculate the wind speed in m/s\n    wind_speed_ms = v * 1000\n    \n    # Calculate the dew point temperature\n    dew_point_temp = 243.04 * math.exp((17.625 * (kelvin - 273.15)) / (kelvin - 29.65))\n    \n    # Calculate the heat index\n    heat_index = dew_point_temp - 0.0065 * wind_speed_ms + 10\n    heat_index_rounded = round(heat_index)\n    \n    return heat_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t > 0:\n        # Calculate the heat index\n        heat_index = 35.74 + 0.6215 * t - 35.757 * math.pow(t, 2) + 0.4275 * math.pow(t, 3)\n        # Calculate the wind chill index\n        wind_chill_index = round((heat_index - 32) * 5/9) + 32\n        # Return the wind chill index rounded to the nearest integer\n        return wind_chill_index\n    else:\n        # If the temperature is less than or equal to 0, return the original wind velocity\n        return v"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_celsius = v * 1.8 + 32\n    chill_index = 13.12 + 0.6215 * t - 11.37 * math.log(wind_speed_celsius) + 0.3965 * (t - 273.15)**2\n    \n    if chill_index < -16.0:\n        chill_index = -16.0\n    elif chill_index > 120.0:\n        chill_index = 120.0\n    \n    return round(chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # calculate the heat capacity at constant pressure and temperature\n    cp = 1005.0  # J/(kg K)\n    c_p = cp * (t_k/298.15)  # J/kg\n    \n    # calculate the heat capacity at constant volume and temperature\n    cv = 184.5  # J/(kg K)\n    c_v = cv * (t_k/273.15)  # J/kg\n    \n    # calculate the specific heat capacity of dry air\n    h_v = 1004.6  # J/(kg K)\n    h_s = 0.622  # J/(kg K)\n    \n    # calculate the wind speed\n    v_a = 16.67  # m/s\n    wind_speed = v_a * math.sqrt(t_k/298.15)  # m/s\n    \n    # calculate the air density\n    rho_air = 1.225  # kg/m^3\n    \n    # calculate the specific heat capacity of air\n    h_a = rho_air * h_v\n    \n    # calculate the heat transfer coefficient\n    k = 1.3  # W/(m K)\n    \n    # calculate the virtual temperature\n    T_v = c_p / c_v\n    \n    # calculate the latent heat of condensation\n    q_l = 22.4  # J/kg\n    \n    # calculate the sensible heat\n    q_s = k * (T_v - T_s)\n    \n    # calculate the specific humidity\n    q_s_v = q_s / (1 - math.exp(-q_l/(cp*T_v)))\n    \n    # calculate the heat index\n    T_hi = T_v - (0.0065 * q_s_v) + (0.0001 * T_v**2)\n    \n    # calculate the wind chill index\n    w_chill = round((T_hi - 32) / 1.8)\n    \n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # calculate the wind chill formula\n    wc = 35.74 + (0.6215 * v) - (35.75 * math.exp((-t + 237.3)/10.34))\n    \n    # round the wind chill to the nearest integer\n    wc = int(math.ceil(wc))\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_k = t + 273.15 # Convert temperature from Celsius to Kelvin\n    rh = 100 # Relative humidity\n    # Calculating the temperature and relative humidity correction factors\n    a = 17.269 - (0.0065 * t_k) + (t_k ** 2) / 1.3332\n    b = -237.3 + (1.0033 * t_k) - (0.0068 * t_k ** 2)\n    c = 8.11 * math.log10(rh) + 11.33\n    # Calculating the wind chill index\n    wc = a + b * v + c\n    # Rounding the wind chill index to the next integer\n    wc_rounded = round(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # calculate the wind chill index using the formula:\n    # wc = 13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v) - 0.114*t**2 + 0.00033*t**3\n    \n    wc = 13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*t*math.log(v) - 0.114*t**2 + 0.00033*t**3\n    \n    # round the wind chill index to the nearest integer\n    wc_rounded = round(wc)\n    \n    # return the rounded wind chill index\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Formula for wind chill index: \n    # wind chill = 35.74 + 0.6215 * temperature - 35.757 * math.pow(wind speed, 0.16) + 0.4275 * temperature * math.pow(wind speed, 0.16)\n    \n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate wind speed in m/s\n    v_m_s = v * 1000\n    \n    # Calculate wind chill index\n    w_c = 35.74 + 0.6215 * t - 35.757 * math.pow(v_m_s, 0.16) + 0.4275 * t_f * math.pow(v_m_s, 0.16)\n    \n    # Round to the nearest integer\n    w_c_int = round(w_c)\n    \n    return w_c_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert celsius to fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    w = (v * 1.60934) / (t + 273.15)\n\n    # Round the result to the nearest integer\n    w = round(w)\n\n    return w"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Define an empty list to store the names that start with uppercase letters\n    uppercase_names = []\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # If the name starts with uppercase letter, append it to the list\n        if name[0].isupper():\n            uppercase_names.append(name)\n\n    # Sum the lengths of the names in the list excluding the uppercase names\n    sum_length = sum([len(name) for name in sample_names if name not in uppercase_names])\n\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of names' length\n    name_sum = 0\n\n    # loop through each name in the list\n    for name in sample_names:\n        # if the first character of the name is not lowercase\n        if name[0].isupper():\n            # skip the name\n            continue\n        # add the length of the name to the sum\n        name_sum += len(name)\n\n    # return the sum of names' length\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names without lowercase letters\n    names_without_lowercase = []\n\n    # Loop through each name in the sample names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, append it to the names_without_lowercase list\n            names_without_lowercase.append(name)\n        # If the name does not start with a lowercase letter, continue looping\n        else:\n            continue\n\n    # Define a variable to store the sum of the lengths of the names without lowercase letters\n    total_length = 0\n\n    # Loop through each name in the names_without_lowercase list\n    for name in names_without_lowercase:\n        # Add the length of the name to the total_length variable\n        total_length += len(name)\n\n    # Return the total_length variable\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    total_length = sum([len(name) for name in filtered_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of the names that meet the criteria\n    total_length = 0\n    \n    # Iterate through each name in the list\n    for name in sample_names:\n        # Remove the lowercase letter at the beginning of the name\n        name = name[1:]\n        \n        # If the name does not start with a lowercase letter, add its length to the total\n        if not name[0].islower():\n            total_length += len(name)\n    \n    # Return the total sum of the names that meet the criteria\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    return sum([len(name) for name in names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    new_items = re.sub(pattern, '', items)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # remove parenthesis and what is inbetween them\n    result = re.sub('\\([^)]*\\)', '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, r'\\1', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*)\\)')\n    return pattern.sub(r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    def nonagonal_helper(n, m):\n        \"\"\"\n        Helper function for is_nonagonal.\n        \"\"\"\n        if n == 1:\n            return m\n        else:\n            return nonagonal_helper(n - 1, m + 2 * m - 1)\n\n    return nonagonal_helper(n, 1)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the value of the first nonagonal number\n    a = n * (n+1) // 2\n    \n    # Calculate the value of the nth nonagonal number\n    b = n * (n+1) * (2*n+1) // 6\n    \n    # Compare the two values and return True if they are equal\n    if a == b:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        j = 1\n        while (j**2 <= i):\n            j += 1\n        if (j**2 == i):\n            return i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize a counter variable to keep track of the number of squares\n    counter = 0\n    # Initialize a variable to hold the sum of squares\n    sum_squares = 0\n    # Loop until the counter reaches n\n    while counter < n:\n        # Calculate the sum of squares for each iteration\n        square = counter * counter\n        # Add the sum of squares to the running sum\n        sum_squares += square\n        # Increment the counter\n        counter += 1\n    # Return the nonagonal number\n    return sum_squares - (n * (n + 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    for i in range(2, n+1):\n        if i**2!= 4*(i**2-1):\n            return False\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Calculate the number of nonagonal numbers\n    num_nonag = (n * (n + 1)) // 2\n\n    # Return the number of nonagonal numbers\n    return num_nonag"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = [1, 4, 25, 125, 625, 3125, 15625]\n    return nonagonal_numbers[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n**2 + n) * (n**2 + 1) // 2\n\nn = int(input(\"Enter a number: \"))\nprint(is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 1\n        b = 2\n        c = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return (2 * n * (n - 1)) + (n - 1)\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function takes a string as input and returns True if 'z' is present in the string,\n    except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate over the words and check if there is a 'z' at the start and end of each word\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(\\b|^)z(\\b|$)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Removing all non-alphanumeric characters from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Splitting the text into words\n    words = text.split()\n\n    # Looping through each word\n    for i in range(len(words)):\n        # Checking if the word starts with 'z' and if it ends with 'z'\n        if words[i][0].lower() == 'z' and words[i][-1].lower() == 'z':\n            # Removing the 'z' from the start and end of the word\n            words[i] = words[i][1:-1]\n            # Checking if the word has a single 'z' in the middle\n            if len(words[i]) == 1:\n                return True\n\n    # If no 'z' is found in the middle of the word, the function returns False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?:z|Z)\\w*\\b')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the word starts or ends with 'z'\n        if word[0] == 'z' or word[-1] == 'z':\n            # if the word contains 'z', return True\n            return True\n\n    # if no word contains 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match the 'z' character in the middle of a word\n    pattern = r'\\b[zZ]\\w+'\n    # Use the re.search() function to find all non-overlapping occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if the pattern matches any words in the text\n    return bool(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\w*[zZ]\\w*[a-zA-Z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the array from the first element to k-1 position\n    for i in range(k-1, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the array from k position to n-1 position\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    n = len(input)\n    reverse_array = []\n\n    for i in range(k-1, n-1):\n        reverse_array.append(input[i])\n\n    reverse_array.append(input[k-1])\n\n    for i in range(k-1, n-1):\n        input[i] = input[n-1-i]\n\n    return reverse_array\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[k-1-i] = input[k-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function reverses an array upto a given position k.\n    '''\n    reversed_array = []\n    start = 0\n    end = len(input)-1\n    \n    # If k is greater than or equal to the length of the array, reverse the entire array\n    if k >= len(input):\n        reversed_array = input\n        return reversed_array\n    \n    # Reverse the array from start to k-1\n    while start < k:\n        reversed_array.append(input[start])\n        start += 1\n    \n    # Reverse the array from k to end\n    while start <= end:\n        reversed_array.append(input[start])\n        start += 1\n    \n    # Reverse the array from start to end\n    while start <= end:\n        reversed_array.append(input[end])\n        end -= 1\n    \n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    count = 0\n    for i in range(len(input)):\n        if count < k:\n            reverse_array.append(input[i])\n            count += 1\n        else:\n            input[i], input[len(input)-1-count] = input[len(input)-1-count], input[i]\n            reverse_array.append(input[i])\n            count -= 1\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_array = []\n    count = 0\n    for i in range(len(input)-1, -1, -1):\n        if count >= k:\n            reverse_array.append(input[i])\n            count = 0\n        else:\n            count += 1\n    return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if n < k:\n        return None\n    \n    input_copy = input.copy()\n    input_copy.reverse()\n    return input_copy[:k] + input[k:n] + input_copy[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input) \n    start = 0 \n    end = n - 1 \n    temp = [] \n\n    while start < k: \n        temp.append(input[start]) \n        start += 1 \n    while start <= end and end < k: \n        temp.append(input[end]) \n        end -= 1 \n    while start <= end: \n        input[start] = input[end] \n        start += 1 \n        end -= 1 \n\n    while len(temp) > 0: \n        input.append(temp.pop()) "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Get the length of the input array\n    n = len(input)\n\n    # Check if k is valid\n    if k < 1 or k > n:\n        return \"Invalid k value. Please enter a positive integer less than or equal to the length of the array.\"\n\n    # Reverse the first k elements\n    for i in range(k - 1, -1, -1):\n        input[i], input[n - i - 1] = input[n - i - 1], input[i]\n\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the array upto the given position\n    reversed_array = input[:k][::-1] + input[k:]\n    # Print the reversed array\n    print(reversed_array)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    dict_tuple = tuple(test_dict.items())\n    # Add the dictionary tuple to the tuple\n    new_tuple = tuple(test_tup + dict_tuple)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict[\"name\"] = \"John\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # unpack the tuple into separate variables\n    a, b, c = test_tup\n    \n    # unpack the dictionary into separate variables\n    d = test_dict\n    \n    # add the dictionary to the tuple using the unpacking\n    new_tup = (a, b, c, **d)\n    \n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += tuple(test_dict.items())\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict['name'] = 'John'\n    test_dict['age'] = 30\n    return tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # Initialize first row and column\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, N):\n        for j in range(N-1, -1, -1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j+1]) + cost[i][j]\n    \n    # Compute maximum average of all paths\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg / (N**2 - 1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            visited = [(i, j)]\n            curr_cost = cost[i][j]\n\n            while True:\n                if i == N-1 and j == N-1:\n                    curr_avg = curr_cost\n                    break\n                elif i == N-1:\n                    curr_avg = curr_cost + cost[i][j+1]\n                    j += 1\n                elif j == N-1:\n                    curr_avg = curr_cost + cost[i+1][j]\n                    i += 1\n                else:\n                    curr_avg = curr_cost + cost[i+1][j+1]\n                    i += 1\n                    j += 1\n\n                visited.append((i, j))\n\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                    max_path = visited\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    visited = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = 0\n    \n    # Define recursive function to find maximum average path\n    def find_max_avg_path(i, j, curr_avg, curr_sum):\n        if i == N-1 and j == N-1:\n            if curr_avg > max_avg:\n                max_avg = curr_avg\n            return 0\n        \n        # Check if the current cell is already visited\n        if visited[i][j] == 1:\n            return curr_sum\n        \n        # Mark the current cell as visited\n        visited[i][j] = 1\n        \n        # Compute the cost of moving from current cell to next cell\n        next_cost = cost[i][j]\n        \n        # Compute the maximum average path from the current cell to the next cell\n        left_avg, right_avg, up_avg, down_avg = find_max_avg_path(i, j+1, curr_avg, curr_sum+next_cost)\n        left_avg, right_avg, up_avg, down_avg = max(left_avg, curr_avg), max(right_avg, curr_avg), max(up_avg, curr_avg), max(down_avg, curr_avg)\n        max_avg = max(max_avg, left_avg+right_avg+up_avg+down_avg, curr_avg+next_cost)\n        \n        # Mark the current cell as unvisited\n        visited[i][j] = 0\n        \n        return max(left_avg, curr_avg), max(right_avg, curr_avg), max(up_avg, curr_avg), max(down_avg, curr_avg)\n    \n    # Find the maximum average path\n    _, _, _, max_avg = find_max_avg_path(0, 0, 0, 0)\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    # Initializing base case\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # Dynamic Programming\n    for i in range(N):\n        for j in range(i+1, N):\n            if j == N-1:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j+1]) + cost[i][j]\n\n    # Finding the maximum average path\n    max_avg = 0\n    for i in range(N-1):\n        max_avg = max(max_avg, dp[i][i+1]/(i+2))\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables to keep track of the best path and the maximum average\n    best_path = None\n    max_avg = float('-inf')\n\n    # Create a 2D array to store the cost of each cell\n    cost_matrix = [[0] * len(cost[0]) for i in range(len(cost))]\n\n    # Calculate the cost of each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 or j == 0:\n                cost_matrix[i][j] = cost[i][j]\n            else:\n                cost_matrix[i][j] = cost[i][j] + min(cost_matrix[i-1][j], cost_matrix[i][j-1])\n\n    # Find the maximum average of all paths\n    for i in range(len(cost_matrix)):\n        for j in range(len(cost_matrix[0])):\n            if cost_matrix[i][j] > max_avg and (i,j)!= (len(cost)-1,len(cost[0])-1):\n                max_avg = cost_matrix[i][j]\n                best_path = [(i,j)]\n                helper_function(cost_matrix, i, j, 0)\n\n    # Helper function to find the best path\n    def helper_function(cost_matrix, i, j, path_len):\n        if i == 0 or j == 0:\n            return\n        if (i,j) == (len(cost)-1,len(cost[0])-1):\n            global max_avg\n            if cost_matrix[i][j] > max_avg:\n                max_avg = cost_matrix[i][j]\n                best_path = path_len + [(i,j)]\n            return\n        helper_function(cost_matrix, i-1, j, path_len + [(i,j)])\n        helper_function(cost_matrix, i, j-1, path_len + [(i,j)])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Finding the number of rows and columns in the matrix\n    N = len(cost)\n    \n    # Creating a list to store the maximum path average\n    max_average = []\n    \n    # Traversing all paths from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is not visited yet\n            if cost[i][j] == 0:\n                # Creating a list to store the current path\n                path = [i, j]\n                # Initializing the visited cells\n                visited = [[False for _ in range(N)] for _ in range(N)]\n                # Adding the current cell to the path\n                visited[i][j] = True\n                \n                # Traversing all possible directions to find the maximum average\n                while True:\n                    # Finding the current cell's adjacent cells\n                    if j < N-1:\n                        if not visited[i][j+1] and cost[i][j+1] == 0:\n                            path.append(j+1)\n                            visited[i][j+1] = True\n                            if j == N-2:\n                                break\n                    if i > 0:\n                        if not visited[i-1][j] and cost[i-1][j] == 0:\n                            path.append(i-1)\n                            visited[i-1][j] = True\n                            if i == 1:\n                                break\n                    # Finding the maximum average\n                    total_cost = sum(cost[i][j+1] for j+1 in path) if j < N-1 else 0\n                    total_cost += sum(cost[i-1][j] for i-1 in path) if i > 0 else 0\n                    total_cells = len(path)\n                    max_average.append(total_cost/total_cells)\n                    # If there are no more adjacent cells, break out of the loop\n                    if j == N-1 and i == N-1:\n                        break\n                    if j == N-1:\n                        j += 1\n                    else:\n                        j += 1\n                        i -= 1\n                    if i == 0:\n                        i += 1\n                    else:\n                        i -= 1\n                        j -= 1\n                    \n    # Finding the maximum average in the final path\n    max_average = max(max_average)\n    \n    # Returning the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(i, j, path, path_cost, visited):\n        if i == n-1 and j == n-1:\n            max_avg = max(max_avg, path_cost / visited)\n            return\n        visited.add((i, j))\n        dfs(i+1, j, path + [1], path_cost + cost[i][j], visited)\n        dfs(i, j+1, path + [2], path_cost + cost[i][j], visited)\n        visited.remove((i, j))\n\n    n = len(cost)\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            visited = {(0, 0)}\n            dfs(i, j, [0], cost[i][j], visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    def dfs(i, j, path_cost, total_cost):\n        if i == N-1 and j == N-1:\n            return max(total_cost / (N * N), path_cost)\n        total_cost += cost[i][j]\n        if i < N-1:\n            path_cost += cost[i+1][j]\n        if j < N-1:\n            path_cost += cost[i][j+1]\n        path_cost = max(path_cost, dfs(i+1, j, path_cost, total_cost))\n        path_cost = max(path_cost, dfs(i, j+1, path_cost, total_cost))\n        return path_cost\n\n    return dfs(0, 0, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    \n    # Get dimensions of the matrix\n    n = len(cost)\n    \n    # Initialize variables\n    max_avg = 0\n    max_path = []\n    \n    # Iterate over all possible paths\n    for i in range(n):\n        for j in range(n):\n            \n            # If current cell is not part of the path, skip to the next cell\n            if i == 0 and j == 0:\n                continue\n            \n            # Create a path for the current cell\n            path = []\n            \n            # Add starting cell to the path\n            path.append((i,j))\n            \n            # Add adjacent cells to the path\n            while True:\n                # Check if current cell is out of bounds\n                if i == n-1 and j == n-1:\n                    break\n                # If current cell is not adjacent to the starting cell, move to the next cell\n                elif i+1 == n or i == 0 or j+1 == n or j == 0:\n                    break\n                # If current cell is adjacent to the starting cell, add it to the path\n                else:\n                    i += 1\n                    j += 1\n                    path.append((i,j))\n            \n            # Calculate the average cost of the path\n            path_cost = sum([cost[i][j] for i,j in path])\n            path_size = len(path)\n            avg_cost = path_cost / path_size\n            \n            # Update the max average and the corresponding path if necessary\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n    \n    # Return the max average and the corresponding path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # initialize the first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # compute the maximum average over all paths\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j] / (i + j + 1))\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], x) for x in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    This function takes two lists of the same length as input and returns the count of indices where the lists have the same values.\n\n    Args:\n    nums1: list\n    nums2: list\n\n    Returns:\n    count: int\n        The count of indices where the lists have the same values.\n\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize sum to 0\n    sum_digits = 0\n\n    # Iterate through each digit of the base string and add the digit raised to the power to the sum\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        power //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(digit) for digit in str(base)]\n    result = 0\n    \n    for digit in digits:\n        result += digit ** power\n    \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += int(str(base)[i])\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    for i in range(power):\n        sum_of_digits += int(base) % 10\n        base //= 10\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string\n    base_str = str(base)\n    # calculate sum of digits of base raised to the power\n    sum_digits = sum(int(digit) ** power for digit in base_str)\n    # return the result\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    \n    # loop through each digit in the base\n    for digit in str(base):\n        # convert the digit to an integer\n        digit_int = int(digit)\n        \n        # calculate the sum of digits raised to the power\n        sum_of_digits = sum([digit_int**i for i in range(power)])\n        \n        # add the sum to the result variable\n        result += sum_of_digits\n    \n    # return the final result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = []\n    while base > 0:\n        digits.append(base % 10)\n        base //= 10\n    return sum([digit ** power for digit in digits])"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    result = []\n    for match in matches:\n        result.append(match.strip('\"'))\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"(?P<value>.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define regular expression pattern to match quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    # Use re.findall() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # Return a list of all the matched quotations\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\\s)\"([^\"]+)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to match the quotation marks and the values between them\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    # return the values between the quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # regular expression to match quotation marks with text inside\n    matches = re.findall(pattern, text)  # find all occurrences of the pattern in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([t1 * t2 for t1, t2 in zip(test_tup, test_tup[1:])])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the tuple\n    N = len(test_tup)\n    # Initialize an empty tuple\n    result_tup = ()\n    # Loop through the tuple and append the product of each adjacent elements to the result tuple\n    for i in range(N-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1] * test_tup[0])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(N-1))\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup)\n    # Define the result tuple with all elements set to 0\n    result_tup = [0] * N\n    # Loop through the input tuple and multiply the current element by the next element in the tuple\n    for i in range(N):\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = (test_tup[i] * test_tup[i+1] for i in range(N-1))\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize an empty list to store the sum\n    total = []\n    # Loop through each element of lst1 and lst2\n    for i in range(len(lst1)):\n        # Append the sum of the current elements to the total list\n        total.append(lst1[i] + lst2[i])\n    # Return the total list\n    return total"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group[0]) for key, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(sorted(nums))))\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the same element and count the number of times it appears\n    grouped_nums = groupby(sorted(nums))\n    consecutive_nums = []\n    for num, group in grouped_nums:\n        if len(list(group)) > 1:\n            consecutive_nums.extend(group)\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for num in nums:\n        group = next(groupby([num]))\n        if group and len(list(group)) > 1:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[0] - x[1]))[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive numbers and return the first element of each group\n    return list(map(list, groupby(map(str, sorted(nums)))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the numbers by their consecutive duplicates\n    consecutive_group = groupby(enumerate(nums), lambda x: x[1] == x[0] + 1)\n    \n    # Extract the consecutive duplicates\n    consecutive_nums = [num for num, group in consecutive_group if group]\n    \n    # Remove consecutive duplicates from the list\n    return [num for num in nums if num not in consecutive_nums]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums, lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    return [list(group) for _, group in groupby(sorted(nums))]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone and returns the lateral surface area.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Use the Pythagorean theorem to calculate the height of the cone surface\n    cone_surface_area = (math.pi * r**2) + (math.pi * r * h) + (math.pi * r * r * h / 3)\n\n    # Calculate the lateral surface area using the formula for a triangle\n    lateral_surface_area = (math.sqrt(3) * r**2 * h) / 4\n\n    return lateral_surface_area, cone_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * r * math.tan(math.pi / 6) + 2 * r * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # calculate the lateral surface area of the cone\n    lateral_area = 2 * r * h\n\n    # round to two decimal places\n    lateral_area = round(lateral_area, 2)\n\n    # return the lateral surface area\n    return lateral_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cone(r, h):\n    # formula for lateral surface area of a cone\n    return 2 * r * math.tan(math.pi / 6) * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r**2 * h\n\nprint(lateralsurface_cone(5,10))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * r * h + 2 * math.pi * r * r\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes a string as input and replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match any character that is a space, comma, or dot\n    pattern = r'\\s|^|,|\\.|\\s'\n\n    # Use the re.sub() method to replace all matches with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    specialchars = '., '\n    pattern = re.compile(r'\\b({})\\b'.format(re.escape(specialchars)))\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,\\.]')\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match the characters to be replaced\n    pattern = r'\\s+|,\\s|,|\\.|\\.'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regex pattern to match any special character\n    pattern = re.compile(r'\\s|\\.|,')\n    # use pattern.sub() method to replace all special characters with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', text).replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|,+|\\.*', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the pattern for replacing special characters\n    pattern = re.compile(r'[\\s,\\.]+')\n    # replace all occurrences of pattern with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match any of the special characters\n    pattern = r'[\\s,\\.]'\n    # use re.sub() function to replace all occurrences of special characters with a colon\n    text = re.sub(pattern, ':', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the target number in the sorted array\n    index = bisect.bisect_left(A, x)\n    \n    # If the target number is not in the array, return -1\n    if index == len(A) or A[index]!= x:\n        return -1\n    \n    # If the target number is the first occurrence in the array, return the index\n    if index == 0 or A[index-1]!= x:\n        return index\n    \n    # Otherwise, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element in the array greater than or equal to x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # Found a match, now check if it's the first occurrence\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                # Not the first occurrence, so move to the right\n                right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted array of integers.\n    x (int): A number to search for in the sorted array.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    # Initialize variables\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    # Find the first occurrence of x using binary search\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            result = mid\n            high = mid - 1  # Search for the first occurrence of x\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input, and returns the index of the first occurrence of x in A.\n    If x is not found in A, the function returns -1.\n    \"\"\"\n    # binary search to find the index of the first occurrence of x\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the index of the first occurrence of x in A\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n\n    # Calculate cumulative sum of products for each prefix\n    cum_prod = [1] * n\n    for i in range(n-1, 0, -1):\n        cum_prod[i] = cum_prod[i+1] * prefix_sum[i]\n\n    # Calculate sum of products of subarrays\n    subarray_prod = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            subarray_prod[i] += cum_prod[j] * (prefix_sum[j] - prefix_sum[i])\n\n    # Calculate sum of products of all subarrays\n    subarray_sum = sum(subarray_prod)\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            temp = 1\n            for k in range(i, j):\n                temp *= arr[k]\n            res += temp\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 1000000007 #constant for modular arithmetic\n    dp = [[0] * (n + 1) for _ in range(2)] #creating a 2D array to store the results of subarray products\n    dp[0][0] = 1 #initially dp[0][0] = 1\n    \n    #calculating the dp values for all sublists\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] > arr[i - 1]:\n                #calculating the sum of products of all sublists\n                dp[j % 2][i] = (dp[(j + 1) % 2][i] + dp[(j % 2) + 1][i - 1]) % MOD\n    \n    #finding the sum of products of all possible sublists\n    res = 0\n    for i in range(n + 1):\n        res += dp[i % 2][n]\n    \n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Find the length of the given list\n    n = len(arr)\n    \n    # Initialize the sum of products and a list to store the products\n    sum_of_products = 0\n    products = []\n    \n    # Iterate through all possible sublists of the given list\n    for i in range(1, n+1):\n        \n        # Find the product of the first i elements\n        product = 1\n        for j in range(i):\n            product *= arr[j]\n        \n        # Add the product to the sum of products\n        sum_of_products += product\n        \n        # Append the product to the list of products\n        products.append(product)\n    \n    # Return the sum of products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Create a dictionary to store the products of all sublists\n    sublist_products = {0: 1}\n    # Initialize the sum variable\n    sum_prod = 0\n    # Loop through all sublists of length 1 to n\n    for i in range(1, n+1):\n        # Check if the sublist is in the dictionary\n        if i in sublist_products:\n            # If it is, add the product to the sum variable\n            sum_prod += sublist_products[i]\n        # Calculate the product of the current sublist\n        prod = 1\n        for j in range(i):\n            prod *= arr[j]\n        # Add the product to the dictionary\n        sublist_products[i] = prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize dp array to store products of sublists\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # initialize the first row and column of dp array\n    for i in range(1, n + 1):\n        dp[i][1] = arr[i - 1]\n        dp[1][i] = arr[i - 1]\n\n    # fill the rest of dp array using matrix multiplication\n    for i in range(2, n + 1):\n        for j in range(2, i + 1):\n            dp[i][j] = dp[i - 1][j - 1] * arr[i - 1] + dp[i - 1][j]\n\n    # find the sum of products of all sublists\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            result += dp[i][j]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    prod = 1\n    for i in range(n):\n        dp[0][i+1] = arr[i]\n        dp[i+1][0] = 0\n        for j in range(i+1):\n            dp[j+1][i+1] = dp[j][i] * arr[i+1] + dp[j+1][i]\n    for i in range(n):\n        for j in range(n-i-1):\n            dp[j][n-i-1] += prod\n            prod *= arr[j+i]\n    return dp[0][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_product = [0] * (n+1)\n    subarray_product[0] = 1\n    \n    for i in range(1, n+1):\n        for j in range(i):\n            subarray_product[i] += arr[j] * subarray_product[j] * subarray_product[i-j-1]\n    \n    return sum(subarray_product[1:])"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    for i in range(n):\n        prod *= arr[i]\n        sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n    '''\n    n = len(arr)\n    prefix_sum = [0] * n\n    \n    # Calculate prefix sum of the array\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n    \n    # Calculate sum of products of all possible sublists\n    subarray_prod = 1\n    sum_subarray_prod = 0\n    \n    for i in range(n):\n        # Calculate the length of the subarray to be considered\n        length = prefix_sum[n-1] - prefix_sum[i]\n        \n        # If the length of the subarray is zero, ignore it\n        if length == 0:\n            continue\n        \n        # Calculate the product of the subarray\n        subarray_prod *= arr[i]\n        subarray_prod %= (10**9 + 7)\n        \n        # Update the sum of products of all subarrays\n        sum_subarray_prod += subarray_prod * length\n        \n        # Reset the product of the subarray to 1\n        subarray_prod = 1\n    \n    # Return the sum of products of all subarrays\n    return sum_subarray_prod"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]\n    n = n[:1] + n[2:-1] + n[-1:]\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = ~(1 << 2)  # Toggle the middle bit\n    \n    # Clear the middle bit\n    n &= mask\n    \n    # Toggle the middle bit\n    n ^= mask\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # check if the number is 0\n    if n == 0:\n        return 0\n    \n    # calculate the number of bits in the number\n    num_bits = 0\n    while n:\n        n &= (n - 1)\n        num_bits += 1\n    \n    # calculate the middle bit index\n    middle_bit_index = num_bits // 2\n    \n    # toggle middle bit\n    if n & (1 << middle_bit_index):\n        n &= ~(1 << middle_bit_index)\n    else:\n        n |= (1 << middle_bit_index)\n    \n    # toggle other bits\n    for i in range(middle_bit_index + 1, num_bits):\n        if n & (1 << i):\n            n &= ~(1 << i)\n        else:\n            n |= (1 << i)\n    \n    # return modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the given integer to binary format\n    binary = bin(n)[2:]\n    # Check if the first bit is 1\n    if int(binary[0]):\n        # Set the first bit to 0\n        binary = '0' + binary\n    else:\n        # Set the first bit to 1\n        binary = '1' + binary\n    # Check if the last bit is 1\n    if int(binary[-1]):\n        # Set the last bit to 0\n        binary = binary[:-1] + '0'\n    else:\n        # Set the last bit to 1\n        binary = binary[:-1] + '1'\n    # Convert the binary format back to integer\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # XORing the number with -1 will toggle all the bits except the first and last\n    return n ^ -1"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize variables\n    first_bit = 1 << 31\n    last_bit = 1 << 0\n    mask = 0\n    \n    # Set first and last bits of the mask\n    mask |= first_bit | last_bit\n    \n    # Toggle middle bits of the number\n    for i in range(1, 32):\n        if i == 31 or i == 0:\n            continue\n        mask ^= 1 << i\n        \n    # Apply mask to the number\n    n = n & mask\n    \n    # Set first and last bits of the number\n    n |= first_bit | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the middle two bits of a given number.\n    \"\"\"\n    middle_bits = n & 3  # Bitmask to get the middle two bits\n    middle_bits = middle_bits ^ 3  # Toggle middle two bits\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    mask = 1 << 6\n    result = 0\n    \n    # Get the first bit (the rightmost bit) of the number\n    first_bit = (n & mask) >> 6\n    if first_bit == 0:\n        result |= mask\n    \n    # Get the middle bits of the number\n    middle_bits = (n & (~mask)) >> 1\n    if middle_bits == 0:\n        result |= mask\n    \n    # Get the last bit (the leftmost bit) of the number\n    last_bit = (n & mask) << 1\n    if last_bit == 0:\n        result |= mask\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # Calculate the binary representation of the first and last bits\n    first_bit_bin = bin(first_bit)[2:].zfill(8)\n    last_bit_bin = bin(last_bit)[2:].zfill(8)\n\n    # Toggle the middle bits\n    middle_bit_mask = ((1 << 7) | (1 << 6)) - 1  # 0b11111100\n    middle_bit = (middle_bit_mask & (middle_bit_mask ^ n)) | middle_bit_mask  # XOR middle_bit_mask with the number to toggle middle bits\n    middle_bit_bin = bin(middle_bit)[2:].zfill(8)\n\n    # Convert the binary representation of the first and last bits back to integers\n    first_bit = int(first_bit_bin, 2)\n    last_bit = int(last_bit_bin, 2)\n\n    # Combine the first and last bits and the middle bits to get the final number\n    result = first_bit << 1 | last_bit | int(middle_bit_bin, 2)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n\n    n = n ^ (first_bit ^ last_bit)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If value is not found in list, return left insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect module to find the insertion point for x in a\n    index = bisect.bisect_left(a, x)\n    # If x is already in a, return the insertion index\n    if index < len(a) and a[index] == x:\n        return index\n    # Otherwise, insert x at the leftmost possible position and return the new index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x, lo=0, hi=index)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Using binary search to find the insertion point\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the index of the insertion point\n    i = bisect.bisect_left(a, x)\n    # If the value is already present at the end of the list, return the index\n    if i == len(a) or a[i]!= x:\n        return i\n    # Otherwise, perform a linear search to find the leftmost occurrence of the value\n    while i > 0 and a[i-1] == x:\n        i -= 1\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    return match\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    # Check if the string matches the regex pattern\n    match = re.match(regex, string)\n\n    # If the string matches the pattern, return True, otherwise False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    # base case\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    count = 0\n    while count < n: \n        count += 1\n        triangular = count * (count + 1) // 2\n        if triangular >= 10**n - 1: \n            return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    count = 0\n    for i in range(n):\n        count += i + 1\n    return count\n\nn = int(input(\"Enter the number of digits: \"))\nindex = find_Index(n)\nprint(\"The index of smallest triangular number with\", n, \"digits is:\", index)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        i = 0\n        while True:\n            if math.factorial(i) < 10**n:\n                break\n            i += 1\n        return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Convert n to an integer\n    n = int(n)\n\n    # Initialize variables\n    i = 2\n    triangular_number = 0\n\n    # Check if triangular number with n digits exists\n    while i <= n:\n        triangular_number = i * (i - 1) * (i + 1) // 6\n        if triangular_number >= n:\n            return i\n        i += 1\n\n    # If triangular number with n digits does not exist, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max_triangular = int(10**n - 1)\n    triangular_list = []\n    for i in range(max_triangular+1):\n        triangular_list.append(i)\n    min_triangular = triangular_list[0]\n    min_index = 0\n    for i in range(1, len(triangular_list)):\n        if triangular_list[i] < min_triangular:\n            min_triangular = triangular_list[i]\n            min_index = i\n    return min_index\n\nn = 5\nprint(\"Index of smallest triangular number with\", n, \"digits:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # The first triangular number with n digits is 10^n - 1\n    triangular_num = int(math.pow(10, n) - 1)\n    return triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number with n-1 digits\n    i = find_Index(n-1) + 1\n    \n    # Find the smallest triangular number with n digits\n    a = math.pow(2, n-1) - 1\n    n = math.log2(a) / math.log2(2)\n    \n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the index as 1 \n    index = 1 \n    # Initialize the next number as 1 \n    next_num = 1 \n    # Loop through n times \n    for i in range(1,n+1): \n        # Calculate the next triangular number \n        triangular = (index * index) // 2 \n        # If the triangular number has n digits, increment the index \n        if len(str(triangular)) == n: \n            index += 1 \n        # Update the next number \n        next_num = triangular \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    i = 0\n    num = 1\n    min_num = 1\n\n    # Iterate until we find the first triangular number with n digits\n    while math.log10(num) < n:\n        i += 1\n        num = i * (i + 1)\n\n    # If num is greater than 1, then it means there is no triangular number with n digits\n    if num > 1:\n        return -1\n\n    # Find the index of the first triangular number with n digits\n    while math.log10(num) >= n:\n        min_num = num\n        num = (i + 1) * (i + 1)\n        i += 1\n\n    # Return the index of the first triangular number with n digits\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the number of digits of the smallest triangular number with n digits.\n    min_n = math.ceil(math.log10(n) + 1)\n\n    # Calculate the sum of digits of the smallest triangular number with n digits.\n    min_sum = 0\n    for i in range(1, min_n + 1):\n        min_sum += math.log10(i)\n\n    # Calculate the number of digits of the smallest triangular number with 3 digits.\n    min_n3 = math.ceil(math.log10(3) + 1)\n\n    # Calculate the sum of digits of the smallest triangular number with 3 digits.\n    min_sum3 = 0\n    for i in range(1, min_n3 + 1):\n        min_sum3 += math.log10(i)\n\n    # Calculate the number of digits of the smallest triangular number with 4 digits.\n    min_n4 = math.ceil(math.log10(4) + 1)\n\n    # Calculate the sum of digits of the smallest triangular number with 4 digits.\n    min_sum4 = 0\n    for i in range(1, min_n4 + 1):\n        min_sum4 += math.log10(i)\n\n    # Calculate the number of digits of the smallest triangular number with n + 1 digits.\n    min_n5 = math.ceil(math.log10(n + 1) + 1)\n\n    # Calculate the sum of digits of the smallest triangular number with n + 1 digits.\n    min_sum5 = 0\n    for i in range(1, min_n5 + 1):\n        min_sum5 += math.log10(i)\n\n    # Calculate the number of digits of the smallest triangular number with n + 2 digits.\n    min_n6 = math.ceil(math.log10(n + 2) + 1)\n\n    # Calculate the sum of digits of the smallest triangular number with n + 2 digits.\n    min_sum6 = 0\n    for i in range(1, min_n6 + 1):\n        min_sum6 += math.log10(i)\n\n    # Calculate the sum of digits of the smallest triangular number with n digits.\n    min_sum_digits = min_sum + min_sum3 + min_sum4 + min_sum5 + min_sum6\n\n    # Calculate the index of smallest triangular number with n digits.\n    index = (min_sum_digits + min_n - n) // (min_n + 1)\n\n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    my_dict = {}\n    # iterate over the tuple elements\n    for i in range(len(test_tup) - 1):\n        # add the tuple elements as keys and their adjacent elements as values to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    test_dict = {}\n    # loop through the tuple and add each adjacent pair to the dictionary\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    key_list = []\n    value_list = []\n    for i in range(len(test_tup)-1):\n        key_list.append(test_tup[i])\n        value_list.append(test_tup[i+1])\n    return dict(zip(key_list, value_list))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Iterate over the tuple\n    for i in range(len(test_tup)):\n        # Check if we are at the end of the tuple\n        if i == len(test_tup)-1:\n            # Add the last element to the dictionary\n            my_dict[i] = test_tup[i]\n        else:\n            # Add the current and the next element to the dictionary\n            my_dict[i] = (test_tup[i], test_tup[i+1])\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        val = test_tup[i+1]\n        d[key] = val\n    return d"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    for i in range(1, len(char_list)):\n        if char_list[i]!= char_list[0]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    # Initialize a variable to keep track of the first character of the string\n    first_char = s[0]\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the current character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the count of each character in the string\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate over the dictionary to check if all the counts are 1\n    all_ones = True\n    for count in char_count.values():\n        if count!= 1:\n            all_ones = False\n            break\n\n    # Return True if all the counts are 1, otherwise return False\n    return all_ones"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list of characters\n    lst = list(s)\n    # Get the first character of the list\n    first_char = lst[0]\n    # Loop through the list and check if all characters are the same\n    for char in lst[1:]:\n        if char!= first_char:\n            return False\n    # If the loop completes without returning False, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Convert the string to lowercase\n    s = s.lower()\n\n    # Check if all the characters are same or not\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # If the string has only one character then it is always same\n    if len(s) == 1:\n        return True\n    \n    # If the string has more than one character, then check each character in the string\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    \n    # If all the characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Define the side of the tetrahedron\n    a = side\n    \n    # Calculate the semi-perimeter of the tetrahedron\n    b = math.sqrt(3) * a\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(3) / 4 * a * b * (a + b + c)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = side / 2\n    return (s * (s - 1) * (s - 2) * (s - 3)) ** 0.5"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * math.pow(side, 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2) / 12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula to calculate the area of a tetrahedron\n    area = (1/3) * side * side * side\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron given its side length.\n    \"\"\"\n    s = (1/3)*side**2\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/2\n    area = math.sqrt(s) * (1/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    h = (a+b+c)/2\n    s = (a**2 + b**2 + c**2 - h**2)**0.5\n    \n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Create a new empty list to store the rotated elements\n    rotated_list = []\n\n    # Get the length of the list\n    n = len(list)\n\n    # Calculate the number of elements to be rotated\n    k = m % n\n\n    # Check if k is zero, if yes then return the original list\n    if k == 0:\n        return list\n\n    # Iterate through the original list and add the kth element to the rotated list\n    for i in range(n - k):\n        rotated_list.append(list[i])\n\n    # Iterate through the original list and add the (n - k)th element to the rotated list\n    for i in range(n - k, n):\n        rotated_list.append(list[i])\n\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    :param list: List to be rotated\n    :param m: Number of items to be rotated to the right direction\n    :return: Rotated list\n    \"\"\"\n    # Length of the list\n    n = len(list)\n    # If m is greater than n, then rotate m%n items to the right direction\n    if m > n:\n        m = m % n\n    # If m is zero, then list is already rotated\n    if m == 0:\n        return list\n    # If m is less than zero, then rotate (-m)%n items to the left direction\n    if m < 0:\n        m = (-m) % n\n    # Create a new list to store the rotated items\n    rotated_list = []\n    # Traverse through the original list\n    for i in range(n-m, n):\n        # Append the item at the current index to the new list\n        rotated_list.append(list[i])\n    # Traverse through the original list again to append the remaining items\n    for i in range(n-m, n-m-m%n):\n        # Append the item at the current index to the new list\n        rotated_list.append(list[i])\n    # Return the new rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # Calculate the length of the list\n    n = len(list)\n    \n    # If the specified number of items is greater than the length of the list, rotate to the left instead\n    if m > n:\n        m = m % n\n    \n    # Create a new list with the items from the list rotated to the right\n    new_list = list[-m:] + list[:-m]\n    \n    # Return the rotated list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes in a list and a number m and rotates the list to the right by m items.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # find the last element\n    last = list[n-1]\n    # shift all elements to the right by m positions\n    for i in range(n-1):\n        list[i] = list[i+m]\n    # add the last element to the beginning of the list\n    list[n-1] = last\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If m is greater than n, then rotating m elements to the right is not possible.\n    if m > n:\n        return \"Not possible\"\n    # If m is zero or one, then no rotation is required.\n    elif m == 0 or m == 1:\n        return list\n    # If m is greater than one, then rotate m elements to the right.\n    else:\n        # Traverse the list from the end and store the items in a temporary list.\n        temp = list[n-1:]\n        # Append the first m elements of the list to the temporary list.\n        temp += list[:m]\n        # Replace the original list with the temporary list.\n        list[:n-m] = temp\n        # Return the rotated list.\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a list by m number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst = lst[m:] + lst[:m]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m):\n        list.append(list.pop(0))\n        if i < m/2:\n            for j in range(n - m, n):\n                list[j], list[j - m] = list[j - m], list[j]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_flag = False\n    for item in test_tup:\n        if item is None:\n            none_flag = True\n            break\n    return none_flag"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: x == sum(int(digit) for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % 2 == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda num: all(int(d) in str(num) for d in str(num))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % x == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    numbers = list(range(startnum, endnum+1))\n    filtered_numbers = list(filter(lambda x: all(d % int(str(x)[i]) == 0 for d in str(x)), numbers))\n    return filtered_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    Parameters:\n    startnum: int\n        The starting number of the range.\n    endnum: int\n        The ending number of the range.\n\n    Returns:\n    A list of numbers within the given range that are divisible by every digit it contains.\n\n    Example:\n    >>> divisible_by_digits(10, 100)\n    [12, 24, 36, 48, 60, 72, 84, 96]\n    \"\"\"\n    # Define a function to check if a number is divisible by a given digit\n    def is_divisible(n, d):\n        return n % d == 0\n\n    # Define a list comprehension to find all numbers within the given range that are divisible by every digit\n    divisible_nums = [n for n in range(startnum, endnum+1) if all(is_divisible(n, d) for d in str(n))]\n\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(1, 10)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = r * math.sin(math.radians(a/360))\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Convert angle to degrees\n    angle = a / 180 * math.pi\n    \n    # Check if angle is within the range of 0 to 360 degrees\n    if angle < 0 or angle > 360:\n        print(\"Angle must be within the range of 0 to 360 degrees.\")\n        return None\n    \n    # Calculate area of sector\n    area = r * r * math.sin(angle / 2)\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Calculate the area of the sector\n    area = math.pi * r * r\n    # Check if the angle is within the valid range\n    if a > 360:\n        return None\n    else:\n        # Calculate the angle in radians\n        angle = math.radians(a)\n        # Calculate the area of the sector\n        sector_area = area * angle\n        # Return the area of the sector\n        return sector_area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    \n    area = math.pi * r ** 2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = math.pi * r * r * (1 - (a/360))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    This function takes the radius and angle as inputs and returns the area of a sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    \"\"\"\n    \n    # convert angle to degrees\n    a = math.degrees(a)\n    \n    # check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # calculate area of sector using formula\n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n\n    :param X: The first string sequence.\n    :param Y: The second string sequence.\n    :param Z: The third string sequence.\n    :return: The length of the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j]\n                elif X[i - 1] == Z[k - 1]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    # create a 3D array to store lengths of LCS of all three sequences\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # fill the 3D array using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k])\n\n    # backtrack to find the actual LCS\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # return the LCS as a string\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    # function to find length of LCS \n    def lengthOfLCS(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n+1) for j in range(m+1)] \n  \n        # calculating length of LCS using dynamic programming \n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    p[i][j] = p[i-1][j-1] + 1 \n                else: \n                    p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n        return p[m][n] \n  \n    # function to construct the LCS of three strings \n    def constructLCS(X, Y, Z): \n        m = len(X) \n        n = len(Y) \n        p = [[0] * (n+1) for j in range(m+1)] \n  \n        # calculating length of LCS using dynamic programming \n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    p[i][j] = p[i-1][j-1] + 1 \n                else: \n                    p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n        # backtracking to construct the LCS \n        lcs = [] \n        i = m \n        j = n \n        while i > 0 and j > 0: \n            if X[i-1] == Y[j-1]: \n                lcs.append(X[i-1]) \n                i -= 1 \n                j -= 1 \n            elif p[i-1][j] > p[i][j-1]: \n                i -= 1 \n            else: \n                j -= 1 \n  \n        return ''.join(reversed(lcs)) \n  \n    # calling functions to find length of LCS and construct LCS \n    lenLCS = lengthOfLCS(X, Y, Z) \n    LCS = constructLCS(X, Y, Z) \n  \n    # printing result \n    print(\"Length of LCS for the three strings is:\", lenLCS) \n    print(\"The LCS for the three strings is:\", LCS) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # Create a 2D table to store the length of LCS of subsequences\n    table = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Find the LCS by backtracking\n    i = m\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list to get the correct order of characters\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialize the lengths of the three sequences\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store the length of LCS of the three sequences\n    table = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                # If the characters are same, then length of LCS will be 1 plus length of LCS of the previous 2 subsequences\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = 1 + table[i-1][j-1][k-1]\n                # If the characters are different, then length of LCS will be maximum of LCS of the previous 2 subsequences\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Return the length of LCS of the three sequences\n    return table[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    def helper(X, Y, Z, m, n, p, q, r, s): \n        if m == 0 or n == 0: \n            return 0 \n        if X[m-1] == Y[n-1] == Z[p-1]: \n            return 1 + helper(X, Y, Z, m-1, n-1, p-1, q-1, r-1, s) \n        else: \n            return max(helper(X, Y, Z, m-1, n, p, q, r, s), \n                       helper(X, Y, Z, m, n-1, p, q, r, s), \n                       helper(X, Y, Z, m, n, p-1, q-1, r-1, s)) \n\n    m, n, p, q, r, s = len(X), len(Y), len(X), len(Y), len(X), len(Y) \n    return helper(X, Y, Z, m, n, p, q, r, s) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find the length of each string\n    m, n, o = len(X), len(Y), len(Z)\n\n    # Create a 2D table to store lengths of LCS of substrings\n    # Initialize all entries as 0\n    LCS = [[0 for j in range(o + 1)] for i in range(m + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    # If LCS is empty at any point, LCS[i][j][k] = 0\n                    LCS[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    # If last characters are same, LCS[i][j][k] = 1 + LCS[i-1][j-1][k-1]\n                    LCS[i][j][k] = 1 + LCS[i - 1][j - 1][k - 1]\n                else:\n                    # If last characters are different, LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1])\n\n    # Backtrack to get the actual LCS\n    i, j, k = m, n, o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            # If last characters are same, append the character to LCS and move to previous indices\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i - 1][j][k] > LCS[i][j - 1][k]:\n            i -= 1\n        elif LCS[i][j - 1][k] > LCS[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0]*(m+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n    \n    return p"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three string sequences and returns the longest common subsequence.\n    '''\n\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n    table = [[0] * (p+1) for _ in range(m+1)]\n\n    # Step 1\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 2\n    i = m\n    j = p\n    LCS = []\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    LCS = LCS[::-1]\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = [[0 for j in range(n+1)] for i in range(m+1)] \n  \n    # Step 1 \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n    # Step 2 \n    i = m \n    j = n \n    LCS = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            LCS.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return ''.join(reversed(LCS))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    This function takes a string as input and returns a string with spaces between words starting with capital letters.\n    '''\n    # Splitting the string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Joining the words with spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first word and add spaces between the rest of the words\n    result = words[0].capitalize()\n    for i in range(1, len(words)):\n        if words[i].istitle():\n            result +='' + words[i].capitalize()\n        else:\n            result +='' + words[i]\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', string)\n    # join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    string = re.sub(r'[^\\w\\s]','', string)\n    # split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', string)\n    # join the capitalized words with spaces\n    result =''.join(word.capitalize() for word in words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    pattern = re.compile(r'(?<![A-Z])[A-Z](?![A-Z])')\n    return''.join(pattern.split(string))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Loop through each word and capitalize the first letter and insert a space between words\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].lower() +'' + words[i][1:]\n        else:\n            words[i] = words[i]\n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate through the words and capitalize the first letter of each word\n    capitalized_words = []\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_words.append(capitalized_word)\n\n    # Join the words with spaces\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Find all the words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Loop through each word and put a space after the first letter of the word\n    for word in words:\n        str1 = str1.replace(word,'' + word)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n\n    # Use regular expressions to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Loop through each word in the list and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If the word starts with a capital letter, add a space before it\n            words[i] ='' + words[i]\n\n    # Join the words back together with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Initialize an empty list to store sorted numbers\n    nums_sorted = []\n\n    # Loop through the list of strings and convert each string to a number\n    for num_str in nums_str:\n        try:\n            # Convert the string to a float and append it to the nums_sorted list\n            nums_sorted.append(float(num_str))\n        except ValueError:\n            # If the string cannot be converted to a float, append None to the nums_sorted list\n            nums_sorted.append(None)\n\n    # Sort the nums_sorted list using the sorted() function and insert None values at the appropriate positions\n    nums_sorted.sort(key=lambda x: (x is None, x))\n\n    # Remove the None values from the sorted list\n    nums_sorted = [x for x in nums_sorted if x is not None]\n\n    return nums_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to numbers\n    nums = [float(num) for num in nums_str]\n\n    # Sort the numbers\n    nums.sort()\n\n    # Convert the sorted numbers back to strings\n    sorted_nums_str = ['{:.2f}'.format(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the integers using the built-in sort function\n    nums.sort()\n    # Convert the sorted integers back to strings and return the result\n    return [''.join(str(num)) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to floats and then sort them\n    nums_float = sorted(float(num) for num in nums_str)\n    # Convert floats back to strings and return the sorted list\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: [int(c) for c in x if c.isdigit()])"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to integers\n    nums = [int(i) for i in nums_str]\n    # Sort the integers in ascending order\n    nums.sort()\n    # Convert the sorted integers back to strings and return them as a list\n    return [str(i) for i in nums]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list using the += operator\n    test_list += test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # loop through each element in the list and append it to a new list\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n\n    # loop through each element in the tuple and append it to the new list\n    for item in test_tup:\n        new_list.append(item)\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    if i < len(arr)-1:\n        if arr[i] < arr[i+1]:\n            return False\n        if i % 2 == 0:\n            if arr[i] < check_min_heap_helper(arr, 2*i+1):\n                return False\n            if arr[i] < check_min_heap_helper(arr, 2*i+2):\n                return False\n        else:\n            if arr[i] < check_min_heap_helper(arr, 2*i+1):\n                return False\n\n    return True\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] >= arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the current index is greater than the left child index,\n    # then there is at least one child in the left subtree.\n    if i * 2 + 1 < len(arr):\n        left_child = i * 2 + 1\n\n        # If the left child is greater than the right child,\n        # then the current node is not the minimum heap.\n        if left_child + 1 < len(arr) and arr[left_child] > arr[left_child + 1]:\n            return False\n\n        # If the left child is greater than the current index,\n        # then the current node is the minimum heap.\n        if arr[left_child] < arr[i]:\n            return False\n\n    # If the current index is greater than the right child index,\n    # then there is at least one child in the right subtree.\n    if i * 2 + 2 < len(arr):\n        right_child = i * 2 + 2\n\n        # If the right child is greater than the left child,\n        # then the current node is not the minimum heap.\n        if right_child - 1 >= 0 and arr[right_child] > arr[right_child - 1]:\n            return False\n\n        # If the right child is greater than the current index,\n        # then the current node is the minimum heap.\n        if arr[right_child] < arr[i]:\n            return False\n\n    # If all the conditions are satisfied,\n    # then the given array is a min heap.\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n\n    if i == 0:\n        return True\n\n    parent_i = (i - 1) // 2\n    return arr[i] <= arr[parent_i] and check_min_heap_helper(arr, parent_i)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n\n    if arr[parent] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if it represents a min heap, False otherwise.\n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 1:\n        if arr[i] < arr[i//2]:\n            return False\n    if 2*i <= len(arr):\n        if arr[i] < arr[2*i]:\n            return False\n    if 2*i+1 <= len(arr):\n        if arr[i] < arr[2*i+1]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    else:\n        if arr[i] < arr[parent(i)]:\n            return False\n        else:\n            return check_min_heap_helper(arr, parent(i))\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        return check_min_heap_helper(arr, len(arr)-1)\n\ndef parent(i):\n    '''\n    Write a function to find parent of a node.\n    '''\n    return i//2\n\ndef left_child(i):\n    '''\n    Write a function to find left child of a node.\n    '''\n    return 2*i\n\ndef right_child(i):\n    '''\n    Write a function to find right child of a node.\n    '''\n    return 2*i+1"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[int((i - 1) / 2)]:\n        return False\n    else:\n        return check_min_heap_helper(arr, int((i - 1) / 2))\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 4 * jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacobsthal_numbers = [0, 1]\n    while len(jacobsthal_numbers) < n + 1:\n        next_jacobsthal = (jacobsthal_numbers[-1] * 2) - jacobsthal_numbers[-2]\n        jacobsthal_numbers.append(next_jacobsthal)\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (2 * (2 * n - 1) + 1) // (2 * n)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + (2*n-1)*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3 * jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b, c = 0, 1, 1\n    for i in range(n-1):\n        a, b, c = b, c + a * b, b\n    return c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b, c = 1, 1, 1\n    for i in range(2, n+1):\n        a, b, c = b, a+b, c+a\n    return c"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 2 * jacobsthal_num(n - 1)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and an integer K as input and returns a list of tuples containing the K smallest records from the list.\n    \n    If there are less than K records in the list, the function will return all the records.\n    \n    Example:\n    test_list = [('apple', 5), ('banana', 8), ('cherry', 2), ('date', 7), ('elderberry', 6)]\n    K = 2\n    Output: [('apple', 5), ('banana', 8)]\n    '''\n    \n    # Sorting the list based on the first element (which is assumed to be the record value)\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initializing the minimum list to store the K smallest records\n    min_list = []\n    \n    # Iterating over the first K elements of the sorted list\n    for i in range(K):\n        # Adding the current element to the minimum list\n        min_list.append(test_list[i])\n    \n    # Returning the minimum list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a tuple list and K as arguments.\n    It returns a list of tuples containing the minimum k records from the tuple list.\n    '''\n    # sorting the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    # initializing a variable to store the minimum k records\n    min_k_records = []\n    # iterating over the sorted list and adding the minimum k records to the list\n    for i in range(len(sorted_list)):\n        if len(min_k_records) == K:\n            break\n        min_k_records.append(sorted_list[i])\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list.sort(key=lambda x: x[1])  # sort by second element (i.e. first sort by first element)\n    min_k_records = []\n    count = 0\n\n    for record in test_list:\n        if count < K:\n            min_k_records.append(record)\n            count += 1\n        elif count == K:\n            if record[1] < min_k_records[0][1]:  # if the second element of the new record is smaller than the minimum of the existing min_k_records\n                min_k_records[0] = record  # update the minimum of min_k_records to the new record\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for record in test_list:\n        if len(min_list) < K:\n            min_list.append(record)\n        elif len(min_list) == K:\n            if record < min_list[0]:\n                min_list.pop(0)\n                min_list.append(record)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # Find the smallest k records from the list\n    min_k_records = sorted(test_list, key=lambda x: x[1])[:K]\n    # Return the minimum k records as a list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list)\n    # initialize the min_k to infinity\n    min_k_val = float('inf')\n    # loop through the sorted list and find the minimum k records\n    for i in range(len(sorted_list)):\n        if i >= K:\n            break\n        min_k_val = min(min_k_val, sorted_list[i][0])\n    return min_k_val\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n\n    # Sort the list of tuples based on the last element\n    test_list.sort(key=lambda x: x[2])\n\n    # Initialize minimum count to infinity\n    min_count = float('inf')\n\n    # Initialize count of minimum records\n    min_count_rec = []\n\n    # Loop through the sorted list\n    for i in range(len(test_list)):\n\n        # Check if we have added the minimum count of records\n        if len(min_count_rec) == K:\n            break\n\n        # Check if we have added the current record to the minimum count of records\n        if len(min_count_rec) == 0 or test_list[i][2] < min_count_rec[-1][2]:\n            min_count_rec.append(test_list[i])\n\n        # Update the minimum count if current count is smaller\n        if len(min_count_rec) == K and len(min_count_rec) < min_count:\n            min_count = len(min_count_rec)\n\n    # Return the minimum count of records\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n        test_list (list): list of tuples containing the data to be searched\n        K (int): number of records to be returned\n    \n    Returns:\n        list: list of tuples containing the minimum K records from the input list of tuples\n    \n    Example:\n        test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n        K = 2\n        Output: [(1, 2, 3), (4, 5, 6)]\n    '''\n    # sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # keep track of the minimum K records found so far\n    min_records = []\n    \n    # iterate over the sorted list and add the records to min_records if they meet the K criteria\n    for i in range(len(test_list)):\n        if len(min_records) < K:\n            min_records.append(test_list[i])\n        else:\n            # check if the current record is smaller than the minimum K record found so far\n            if test_list[i][0] < min_records[0][0]:\n                # if it is, replace the minimum K record with the current record\n                min_records = [test_list[i]]\n    \n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # create a dictionary to store frequency of each element\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    \n    # iterate through the dictionary and find minimum frequency and element with minimum frequency\n    min_freq = float('inf')\n    min_elem = None\n    for elem, count in freq.items():\n        if count < min_freq:\n            min_freq = count\n            min_elem = elem\n    \n    # return the element with the minimum frequency\n    return min_elem"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # initialize minimum k to be the first tuple\n    minimum_k = test_list[0]\n    # initialize minimum count to be the count of the first tuple\n    minimum_count = test_list[0][1]\n    # loop through the remaining tuples\n    for i in range(1, len(test_list)):\n        # if the current tuple has a smaller count than the minimum count or the current tuple has a smaller count than the minimum count but is not equal to the minimum count, update minimum k and minimum count\n        if (test_list[i][1] < minimum_count or (test_list[i][1] == minimum_count and test_list[i][0] < minimum_k[0])):\n            minimum_k = test_list[i]\n            minimum_count = test_list[i][1]\n        # if the count of the current tuple is equal to the minimum count and is smaller than the count of the minimum k, update minimum k to be the current tuple\n        if (test_list[i][1] == minimum_count and test_list[i][0] < minimum_k[0]):\n            minimum_k = test_list[i]\n    # return the minimum k\n    return minimum_k"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to hold the common elements\n    common_elements = []\n    \n    # iterate through each index in each list\n    for i in range(len(l1)):\n        # check if the current index exists in both lists\n        if i in l2 and i in l3:\n            # if the index exists in both lists, check if the element at that index is also present in all three lists\n            if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n                common_elements.append(l1[i])\n    \n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # Check if the element at that index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            # If it is, add it to the common list\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Returns a list of common elements in all three lists, by comparing them at the same indices.\n    \"\"\"\n    # create an empty dictionary to store the indices of common elements\n    common_indices = {}\n    for i in range(len(l1)):\n        # check if the current element is in l1 and l2\n        if l1[i] in l2 and l1[i] in l3 and (i not in common_indices or common_indices[i] not in [l2.index(l1[i]), l3.index(l1[i])]):\n            common_indices[i] = (l2.index(l1[i]), l3.index(l1[i]))\n\n    # create a list of common elements from the indices\n    common_elements = []\n    for i in common_indices:\n        common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # create an empty list to store the common elements\n    common = []\n    \n    # iterate over each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # check if the current element is in l1 and l2 and l3\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            # if the element is common, add it to the list of common elements\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i] and l2[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through each element in l1\n    for element in l1:\n        # check if the element exists in l2 and l3\n        if element in l2 and element in l3:\n            # if it does, add it to the common_elements list\n            common_elements.append(element)\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        return None\n    \n    # Return the second smallest element\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        min1 = min(numbers)\n        min2 = float('inf')\n        for num in numbers:\n            if num!= min1:\n                if num < min2:\n                    min2 = num\n        return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'a(?=b)'\n    \n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_match_zero_one(text):\n    pattern = re.compile(r'a.+b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return 'Not found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+b?'\n    result = re.search(pattern, text)\n    if result:\n        print(\"Match found!\")\n        print(\"Match found at index:\", result.start())\n        print(\"Match found at index:\", result.end())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(f\"Found a match: {matches}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    match = pattern.match(text)\n    if match:\n        print(\"The pattern is found in the text.\")\n    else:\n        print(\"The pattern is not found in the text.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j > 0 and test_list[i][j] == test_list[i][j-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a set to store unique strings\n    unique_strings = set()\n\n    # iterate through the list of strings\n    for string in test_list:\n        # reverse the string and add it to the set\n        unique_strings.add(string[::-1])\n\n    # initialize variables to keep track of pair counts\n    reverse_pairs = 0\n    non_reverse_pairs = 0\n\n    # iterate through the unique strings\n    for string in unique_strings:\n        # check if the reversed string is in the set\n        if string in unique_strings:\n            reverse_pairs += 1\n        else:\n            non_reverse_pairs += 1\n\n    # return the final pair counts\n    return reverse_pairs, non_reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each tuple\n    count_dict = {}\n    # iterate over the input list\n    for num in list1:\n        # convert each list to a tuple and check if it exists in the count dictionary\n        if tuple(num) in count_dict:\n            # if it does, increment the count\n            count_dict[tuple(num)] += 1\n        else:\n            # if it doesn't, add it to the count dictionary with a count of 1\n            count_dict[tuple(num)] = 1\n    # return the count dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in sublist_count:\n            sublist_count[item_tuple] += 1\n        else:\n            sublist_count[item_tuple] = 1\n    return sublist_count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        # convert the list to a tuple and add it to the count dictionary\n        count[tuple(sublist)] = count.get(tuple(sublist), 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            if sublist_tuple in count_dict:\n                count_dict[sublist_tuple] += 1\n            else:\n                count_dict[sublist_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            tup = tuple(item)\n            if tup in sublists:\n                sublists[tup] += 1\n            else:\n                sublists[tup] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # convert the list to a set to remove duplicates\n    set1 = set(list1)\n\n    # create a dictionary to store the counts\n    count_dict = {}\n\n    # iterate over each list in the set\n    for sublist in set1:\n        # convert the sublist to a tuple\n        tuple_sublist = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if tuple_sublist in count_dict:\n            # increment the count by 1\n            count_dict[tuple_sublist] += 1\n        else:\n            # if not, add the tuple to the dictionary with a count of 1\n            count_dict[tuple_sublist] = 1\n\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        count = count_dict.get(sublist, 0) + 1\n        count_dict[sublist] = count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store unique sublists and their counts\n    unique_sublists_dict = {}\n    # loop through the original list\n    for i in range(len(list1)):\n        # create a tuple of the current element and check if it's already in the dictionary\n        if (tuple(list1[i]),) not in unique_sublists_dict:\n            # if not, add it with a count of 1 to the dictionary\n            unique_sublists_dict[(tuple(list1[i]),)] = 1\n        # otherwise, increment the count of the tuple in the dictionary\n        else:\n            unique_sublists_dict[(tuple(list1[i]),)] += 1\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1) + 1):\n            list2.append(tuple(list1[i:j]))\n    sublist_counts = {}\n    for sublist in list2:\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    if num.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Define a regular expression pattern for decimal numbers with a precision of 2\n    pattern = r'^[-+]?[0-9]+(\\.[0-9]{1,2})?$'\n\n    # Use the re.match() function to check if the input string matches the pattern\n    match = re.match(pattern, num)\n\n    # Return True if the input string matches the pattern, else False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        num = float(num)\n        if abs(num - int(num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the string to a float with a precision of 2\n        decimal = float(num)\n        # check if the float is a decimal number\n        if num.count('.') == 1 and len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n\n    # check if the input string is a decimal number\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in num:\n        if not i.isdigit() or len(num) - num.index(i) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string contains any non-numeric characters\n    if not num.isdigit():\n        return False\n\n    # Convert the string to a float with a precision of 2\n    num = float(num)\n\n    # Check if the float has a precision of 2\n    if abs(num - round(num, 2)) > 0.01:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # Split the number into integer and decimal parts\n    integer, decimal = num.split('.')\n    \n    # Check if there are at most 2 decimal places\n    if len(decimal) > 2:\n        return False\n    \n    # Check if the decimal part only contains digits\n    if not decimal.isdigit():\n        return False\n    \n    # Convert the integer part to integer and decimal part to float\n    int_part = int(integer)\n    dec_part = float(decimal)\n    \n    # Check if the integer part is within 340,000,000 and 999,999,999\n    if int_part < 0 or int_part > 999_999_999:\n        return False\n    \n    # Check if the decimal part is within 99,999.99\n    if dec_part < 0 or dec_part > 99_999.99:\n        return False\n    \n    # Return True if the number is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    It returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[0]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Set a set to store the unique elements of the list\n    unique_set = set()\n\n    # Iterate over the elements of the list\n    for element in arr:\n        # Check if the element is already in the set or not\n        if element not in unique_set:\n            # If the element is not in the set, add it to the set\n            unique_set.add(element)\n        else:\n            # If the element is already in the set, return False as the list contains only one distinct element\n            return False\n\n    # If all the elements of the list are unique, return True as the list contains only one distinct element\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Check if the length of the set is equal to one\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list contains any duplicates\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique:\n        print(f\"The list contains only one distinct element: {arr[len(arr)-1]}\")\n    else:\n        print(f\"The list contains {len(arr)-1} distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    if len(arr) > 1:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to set to get unique elements\n    unique_set = set(arr)\n    \n    # if the length of the set is 1, then all elements are unique\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if the month number is within range\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number. Months are given as number from 1 to 12.\"\n    \n    # check if the month number has 30 days\n    if monthnum == 2:\n        return \"February has 28 or 29 days.\"\n    elif monthnum in [4, 6, 9, 11]:\n        return \"30 days in these months.\"\n    else:\n        return \"30 days in all other months.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1, 13):\n        month_name = months[monthnum3 - 1]\n        if month_name in ['March', 'May', 'July', 'August', 'October', 'November']:\n            return True\n        elif month_name in ['April', 'June', 'September', 'November']:\n            return False\n        elif month_name in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 3 == 0:\n        print(monthnum3, 'is a leap year.')\n    else:\n        print(monthnum3, 'is not a leap year.')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if months[monthnum3] == 31:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        print(\"Invalid input.\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if the input is within range of 1 to 12\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    \n    # check if the month has 30 days or not\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    elif monthnum in [4, 6, 9, 11]:\n        days_in_month[1] = 30\n    elif monthnum == 2:\n        days_in_month[1] = 28\n    \n    return f\"{monthnum} has {days_in_month[monthnum-1]} days\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n): \n    \"\"\"\n    Returns the minimum difference between any two elements in a given array. \n    \"\"\"\n    # Initialize min_diff with the first element of the array\n    min_diff = arr[1] - arr[0]\n    \n    # Loop through the array starting from index 1 and compare each element with the previous element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n        \n        # Update the minimum difference if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    It uses the sorting algorithm to sort the array in ascending order and then finds\n    the difference between adjacent elements. If there are no adjacent elements, the\n    minimum difference is the difference between the last and the first elements.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the difference between the last and the first elements\n    min_diff = arr[-1] - arr[0]\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    # If there are no adjacent elements, the minimum difference is the difference between the last and the first elements\n    if min_diff == arr[-1] - arr[0]:\n        min_diff = arr[-1] - arr[0]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Loop through the sorted array\n    for i in range(n - 1):\n        # Calculate difference between adjacent elements\n        diff = arr[i + 1] - arr[i]\n\n        # Update minimum difference if current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the given array in ascending order\n    arr.sort()\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n    # Loop through the array and calculate the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    \n    min_diff = float('inf')\n    min_index1 = 0\n    min_index2 = 1\n    \n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    \n    for i in range(n-2):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_index1 = i\n            min_index2 = i+1\n            \n        if arr[i] < arr[i+2]:\n            temp = arr[i]\n            arr[i] = arr[i+2]\n            arr[i+2] = temp\n        \n        if arr[i] < arr[i+1]:\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Find the minimum element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize a variable to store the minimum difference\n    min_diff = 2**31 - 1\n\n    # Traverse the array and find the difference between any two elements\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Iterate through the array from the first element and all the other elements\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i] - arr[i - 1]\n\n        # If the difference is less than minimum difference, update it\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Given an array of n integers, find the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')  # initial value of minimum difference\n    min_pair = None  # initial value of minimum difference pair\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]  # calculate the difference between i and j\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])  # storing the minimum difference pair\n    \n    return min_pair"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0\n    \n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. \n    \"\"\"\n    polite_list = [1, 2]\n    for i in range(3, n+1):\n        if i%2 == 0:\n            polite_list.append(2*polite_list[-1]+1)\n        else:\n            polite_list.append(polite_list[-1]*2)\n    return polite_list[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 8\n    elif n % 2 == 0:\n        return 2*is_polite(n/2)\n    else:\n        return 3*is_polite(n/3)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_prime(k):\n        if k == 1:\n            return 2\n        primes = [2]\n        i = 3\n        while True:\n            is_prime = True\n            for p in primes:\n                if p * p > i:\n                    break\n                if i % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n            i += 2\n        return primes[k - 1]\n\n    def nth_polite_number(k):\n        if k <= 0:\n            return 1\n        prime = nth_prime(math.ceil(math.log2(k)))\n        return prime * (2 * prime - 1)\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    primes = [i for i in range(2, 10000) if is_prime(i)]\n    prime_index = binary_search(primes, n - 1)\n    return primes[prime_index]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize the count of polite numbers to 0\n    count = 0\n\n    # Initialize the sum of polite numbers to 0\n    sum = 0\n\n    # Iterate from 1 to n and check if each number is a polite number\n    for i in range(1, n+1):\n\n        # Calculate the sum of squares of each number\n        square = i*i\n\n        # Check if the square is a prime number\n        if is_prime(square):\n\n            # If it is a prime number, add it to the sum and increment the count\n            sum += square\n            count += 1\n\n    # Check if the sum is divisible by n\n    if sum % n == 0:\n        return True\n    else:\n        return False\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer 'n' as input and returns True if it is a polite number, else False. \n    A polite number is a positive integer that is either a prime number or the product of two consecutive prime numbers. \n    '''\n\n    def is_prime(num):\n        '''\n        This function takes an integer 'num' as input and returns True if it is a prime number, else False. \n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_prime_product(num):\n        '''\n        This function takes an integer 'num' as input and returns True if it is a prime product, else False. \n        '''\n        if num < 2:\n            return False\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n\n    def nth_polite(n):\n        '''\n        This function takes an integer 'n' as input and returns the nth polite number.\n        '''\n        if n < 1:\n            return None\n        if n == 1:\n            return 2\n        i = 3\n        while True:\n            if is_prime(i):\n                if is_prime_product(i) or (i - 1) % 3 == 0:\n                    return i\n            i += 2\n\n    return nth_polite(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"The only polite number is 1.\"\n    elif n == 2:\n        return \"The only polite number is 2.\"\n    else:\n        polite_number = 3\n        while polite_number <= n:\n            if n % polite_number == 0:\n                return \"Invalid input\"\n            elif n % (polite_number + 2) == 0:\n                return \"Invalid input\"\n            else:\n                polite_number += 2\n        return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize the sum of all polite numbers to 0\n    sum_polite = 0\n    # Initialize a variable to keep track of the last polite number\n    last_polite = 0\n    # Initialize the index of the last polite number to 0\n    last_polite_index = 0\n    # Initialize a variable to keep track of the count of polite numbers in the range [1, n]\n    polite_count = 0\n\n    # Loop through the range [1, n]\n    for i in range(1, n+1):\n        # Compute the current polite number\n        current_polite = math.ceil(i**0.5)\n        # Check if the current polite number is equal to the current index\n        if current_polite == i:\n            # If it is, increment the polite count and update the last polite number and its index\n            polite_count += 1\n            last_polite = current_polite\n            last_polite_index = i\n        # If the current polite number is greater than the current index, it must have been a prime number\n        elif current_polite > i:\n            # If it is, increment the polite count and update the last polite number and its index\n            polite_count += 1\n            last_polite = current_polite\n            last_polite_index = i\n        # If the current polite number is less than or equal to the current index, it must have been a composite number\n        else:\n            # If it is, decrement the polite count and update the last polite number and its index\n            polite_count -= 1\n            last_polite = current_polite\n            last_polite_index = i\n\n    # Return the sum of all polite numbers in the range [1, n]\n    return sum_polite + last_polite * polite_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return is_polite(n//2) * 3 + 1\n        else:\n            return is_polite((n-1)//2) * 3 + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n == 1:\n        return 'Alice'\n    elif n == 2:\n        return 'Bob'\n    elif n == 3:\n        return 'Carol'\n    elif n == 4:\n        return 'David'\n    elif n == 5:\n        return 'Eve'\n    elif n == 6:\n        return 'Frank'\n    elif n == 7:\n        return 'Grace'\n    elif n == 8:\n        return 'Hannah'\n    elif n == 9:\n        return 'Isabella'\n    elif n == 10:\n        return 'Jack'\n    else:\n        return 'n is too large'\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, y) for i, x in enumerate(l1) for j, y in enumerate(l1[i+1:], i+1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    \n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    \n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two lists as input, arr and sum.\n    It returns the count of pairs whose sum is equal to sum in arr.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i] not in li2:\n            diff.append(li1[i])\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements of list2 that are not present in list1.\n    '''\n    return list(set(li2) - set(li1))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Given two lists, return the elements in the first list that are not in the second list.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of `li1` that are not present in `li2`.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n) :\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 1:\n            sum += i**4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    sum_of_power_4 = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of the number and add to sum\n        sum_of_power_4 += i**4\n\n    # Return the sum of fourth power of odd natural numbers\n    return sum_of_power_4"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        fourth_pow = i ** 4\n        # Add the fourth power to the sum\n        sum += fourth_pow\n\n    # Return the sum of fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_4th_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_4th_powers += i**4\n    return sum_4th_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = odd_num_sum(n)\nprint(\"The sum of fourth power of first {} odd natural numbers is: {}\".format(n, result))"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to keep track of opening parentheses\n    stack = deque()\n\n    # Loop through the expression\n    for char in exp:\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a closing parenthesis, pop the top parenthesis from the stack and check if it matches\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    # If the stack is empty, the expression is balanced\n    if not stack:\n        return True\n    # If the stack is not empty, the expression is not balanced\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if not (exp[j] == ')' and (i-j-1) % 2 == 0):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalpha():\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[', '{']:\n                if top_char!= char:\n                    return False\n            elif char in [')', '}', ']']:\n                if top_char!= char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if last_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char.isspace():\n            continue\n        elif stack and stack[-1] == '(':\n            stack.pop()\n        elif stack and stack[-1] == ')':\n            return False\n    \n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # split the string into a list of words\n    words = test_str.split()\n\n    # initialize an empty list to store the filtered words\n    filtered_words = []\n\n    # loop through each word in the list\n    for word in words:\n        # if the length of the word is not equal to K, append it to the filtered list\n        if len(word)!= K:\n            filtered_words.append(word)\n\n    # join the filtered list of words into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Loop through each word and remove the ones with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1 # Decrement the index to avoid skipping elements\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes in a string and an integer K and removes all the words with length K.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n    # Create a new list to store the words with length less than K\n    new_words = []\n    # Loop through each word in the list of words\n    for word in words:\n        # Check if the length of the current word is greater than or equal to K\n        if len(word) >= K:\n            # If the length of the current word is less than K, append it to the new list\n            new_words.append(word)\n    # Join the new list of words back into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    \n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    \n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with k length\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the result list\n        if len(word)!= K:\n            result.append(word)\n    # Join the result list into a string and return it\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.start(), result.end(), result.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are matches, return a list of tuples containing the matches and their position in the text\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.finditer(pattern, text)\n\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(\"Match found at position\", start, \"with length\", end - start, \":\", text[start:end])\n        return\n    else:\n        print(\"No matches found.\")\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog is not lazy, but he is too lazy.\"\npattern = \"lazy\"\n\noccurance_substring(text, pattern)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match {matchNum}: Start position: {match.start()}\")\n            print(f\"Match {matchNum}: End position: {match.end()}\")\n            print()\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Convert the pattern string to regular expression pattern\n    pattern = re.compile(pattern)\n    # Find all the matches of the pattern in the text\n    matches = pattern.findall(text)\n    # Check if there are any matches\n    if matches:\n        # Loop through the matches and return the positions and number of matches\n        for match in matches:\n            return (match.start(),match.end(),len(matches))\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            # get the starting and ending indices of the substring\n            start = match.start()\n            end = match.end()\n            # print the starting and ending indices\n            print(f\"Match {matchNum}: substring starts at position {start} and ends at position {end}\")\n            # get the matched substring itself\n            substring = text[start:end]\n            # print the matched substring\n            print(f\"Substring: {substring}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a variable to store the result of the check\n    result = True\n\n    # Iterate over the list of numbers\n    for i in range(len(nums)):\n        # If the current number at the odd index is odd\n        if nums[i] % 2 == 1:\n            # Check if the number is odd in the even index\n            if nums[i+1] % 2 == 0:\n                # If the number is odd in the even index, the check fails\n                result = False\n                break\n\n    # Return the result of the check\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n        else:\n            continue\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                count += 1\n    return count == 0"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(1, len(nums), 2):\n        if any(num % 2 == 0 for num in nums[i:]):\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # loop over all indices in the list\n    for i in range(len(nums)):\n        # check if the current index contains an odd number\n        if i % 2 == 0 or nums[i] % 2 == 0:\n            return False\n    # if we get here, all indices are odd and contain odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char in vowels and char!= prev_char:\n            count += 1\n        prev_char = char\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    This function takes a string as input and returns a dictionary of vowels as keys and their count as values.\n    '''\n    vowels = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            vowels[test_str[i]] += 1\n    return vowels"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels:\n            if i < len(test_str)-1 and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize a set to store the non-repeated elements\n    non_repeated = set()\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated.add(num)\n    \n    # Calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(non_repeated)\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    # Remove duplicates from the list\n    arr = list(set(arr))\n    # Initialize the sum variable\n    sum = 0\n    # Iterate over the array\n    for num in arr:\n        # Check if the current number has already been added to the sum\n        if sum + num in arr:\n            continue\n        else:\n            # Add the current number to the sum\n            sum += num\n    # Return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set() # use set to store unique elements\n    for x in arr:\n        if x not in seen:\n            seen.add(x)\n    return sum(seen)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # create a set to store the unique elements of the list\n    unique_set = set(arr)\n    \n    # find the sum of the unique elements\n    sum_of_unique = sum(unique_set)\n    \n    # return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the index of each element in the list\n    index_dict = {}\n    # Initialize the sum to 0\n    sum_non_repeated = 0\n    \n    # Iterate through each element in the list\n    for i in range(len(arr)):\n        # Check if the current element is already in the dictionary\n        if arr[i] in index_dict:\n            # If it is, remove the current element from the list\n            arr.pop(i)\n            # Decrement i to skip the current element\n            i -= 1\n        else:\n            # If it's not, add the index of the current element to the dictionary\n            index_dict[arr[i]] = i\n    \n    # Iterate through each element in the list again\n    for i in range(len(arr)):\n        # Add the current element to the sum\n        sum_non_repeated += arr[i]\n    \n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # initialize a set to store the elements of the array\n    unique_elements = set(arr)\n    # initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated_elements = 0\n    \n    # iterate through the unique elements and add their values to the sum_of_non_repeated_elements variable\n    for element in unique_elements:\n        sum_of_non_repeated_elements += arr.count(element)\n        \n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the elements as keys and their frequency as values\n    freq = {}\n    for i in arr: \n        if i in freq: \n            # If the element is already in the dictionary, increment its frequency by 1\n            freq[i] += 1\n        else: \n            # If the element is not in the dictionary, add it with a frequency of 1\n            freq[i] = 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    total = 0\n    \n    # Iterate through the dictionary to calculate the sum of non-repeated elements\n    for i in freq: \n        if freq[i] == 1: \n            # If the frequency of the element is 1, add it to the sum\n            total += i\n    \n    # Return the sum of non-repeated elements\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the elements and their frequencies\n    freq_dict = {}\n\n    # Iterate through the list and update the dictionary with the elements and their frequencies\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the sum of non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if freq_dict[num] == 1:\n            sum_non_repeated += num\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    # Create a set to store unique elements in the array\n    unique_arr = set(arr)\n    # Initialize the sum variable\n    sum_arr = 0\n    # Iterate over the unique elements in the set\n    for num in unique_arr:\n        # Add the element to the sum variable\n        sum_arr += num\n    # Return the sum variable\n    return sum_arr"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == list1[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Use groupby to group the elements of the list based on their value\n    grouped = groupby(list1)\n\n    # Create an empty list to store the sublists\n    packed = []\n\n    # Iterate over the grouped elements\n    for key, group in grouped:\n        # Check if the first element of the group is equal to the previous one\n        if key == list1[0]:\n            # Add the first element to the current sublist\n            packed[-1].append(key)\n        else:\n            # Create a new sublist with the current group as the only element\n            new_sublist = [key]\n            # Add the new sublist to the packed list\n            packed.append(new_sublist)\n\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    return list(map(list, grouped_list))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, pack consecutive duplicates of elements into sublists.\n    \"\"\"\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Parameters:\n    lst (list): The given list.\n\n    Returns:\n    list: The packed sublists.\n\n    Examples:\n    >>> pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7])\n    [[1, 2, 3, 4, 5, 6], [7]]\n\n    >>> pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8])\n    [[1, 2, 3, 4, 5, 6, 7, 8]]\n    '''\n    grouped_lst = groupby(lst)\n    packed_lst = []\n    for group in grouped_lst:\n        if len(list(group)) > 1:\n            packed_lst.append(list(group))\n    return packed_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(list1) if not k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = [list1[0]] + list(group)\n        elif key == list1[1]:\n            group = [list1[0], list1[1]] + list(group)\n        elif key == list1[2]:\n            group = [list1[0], list1[1], list1[2]] + list(group)\n        yield group"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    pack = []\n    for item, group in groupby(sorted(list1)):\n        if not any(item == x for x in pack):\n            pack.append(item)\n    return pack"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            count[tuple(item)] = count.get(tuple(item), 0) + 1\n        else:\n            count[item] = count.get(item, 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for lst in list1:\n        key = tuple(lst)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the count of unique lists\n    count = {}\n    # Iterate through the list\n    for sublist in list1:\n        # Convert the list to a tuple\n        subtuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if subtuple in count:\n            # If it is, increment the count by 1\n            count[subtuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count[subtuple] = 1\n    # Return the dictionary\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists and their counts\n    sublist_counts = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is not a list, turn it into a list with the element as its only element\n        if not isinstance(element, list):\n            element = [element]\n            \n        # Loop through each sublist within the element\n        for sublist in element:\n            # Turn the sublist into a tuple and check if it is already in the dictionary\n            if tuple(sublist) in sublist_counts:\n                sublist_counts[tuple(sublist)] += 1\n            # If the sublist is not in the dictionary, add it to the dictionary with a count of 1\n            else:\n                sublist_counts[tuple(sublist)] = 1\n                \n    # Return the dictionary of unique sublists and their counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        if sublist not in sublist_counts:\n            sublist_counts[sublist] = 1\n        else:\n            sublist_counts[sublist] += 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublist_count = {}\n    for sublist in list1:\n        unique_sublist_tuple = tuple(sorted(sublist))\n        if unique_sublist_tuple not in unique_sublist_count:\n            unique_sublist_count[unique_sublist_tuple] = 1\n        else:\n            unique_sublist_count[unique_sublist_tuple] += 1\n    return unique_sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        dict: A dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        sublist_set = set(sublist)\n        result[tuple(sublist_set)] = result.get(tuple(sublist_set), 0) + 1\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Using itertools.combinations() function to find all combinations of sums of tuples in the given tuple list\n    combinations_list = list(combinations(test_list, len(test_list)))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Function to check if a given list is a tuple list\n    def is_tuple_list(lst):\n        return all(isinstance(x, tuple) for x in lst)\n    \n    # Function to find the combinations of sums of tuples in the given list\n    def find_combinations_of_sums(lst):\n        comb = []\n        for i in range(1, len(lst) + 1):\n            for combo in combinations(lst, i):\n                comb.append(tuple(combo))\n        return comb\n    \n    # Check if the input is a tuple list\n    if not is_tuple_list(test_list):\n        print(\"The input is not a tuple list.\")\n        return\n    \n    # Find the combinations of sums of tuples in the list\n    comb_list = find_combinations_of_sums(test_list)\n    print(\"The combinations of sums of tuples in the given list are:\", comb_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for k in range(j+1, len(test_list)+1):\n                combo = tuple(sorted(test_list[i:j])) + tuple(sorted(test_list[j:k])) + tuple(sorted(test_list[k:]))\n                if sum(combo) == 0:\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i])+sum(test_list[j]) == 0:\n                result.append((test_list[i], test_list[j]))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    n = len(test_list)\n\n    # Sort the list\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][0] > test_list[j][0]:\n                test_list[i], test_list[j] = test_list[j], test_list[i]\n\n    # Generate all combinations\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                combs.append((test_list[i], test_list[j], test_list[k]))\n\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples with unique elements\n    unique_tuples = list(set(test_list))\n    # sort the list of tuples\n    unique_tuples.sort()\n    # create a list of combinations of tuples\n    combinations_list = list(combinations(unique_tuples, len(unique_tuples)))\n    # initialize an empty list to store the combinations of sums\n    combinations_sums = []\n    # iterate over the combinations of tuples\n    for combination in combinations_list:\n        # calculate the sum of the tuple\n        sum_of_combination = sum(combination)\n        # check if the sum is in the test list\n        if sum_of_combination in test_list:\n            # add the combination of tuples and the sum to the list\n            combinations_sums.append((combination, sum_of_combination))\n    # return the list of combinations of tuples and their sums\n    return combinations_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples to store unique combinations of sums\n    combination_set = set()\n\n    # iterate over all possible combinations of sums\n    for i in range(1, len(test_list)+1):\n        for combination in combinations(test_list, i):\n            # append the combination to the set\n            combination_set.add(tuple(combination))\n\n    return list(combination_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    def is_sum_combination(combination, target_sum):\n        '''\n        Helper function to check if the given combination contains the target sum.\n        '''\n        total = sum(combination)\n        return total == target_sum\n\n    def get_combinations_of_sum(lst, target_sum):\n        '''\n        Helper function to get all the combinations of sums from the given list.\n        '''\n        return combinations(lst, len(lst))\n\n    def find_combinations_of_sums(test_list, target_sum):\n        '''\n        Main function to find all the combinations of sums with tuples in the given tuple list.\n        '''\n        combinations_of_sums = []\n        for combination in get_combinations_of_sum(test_list, target_sum):\n            if is_sum_combination(combination, target_sum):\n                combinations_of_sums.append(combination)\n        return combinations_of_sums\n\n    # Example usage\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    target_sum = 15\n    combinations_of_sums = find_combinations_of_sums(test_list, target_sum)\n    print(combinations_of_sums)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    count = 0\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    if n > 1 and n % 2 == 1: \n        count += 1\n    return count % 2\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    gcd = math.gcd(divisors)\n    \n    if gcd % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function returns the count of divisors of a given number n.\n    '''\n    divisors = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    return len(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors of n is even, else False.\n    '''\n    # function to calculate the count of divisors of n\n    def count_divisors_helper(num):\n        count = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                count += 1\n                if i!= num // i:\n                    count += 1\n        return count\n\n    # calculate the count of divisors of n\n    num_divisors = count_divisors_helper(n)\n    \n    # check if the count of divisors is even\n    if num_divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    divisors.append(n)\n    count_even_divisors = len(divisors) // 2\n    return count_even_divisors % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i!= i:\n                divisors.append(i)\n            divisors.append(n // i)\n\n    # Calculate the count of divisors\n    count = len(divisors)\n\n    # Check whether the count of divisors is even or not\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even.\n    If the count of divisors is even, it returns True. Otherwise, it returns False.\n    '''\n    if n <= 1:\n        return True\n\n    divisors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n\n    if len(divisors) == len(set(divisors)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors_count = 0\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            divisors_count += 1\n        divisor += 1\n    if divisors_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1\n            if count > 100: \n                return False\n            if i == n // i: \n                count += 1\n    return True "
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j - i == 1:\n                sum += arr[i] + arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd_length_subarrays = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize a variable to store the current subarray sum\n        current_subarray_sum = 0\n        \n        # Iterate through the remaining array elements\n        for j in range(i+1, len(arr)):\n            # Add the current element to the subarray sum\n            current_subarray_sum += arr[j]\n            \n            # Check if the subarray has an odd length\n            if j-i+1 % 2!= 0:\n                # Add the current subarray sum to the sum of all odd length subarrays\n                sum_odd_length_subarrays += current_subarray_sum\n                \n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    # Function to calculate the sum of all odd length subarrays in the array\n    def sum_odd_length_subarrays(arr, n):\n        # Initialize variables\n        count = 0\n        sum = 0\n        \n        # Traverse through the array\n        for i in range(len(arr)-n+1):\n            # Calculate the sum of the odd length subarray\n            for j in range(i,i+n):\n                sum += arr[j]\n            # Check if the sum is odd\n            if sum % 2!= 0:\n                # Increment the count of odd length subarrays\n                count += 1\n        return count\n    \n    # Calculate the sum of all odd length subarrays in the array\n    return sum_odd_length_subarrays(arr, 2)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum variable\n    sum = 0\n    # Initialize the length variable\n    length = 0\n    # Initialize the max_length variable\n    max_length = 0\n    # Initialize the current_length variable\n    current_length = 0\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the length of the current subarray is odd, add the current element to the sum\n        if current_length % 2!= 0:\n            sum += arr[i]\n        # If the length of the current subarray is even, add the current element to the sum and increment the length\n        else:\n            sum += arr[i]\n            current_length += 1\n        # Update the length variable\n        length = current_length\n        # If the length of the current subarray is greater than the max_length, update the max_length\n        if length > max_length:\n            max_length = length\n    # Return the sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1%2==1:\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        if i+2 >= n:\n            break\n        sub_array = arr[i:i+2]\n        if len(sub_array) % 2 == 1:\n            sum += sum(sub_array)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n\n    :param arr: an array of integers\n    :return: the sum of all odd length subarrays in the array\n    \"\"\"\n    sum_odd_length_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sum_odd_length_subarrays += sum(arr[i:j])\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        sum1 = odd_length_sum(arr[1:])\n        sum2 = sum(arr)\n        if sum2 % 2 == 0:\n            return sum1 + sum2\n        else:\n            return sum2"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr) - 1):\n        if i % 2 == 0:\n            total_sum += sum(arr[i:i+2])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n            count += 1\n        else:\n            if count!= 0:\n                odd_sum -= arr[i-1]\n            count -= 1\n    if count!= 0:\n        odd_sum -= arr[-1]\n    return odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    h = 0\n    s = 0\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g - b) / (cmax - cmin)\n        elif g == cmax:\n            h = 2 + (b - r) / (cmax - cmin)\n        else:\n            h = 4 + (r - g) / (cmax - cmin)\n\n        h = h * 60\n\n        if h < 0:\n            h += 360\n\n    s = (cmax - cmin) / cmax\n\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0.0\n    if delta == 0.0:\n        h = 0.0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6.0\n    elif cmax == g:\n        h = (b - r) / delta + 2.0\n    else:\n        h = (r - g) / delta + 4.0\n\n    h = h * 60.0\n    if h < 0.0:\n        h += 360.0\n\n    v = cmax\n\n    s = delta / (1.0 - abs(2.0 * v - 1.0))\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    \n    h = 0\n    s = 0\n    \n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_color == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    h = int(h)\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / (max_color + min_color)\n    \n    if s == 0:\n        v = max_color * 100\n    else:\n        v = max_color / 255\n    \n    return round(h, 2), round(s * 100, 2), round(v * 100, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color value to HSV color value.\n\n    Args:\n        r (int): Red color value between 0 and 255.\n        g (int): Green color value between 0 and 255.\n        b (int): Blue color value between 0 and 255.\n\n    Returns:\n        (float, float, float): Hue (0 to 360), Saturation (0 to 1) and Value (0 to 1).\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    if max_value == min_value:\n        hue = 0\n    else:\n        delta = max_value - min_value\n        if r == max_value:\n            hue = 60 * (((g - b) / delta) % 6)\n        elif g == max_value:\n            hue = 60 * ((b - r) / delta + 2)\n        else:\n            hue = 60 * ((r - g) / delta + 4)\n\n        if hue < 0:\n            hue += 360\n\n    if max_value == 0:\n        saturation = 0\n    else:\n        delta = max_value - min_value\n        saturation = delta / max_value\n\n    value = max_value\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert RGB to HSV color model\n    r, g, b = r/255, g/255, b/255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == 0:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h * 60\n        if h < 0:\n            h += 360\n\n    if max_value == min_value:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    # Convert HSV to RGB color model\n    if s == 0:\n        r = g = b = max_value\n    else:\n        if h < 60:\n            f = (h / 60) * 6\n            p = max_value - (max_value * s)\n            q = max_value - (max_value * f) * s\n        elif h < 120:\n            f = (h / 60) * 6 - 1\n            p = max_value - (max_value * s)\n            q = max_value - (max_value * f) * s\n        elif h < 180:\n            f = (h / 60) * 6\n            p = max_value - (max_value * s) * f\n            q = max_value - (max_value * (1 - s))\n        elif h < 240:\n            f = (h / 60) * 6 - 1\n            p = max_value - (max_value * s) * f\n            q = max_value - (max_value * (1 - s))\n        elif h < 300:\n            f = (h / 60) * 6\n            p = max_value - (max_value * (1 - s)) * f\n            q = max_value - (max_value * (1 - s)) * (1 - (f - int(f)))\n        else:\n            f = (h / 60) * 6 - 1\n            p = max_value - (max_value * (1 - s)) * f\n            q = max_value - (max_value * (1 - s)) * (1 - (f - int(f)))\n\n        r = max_value * [p, q, max_value]\n        g = max_value * [q, p, max_value]\n        b = max_value * [p, max_value, q]\n\n    return (int(r*255), int(g*255), int(b*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    elif delta == 0:\n        h = 0\n        s = delta * 100\n    else:\n        if max_val == r:\n            h = 60 * ((g - b) / delta) % 6\n        elif max_val == g:\n            h = 60 * ((b - r) / delta) + 120\n        elif max_val == b:\n            h = 60 * ((r - g) / delta) + 240\n        if h < 0:\n            h += 360\n        s = delta * 100 / max_val\n\n    v = max_val * 100\n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert the RGB color values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find the minimum and maximum values of the color\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate the value of the Hue\n    if diff == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / diff)\n    elif max_val == g:\n        hue = 60 * ((b - r) / diff) + 120\n    elif max_val == b:\n        hue = 60 * ((r - g) / diff) + 240\n    \n    # Calculate the value of the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n    \n    # Calculate the value of the Value\n    value = max_val\n    \n    # Convert the values to the desired range (0-1) and return them as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color (red, green, blue) to HSV color space.\n    \n    :param r: int or float between 0 and 255\n    :param g: int or float between 0 and 255\n    :param b: int or float between 0 and 255\n    \n    :return: tuple of (hue, saturation, value)\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    \n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    hue = hue % 6\n    \n    saturation = 0\n    if delta > 0:\n        saturation = delta / max_value\n    \n    value = max_value\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV.\n\n    :param r: The red component of the color (0-255)\n    :param g: The green component of the color (0-255)\n    :param b: The blue component of the color (0-255)\n    :return: A tuple containing the Hue (0-360), Saturation (0-1), and Value (0-1) values of the input color.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n\n    if max_color == min_color:\n        h = s = v = 0\n    else:\n        delta = max_color - min_color\n\n        if r == max_color:\n            h = (g - b) / delta\n        elif g == max_color:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n        if h < 0:\n            h = 0\n\n        if h >= 360:\n            h = 0\n\n        s = (max_color + min_color) / 2\n\n        if max_color == min_color:\n            v = 0\n        else:\n            delta = max_color - s\n            v = delta / (max_color + min_color)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers of the list.\n    \"\"\"\n    num_even = 0\n    num_odd = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            num_even += num\n        else:\n            num_odd += num\n\n    return num_even * num_odd\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initializing variables to hold even and odd numbers\n    even = 0\n    odd = 1\n    # iterating through the list\n    for num in list1:\n        # checking if the number is even or odd\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    # returning the product of even and odd numbers\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n        product *= num\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        return even_sum * odd_sum\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    num_evens = 0\n    num_odds = 0\n    for num in list1:\n        if num % 2 == 0:\n            num_evens += 1\n        else:\n            num_odds += 1\n    return num_evens * num_odds\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and odd numbers of the list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count > 0 and odd_count > 0:\n        product = lst[0] * lst[1]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    \"\"\"\n    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x % 2!= 0]\n    if not evens and not odds:\n        return 0\n    elif not evens:\n        return odds[0]\n    elif not odds:\n        return evens[0]\n    else:\n        return evens[0] * odds[0]"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by space and convert each part to integer\n    converted_int_tuple = tuple(int(x) for x in test_str.split())\n    return converted_int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to tuple\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    elements = test_str.split(',')\n    # Convert each element to an integer\n    int_elements = [int(element.strip()) for element in elements]\n    # Convert the list of integers back into a tuple\n    int_tuple = tuple(int_elements)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for elem in test_str:\n        if elem.isdigit():\n            int_tuple.append(int(elem))\n        else:\n            continue\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual elements\n    str_elements = test_str.split(\",\")\n    \n    # Convert each element to integer\n    int_elements = [int(elem) for elem in str_elements]\n    \n    # Convert integer list to tuple\n    result = tuple(int_elements)\n    \n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for i in test_str:\n        try:\n            result.append(int(i))\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        return tuple(int(i) for i in test_str.split(','))\n    except ValueError:\n        print(\"Invalid input\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Args:\n        test_str (str): Tuple string to be converted.\n\n    Returns:\n        tuple: Integer tuple from the given tuple string.\n    \"\"\"\n    # Split the string by comma and convert each element to integer\n    test_list = [int(i.strip()) for i in test_str.split(',')]\n    # Convert the list to tuple and return\n    return tuple(test_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the tuple string to a list of strings\n    test_list = list(test_str)\n\n    # initialize an empty integer tuple\n    result = ()\n\n    # loop through the list of strings and convert each string to an integer\n    for item in test_list:\n        result += (int(item),)\n\n    # convert the integer tuple to a tuple of integers\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_str = test_str.replace('(', '').replace(')', '').replace(' ', '').replace(',', '')\n        tuple_str = tuple(map(int, test_str.split()))\n        return tuple_str\n    except:\n        print(\"Invalid input\")"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the insertion point\n    index = bisect.bisect_right(a, x)\n    # If the value is already present in the list, return the current index\n    if index < len(a) and a[index] == x:\n        return index\n    # If the value is greater than all elements in the list, return the length of the list\n    elif index == len(a):\n        return len(a)\n    # Otherwise, return the next index after the insertion point\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index < len(a) and a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_right to find the index of the first element greater than or equal to x\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        # If x is already in the list, return the last index\n        return len(a) - 1\n    elif index == 0:\n        # If x is already the smallest element, return the first index\n        return 0\n    else:\n        # Find the index of the previous element to the right of the insertion point\n        prev_index = index - 1\n        while a[prev_index] == x:\n            prev_index -= 1\n        return prev_index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    return pattern.match(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}(?=c)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=bb)'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w*b{3}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    result = re.findall(pattern, text)\n    if result:\n        return 'True'\n    else:\n        return 'False'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a(?=bbbbb)\"\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n    test_list (list): A list of numbers.\n    test_str (str): A string of words separated by spaces.\n\n    Returns:\n    A new tuple containing the elements of `test_str` and `test_list`.\n    '''\n    return tuple(test_str.split() + test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + test_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple_list = []\n    for i in range(len(test_list)):\n        if test_list[i] == test_str:\n            new_tuple_list.append(i)\n    new_tuple_list = tuple(new_tuple_list)\n    return new_tuple_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Combine the tuple and the string\n    new_tuple = test_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    :param test_list: A list of elements to be included in the new tuple.\n    :param test_str: A string of characters to be included in the new tuple.\n    :return: A new tuple with the elements of the given lists and strings.\n    \"\"\"\n    new_tup = (test_str,) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string into a single string\n    new_str = ''.join(test_str)\n    \n    # Split the combined string into a list of characters\n    new_list = list(new_str)\n    \n    # Combine the list and characters into a single tuple\n    new_tuple = tuple(new_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = [test_str] + test_list\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the two strings into a single string\n    concat_string = test_list[0] + test_str\n    \n    # Split the concatenated string into a list of characters\n    char_list = list(concat_string)\n    \n    # Convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n    \n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a variable to store the number of even numbers in each index\n    even_count = [0] * len(nums)\n\n    # Loop through the list and check if each even index contains even numbers\n    for i, num in enumerate(nums):\n        if i % 2 == 0:\n            # If the number is even, increment the even_count variable by 1\n            even_count[i // 2] += 1\n\n    # Loop through the even_count list to check if every even index contains even numbers\n    for count in even_count:\n        if count % 2!= 0:\n            return False\n\n    # If all even indices contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Iterate through the list and check if the even index contains even numbers\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return True\n\n    # If we reach this point, it means all even indices contain even numbers\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            for j in range(i+2, len(nums), 2):\n                if nums[j] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if i < len(nums) - 1 and nums[i] % 2 == 0 and nums[i+1] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for tup in test_tup:\n        for item in tup:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_list = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            result_list.extend(remove_nested(elem))\n        else:\n            result_list.append(elem)\n    return result_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            new_tup.append(i)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n\n    return tuple(item for tup in test_tup for item in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple with all the nested tuples removed.\n    \"\"\"\n    def remove_nested_helper(nested_tup, result):\n        for sub_tup in nested_tup:\n            if isinstance(sub_tup, tuple):\n                remove_nested_helper(sub_tup, result)\n            else:\n                result.append(sub_tup)\n        return result\n    \n    result = []\n    remove_nested_helper(test_tup, result)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for tup in test_tup:\n        for item in tup:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize a list to store the non-nested tuples\n    non_nested_list = []\n\n    # Iterate through the given tuple\n    for elem in test_tup:\n        # If the element is not a tuple, append it to the non_nested_list\n        if not isinstance(elem, tuple):\n            non_nested_list.append(elem)\n        # If the element is a tuple, recursively call the function on that tuple\n        else:\n            non_nested_list.extend(remove_nested(elem))\n\n    # Return the non_nested_list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        new_tup = []\n        for item in test_tup:\n            if type(item)!= tuple:\n                new_tup.append(item)\n        return new_tup\n    else:\n        return None"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # initialize an empty list to store the flattened version of the tuple\n    flattened_tup = []\n\n    # loop through each item in the tuple\n    for item in test_tup:\n        # if the item is a tuple, flatten it and append to the flattened list\n        if type(item) == tuple:\n            flattened_tup += item\n        # otherwise, append the item to the flattened list\n        else:\n            flattened_tup.append(item)\n\n    # return the flattened list\n    return flattened_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the number of lists in the input list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if arr[left - 1] == x:\n        return left - 1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if not arr:  # empty array\n        return None\n\n    # start at the end of the array and move backwards until we find the last occurrence of x\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n\n    # if we reach this point, x was not found in the array\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1 # array is empty\n    \n    # initialize left and right pointers to 0 and length of array - 1 respectively\n    left = 0\n    right = len(arr) - 1\n    \n    # check if x is present in first half of the array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # check if x is present in last half of the array\n    left = 0\n    right = len(arr) // 2\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid + len(arr) // 2\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if x is not present, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize a variable to store the last position\n    last_position = -1\n    \n    # Iterate through the array and find the last occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    \n    # Return the last position of x\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] < x:\n            l = mid + 1\n        elif arr[mid] > x:\n            r = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x in arr:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # create a list of indices for each element in the array\n    indices = []\n    for i in range(len(arr)):\n        indices.append(i)\n    \n    # find the index of the last occurrence of x in the array\n    last_index = indices.index(arr.index(x))\n    \n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element x as input and returns the last position of x in the array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # if x is equal to the mid element, then we need to move the right pointer to the left until we find a mid element greater than x\n            while mid < right and arr[mid] == x:\n                mid += 1\n            return mid - 1\n    return -1  # if the element was not found in the array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1  # Element is not present in the array"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if x not in arr:\n        return \"Element not found in the array.\"\n    \n    # find the last index of the element x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    \n    # if element x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.+b')\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a.*b$'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize a variable to hold the sum\n    total = 0\n    # loop through each number in the range\n    for i in range(l, r+1, 2):\n        # add the number to the sum if it's odd\n        if i % 2 == 1:\n            total += i\n    # return the sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    s = 0\n    while l <= r:\n        if l % 2!= 0:\n            s += l\n        l += 1\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1, 2*n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate through the range of natural numbers from l to r\n    for i in range(n):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n            count += 1\n\n    # return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range 1 to n.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(n+1, 2*n, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for element in arr:\n        result += element\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    '''\n    Function to find the sum of an array.\n    '''\n\n    # Using a loop to iterate through the array and add up all the elements\n    sum = 0\n    for num in arr:\n        sum += num\n\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to shift\n    shift_bits = (32 - d) % 32\n\n    # Calculate the mask to get the desired bits\n    mask = ((1 << d) - 1) << shift_bits\n\n    # Calculate the rotated bits\n    rotated_bits = ((n & mask) << shift_bits) | ((n >> shift_bits) & ((1 << d) - 1))\n\n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string\n    bin_str = bin(n)[2:]\n    # Pad the binary string with zeros to a length of 32 bits\n    bin_str = bin_str.zfill(32)\n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    # Calculate the mask to rotate the bits\n    mask = (1 << num_bits_to_rotate) - 1\n    # Rotate the bits in the binary string\n    rotated_bin_str = (bin_str[num_bits_to_rotate:] + bin_str[:num_bits_to_rotate]) & ((1 << 32) - 1)\n    # Convert the rotated bits back to an integer\n    rotated_int = int(rotated_bin_str, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    # convert binary to integer\n    n = int(n, 2)\n    # rotate bits to the left by d bits\n    n = (n << d) | (n >> (32 - d))\n    # convert integer back to binary\n    return bin(n)[2:]"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string\n    bin_str = bin(n)[2:]\n    # Calculate the number of bits that will be rotated\n    num_bits = len(bin_str)\n    d %= num_bits\n    # Pad the binary string with 0's to make d bits\n    padded_bin_str = bin_str.zfill(d)\n    # Combine the two strings to form the rotated binary string\n    rotated_bin_str = padded_bin_str + bin_str[d:]\n    # Convert the rotated binary string back to an integer\n    rotated_n = int(rotated_bin_str, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to shift\n    shift_bits = d % 32\n\n    # Calculate the number of bits to shift the number to the left\n    left_shift = 32 - shift_bits\n\n    # Calculate the mask to keep only the shifted bits\n    mask = (1 << shift_bits) - 1\n\n    # Shift the number to the left by the number of bits to shift and mask it\n    shifted_n = (n << left_shift) & mask\n\n    # Shift the number to the right by d bits and mask it\n    shifted_n = (shifted_n >> d) & mask\n\n    return shifted_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Perform the rotation\n    n = n << d | n >> (32 - d)\n    # Return the rotated number\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    elif d >= 32:\n        return left_rotate(n & (2**32-1), d-32)\n    else:\n        return ((n << d) | (n >> (32-d))) & (2**32-1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask  # Ensure that n is a 32-bit unsigned integer.\n    \n    # Shift the bits to the left by d positions.\n    n = (n << d) | (n >> (32 - d))\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    # Convert the given number to binary and split into 4-bit chunks\n    binary_number = bin(n)[2:]\n    binary_chunks = [binary_number[i:i+4] for i in range(0, len(binary_number), 4)]\n    \n    # Rotate each chunk by d bits\n    rotated_chunks = [[binary_chunks[j][i] if j+d-i >= 0 else '0' for i in range(4)] for j in range(len(binary_chunks))]\n    \n    # Combine the rotated chunks into a 32-bit binary number\n    rotated_number = int(''.join(rotated_chunks), 2)\n    \n    # Convert the rotated number back to decimal\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # if d is greater than 31, return the original number\n    if d > 31:\n        return n\n\n    # calculate the number of bits to rotate\n    num_bits = 32 - d\n\n    # get the leftmost d bits of n and shift them to the right\n    left_bits = (n >> d) & ((1 << d) - 1)\n\n    # shift the remaining bits to the left\n    right_bits = n << num_bits\n\n    # concatenate the left and right bits\n    rotated_bits = (left_bits | right_bits) & ((1 << 32) - 1)\n\n    # return the rotated number\n    return rotated_bits"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all occurrences of whitespace with empty string\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, min(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z or x == z == y or y == z == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z or x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function counts the number of equal integers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z:\n        count += 1\n    if x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i, y+1):\n            for k in range(j, y+1):\n                if i == j == k == x:\n                    continue\n                if i == j == k or i == j == x or i == k == x or j == k == x:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(3):\n        for j in range(i + 1, 3):\n            for k in range(j + 1, 3):\n                if x == y == z or x == y!= z or x == z!= y or y == z!= x:\n                    count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the left and right pointers to the beginning and end of the array, respectively\n    left = 0\n    right = n - 1\n    # Initialize the count variable to zero\n    count = 0\n    # While the left pointer is less than the right pointer, repeat the following steps:\n    while left < right:\n        # If the array[left] is greater than the array[right], it means the array is not sorted.\n        if arr[left] > arr[right]:\n            # If the array is already sorted, stop rotating and increment the count variable by 1\n            break\n        # Swap the values at the left and right pointers\n        arr[left], arr[right] = arr[right], arr[left]\n        # Increment the count variable by 1\n        count += 1\n        # Move the left pointer to the right, and the right pointer to the left\n        left += 1\n        right -= 1\n    # Return the count variable\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n    # If the array is already reversed, there is no rotation required\n    if arr == arr[::-1]:\n        return 0\n    # If the array has two or more adjacent elements, there is no rotation required\n    if n > 2 and arr[1] == arr[n-2]:\n        return 0\n    # If the array has one element, there is no rotation required\n    if n == 1:\n        return 0\n    # If the array has only one rotation, return 1\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n    # If the array has three or more elements, we need to check all possible rotations\n    count = 0\n    for i in range(n):\n        # We need to find the largest element smaller than the current element\n        j = i\n        while j < n-1 and arr[j] >= arr[j+1]:\n            j += 1\n        # If there are no such elements, it means the current element is already sorted\n        if j == n-1:\n            return count+1\n        # We need to find the smallest element greater than the current element\n        k = j\n        while k < n and arr[k] <= arr[k-1]:\n            k += 1\n        # If there are no such elements, it means the current element is already sorted\n        if k == n:\n            return count+1\n        # We have found two elements that can be swapped to sort the array\n        count += 1\n    # If we have not found any such rotations, it means the array is already sorted\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Base case: if the array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n    \n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    i = 0\n    j = n - 1\n    \n    # Loop until the two pointers meet at the middle of the array\n    while i < j:\n        # If the elements at the two pointers are not equal, it means that the array needs to be rotated\n        if arr[i] > arr[j]:\n            return j - i\n        \n        # Move the pointer towards the middle\n        i += 1\n        j -= 1\n    \n    # If the loop completes, it means that the array is already sorted\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # check if the array is sorted or not\n    is_sorted = True\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            is_sorted = False\n            break\n    if is_sorted:\n        return 0\n\n    # count rotations\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            j = i+1\n            while arr[j] > arr[i]:\n                j += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    return j"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        # find the first occurrence of the smallest element\n        smallest_index = i\n        for j in range(i, n):\n            if arr[j] < arr[smallest_index]:\n                smallest_index = j\n        \n        # if the smallest element is already at its correct position, there is no rotation required\n        if i == smallest_index:\n            continue\n        \n        # find the first occurrence of the largest element\n        largest_index = i\n        for j in range(i, n):\n            if arr[j] > arr[largest_index]:\n                largest_index = j\n        \n        # swap the first element and the smallest element\n        arr[i], arr[smallest_index] = arr[smallest_index], arr[i]\n        \n        # if the second largest element is smaller than the smallest element, there is a rotation\n        if i!= largest_index and arr[largest_index] < arr[smallest_index]:\n            count += 1\n        \n        # swap the first and the second largest element\n        arr[i], arr[largest_index] = arr[largest_index], arr[i]\n        \n        # if the third largest element is smaller than the second largest element, there is a rotation\n        if i!= largest_index and i!= smallest_index and arr[largest_index] < arr[smallest_index]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Counting total rotations\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # Rotating the array\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while j < n and arr[j] < arr[j+1]:\n            j += 1\n        if j < n:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_index = 0\n    max_value = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_value:\n            max_index = i\n            max_value = arr[i]\n            \n    rotation_count = 0\n    while max_index > 0:\n        rotation_count += 1\n        max_index -= 1\n        if arr[max_index] < max_value:\n            max_index = 0\n            max_value = arr[0]\n    \n    return rotation_count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    square_sqrt_n = int(sqrt_n**2)\n    if square_sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    x = n\n    while x**2 > n:\n        x -= 1\n    if x**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    square_number = n * n\n    if square_number == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the given number is less than 2 (i.e., is not a square number)\n    if n < 2:\n        return False\n    \n    # Check if the given number is a perfect square\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return True\n    \n    # If we reach this point, then the given number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is already a perfect square\n    if n == int(n**0.5)**2:\n        return True\n    # Check if the number is greater than the square root of the number\n    for i in range(int(n**0.5), 0, -1):\n        if n == i*i:\n            return True\n    # If the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    :param n: the number to check\n    :return: True if n is a perfect square, False otherwise\n    \"\"\"\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n    \n    # Calculate the square root using the bisection method\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If we reach here, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # define a function to check whether a given number is a perfect square\n    def is_square(num):\n        '''\n        Check if a given number is a perfect square or not.\n        '''\n        # check if the number is less than 2\n        if num < 2:\n            return False\n        # check if the number is divisible by 2\n        while num % 2 == 0:\n            num //= 2\n        # if num is greater than 1, then it is not a perfect square\n        if num > 1:\n            return False\n        # if num is equal to 1, then it is a perfect square\n        return True\n    \n    # check if the given number is a perfect square\n    if is_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    x = int(n ** 0.5)\n    return x * x == n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for sublist in lists:\n        if len(sublist) == 1:\n            result.append(sublist[0])\n        else:\n            new_sublist = []\n            for num in sublist:\n                if num not in new_sublist:\n                    new_sublist.append(num)\n            new_sum = sum(new_sublist)\n            if new_sum > max_sum:\n                max_sum = new_sum\n                result = new_sublist\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize the sum of the elements in the list to 0\n        sum_lst = 0\n\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the sum of the list\n            sum_lst += num\n\n        # Check if the sum of the elements is greater than the current maximum sum\n        if sum_lst > max_sum:\n            # Update the maximum sum and the list with the current list\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Loop through each list in the input list\n    for lst in lists:\n        # Initialize variables\n        current_sum = 0\n        \n        # Loop through each element in the list\n        for num in lst:\n            # Add the current element to the current_sum\n            current_sum += num\n            \n            # If the current_sum is greater than max_sum, update max_sum and max_list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n                \n    # Return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def find_max_sum(sublist):\n        return sum(sublist)\n\n    max_sum = find_max_sum(lists[0])\n    max_sublist = lists[0]\n\n    for sublist in lists[1:]:\n        if find_max_sum(sublist) > max_sum:\n            max_sum = find_max_sum(sublist)\n            max_sublist = sublist\n\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Calculate the sum of all elements in each list in the input list of lists\n    sums = []\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        sums.append(sum)\n\n    # Find the maximum sum in the list of sums\n    max_sum = max(sums)\n\n    # Create a new list of lists that contains the elements of the input list of lists whose sum is the maximum\n    result = []\n    for i in range(len(lists)):\n        sum = 0\n        for j in range(len(lists[i])):\n            sum += lists[i][j]\n        if sum == max_sum:\n            result.append(lists[i])\n\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # loop through each list in the input list of lists\n    for lst in lists:\n        # initialize a variable to store the current sum\n        current_sum = 0\n        # loop through each element in the current list\n        for num in lst:\n            # add the current element to the current sum\n            current_sum += num\n            # check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # update the maximum sum\n                max_sum = current_sum\n    # initialize an empty list to store the final list\n    final_list = []\n    # loop through each element in the input list of lists\n    for lst in lists:\n        # initialize a variable to store the current sum\n        current_sum = 0\n        # loop through each element in the current list\n        for num in lst:\n            # add the current element to the current sum\n            current_sum += num\n            # if the current sum is equal to the maximum sum, add the current list to the final list\n            if current_sum == max_sum:\n                final_list.append(lst)\n    # return the final list\n    return final_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # iterate over each list in the input list of lists\n    for i in range(len(lists)):\n        # initialize variables\n        current_sum = 0\n        current_list = []\n\n        # iterate over each element in the current list\n        for j in range(len(lists[i])):\n            # add the element to the current sum\n            current_sum += lists[i][j]\n\n            # if the current sum is greater than the current maximum sum, update the max sum and max list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [current_list]\n            elif current_sum == max_sum:\n                max_list.append(current_list)\n\n        # if the current list is the same length as the maximum list, update the max list\n        if len(lists[i]) == len(max_list[-1]):\n            max_list[-1] = [max(max_list[-1]), lists[i]]\n\n    # return the maximum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Calculate the sum of all elements in all lists\n    total_sum = sum([sum(sublist) for sublist in lists])\n    \n    # Find the sublists with the highest sum\n    max_sum_lists = []\n    for sublist in lists:\n        if sum(sublist) == total_sum:\n            max_sum_lists.append(sublist)\n    \n    # Return the list with the highest sum\n    return max_sum_lists"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    prev_char = None\n\n    # Iterate through the string\n    for char in test_str:\n\n        # If the current character is uppercase, increment the current run counter\n        if char.isupper():\n            curr_run += 1\n\n        # If the current character is not uppercase, reset the current run counter and previous character\n        else:\n            curr_run = 0\n            prev_char = None\n\n        # If the current run counter is greater than the maximum run, update the maximum run\n        if curr_run > max_run:\n            max_run = curr_run\n\n        # If the current character is uppercase and its previous character was not uppercase,\n        # then the maximum run has ended and we can reset the previous character\n        if char.isupper() and prev_char is not None and not prev_char.isupper():\n            max_run = 0\n            prev_char = None\n\n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    is_upper = False\n    \n    # Iterate over each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the current run count and check if it's greater than the maximum run count\n            if current_run + 1 > max_run:\n                max_run = current_run + 1\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            # If it's not uppercase, reset the current run count\n            current_run = 0\n    \n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables for current run length and maximum run length\n    current_run_length = 0\n    max_run_length = 0\n    \n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        # Check if current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the current run length\n            current_run_length += 1\n        else:\n            # If it's not, reset the current run length and check if it's longer than the maximum run length\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n            # Reset the current run length\n            current_run_length = 0\n    \n    # Check if the current run length is longer than the maximum run length\n    if current_run_length > max_run_length:\n        max_run_length = current_run_length\n    \n    # Return the maximum run length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    current_run = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n        if i == len(test_str)-1:\n            if current_run > max_run:\n                max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    run = \"\"\n    start = 0\n    max_run = \"\"\n    # loop through the string and check if the current character is uppercase\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # check if the current run is longer than the previous longest run\n            if len(run) > len(max_run):\n                max_run = run\n            # check if the current run is the longest run yet\n            if len(run) == len(max_run):\n                # check if the current run starts after the previous longest run\n                if start <= max_run.index(test_str[i]):\n                    # check if the current run ends before the previous longest run\n                    if start + len(run) < max_run.index(test_str[i]):\n                        max_run = run\n            # reset the current run and start index\n            run = \"\"\n            start = i\n        else:\n            run += test_str[i]\n    # check if the last run is longer than the previous longest run\n    if len(run) > len(max_run):\n        max_run = run\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    is_uppercase = True\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase\n        if char.isupper():\n            # If the current run is greater than the maximum run so far\n            if current_run > max_run:\n                # Update the maximum run\n                max_run = current_run\n            # Reset the current run to 1\n            current_run = 1\n        else:\n            # Otherwise, increment the current run\n            current_run += 1\n    \n    # If the last character was uppercase\n    if test_str[-1].isupper():\n        # If the current run is greater than the maximum run so far\n        if current_run > max_run:\n            # Update the maximum run\n            max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    uppercase = False\n\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            curr_run += 1\n            # If the current run is greater than the max run, update max_run\n            if curr_run > max_run:\n                max_run = curr_run\n            # Reset the current run if the next character is not uppercase\n            if not test_str[curr_run + 1:].isupper():\n                curr_run = 0\n            # If the next character is uppercase, reset the current run\n            else:\n                curr_run = 0\n        else:\n            # Reset the current run if the current run is not zero\n            if curr_run > 0:\n                curr_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_run = ''\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_run = test_str[i-max_count:i+1]\n            count = 0\n            \n    if count > max_count:\n        max_count = count\n        max_run = test_str[len(test_str)-count:len(test_str)]\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # initialize variables for max run and current run\n    max_run = 0\n    current_run = 0\n\n    # iterate over characters in the string\n    for i in range(len(test_str)):\n\n        # if current character is uppercase, increment current run\n        if test_str[i].isupper():\n            current_run += 1\n\n        # if current run is longer than max run, update max run\n        elif current_run > max_run:\n            max_run = current_run\n\n        # if current run is less than or equal to zero, reset current run\n        else:\n            current_run = 0\n\n    # return max run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Parameters:\n    nums (list): A list of numbers to search for the first odd number.\n\n    Returns:\n    int: The first odd number in the list or None if the list is empty.\n    \"\"\"\n    if not nums:\n        return None\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through each number in the list\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # return the number if it is odd\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n        elif tup[1] == K:\n            return True\n\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K):\n        if all(test_tup[i:i+K] == test_tup[i+K]):\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup.count(K) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    # Check if the length of the tuple is equal to K\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    # Check if the given tuples are of length 2\n    if len(test_tup)!= 2:\n        return False\n    \n    # Check if the elements of the tuple are of the same data type\n    if not all(isinstance(i, type(test_tup[0])) for i in test_tup):\n        return False\n    \n    # Check if the elements of the tuple are the same\n    if all(i == test_tup[0] for i in test_tup):\n        return K in test_tup[0]\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the first tuple is not equal to the length of the second tuple.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"The {i+1}th element of the first tuple is {test_tup1[i]} while the {i+1}th element of the second tuple is {test_tup2[i]}, which is not smaller than each other.\")\n            return False\n    \n    print(\"All elements of the first tuple are smaller than the corresponding elements of the second tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples are not of equal length.\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the second tuple is not smaller than the corresponding element in the first tuple.\")\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    \n    # iterate through the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n        elif test_tup1[i] > test_tup2[i]:\n            return True\n    \n    # if all elements in the tuples are equal, return False (i.e., they are not smaller)\n    return False"
    }
]